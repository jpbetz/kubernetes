//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by validation-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s.io/api/batch/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	validation "k8s.io/apimachinery/pkg/util/validation"
	field "k8s.io/apimachinery/pkg/util/validation/field"
)

func init() { localSchemeBuilder.Register(RegisterValidations) }

// RegisterValidations adds validation functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterValidations(scheme *runtime.Scheme) error {
	scheme.AddValidationFunc(&v1.Job{}, func(obj interface{}) field.ErrorList { return Validate_Job(obj.(*v1.Job), nil) })
	scheme.AddValidationFunc(&v1.CronJobList{}, func(obj interface{}) field.ErrorList { return Validate_CronJobList(obj.(*v1.CronJobList), nil) })
	scheme.AddValidationFunc(&v1.CronJob{}, func(obj interface{}) field.ErrorList { return Validate_CronJob(obj.(*v1.CronJob), nil) })
	scheme.AddValidationFunc(&v1.JobList{}, func(obj interface{}) field.ErrorList { return Validate_JobList(obj.(*v1.JobList), nil) })
	return nil
}

func Validate_CronJob(in *v1.CronJob, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, Validate_CronJobSpec(&in.Spec, fldPath.Child("spec"))...)
	return errs
}

func Validate_CronJobSpec(in *v1.CronJobSpec, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, validation.ValidateEnum(fldPath.Child("concurrencyPolicy"), in.ConcurrencyPolicy, "Allow", "Forbid", "Replace")...)
	errs = append(errs, Validate_JobTemplateSpec(&in.JobTemplate, fldPath.Child("jobTemplate"))...)
	return errs
}

func Validate_JobTemplateSpec(in *v1.JobTemplateSpec, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, Validate_JobSpec(&in.Spec, fldPath.Child("spec"))...)
	return errs
}

func Validate_JobSpec(in *v1.JobSpec, fldPath *field.Path) (errs field.ErrorList) {
	if in.PodFailurePolicy != nil {
		errs = append(errs, Validate_PodFailurePolicy(in.PodFailurePolicy, fldPath.Child("podFailurePolicy"))...)
	}
	if in.CompletionMode != nil {
		errs = append(errs, validation.ValidateEnum(fldPath.Child("completionMode"), *in.CompletionMode, "Indexed", "NonIndexed")...)
	}
	if in.PodReplacementPolicy != nil {
		errs = append(errs, validation.ValidateEnum(fldPath.Child("podReplacementPolicy"), *in.PodReplacementPolicy, "Failed", "TerminatingOrFailed")...)
	}
	return errs
}

func Validate_PodFailurePolicy(in *v1.PodFailurePolicy, fldPath *field.Path) (errs field.ErrorList) {
	for k := range in.Rules {
		c := &in.Rules[k]
		errs = append(errs, Validate_PodFailurePolicyRule(c, fldPath.Index(k))...)
	}
	return errs
}

func Validate_PodFailurePolicyRule(in *v1.PodFailurePolicyRule, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, validation.ValidateEnum(fldPath.Child("action"), in.Action, "Count", "FailIndex", "FailJob", "Ignore")...)
	if in.OnExitCodes != nil {
		errs = append(errs, Validate_PodFailurePolicyOnExitCodesRequirement(in.OnExitCodes, fldPath.Child("onExitCodes"))...)
	}
	return errs
}

func Validate_PodFailurePolicyOnExitCodesRequirement(in *v1.PodFailurePolicyOnExitCodesRequirement, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, validation.ValidateEnum(fldPath.Child("operator"), in.Operator, "In", "NotIn")...)
	return errs
}

func Validate_CronJobList(in *v1.CronJobList, fldPath *field.Path) (errs field.ErrorList) {
	for k := range in.Items {
		c := &in.Items[k]
		errs = append(errs, Validate_CronJob(c, fldPath.Index(k))...)
	}
	return errs
}

func Validate_Job(in *v1.Job, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, Validate_JobSpec(&in.Spec, fldPath.Child("spec"))...)
	return errs
}

func Validate_JobList(in *v1.JobList, fldPath *field.Path) (errs field.ErrorList) {
	for k := range in.Items {
		c := &in.Items[k]
		errs = append(errs, Validate_Job(c, fldPath.Index(k))...)
	}
	return errs
}
