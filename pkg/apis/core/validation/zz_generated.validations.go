//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by validation-gen. DO NOT EDIT.

package validation

import (
	fmt "fmt"

	operation "k8s.io/apimachinery/pkg/api/operation"
	resource "k8s.io/apimachinery/pkg/api/resource"
	safe "k8s.io/apimachinery/pkg/api/safe"
	validate "k8s.io/apimachinery/pkg/api/validate"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	types "k8s.io/apimachinery/pkg/types"
	intstr "k8s.io/apimachinery/pkg/util/intstr"
	field "k8s.io/apimachinery/pkg/util/validation/field"
	core "k8s.io/kubernetes/pkg/apis/core"
)

func init() { core.SchemeBuilder.Register(RegisterValidations) }

// RegisterValidations adds validation functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterValidations(scheme *runtime.Scheme) error {
	scheme.AddValidationFunc((*core.Binding)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Binding(opCtx, obj.(*core.Binding), safe.Cast[*core.Binding](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.ComponentStatus)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ComponentStatus(opCtx, obj.(*core.ComponentStatus), safe.Cast[*core.ComponentStatus](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.ComponentStatusList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ComponentStatusList(opCtx, obj.(*core.ComponentStatusList), safe.Cast[*core.ComponentStatusList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.ConfigMap)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ConfigMap(opCtx, obj.(*core.ConfigMap), safe.Cast[*core.ConfigMap](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.ConfigMapList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ConfigMapList(opCtx, obj.(*core.ConfigMapList), safe.Cast[*core.ConfigMapList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.Endpoints)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Endpoints(opCtx, obj.(*core.Endpoints), safe.Cast[*core.Endpoints](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.EndpointsList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_EndpointsList(opCtx, obj.(*core.EndpointsList), safe.Cast[*core.EndpointsList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.Event)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Event(opCtx, obj.(*core.Event), safe.Cast[*core.Event](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.EventList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_EventList(opCtx, obj.(*core.EventList), safe.Cast[*core.EventList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.LimitRange)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_LimitRange(opCtx, obj.(*core.LimitRange), safe.Cast[*core.LimitRange](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.LimitRangeList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_LimitRangeList(opCtx, obj.(*core.LimitRangeList), safe.Cast[*core.LimitRangeList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.List)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_List(opCtx, obj.(*core.List), safe.Cast[*core.List](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.Namespace)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Namespace(opCtx, obj.(*core.Namespace), safe.Cast[*core.Namespace](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.NamespaceList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_NamespaceList(opCtx, obj.(*core.NamespaceList), safe.Cast[*core.NamespaceList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.Node)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Node(opCtx, obj.(*core.Node), safe.Cast[*core.Node](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.NodeList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_NodeList(opCtx, obj.(*core.NodeList), safe.Cast[*core.NodeList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.NodeProxyOptions)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_NodeProxyOptions(opCtx, obj.(*core.NodeProxyOptions), safe.Cast[*core.NodeProxyOptions](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.PersistentVolume)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PersistentVolume(opCtx, obj.(*core.PersistentVolume), safe.Cast[*core.PersistentVolume](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.PersistentVolumeClaim)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PersistentVolumeClaim(opCtx, obj.(*core.PersistentVolumeClaim), safe.Cast[*core.PersistentVolumeClaim](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.PersistentVolumeClaimList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PersistentVolumeClaimList(opCtx, obj.(*core.PersistentVolumeClaimList), safe.Cast[*core.PersistentVolumeClaimList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.PersistentVolumeList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PersistentVolumeList(opCtx, obj.(*core.PersistentVolumeList), safe.Cast[*core.PersistentVolumeList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.Pod)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Pod(opCtx, obj.(*core.Pod), safe.Cast[*core.Pod](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.PodAttachOptions)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodAttachOptions(opCtx, obj.(*core.PodAttachOptions), safe.Cast[*core.PodAttachOptions](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.PodExecOptions)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodExecOptions(opCtx, obj.(*core.PodExecOptions), safe.Cast[*core.PodExecOptions](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.PodList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodList(opCtx, obj.(*core.PodList), safe.Cast[*core.PodList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.PodLogOptions)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodLogOptions(opCtx, obj.(*core.PodLogOptions), safe.Cast[*core.PodLogOptions](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.PodPortForwardOptions)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodPortForwardOptions(opCtx, obj.(*core.PodPortForwardOptions), safe.Cast[*core.PodPortForwardOptions](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.PodProxyOptions)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodProxyOptions(opCtx, obj.(*core.PodProxyOptions), safe.Cast[*core.PodProxyOptions](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.PodStatusResult)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodStatusResult(opCtx, obj.(*core.PodStatusResult), safe.Cast[*core.PodStatusResult](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.PodTemplate)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodTemplate(opCtx, obj.(*core.PodTemplate), safe.Cast[*core.PodTemplate](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.PodTemplateList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodTemplateList(opCtx, obj.(*core.PodTemplateList), safe.Cast[*core.PodTemplateList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.RangeAllocation)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_RangeAllocation(opCtx, obj.(*core.RangeAllocation), safe.Cast[*core.RangeAllocation](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.ReplicationController)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ReplicationController(opCtx, obj.(*core.ReplicationController), safe.Cast[*core.ReplicationController](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.ReplicationControllerList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ReplicationControllerList(opCtx, obj.(*core.ReplicationControllerList), safe.Cast[*core.ReplicationControllerList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.ResourceQuota)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ResourceQuota(opCtx, obj.(*core.ResourceQuota), safe.Cast[*core.ResourceQuota](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.ResourceQuotaList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ResourceQuotaList(opCtx, obj.(*core.ResourceQuotaList), safe.Cast[*core.ResourceQuotaList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.Secret)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Secret(opCtx, obj.(*core.Secret), safe.Cast[*core.Secret](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.SecretList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_SecretList(opCtx, obj.(*core.SecretList), safe.Cast[*core.SecretList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.SerializedReference)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_SerializedReference(opCtx, obj.(*core.SerializedReference), safe.Cast[*core.SerializedReference](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.Service)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Service(opCtx, obj.(*core.Service), safe.Cast[*core.Service](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.ServiceAccount)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ServiceAccount(opCtx, obj.(*core.ServiceAccount), safe.Cast[*core.ServiceAccount](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.ServiceAccountList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ServiceAccountList(opCtx, obj.(*core.ServiceAccountList), safe.Cast[*core.ServiceAccountList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.ServiceList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ServiceList(opCtx, obj.(*core.ServiceList), safe.Cast[*core.ServiceList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*core.ServiceProxyOptions)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ServiceProxyOptions(opCtx, obj.(*core.ServiceProxyOptions), safe.Cast[*core.ServiceProxyOptions](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	return nil
}

func Validate_AWSElasticBlockStoreVolumeSource(opCtx operation.Context, obj, oldObj *core.AWSElasticBlockStoreVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.AWSElasticBlockStoreVolumeSource.VolumeID has no validation

	// field core.AWSElasticBlockStoreVolumeSource.FSType
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.FSType, safe.Field(oldObj, func(oldObj *core.AWSElasticBlockStoreVolumeSource) *string { return &oldObj.FSType }), fldPath.Child("FSType"))...)

	// field core.AWSElasticBlockStoreVolumeSource.Partition
	errs = append(errs,
		func(obj, oldObj *int32, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Partition, safe.Field(oldObj, func(oldObj *core.AWSElasticBlockStoreVolumeSource) *int32 { return &oldObj.Partition }), fldPath.Child("Partition"))...)

	// field core.AWSElasticBlockStoreVolumeSource.ReadOnly
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ReadOnly, safe.Field(oldObj, func(oldObj *core.AWSElasticBlockStoreVolumeSource) *bool { return &oldObj.ReadOnly }), fldPath.Child("ReadOnly"))...)

	return errs
}

func Validate_Affinity(opCtx operation.Context, obj, oldObj *core.Affinity, fldPath *field.Path) (errs field.ErrorList) {
	// field core.Affinity.NodeAffinity
	errs = append(errs,
		func(obj, oldObj *core.NodeAffinity, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_NodeAffinity(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.NodeAffinity, safe.Field(oldObj, func(oldObj *core.Affinity) *core.NodeAffinity { return oldObj.NodeAffinity }), fldPath.Child("NodeAffinity"))...)

	// field core.Affinity.PodAffinity
	errs = append(errs,
		func(obj, oldObj *core.PodAffinity, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_PodAffinity(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.PodAffinity, safe.Field(oldObj, func(oldObj *core.Affinity) *core.PodAffinity { return oldObj.PodAffinity }), fldPath.Child("PodAffinity"))...)

	// field core.Affinity.PodAntiAffinity
	errs = append(errs,
		func(obj, oldObj *core.PodAntiAffinity, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_PodAntiAffinity(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.PodAntiAffinity, safe.Field(oldObj, func(oldObj *core.Affinity) *core.PodAntiAffinity { return oldObj.PodAntiAffinity }), fldPath.Child("PodAntiAffinity"))...)

	return errs
}

func Validate_AppArmorProfile(opCtx operation.Context, obj, oldObj *core.AppArmorProfile, fldPath *field.Path) (errs field.ErrorList) {
	// field core.AppArmorProfile.Type has no validation

	// field core.AppArmorProfile.LocalhostProfile
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.LocalhostProfile, safe.Field(oldObj, func(oldObj *core.AppArmorProfile) *string { return oldObj.LocalhostProfile }), fldPath.Child("LocalhostProfile"))...)

	return errs
}

func Validate_AzureDiskVolumeSource(opCtx operation.Context, obj, oldObj *core.AzureDiskVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.AzureDiskVolumeSource.DiskName has no validation
	// field core.AzureDiskVolumeSource.DataDiskURI has no validation

	// field core.AzureDiskVolumeSource.CachingMode
	errs = append(errs,
		func(obj, oldObj *core.AzureDataDiskCachingMode, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.CachingMode, safe.Field(oldObj, func(oldObj *core.AzureDiskVolumeSource) *core.AzureDataDiskCachingMode { return oldObj.CachingMode }), fldPath.Child("CachingMode"))...)

	// field core.AzureDiskVolumeSource.FSType
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.FSType, safe.Field(oldObj, func(oldObj *core.AzureDiskVolumeSource) *string { return oldObj.FSType }), fldPath.Child("FSType"))...)

	// field core.AzureDiskVolumeSource.ReadOnly
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.ReadOnly, safe.Field(oldObj, func(oldObj *core.AzureDiskVolumeSource) *bool { return oldObj.ReadOnly }), fldPath.Child("ReadOnly"))...)

	// field core.AzureDiskVolumeSource.Kind has no validation
	return errs
}

func Validate_AzureFilePersistentVolumeSource(opCtx operation.Context, obj, oldObj *core.AzureFilePersistentVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.AzureFilePersistentVolumeSource.SecretName has no validation
	// field core.AzureFilePersistentVolumeSource.ShareName has no validation

	// field core.AzureFilePersistentVolumeSource.ReadOnly
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ReadOnly, safe.Field(oldObj, func(oldObj *core.AzureFilePersistentVolumeSource) *bool { return &oldObj.ReadOnly }), fldPath.Child("ReadOnly"))...)

	// field core.AzureFilePersistentVolumeSource.SecretNamespace
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.SecretNamespace, safe.Field(oldObj, func(oldObj *core.AzureFilePersistentVolumeSource) *string { return oldObj.SecretNamespace }), fldPath.Child("SecretNamespace"))...)

	return errs
}

func Validate_AzureFileVolumeSource(opCtx operation.Context, obj, oldObj *core.AzureFileVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.AzureFileVolumeSource.SecretName has no validation
	// field core.AzureFileVolumeSource.ShareName has no validation

	// field core.AzureFileVolumeSource.ReadOnly
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ReadOnly, safe.Field(oldObj, func(oldObj *core.AzureFileVolumeSource) *bool { return &oldObj.ReadOnly }), fldPath.Child("ReadOnly"))...)

	return errs
}

func Validate_Binding(opCtx operation.Context, obj, oldObj *core.Binding, fldPath *field.Path) (errs field.ErrorList) {
	// field core.Binding.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.Binding) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.Binding.ObjectMeta
	errs = append(errs,
		func(obj, oldObj *v1.ObjectMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ObjectMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ObjectMeta, safe.Field(oldObj, func(oldObj *core.Binding) *v1.ObjectMeta { return &oldObj.ObjectMeta }), fldPath.Child("ObjectMeta"))...)

	// field core.Binding.Target
	errs = append(errs,
		func(obj, oldObj *core.ObjectReference, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, Validate_ObjectReference(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.Target, safe.Field(oldObj, func(oldObj *core.Binding) *core.ObjectReference { return &oldObj.Target }), fldPath.Child("Target"))...)

	return errs
}

func Validate_CSIPersistentVolumeSource(opCtx operation.Context, obj, oldObj *core.CSIPersistentVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.CSIPersistentVolumeSource.Driver has no validation
	// field core.CSIPersistentVolumeSource.VolumeHandle has no validation

	// field core.CSIPersistentVolumeSource.ReadOnly
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ReadOnly, safe.Field(oldObj, func(oldObj *core.CSIPersistentVolumeSource) *bool { return &oldObj.ReadOnly }), fldPath.Child("ReadOnly"))...)

	// field core.CSIPersistentVolumeSource.FSType
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.FSType, safe.Field(oldObj, func(oldObj *core.CSIPersistentVolumeSource) *string { return &oldObj.FSType }), fldPath.Child("FSType"))...)

	// field core.CSIPersistentVolumeSource.VolumeAttributes
	errs = append(errs,
		func(obj, oldObj map[string]string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.VolumeAttributes, safe.Field(oldObj, func(oldObj *core.CSIPersistentVolumeSource) map[string]string { return oldObj.VolumeAttributes }), fldPath.Child("VolumeAttributes"))...)

	// field core.CSIPersistentVolumeSource.ControllerPublishSecretRef
	errs = append(errs,
		func(obj, oldObj *core.SecretReference, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_SecretReference(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.ControllerPublishSecretRef, safe.Field(oldObj, func(oldObj *core.CSIPersistentVolumeSource) *core.SecretReference {
			return oldObj.ControllerPublishSecretRef
		}), fldPath.Child("ControllerPublishSecretRef"))...)

	// field core.CSIPersistentVolumeSource.NodeStageSecretRef
	errs = append(errs,
		func(obj, oldObj *core.SecretReference, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_SecretReference(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.NodeStageSecretRef, safe.Field(oldObj, func(oldObj *core.CSIPersistentVolumeSource) *core.SecretReference { return oldObj.NodeStageSecretRef }), fldPath.Child("NodeStageSecretRef"))...)

	// field core.CSIPersistentVolumeSource.NodePublishSecretRef
	errs = append(errs,
		func(obj, oldObj *core.SecretReference, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_SecretReference(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.NodePublishSecretRef, safe.Field(oldObj, func(oldObj *core.CSIPersistentVolumeSource) *core.SecretReference { return oldObj.NodePublishSecretRef }), fldPath.Child("NodePublishSecretRef"))...)

	// field core.CSIPersistentVolumeSource.ControllerExpandSecretRef
	errs = append(errs,
		func(obj, oldObj *core.SecretReference, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_SecretReference(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.ControllerExpandSecretRef, safe.Field(oldObj, func(oldObj *core.CSIPersistentVolumeSource) *core.SecretReference {
			return oldObj.ControllerExpandSecretRef
		}), fldPath.Child("ControllerExpandSecretRef"))...)

	// field core.CSIPersistentVolumeSource.NodeExpandSecretRef
	errs = append(errs,
		func(obj, oldObj *core.SecretReference, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_SecretReference(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.NodeExpandSecretRef, safe.Field(oldObj, func(oldObj *core.CSIPersistentVolumeSource) *core.SecretReference { return oldObj.NodeExpandSecretRef }), fldPath.Child("NodeExpandSecretRef"))...)

	return errs
}

func Validate_CSIVolumeSource(opCtx operation.Context, obj, oldObj *core.CSIVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.CSIVolumeSource.Driver has no validation

	// field core.CSIVolumeSource.ReadOnly
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.ReadOnly, safe.Field(oldObj, func(oldObj *core.CSIVolumeSource) *bool { return oldObj.ReadOnly }), fldPath.Child("ReadOnly"))...)

	// field core.CSIVolumeSource.FSType
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.FSType, safe.Field(oldObj, func(oldObj *core.CSIVolumeSource) *string { return oldObj.FSType }), fldPath.Child("FSType"))...)

	// field core.CSIVolumeSource.VolumeAttributes
	errs = append(errs,
		func(obj, oldObj map[string]string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.VolumeAttributes, safe.Field(oldObj, func(oldObj *core.CSIVolumeSource) map[string]string { return oldObj.VolumeAttributes }), fldPath.Child("VolumeAttributes"))...)

	// field core.CSIVolumeSource.NodePublishSecretRef
	errs = append(errs,
		func(obj, oldObj *core.LocalObjectReference, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.NodePublishSecretRef, safe.Field(oldObj, func(oldObj *core.CSIVolumeSource) *core.LocalObjectReference { return oldObj.NodePublishSecretRef }), fldPath.Child("NodePublishSecretRef"))...)

	return errs
}

func Validate_Capabilities(opCtx operation.Context, obj, oldObj *core.Capabilities, fldPath *field.Path) (errs field.ErrorList) {
	// field core.Capabilities.Add
	errs = append(errs,
		func(obj, oldObj []core.Capability, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Add, safe.Field(oldObj, func(oldObj *core.Capabilities) []core.Capability { return oldObj.Add }), fldPath.Child("Add"))...)

	// field core.Capabilities.Drop
	errs = append(errs,
		func(obj, oldObj []core.Capability, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Drop, safe.Field(oldObj, func(oldObj *core.Capabilities) []core.Capability { return oldObj.Drop }), fldPath.Child("Drop"))...)

	return errs
}

func Validate_CephFSPersistentVolumeSource(opCtx operation.Context, obj, oldObj *core.CephFSPersistentVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.CephFSPersistentVolumeSource.Monitors has no validation

	// field core.CephFSPersistentVolumeSource.Path
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Path, safe.Field(oldObj, func(oldObj *core.CephFSPersistentVolumeSource) *string { return &oldObj.Path }), fldPath.Child("Path"))...)

	// field core.CephFSPersistentVolumeSource.User
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.User, safe.Field(oldObj, func(oldObj *core.CephFSPersistentVolumeSource) *string { return &oldObj.User }), fldPath.Child("User"))...)

	// field core.CephFSPersistentVolumeSource.SecretFile
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.SecretFile, safe.Field(oldObj, func(oldObj *core.CephFSPersistentVolumeSource) *string { return &oldObj.SecretFile }), fldPath.Child("SecretFile"))...)

	// field core.CephFSPersistentVolumeSource.SecretRef
	errs = append(errs,
		func(obj, oldObj *core.SecretReference, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_SecretReference(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.SecretRef, safe.Field(oldObj, func(oldObj *core.CephFSPersistentVolumeSource) *core.SecretReference { return oldObj.SecretRef }), fldPath.Child("SecretRef"))...)

	// field core.CephFSPersistentVolumeSource.ReadOnly
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ReadOnly, safe.Field(oldObj, func(oldObj *core.CephFSPersistentVolumeSource) *bool { return &oldObj.ReadOnly }), fldPath.Child("ReadOnly"))...)

	return errs
}

func Validate_CephFSVolumeSource(opCtx operation.Context, obj, oldObj *core.CephFSVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.CephFSVolumeSource.Monitors has no validation

	// field core.CephFSVolumeSource.Path
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Path, safe.Field(oldObj, func(oldObj *core.CephFSVolumeSource) *string { return &oldObj.Path }), fldPath.Child("Path"))...)

	// field core.CephFSVolumeSource.User
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.User, safe.Field(oldObj, func(oldObj *core.CephFSVolumeSource) *string { return &oldObj.User }), fldPath.Child("User"))...)

	// field core.CephFSVolumeSource.SecretFile
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.SecretFile, safe.Field(oldObj, func(oldObj *core.CephFSVolumeSource) *string { return &oldObj.SecretFile }), fldPath.Child("SecretFile"))...)

	// field core.CephFSVolumeSource.SecretRef
	errs = append(errs,
		func(obj, oldObj *core.LocalObjectReference, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.SecretRef, safe.Field(oldObj, func(oldObj *core.CephFSVolumeSource) *core.LocalObjectReference { return oldObj.SecretRef }), fldPath.Child("SecretRef"))...)

	// field core.CephFSVolumeSource.ReadOnly
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ReadOnly, safe.Field(oldObj, func(oldObj *core.CephFSVolumeSource) *bool { return &oldObj.ReadOnly }), fldPath.Child("ReadOnly"))...)

	return errs
}

func Validate_CinderPersistentVolumeSource(opCtx operation.Context, obj, oldObj *core.CinderPersistentVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.CinderPersistentVolumeSource.VolumeID has no validation

	// field core.CinderPersistentVolumeSource.FSType
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.FSType, safe.Field(oldObj, func(oldObj *core.CinderPersistentVolumeSource) *string { return &oldObj.FSType }), fldPath.Child("FSType"))...)

	// field core.CinderPersistentVolumeSource.ReadOnly
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ReadOnly, safe.Field(oldObj, func(oldObj *core.CinderPersistentVolumeSource) *bool { return &oldObj.ReadOnly }), fldPath.Child("ReadOnly"))...)

	// field core.CinderPersistentVolumeSource.SecretRef
	errs = append(errs,
		func(obj, oldObj *core.SecretReference, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_SecretReference(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.SecretRef, safe.Field(oldObj, func(oldObj *core.CinderPersistentVolumeSource) *core.SecretReference { return oldObj.SecretRef }), fldPath.Child("SecretRef"))...)

	return errs
}

func Validate_CinderVolumeSource(opCtx operation.Context, obj, oldObj *core.CinderVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.CinderVolumeSource.VolumeID has no validation

	// field core.CinderVolumeSource.FSType
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.FSType, safe.Field(oldObj, func(oldObj *core.CinderVolumeSource) *string { return &oldObj.FSType }), fldPath.Child("FSType"))...)

	// field core.CinderVolumeSource.ReadOnly
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ReadOnly, safe.Field(oldObj, func(oldObj *core.CinderVolumeSource) *bool { return &oldObj.ReadOnly }), fldPath.Child("ReadOnly"))...)

	// field core.CinderVolumeSource.SecretRef
	errs = append(errs,
		func(obj, oldObj *core.LocalObjectReference, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.SecretRef, safe.Field(oldObj, func(oldObj *core.CinderVolumeSource) *core.LocalObjectReference { return oldObj.SecretRef }), fldPath.Child("SecretRef"))...)

	return errs
}

func Validate_ClientIPConfig(opCtx operation.Context, obj, oldObj *core.ClientIPConfig, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ClientIPConfig.TimeoutSeconds
	errs = append(errs,
		func(obj, oldObj *int32, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.TimeoutSeconds, safe.Field(oldObj, func(oldObj *core.ClientIPConfig) *int32 { return oldObj.TimeoutSeconds }), fldPath.Child("TimeoutSeconds"))...)

	return errs
}

func Validate_ClusterTrustBundleProjection(opCtx operation.Context, obj, oldObj *core.ClusterTrustBundleProjection, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ClusterTrustBundleProjection.Name has no validation
	// field core.ClusterTrustBundleProjection.SignerName has no validation

	// field core.ClusterTrustBundleProjection.LabelSelector
	errs = append(errs,
		func(obj, oldObj *v1.LabelSelector, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_LabelSelector(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.LabelSelector, safe.Field(oldObj, func(oldObj *core.ClusterTrustBundleProjection) *v1.LabelSelector { return oldObj.LabelSelector }), fldPath.Child("LabelSelector"))...)

	// field core.ClusterTrustBundleProjection.Optional has no validation
	// field core.ClusterTrustBundleProjection.Path has no validation
	return errs
}

func Validate_ComponentCondition(opCtx operation.Context, obj, oldObj *core.ComponentCondition, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ComponentCondition.Type has no validation
	// field core.ComponentCondition.Status has no validation

	// field core.ComponentCondition.Message
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Message, safe.Field(oldObj, func(oldObj *core.ComponentCondition) *string { return &oldObj.Message }), fldPath.Child("Message"))...)

	// field core.ComponentCondition.Error
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Error, safe.Field(oldObj, func(oldObj *core.ComponentCondition) *string { return &oldObj.Error }), fldPath.Child("Error"))...)

	return errs
}

func Validate_ComponentStatus(opCtx operation.Context, obj, oldObj *core.ComponentStatus, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ComponentStatus.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.ComponentStatus) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.ComponentStatus.ObjectMeta
	errs = append(errs,
		func(obj, oldObj *v1.ObjectMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ObjectMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ObjectMeta, safe.Field(oldObj, func(oldObj *core.ComponentStatus) *v1.ObjectMeta { return &oldObj.ObjectMeta }), fldPath.Child("ObjectMeta"))...)

	// field core.ComponentStatus.Conditions
	errs = append(errs,
		func(obj, oldObj []core.ComponentCondition, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.ComponentCondition, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_ComponentCondition(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Conditions, safe.Field(oldObj, func(oldObj *core.ComponentStatus) []core.ComponentCondition { return oldObj.Conditions }), fldPath.Child("Conditions"))...)

	return errs
}

func Validate_ComponentStatusList(opCtx operation.Context, obj, oldObj *core.ComponentStatusList, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ComponentStatusList.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.ComponentStatusList) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.ComponentStatusList.ListMeta
	errs = append(errs,
		func(obj, oldObj *v1.ListMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ListMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ListMeta, safe.Field(oldObj, func(oldObj *core.ComponentStatusList) *v1.ListMeta { return &oldObj.ListMeta }), fldPath.Child("ListMeta"))...)

	// field core.ComponentStatusList.Items
	errs = append(errs,
		func(obj, oldObj []core.ComponentStatus, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.ComponentStatus, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_ComponentStatus(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Items, safe.Field(oldObj, func(oldObj *core.ComponentStatusList) []core.ComponentStatus { return oldObj.Items }), fldPath.Child("Items"))...)

	return errs
}

func Validate_ConfigMap(opCtx operation.Context, obj, oldObj *core.ConfigMap, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ConfigMap.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.ConfigMap) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.ConfigMap.ObjectMeta
	errs = append(errs,
		func(obj, oldObj *v1.ObjectMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ObjectMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ObjectMeta, safe.Field(oldObj, func(oldObj *core.ConfigMap) *v1.ObjectMeta { return &oldObj.ObjectMeta }), fldPath.Child("ObjectMeta"))...)

	// field core.ConfigMap.Immutable
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Immutable, safe.Field(oldObj, func(oldObj *core.ConfigMap) *bool { return oldObj.Immutable }), fldPath.Child("Immutable"))...)

	// field core.ConfigMap.Data
	errs = append(errs,
		func(obj, oldObj map[string]string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Data, safe.Field(oldObj, func(oldObj *core.ConfigMap) map[string]string { return oldObj.Data }), fldPath.Child("Data"))...)

	// field core.ConfigMap.BinaryData
	errs = append(errs,
		func(obj, oldObj map[string][]byte, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.BinaryData, safe.Field(oldObj, func(oldObj *core.ConfigMap) map[string][]byte { return oldObj.BinaryData }), fldPath.Child("BinaryData"))...)

	return errs
}

func Validate_ConfigMapEnvSource(opCtx operation.Context, obj, oldObj *core.ConfigMapEnvSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ConfigMapEnvSource.LocalObjectReference has no validation

	// field core.ConfigMapEnvSource.Optional
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Optional, safe.Field(oldObj, func(oldObj *core.ConfigMapEnvSource) *bool { return oldObj.Optional }), fldPath.Child("Optional"))...)

	return errs
}

func Validate_ConfigMapKeySelector(opCtx operation.Context, obj, oldObj *core.ConfigMapKeySelector, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ConfigMapKeySelector.LocalObjectReference has no validation
	// field core.ConfigMapKeySelector.Key has no validation

	// field core.ConfigMapKeySelector.Optional
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Optional, safe.Field(oldObj, func(oldObj *core.ConfigMapKeySelector) *bool { return oldObj.Optional }), fldPath.Child("Optional"))...)

	return errs
}

func Validate_ConfigMapList(opCtx operation.Context, obj, oldObj *core.ConfigMapList, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ConfigMapList.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.ConfigMapList) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.ConfigMapList.ListMeta
	errs = append(errs,
		func(obj, oldObj *v1.ListMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ListMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ListMeta, safe.Field(oldObj, func(oldObj *core.ConfigMapList) *v1.ListMeta { return &oldObj.ListMeta }), fldPath.Child("ListMeta"))...)

	// field core.ConfigMapList.Items
	errs = append(errs,
		func(obj, oldObj []core.ConfigMap, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.ConfigMap, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_ConfigMap(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Items, safe.Field(oldObj, func(oldObj *core.ConfigMapList) []core.ConfigMap { return oldObj.Items }), fldPath.Child("Items"))...)

	return errs
}

func Validate_ConfigMapNodeConfigSource(opCtx operation.Context, obj, oldObj *core.ConfigMapNodeConfigSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ConfigMapNodeConfigSource.Namespace has no validation
	// field core.ConfigMapNodeConfigSource.Name has no validation

	// field core.ConfigMapNodeConfigSource.UID
	errs = append(errs,
		func(obj, oldObj *types.UID, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			// NOTE: Type types.UID is in a non-included package.
			//       Any validations defined on this type are not available from here.
			return
		}(&obj.UID, safe.Field(oldObj, func(oldObj *core.ConfigMapNodeConfigSource) *types.UID { return &oldObj.UID }), fldPath.Child("UID"))...)

	// field core.ConfigMapNodeConfigSource.ResourceVersion
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ResourceVersion, safe.Field(oldObj, func(oldObj *core.ConfigMapNodeConfigSource) *string { return &oldObj.ResourceVersion }), fldPath.Child("ResourceVersion"))...)

	// field core.ConfigMapNodeConfigSource.KubeletConfigKey has no validation
	return errs
}

func Validate_ConfigMapProjection(opCtx operation.Context, obj, oldObj *core.ConfigMapProjection, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ConfigMapProjection.LocalObjectReference has no validation

	// field core.ConfigMapProjection.Items
	errs = append(errs,
		func(obj, oldObj []core.KeyToPath, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.KeyToPath, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_KeyToPath(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Items, safe.Field(oldObj, func(oldObj *core.ConfigMapProjection) []core.KeyToPath { return oldObj.Items }), fldPath.Child("Items"))...)

	// field core.ConfigMapProjection.Optional
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Optional, safe.Field(oldObj, func(oldObj *core.ConfigMapProjection) *bool { return oldObj.Optional }), fldPath.Child("Optional"))...)

	return errs
}

func Validate_ConfigMapVolumeSource(opCtx operation.Context, obj, oldObj *core.ConfigMapVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ConfigMapVolumeSource.LocalObjectReference has no validation

	// field core.ConfigMapVolumeSource.Items
	errs = append(errs,
		func(obj, oldObj []core.KeyToPath, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.KeyToPath, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_KeyToPath(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Items, safe.Field(oldObj, func(oldObj *core.ConfigMapVolumeSource) []core.KeyToPath { return oldObj.Items }), fldPath.Child("Items"))...)

	// field core.ConfigMapVolumeSource.DefaultMode
	errs = append(errs,
		func(obj, oldObj *int32, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.DefaultMode, safe.Field(oldObj, func(oldObj *core.ConfigMapVolumeSource) *int32 { return oldObj.DefaultMode }), fldPath.Child("DefaultMode"))...)

	// field core.ConfigMapVolumeSource.Optional
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Optional, safe.Field(oldObj, func(oldObj *core.ConfigMapVolumeSource) *bool { return oldObj.Optional }), fldPath.Child("Optional"))...)

	return errs
}

func Validate_Container(opCtx operation.Context, obj, oldObj *core.Container, fldPath *field.Path) (errs field.ErrorList) {
	// field core.Container.Name has no validation
	// field core.Container.Image has no validation

	// field core.Container.Command
	errs = append(errs,
		func(obj, oldObj []string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Command, safe.Field(oldObj, func(oldObj *core.Container) []string { return oldObj.Command }), fldPath.Child("Command"))...)

	// field core.Container.Args
	errs = append(errs,
		func(obj, oldObj []string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Args, safe.Field(oldObj, func(oldObj *core.Container) []string { return oldObj.Args }), fldPath.Child("Args"))...)

	// field core.Container.WorkingDir
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.WorkingDir, safe.Field(oldObj, func(oldObj *core.Container) *string { return &oldObj.WorkingDir }), fldPath.Child("WorkingDir"))...)

	// field core.Container.Ports
	errs = append(errs,
		func(obj, oldObj []core.ContainerPort, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.ContainerPort, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_ContainerPort(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Ports, safe.Field(oldObj, func(oldObj *core.Container) []core.ContainerPort { return oldObj.Ports }), fldPath.Child("Ports"))...)

	// field core.Container.EnvFrom
	errs = append(errs,
		func(obj, oldObj []core.EnvFromSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.EnvFromSource, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_EnvFromSource(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.EnvFrom, safe.Field(oldObj, func(oldObj *core.Container) []core.EnvFromSource { return oldObj.EnvFrom }), fldPath.Child("EnvFrom"))...)

	// field core.Container.Env
	errs = append(errs,
		func(obj, oldObj []core.EnvVar, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.EnvVar, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_EnvVar(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Env, safe.Field(oldObj, func(oldObj *core.Container) []core.EnvVar { return oldObj.Env }), fldPath.Child("Env"))...)

	// field core.Container.Resources
	errs = append(errs,
		func(obj, oldObj *core.ResourceRequirements, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_ResourceRequirements(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.Resources, safe.Field(oldObj, func(oldObj *core.Container) *core.ResourceRequirements { return &oldObj.Resources }), fldPath.Child("Resources"))...)

	// field core.Container.ResizePolicy
	errs = append(errs,
		func(obj, oldObj []core.ContainerResizePolicy, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.ResizePolicy, safe.Field(oldObj, func(oldObj *core.Container) []core.ContainerResizePolicy { return oldObj.ResizePolicy }), fldPath.Child("ResizePolicy"))...)

	// field core.Container.RestartPolicy
	errs = append(errs,
		func(obj, oldObj *core.ContainerRestartPolicy, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.RestartPolicy, safe.Field(oldObj, func(oldObj *core.Container) *core.ContainerRestartPolicy { return oldObj.RestartPolicy }), fldPath.Child("RestartPolicy"))...)

	// field core.Container.VolumeMounts
	errs = append(errs,
		func(obj, oldObj []core.VolumeMount, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.VolumeMount, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_VolumeMount(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.VolumeMounts, safe.Field(oldObj, func(oldObj *core.Container) []core.VolumeMount { return oldObj.VolumeMounts }), fldPath.Child("VolumeMounts"))...)

	// field core.Container.VolumeDevices
	errs = append(errs,
		func(obj, oldObj []core.VolumeDevice, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.VolumeDevices, safe.Field(oldObj, func(oldObj *core.Container) []core.VolumeDevice { return oldObj.VolumeDevices }), fldPath.Child("VolumeDevices"))...)

	// field core.Container.LivenessProbe
	errs = append(errs,
		func(obj, oldObj *core.Probe, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_Probe(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.LivenessProbe, safe.Field(oldObj, func(oldObj *core.Container) *core.Probe { return oldObj.LivenessProbe }), fldPath.Child("LivenessProbe"))...)

	// field core.Container.ReadinessProbe
	errs = append(errs,
		func(obj, oldObj *core.Probe, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_Probe(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.ReadinessProbe, safe.Field(oldObj, func(oldObj *core.Container) *core.Probe { return oldObj.ReadinessProbe }), fldPath.Child("ReadinessProbe"))...)

	// field core.Container.StartupProbe
	errs = append(errs,
		func(obj, oldObj *core.Probe, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_Probe(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.StartupProbe, safe.Field(oldObj, func(oldObj *core.Container) *core.Probe { return oldObj.StartupProbe }), fldPath.Child("StartupProbe"))...)

	// field core.Container.Lifecycle
	errs = append(errs,
		func(obj, oldObj *core.Lifecycle, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_Lifecycle(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.Lifecycle, safe.Field(oldObj, func(oldObj *core.Container) *core.Lifecycle { return oldObj.Lifecycle }), fldPath.Child("Lifecycle"))...)

	// field core.Container.TerminationMessagePath
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.TerminationMessagePath, safe.Field(oldObj, func(oldObj *core.Container) *string { return &oldObj.TerminationMessagePath }), fldPath.Child("TerminationMessagePath"))...)

	// field core.Container.TerminationMessagePolicy
	errs = append(errs,
		func(obj, oldObj *core.TerminationMessagePolicy, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.TerminationMessagePolicy, safe.Field(oldObj, func(oldObj *core.Container) *core.TerminationMessagePolicy { return &oldObj.TerminationMessagePolicy }), fldPath.Child("TerminationMessagePolicy"))...)

	// field core.Container.ImagePullPolicy has no validation

	// field core.Container.SecurityContext
	errs = append(errs,
		func(obj, oldObj *core.SecurityContext, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_SecurityContext(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.SecurityContext, safe.Field(oldObj, func(oldObj *core.Container) *core.SecurityContext { return oldObj.SecurityContext }), fldPath.Child("SecurityContext"))...)

	// field core.Container.Stdin
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Stdin, safe.Field(oldObj, func(oldObj *core.Container) *bool { return &oldObj.Stdin }), fldPath.Child("Stdin"))...)

	// field core.Container.StdinOnce
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.StdinOnce, safe.Field(oldObj, func(oldObj *core.Container) *bool { return &oldObj.StdinOnce }), fldPath.Child("StdinOnce"))...)

	// field core.Container.TTY
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.TTY, safe.Field(oldObj, func(oldObj *core.Container) *bool { return &oldObj.TTY }), fldPath.Child("TTY"))...)

	return errs
}

func Validate_ContainerImage(opCtx operation.Context, obj, oldObj *core.ContainerImage, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ContainerImage.Names
	errs = append(errs,
		func(obj, oldObj []string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Names, safe.Field(oldObj, func(oldObj *core.ContainerImage) []string { return oldObj.Names }), fldPath.Child("Names"))...)

	// field core.ContainerImage.SizeBytes
	errs = append(errs,
		func(obj, oldObj *int64, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.SizeBytes, safe.Field(oldObj, func(oldObj *core.ContainerImage) *int64 { return &oldObj.SizeBytes }), fldPath.Child("SizeBytes"))...)

	return errs
}

func Validate_ContainerPort(opCtx operation.Context, obj, oldObj *core.ContainerPort, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ContainerPort.Name
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Name, safe.Field(oldObj, func(oldObj *core.ContainerPort) *string { return &oldObj.Name }), fldPath.Child("Name"))...)

	// field core.ContainerPort.HostPort
	errs = append(errs,
		func(obj, oldObj *int32, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.HostPort, safe.Field(oldObj, func(oldObj *core.ContainerPort) *int32 { return &oldObj.HostPort }), fldPath.Child("HostPort"))...)

	// field core.ContainerPort.ContainerPort has no validation

	// field core.ContainerPort.Protocol
	errs = append(errs,
		func(obj, oldObj *core.Protocol, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Protocol, safe.Field(oldObj, func(oldObj *core.ContainerPort) *core.Protocol { return &oldObj.Protocol }), fldPath.Child("Protocol"))...)

	// field core.ContainerPort.HostIP
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.HostIP, safe.Field(oldObj, func(oldObj *core.ContainerPort) *string { return &oldObj.HostIP }), fldPath.Child("HostIP"))...)

	return errs
}

func Validate_ContainerState(opCtx operation.Context, obj, oldObj *core.ContainerState, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ContainerState.Waiting
	errs = append(errs,
		func(obj, oldObj *core.ContainerStateWaiting, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_ContainerStateWaiting(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.Waiting, safe.Field(oldObj, func(oldObj *core.ContainerState) *core.ContainerStateWaiting { return oldObj.Waiting }), fldPath.Child("Waiting"))...)

	// field core.ContainerState.Running
	errs = append(errs,
		func(obj, oldObj *core.ContainerStateRunning, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_ContainerStateRunning(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.Running, safe.Field(oldObj, func(oldObj *core.ContainerState) *core.ContainerStateRunning { return oldObj.Running }), fldPath.Child("Running"))...)

	// field core.ContainerState.Terminated
	errs = append(errs,
		func(obj, oldObj *core.ContainerStateTerminated, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_ContainerStateTerminated(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.Terminated, safe.Field(oldObj, func(oldObj *core.ContainerState) *core.ContainerStateTerminated { return oldObj.Terminated }), fldPath.Child("Terminated"))...)

	return errs
}

func Validate_ContainerStateRunning(opCtx operation.Context, obj, oldObj *core.ContainerStateRunning, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ContainerStateRunning.StartedAt
	errs = append(errs,
		func(obj, oldObj *v1.Time, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.StartedAt, safe.Field(oldObj, func(oldObj *core.ContainerStateRunning) *v1.Time { return &oldObj.StartedAt }), fldPath.Child("StartedAt"))...)

	return errs
}

func Validate_ContainerStateTerminated(opCtx operation.Context, obj, oldObj *core.ContainerStateTerminated, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ContainerStateTerminated.ExitCode has no validation

	// field core.ContainerStateTerminated.Signal
	errs = append(errs,
		func(obj, oldObj *int32, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Signal, safe.Field(oldObj, func(oldObj *core.ContainerStateTerminated) *int32 { return &oldObj.Signal }), fldPath.Child("Signal"))...)

	// field core.ContainerStateTerminated.Reason
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Reason, safe.Field(oldObj, func(oldObj *core.ContainerStateTerminated) *string { return &oldObj.Reason }), fldPath.Child("Reason"))...)

	// field core.ContainerStateTerminated.Message
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Message, safe.Field(oldObj, func(oldObj *core.ContainerStateTerminated) *string { return &oldObj.Message }), fldPath.Child("Message"))...)

	// field core.ContainerStateTerminated.StartedAt
	errs = append(errs,
		func(obj, oldObj *v1.Time, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.StartedAt, safe.Field(oldObj, func(oldObj *core.ContainerStateTerminated) *v1.Time { return &oldObj.StartedAt }), fldPath.Child("StartedAt"))...)

	// field core.ContainerStateTerminated.FinishedAt
	errs = append(errs,
		func(obj, oldObj *v1.Time, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.FinishedAt, safe.Field(oldObj, func(oldObj *core.ContainerStateTerminated) *v1.Time { return &oldObj.FinishedAt }), fldPath.Child("FinishedAt"))...)

	// field core.ContainerStateTerminated.ContainerID
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ContainerID, safe.Field(oldObj, func(oldObj *core.ContainerStateTerminated) *string { return &oldObj.ContainerID }), fldPath.Child("ContainerID"))...)

	return errs
}

func Validate_ContainerStateWaiting(opCtx operation.Context, obj, oldObj *core.ContainerStateWaiting, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ContainerStateWaiting.Reason
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Reason, safe.Field(oldObj, func(oldObj *core.ContainerStateWaiting) *string { return &oldObj.Reason }), fldPath.Child("Reason"))...)

	// field core.ContainerStateWaiting.Message
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Message, safe.Field(oldObj, func(oldObj *core.ContainerStateWaiting) *string { return &oldObj.Message }), fldPath.Child("Message"))...)

	return errs
}

func Validate_ContainerStatus(opCtx operation.Context, obj, oldObj *core.ContainerStatus, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ContainerStatus.Name has no validation

	// field core.ContainerStatus.State
	errs = append(errs,
		func(obj, oldObj *core.ContainerState, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_ContainerState(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.State, safe.Field(oldObj, func(oldObj *core.ContainerStatus) *core.ContainerState { return &oldObj.State }), fldPath.Child("State"))...)

	// field core.ContainerStatus.LastTerminationState
	errs = append(errs,
		func(obj, oldObj *core.ContainerState, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_ContainerState(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.LastTerminationState, safe.Field(oldObj, func(oldObj *core.ContainerStatus) *core.ContainerState { return &oldObj.LastTerminationState }), fldPath.Child("LastTerminationState"))...)

	// field core.ContainerStatus.Ready has no validation
	// field core.ContainerStatus.RestartCount has no validation
	// field core.ContainerStatus.Image has no validation
	// field core.ContainerStatus.ImageID has no validation

	// field core.ContainerStatus.ContainerID
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ContainerID, safe.Field(oldObj, func(oldObj *core.ContainerStatus) *string { return &oldObj.ContainerID }), fldPath.Child("ContainerID"))...)

	// field core.ContainerStatus.Started
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Started, safe.Field(oldObj, func(oldObj *core.ContainerStatus) *bool { return oldObj.Started }), fldPath.Child("Started"))...)

	// field core.ContainerStatus.AllocatedResources
	errs = append(errs,
		func(obj, oldObj core.ResourceList, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for key, val := range obj {
				errs = append(errs,
					func(obj, oldObj *resource.Quantity, fldPath *field.Path) (errs field.ErrorList) {
						// NOTE: Type resource.Quantity is in a non-included package.
						//       Any validations defined on this type are not available from here.
						return
					}(&val, safe.Lookup(oldObj, key, safe.PtrTo), fldPath.Key(string(key)))...)
			}
			return
		}(obj.AllocatedResources, safe.Field(oldObj, func(oldObj *core.ContainerStatus) core.ResourceList { return oldObj.AllocatedResources }), fldPath.Child("AllocatedResources"))...)

	// field core.ContainerStatus.Resources
	errs = append(errs,
		func(obj, oldObj *core.ResourceRequirements, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_ResourceRequirements(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.Resources, safe.Field(oldObj, func(oldObj *core.ContainerStatus) *core.ResourceRequirements { return oldObj.Resources }), fldPath.Child("Resources"))...)

	// field core.ContainerStatus.VolumeMounts
	errs = append(errs,
		func(obj, oldObj []core.VolumeMountStatus, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.VolumeMountStatus, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_VolumeMountStatus(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.VolumeMounts, safe.Field(oldObj, func(oldObj *core.ContainerStatus) []core.VolumeMountStatus { return oldObj.VolumeMounts }), fldPath.Child("VolumeMounts"))...)

	// field core.ContainerStatus.User
	errs = append(errs,
		func(obj, oldObj *core.ContainerUser, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_ContainerUser(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.User, safe.Field(oldObj, func(oldObj *core.ContainerStatus) *core.ContainerUser { return oldObj.User }), fldPath.Child("User"))...)

	// field core.ContainerStatus.AllocatedResourcesStatus
	errs = append(errs,
		func(obj, oldObj []core.ResourceStatus, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.AllocatedResourcesStatus, safe.Field(oldObj, func(oldObj *core.ContainerStatus) []core.ResourceStatus { return oldObj.AllocatedResourcesStatus }), fldPath.Child("AllocatedResourcesStatus"))...)

	return errs
}

func Validate_ContainerUser(opCtx operation.Context, obj, oldObj *core.ContainerUser, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ContainerUser.Linux
	errs = append(errs,
		func(obj, oldObj *core.LinuxContainerUser, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Linux, safe.Field(oldObj, func(oldObj *core.ContainerUser) *core.LinuxContainerUser { return oldObj.Linux }), fldPath.Child("Linux"))...)

	return errs
}

func Validate_DownwardAPIProjection(opCtx operation.Context, obj, oldObj *core.DownwardAPIProjection, fldPath *field.Path) (errs field.ErrorList) {
	// field core.DownwardAPIProjection.Items
	errs = append(errs,
		func(obj, oldObj []core.DownwardAPIVolumeFile, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.DownwardAPIVolumeFile, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_DownwardAPIVolumeFile(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Items, safe.Field(oldObj, func(oldObj *core.DownwardAPIProjection) []core.DownwardAPIVolumeFile { return oldObj.Items }), fldPath.Child("Items"))...)

	return errs
}

func Validate_DownwardAPIVolumeFile(opCtx operation.Context, obj, oldObj *core.DownwardAPIVolumeFile, fldPath *field.Path) (errs field.ErrorList) {
	// field core.DownwardAPIVolumeFile.Path has no validation

	// field core.DownwardAPIVolumeFile.FieldRef
	errs = append(errs,
		func(obj, oldObj *core.ObjectFieldSelector, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.FieldRef, safe.Field(oldObj, func(oldObj *core.DownwardAPIVolumeFile) *core.ObjectFieldSelector { return oldObj.FieldRef }), fldPath.Child("FieldRef"))...)

	// field core.DownwardAPIVolumeFile.ResourceFieldRef
	errs = append(errs,
		func(obj, oldObj *core.ResourceFieldSelector, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_ResourceFieldSelector(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.ResourceFieldRef, safe.Field(oldObj, func(oldObj *core.DownwardAPIVolumeFile) *core.ResourceFieldSelector { return oldObj.ResourceFieldRef }), fldPath.Child("ResourceFieldRef"))...)

	// field core.DownwardAPIVolumeFile.Mode
	errs = append(errs,
		func(obj, oldObj *int32, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Mode, safe.Field(oldObj, func(oldObj *core.DownwardAPIVolumeFile) *int32 { return oldObj.Mode }), fldPath.Child("Mode"))...)

	return errs
}

func Validate_DownwardAPIVolumeSource(opCtx operation.Context, obj, oldObj *core.DownwardAPIVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.DownwardAPIVolumeSource.Items
	errs = append(errs,
		func(obj, oldObj []core.DownwardAPIVolumeFile, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.DownwardAPIVolumeFile, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_DownwardAPIVolumeFile(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Items, safe.Field(oldObj, func(oldObj *core.DownwardAPIVolumeSource) []core.DownwardAPIVolumeFile { return oldObj.Items }), fldPath.Child("Items"))...)

	// field core.DownwardAPIVolumeSource.DefaultMode
	errs = append(errs,
		func(obj, oldObj *int32, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.DefaultMode, safe.Field(oldObj, func(oldObj *core.DownwardAPIVolumeSource) *int32 { return oldObj.DefaultMode }), fldPath.Child("DefaultMode"))...)

	return errs
}

func Validate_EmptyDirVolumeSource(opCtx operation.Context, obj, oldObj *core.EmptyDirVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.EmptyDirVolumeSource.Medium
	errs = append(errs,
		func(obj, oldObj *core.StorageMedium, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Medium, safe.Field(oldObj, func(oldObj *core.EmptyDirVolumeSource) *core.StorageMedium { return &oldObj.Medium }), fldPath.Child("Medium"))...)

	// field core.EmptyDirVolumeSource.SizeLimit
	errs = append(errs,
		func(obj, oldObj *resource.Quantity, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.SizeLimit, safe.Field(oldObj, func(oldObj *core.EmptyDirVolumeSource) *resource.Quantity { return oldObj.SizeLimit }), fldPath.Child("SizeLimit"))...)

	return errs
}

func Validate_EndpointAddress(opCtx operation.Context, obj, oldObj *core.EndpointAddress, fldPath *field.Path) (errs field.ErrorList) {
	// field core.EndpointAddress.IP has no validation

	// field core.EndpointAddress.Hostname
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Hostname, safe.Field(oldObj, func(oldObj *core.EndpointAddress) *string { return &oldObj.Hostname }), fldPath.Child("Hostname"))...)

	// field core.EndpointAddress.NodeName
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.NodeName, safe.Field(oldObj, func(oldObj *core.EndpointAddress) *string { return oldObj.NodeName }), fldPath.Child("NodeName"))...)

	// field core.EndpointAddress.TargetRef
	errs = append(errs,
		func(obj, oldObj *core.ObjectReference, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, Validate_ObjectReference(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.TargetRef, safe.Field(oldObj, func(oldObj *core.EndpointAddress) *core.ObjectReference { return oldObj.TargetRef }), fldPath.Child("TargetRef"))...)

	return errs
}

func Validate_EndpointPort(opCtx operation.Context, obj, oldObj *core.EndpointPort, fldPath *field.Path) (errs field.ErrorList) {
	// field core.EndpointPort.Name has no validation
	// field core.EndpointPort.Port has no validation
	// field core.EndpointPort.Protocol has no validation

	// field core.EndpointPort.AppProtocol
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.AppProtocol, safe.Field(oldObj, func(oldObj *core.EndpointPort) *string { return oldObj.AppProtocol }), fldPath.Child("AppProtocol"))...)

	return errs
}

func Validate_EndpointSubset(opCtx operation.Context, obj, oldObj *core.EndpointSubset, fldPath *field.Path) (errs field.ErrorList) {
	// field core.EndpointSubset.Addresses
	errs = append(errs,
		func(obj, oldObj []core.EndpointAddress, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.EndpointAddress, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_EndpointAddress(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Addresses, safe.Field(oldObj, func(oldObj *core.EndpointSubset) []core.EndpointAddress { return oldObj.Addresses }), fldPath.Child("Addresses"))...)

	// field core.EndpointSubset.NotReadyAddresses
	errs = append(errs,
		func(obj, oldObj []core.EndpointAddress, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.EndpointAddress, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_EndpointAddress(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.NotReadyAddresses, safe.Field(oldObj, func(oldObj *core.EndpointSubset) []core.EndpointAddress { return oldObj.NotReadyAddresses }), fldPath.Child("NotReadyAddresses"))...)

	// field core.EndpointSubset.Ports
	errs = append(errs,
		func(obj, oldObj []core.EndpointPort, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.EndpointPort, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_EndpointPort(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Ports, safe.Field(oldObj, func(oldObj *core.EndpointSubset) []core.EndpointPort { return oldObj.Ports }), fldPath.Child("Ports"))...)

	return errs
}

func Validate_Endpoints(opCtx operation.Context, obj, oldObj *core.Endpoints, fldPath *field.Path) (errs field.ErrorList) {
	// field core.Endpoints.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.Endpoints) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.Endpoints.ObjectMeta
	errs = append(errs,
		func(obj, oldObj *v1.ObjectMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ObjectMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ObjectMeta, safe.Field(oldObj, func(oldObj *core.Endpoints) *v1.ObjectMeta { return &oldObj.ObjectMeta }), fldPath.Child("ObjectMeta"))...)

	// field core.Endpoints.Subsets
	errs = append(errs,
		func(obj, oldObj []core.EndpointSubset, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.EndpointSubset, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_EndpointSubset(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Subsets, safe.Field(oldObj, func(oldObj *core.Endpoints) []core.EndpointSubset { return oldObj.Subsets }), fldPath.Child("Subsets"))...)

	return errs
}

func Validate_EndpointsList(opCtx operation.Context, obj, oldObj *core.EndpointsList, fldPath *field.Path) (errs field.ErrorList) {
	// field core.EndpointsList.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.EndpointsList) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.EndpointsList.ListMeta
	errs = append(errs,
		func(obj, oldObj *v1.ListMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ListMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ListMeta, safe.Field(oldObj, func(oldObj *core.EndpointsList) *v1.ListMeta { return &oldObj.ListMeta }), fldPath.Child("ListMeta"))...)

	// field core.EndpointsList.Items
	errs = append(errs,
		func(obj, oldObj []core.Endpoints, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.Endpoints, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_Endpoints(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Items, safe.Field(oldObj, func(oldObj *core.EndpointsList) []core.Endpoints { return oldObj.Items }), fldPath.Child("Items"))...)

	return errs
}

func Validate_EnvFromSource(opCtx operation.Context, obj, oldObj *core.EnvFromSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.EnvFromSource.Prefix
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Prefix, safe.Field(oldObj, func(oldObj *core.EnvFromSource) *string { return &oldObj.Prefix }), fldPath.Child("Prefix"))...)

	// field core.EnvFromSource.ConfigMapRef
	errs = append(errs,
		func(obj, oldObj *core.ConfigMapEnvSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_ConfigMapEnvSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.ConfigMapRef, safe.Field(oldObj, func(oldObj *core.EnvFromSource) *core.ConfigMapEnvSource { return oldObj.ConfigMapRef }), fldPath.Child("ConfigMapRef"))...)

	// field core.EnvFromSource.SecretRef
	errs = append(errs,
		func(obj, oldObj *core.SecretEnvSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_SecretEnvSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.SecretRef, safe.Field(oldObj, func(oldObj *core.EnvFromSource) *core.SecretEnvSource { return oldObj.SecretRef }), fldPath.Child("SecretRef"))...)

	return errs
}

func Validate_EnvVar(opCtx operation.Context, obj, oldObj *core.EnvVar, fldPath *field.Path) (errs field.ErrorList) {
	// field core.EnvVar.Name has no validation

	// field core.EnvVar.Value
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Value, safe.Field(oldObj, func(oldObj *core.EnvVar) *string { return &oldObj.Value }), fldPath.Child("Value"))...)

	// field core.EnvVar.ValueFrom
	errs = append(errs,
		func(obj, oldObj *core.EnvVarSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_EnvVarSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.ValueFrom, safe.Field(oldObj, func(oldObj *core.EnvVar) *core.EnvVarSource { return oldObj.ValueFrom }), fldPath.Child("ValueFrom"))...)

	return errs
}

func Validate_EnvVarSource(opCtx operation.Context, obj, oldObj *core.EnvVarSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.EnvVarSource.FieldRef
	errs = append(errs,
		func(obj, oldObj *core.ObjectFieldSelector, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.FieldRef, safe.Field(oldObj, func(oldObj *core.EnvVarSource) *core.ObjectFieldSelector { return oldObj.FieldRef }), fldPath.Child("FieldRef"))...)

	// field core.EnvVarSource.ResourceFieldRef
	errs = append(errs,
		func(obj, oldObj *core.ResourceFieldSelector, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_ResourceFieldSelector(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.ResourceFieldRef, safe.Field(oldObj, func(oldObj *core.EnvVarSource) *core.ResourceFieldSelector { return oldObj.ResourceFieldRef }), fldPath.Child("ResourceFieldRef"))...)

	// field core.EnvVarSource.ConfigMapKeyRef
	errs = append(errs,
		func(obj, oldObj *core.ConfigMapKeySelector, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_ConfigMapKeySelector(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.ConfigMapKeyRef, safe.Field(oldObj, func(oldObj *core.EnvVarSource) *core.ConfigMapKeySelector { return oldObj.ConfigMapKeyRef }), fldPath.Child("ConfigMapKeyRef"))...)

	// field core.EnvVarSource.SecretKeyRef
	errs = append(errs,
		func(obj, oldObj *core.SecretKeySelector, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_SecretKeySelector(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.SecretKeyRef, safe.Field(oldObj, func(oldObj *core.EnvVarSource) *core.SecretKeySelector { return oldObj.SecretKeyRef }), fldPath.Child("SecretKeyRef"))...)

	return errs
}

func Validate_EphemeralContainer(opCtx operation.Context, obj, oldObj *core.EphemeralContainer, fldPath *field.Path) (errs field.ErrorList) {
	// field core.EphemeralContainer.EphemeralContainerCommon
	errs = append(errs,
		func(obj, oldObj *core.EphemeralContainerCommon, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, Validate_EphemeralContainerCommon(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.EphemeralContainerCommon, safe.Field(oldObj, func(oldObj *core.EphemeralContainer) *core.EphemeralContainerCommon {
			return &oldObj.EphemeralContainerCommon
		}), fldPath.Child("EphemeralContainerCommon"))...)

	// field core.EphemeralContainer.TargetContainerName
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.TargetContainerName, safe.Field(oldObj, func(oldObj *core.EphemeralContainer) *string { return &oldObj.TargetContainerName }), fldPath.Child("TargetContainerName"))...)

	return errs
}

func Validate_EphemeralContainerCommon(opCtx operation.Context, obj, oldObj *core.EphemeralContainerCommon, fldPath *field.Path) (errs field.ErrorList) {
	// field core.EphemeralContainerCommon.Name has no validation
	// field core.EphemeralContainerCommon.Image has no validation

	// field core.EphemeralContainerCommon.Command
	errs = append(errs,
		func(obj, oldObj []string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Command, safe.Field(oldObj, func(oldObj *core.EphemeralContainerCommon) []string { return oldObj.Command }), fldPath.Child("Command"))...)

	// field core.EphemeralContainerCommon.Args
	errs = append(errs,
		func(obj, oldObj []string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Args, safe.Field(oldObj, func(oldObj *core.EphemeralContainerCommon) []string { return oldObj.Args }), fldPath.Child("Args"))...)

	// field core.EphemeralContainerCommon.WorkingDir
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.WorkingDir, safe.Field(oldObj, func(oldObj *core.EphemeralContainerCommon) *string { return &oldObj.WorkingDir }), fldPath.Child("WorkingDir"))...)

	// field core.EphemeralContainerCommon.Ports
	errs = append(errs,
		func(obj, oldObj []core.ContainerPort, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.ContainerPort, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_ContainerPort(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Ports, safe.Field(oldObj, func(oldObj *core.EphemeralContainerCommon) []core.ContainerPort { return oldObj.Ports }), fldPath.Child("Ports"))...)

	// field core.EphemeralContainerCommon.EnvFrom
	errs = append(errs,
		func(obj, oldObj []core.EnvFromSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.EnvFromSource, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_EnvFromSource(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.EnvFrom, safe.Field(oldObj, func(oldObj *core.EphemeralContainerCommon) []core.EnvFromSource { return oldObj.EnvFrom }), fldPath.Child("EnvFrom"))...)

	// field core.EphemeralContainerCommon.Env
	errs = append(errs,
		func(obj, oldObj []core.EnvVar, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.EnvVar, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_EnvVar(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Env, safe.Field(oldObj, func(oldObj *core.EphemeralContainerCommon) []core.EnvVar { return oldObj.Env }), fldPath.Child("Env"))...)

	// field core.EphemeralContainerCommon.Resources
	errs = append(errs,
		func(obj, oldObj *core.ResourceRequirements, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_ResourceRequirements(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.Resources, safe.Field(oldObj, func(oldObj *core.EphemeralContainerCommon) *core.ResourceRequirements { return &oldObj.Resources }), fldPath.Child("Resources"))...)

	// field core.EphemeralContainerCommon.ResizePolicy
	errs = append(errs,
		func(obj, oldObj []core.ContainerResizePolicy, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.ResizePolicy, safe.Field(oldObj, func(oldObj *core.EphemeralContainerCommon) []core.ContainerResizePolicy { return oldObj.ResizePolicy }), fldPath.Child("ResizePolicy"))...)

	// field core.EphemeralContainerCommon.RestartPolicy
	errs = append(errs,
		func(obj, oldObj *core.ContainerRestartPolicy, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.RestartPolicy, safe.Field(oldObj, func(oldObj *core.EphemeralContainerCommon) *core.ContainerRestartPolicy { return oldObj.RestartPolicy }), fldPath.Child("RestartPolicy"))...)

	// field core.EphemeralContainerCommon.VolumeMounts
	errs = append(errs,
		func(obj, oldObj []core.VolumeMount, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.VolumeMount, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_VolumeMount(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.VolumeMounts, safe.Field(oldObj, func(oldObj *core.EphemeralContainerCommon) []core.VolumeMount { return oldObj.VolumeMounts }), fldPath.Child("VolumeMounts"))...)

	// field core.EphemeralContainerCommon.VolumeDevices
	errs = append(errs,
		func(obj, oldObj []core.VolumeDevice, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.VolumeDevices, safe.Field(oldObj, func(oldObj *core.EphemeralContainerCommon) []core.VolumeDevice { return oldObj.VolumeDevices }), fldPath.Child("VolumeDevices"))...)

	// field core.EphemeralContainerCommon.LivenessProbe
	errs = append(errs,
		func(obj, oldObj *core.Probe, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_Probe(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.LivenessProbe, safe.Field(oldObj, func(oldObj *core.EphemeralContainerCommon) *core.Probe { return oldObj.LivenessProbe }), fldPath.Child("LivenessProbe"))...)

	// field core.EphemeralContainerCommon.ReadinessProbe
	errs = append(errs,
		func(obj, oldObj *core.Probe, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_Probe(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.ReadinessProbe, safe.Field(oldObj, func(oldObj *core.EphemeralContainerCommon) *core.Probe { return oldObj.ReadinessProbe }), fldPath.Child("ReadinessProbe"))...)

	// field core.EphemeralContainerCommon.StartupProbe
	errs = append(errs,
		func(obj, oldObj *core.Probe, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_Probe(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.StartupProbe, safe.Field(oldObj, func(oldObj *core.EphemeralContainerCommon) *core.Probe { return oldObj.StartupProbe }), fldPath.Child("StartupProbe"))...)

	// field core.EphemeralContainerCommon.Lifecycle
	errs = append(errs,
		func(obj, oldObj *core.Lifecycle, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_Lifecycle(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.Lifecycle, safe.Field(oldObj, func(oldObj *core.EphemeralContainerCommon) *core.Lifecycle { return oldObj.Lifecycle }), fldPath.Child("Lifecycle"))...)

	// field core.EphemeralContainerCommon.TerminationMessagePath
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.TerminationMessagePath, safe.Field(oldObj, func(oldObj *core.EphemeralContainerCommon) *string { return &oldObj.TerminationMessagePath }), fldPath.Child("TerminationMessagePath"))...)

	// field core.EphemeralContainerCommon.TerminationMessagePolicy
	errs = append(errs,
		func(obj, oldObj *core.TerminationMessagePolicy, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.TerminationMessagePolicy, safe.Field(oldObj, func(oldObj *core.EphemeralContainerCommon) *core.TerminationMessagePolicy {
			return &oldObj.TerminationMessagePolicy
		}), fldPath.Child("TerminationMessagePolicy"))...)

	// field core.EphemeralContainerCommon.ImagePullPolicy has no validation

	// field core.EphemeralContainerCommon.SecurityContext
	errs = append(errs,
		func(obj, oldObj *core.SecurityContext, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_SecurityContext(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.SecurityContext, safe.Field(oldObj, func(oldObj *core.EphemeralContainerCommon) *core.SecurityContext { return oldObj.SecurityContext }), fldPath.Child("SecurityContext"))...)

	// field core.EphemeralContainerCommon.Stdin
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Stdin, safe.Field(oldObj, func(oldObj *core.EphemeralContainerCommon) *bool { return &oldObj.Stdin }), fldPath.Child("Stdin"))...)

	// field core.EphemeralContainerCommon.StdinOnce
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.StdinOnce, safe.Field(oldObj, func(oldObj *core.EphemeralContainerCommon) *bool { return &oldObj.StdinOnce }), fldPath.Child("StdinOnce"))...)

	// field core.EphemeralContainerCommon.TTY
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.TTY, safe.Field(oldObj, func(oldObj *core.EphemeralContainerCommon) *bool { return &oldObj.TTY }), fldPath.Child("TTY"))...)

	return errs
}

func Validate_EphemeralVolumeSource(opCtx operation.Context, obj, oldObj *core.EphemeralVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.EphemeralVolumeSource.VolumeClaimTemplate
	errs = append(errs,
		func(obj, oldObj *core.PersistentVolumeClaimTemplate, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, Validate_PersistentVolumeClaimTemplate(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.VolumeClaimTemplate, safe.Field(oldObj, func(oldObj *core.EphemeralVolumeSource) *core.PersistentVolumeClaimTemplate {
			return oldObj.VolumeClaimTemplate
		}), fldPath.Child("VolumeClaimTemplate"))...)

	return errs
}

func Validate_Event(opCtx operation.Context, obj, oldObj *core.Event, fldPath *field.Path) (errs field.ErrorList) {
	// field core.Event.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.Event) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.Event.ObjectMeta
	errs = append(errs,
		func(obj, oldObj *v1.ObjectMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_ObjectMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ObjectMeta, safe.Field(oldObj, func(oldObj *core.Event) *v1.ObjectMeta { return &oldObj.ObjectMeta }), fldPath.Child("ObjectMeta"))...)

	// field core.Event.InvolvedObject
	errs = append(errs,
		func(obj, oldObj *core.ObjectReference, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_ObjectReference(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.InvolvedObject, safe.Field(oldObj, func(oldObj *core.Event) *core.ObjectReference { return &oldObj.InvolvedObject }), fldPath.Child("InvolvedObject"))...)

	// field core.Event.Reason
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Reason, safe.Field(oldObj, func(oldObj *core.Event) *string { return &oldObj.Reason }), fldPath.Child("Reason"))...)

	// field core.Event.Message
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Message, safe.Field(oldObj, func(oldObj *core.Event) *string { return &oldObj.Message }), fldPath.Child("Message"))...)

	// field core.Event.Source
	errs = append(errs,
		func(obj, oldObj *core.EventSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_EventSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.Source, safe.Field(oldObj, func(oldObj *core.Event) *core.EventSource { return &oldObj.Source }), fldPath.Child("Source"))...)

	// field core.Event.FirstTimestamp
	errs = append(errs,
		func(obj, oldObj *v1.Time, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.FirstTimestamp, safe.Field(oldObj, func(oldObj *core.Event) *v1.Time { return &oldObj.FirstTimestamp }), fldPath.Child("FirstTimestamp"))...)

	// field core.Event.LastTimestamp
	errs = append(errs,
		func(obj, oldObj *v1.Time, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.LastTimestamp, safe.Field(oldObj, func(oldObj *core.Event) *v1.Time { return &oldObj.LastTimestamp }), fldPath.Child("LastTimestamp"))...)

	// field core.Event.Count
	errs = append(errs,
		func(obj, oldObj *int32, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Count, safe.Field(oldObj, func(oldObj *core.Event) *int32 { return &oldObj.Count }), fldPath.Child("Count"))...)

	// field core.Event.Type
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Type, safe.Field(oldObj, func(oldObj *core.Event) *string { return &oldObj.Type }), fldPath.Child("Type"))...)

	// field core.Event.EventTime
	errs = append(errs,
		func(obj, oldObj *v1.MicroTime, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.EventTime, safe.Field(oldObj, func(oldObj *core.Event) *v1.MicroTime { return &oldObj.EventTime }), fldPath.Child("EventTime"))...)

	// field core.Event.Series
	errs = append(errs,
		func(obj, oldObj *core.EventSeries, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Series, safe.Field(oldObj, func(oldObj *core.Event) *core.EventSeries { return oldObj.Series }), fldPath.Child("Series"))...)

	// field core.Event.Action
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Action, safe.Field(oldObj, func(oldObj *core.Event) *string { return &oldObj.Action }), fldPath.Child("Action"))...)

	// field core.Event.Related
	errs = append(errs,
		func(obj, oldObj *core.ObjectReference, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_ObjectReference(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.Related, safe.Field(oldObj, func(oldObj *core.Event) *core.ObjectReference { return oldObj.Related }), fldPath.Child("Related"))...)

	// field core.Event.ReportingController
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ReportingController, safe.Field(oldObj, func(oldObj *core.Event) *string { return &oldObj.ReportingController }), fldPath.Child("ReportingController"))...)

	// field core.Event.ReportingInstance
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ReportingInstance, safe.Field(oldObj, func(oldObj *core.Event) *string { return &oldObj.ReportingInstance }), fldPath.Child("ReportingInstance"))...)

	return errs
}

func Validate_EventList(opCtx operation.Context, obj, oldObj *core.EventList, fldPath *field.Path) (errs field.ErrorList) {
	// field core.EventList.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.EventList) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.EventList.ListMeta
	errs = append(errs,
		func(obj, oldObj *v1.ListMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ListMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ListMeta, safe.Field(oldObj, func(oldObj *core.EventList) *v1.ListMeta { return &oldObj.ListMeta }), fldPath.Child("ListMeta"))...)

	// field core.EventList.Items
	errs = append(errs,
		func(obj, oldObj []core.Event, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.Event, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_Event(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Items, safe.Field(oldObj, func(oldObj *core.EventList) []core.Event { return oldObj.Items }), fldPath.Child("Items"))...)

	return errs
}

func Validate_EventSource(opCtx operation.Context, obj, oldObj *core.EventSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.EventSource.Component
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Component, safe.Field(oldObj, func(oldObj *core.EventSource) *string { return &oldObj.Component }), fldPath.Child("Component"))...)

	// field core.EventSource.Host
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Host, safe.Field(oldObj, func(oldObj *core.EventSource) *string { return &oldObj.Host }), fldPath.Child("Host"))...)

	return errs
}

func Validate_ExecAction(opCtx operation.Context, obj, oldObj *core.ExecAction, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ExecAction.Command
	errs = append(errs,
		func(obj, oldObj []string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Command, safe.Field(oldObj, func(oldObj *core.ExecAction) []string { return oldObj.Command }), fldPath.Child("Command"))...)

	return errs
}

func Validate_FCVolumeSource(opCtx operation.Context, obj, oldObj *core.FCVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.FCVolumeSource.TargetWWNs
	errs = append(errs,
		func(obj, oldObj []string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.TargetWWNs, safe.Field(oldObj, func(oldObj *core.FCVolumeSource) []string { return oldObj.TargetWWNs }), fldPath.Child("TargetWWNs"))...)

	// field core.FCVolumeSource.Lun
	errs = append(errs,
		func(obj, oldObj *int32, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Lun, safe.Field(oldObj, func(oldObj *core.FCVolumeSource) *int32 { return oldObj.Lun }), fldPath.Child("Lun"))...)

	// field core.FCVolumeSource.FSType
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.FSType, safe.Field(oldObj, func(oldObj *core.FCVolumeSource) *string { return &oldObj.FSType }), fldPath.Child("FSType"))...)

	// field core.FCVolumeSource.ReadOnly
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ReadOnly, safe.Field(oldObj, func(oldObj *core.FCVolumeSource) *bool { return &oldObj.ReadOnly }), fldPath.Child("ReadOnly"))...)

	// field core.FCVolumeSource.WWIDs
	errs = append(errs,
		func(obj, oldObj []string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.WWIDs, safe.Field(oldObj, func(oldObj *core.FCVolumeSource) []string { return oldObj.WWIDs }), fldPath.Child("WWIDs"))...)

	return errs
}

func Validate_FlexPersistentVolumeSource(opCtx operation.Context, obj, oldObj *core.FlexPersistentVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.FlexPersistentVolumeSource.Driver has no validation

	// field core.FlexPersistentVolumeSource.FSType
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.FSType, safe.Field(oldObj, func(oldObj *core.FlexPersistentVolumeSource) *string { return &oldObj.FSType }), fldPath.Child("FSType"))...)

	// field core.FlexPersistentVolumeSource.SecretRef
	errs = append(errs,
		func(obj, oldObj *core.SecretReference, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_SecretReference(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.SecretRef, safe.Field(oldObj, func(oldObj *core.FlexPersistentVolumeSource) *core.SecretReference { return oldObj.SecretRef }), fldPath.Child("SecretRef"))...)

	// field core.FlexPersistentVolumeSource.ReadOnly
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ReadOnly, safe.Field(oldObj, func(oldObj *core.FlexPersistentVolumeSource) *bool { return &oldObj.ReadOnly }), fldPath.Child("ReadOnly"))...)

	// field core.FlexPersistentVolumeSource.Options
	errs = append(errs,
		func(obj, oldObj map[string]string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Options, safe.Field(oldObj, func(oldObj *core.FlexPersistentVolumeSource) map[string]string { return oldObj.Options }), fldPath.Child("Options"))...)

	return errs
}

func Validate_FlexVolumeSource(opCtx operation.Context, obj, oldObj *core.FlexVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.FlexVolumeSource.Driver has no validation

	// field core.FlexVolumeSource.FSType
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.FSType, safe.Field(oldObj, func(oldObj *core.FlexVolumeSource) *string { return &oldObj.FSType }), fldPath.Child("FSType"))...)

	// field core.FlexVolumeSource.SecretRef
	errs = append(errs,
		func(obj, oldObj *core.LocalObjectReference, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.SecretRef, safe.Field(oldObj, func(oldObj *core.FlexVolumeSource) *core.LocalObjectReference { return oldObj.SecretRef }), fldPath.Child("SecretRef"))...)

	// field core.FlexVolumeSource.ReadOnly
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ReadOnly, safe.Field(oldObj, func(oldObj *core.FlexVolumeSource) *bool { return &oldObj.ReadOnly }), fldPath.Child("ReadOnly"))...)

	// field core.FlexVolumeSource.Options
	errs = append(errs,
		func(obj, oldObj map[string]string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Options, safe.Field(oldObj, func(oldObj *core.FlexVolumeSource) map[string]string { return oldObj.Options }), fldPath.Child("Options"))...)

	return errs
}

func Validate_FlockerVolumeSource(opCtx operation.Context, obj, oldObj *core.FlockerVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.FlockerVolumeSource.DatasetName
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.DatasetName, safe.Field(oldObj, func(oldObj *core.FlockerVolumeSource) *string { return &oldObj.DatasetName }), fldPath.Child("DatasetName"))...)

	// field core.FlockerVolumeSource.DatasetUUID
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.DatasetUUID, safe.Field(oldObj, func(oldObj *core.FlockerVolumeSource) *string { return &oldObj.DatasetUUID }), fldPath.Child("DatasetUUID"))...)

	return errs
}

func Validate_GCEPersistentDiskVolumeSource(opCtx operation.Context, obj, oldObj *core.GCEPersistentDiskVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.GCEPersistentDiskVolumeSource.PDName has no validation

	// field core.GCEPersistentDiskVolumeSource.FSType
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.FSType, safe.Field(oldObj, func(oldObj *core.GCEPersistentDiskVolumeSource) *string { return &oldObj.FSType }), fldPath.Child("FSType"))...)

	// field core.GCEPersistentDiskVolumeSource.Partition
	errs = append(errs,
		func(obj, oldObj *int32, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Partition, safe.Field(oldObj, func(oldObj *core.GCEPersistentDiskVolumeSource) *int32 { return &oldObj.Partition }), fldPath.Child("Partition"))...)

	// field core.GCEPersistentDiskVolumeSource.ReadOnly
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ReadOnly, safe.Field(oldObj, func(oldObj *core.GCEPersistentDiskVolumeSource) *bool { return &oldObj.ReadOnly }), fldPath.Child("ReadOnly"))...)

	return errs
}

func Validate_GRPCAction(opCtx operation.Context, obj, oldObj *core.GRPCAction, fldPath *field.Path) (errs field.ErrorList) {
	// field core.GRPCAction.Port has no validation

	// field core.GRPCAction.Service
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Service, safe.Field(oldObj, func(oldObj *core.GRPCAction) *string { return oldObj.Service }), fldPath.Child("Service"))...)

	return errs
}

func Validate_GitRepoVolumeSource(opCtx operation.Context, obj, oldObj *core.GitRepoVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.GitRepoVolumeSource.Repository has no validation

	// field core.GitRepoVolumeSource.Revision
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Revision, safe.Field(oldObj, func(oldObj *core.GitRepoVolumeSource) *string { return &oldObj.Revision }), fldPath.Child("Revision"))...)

	// field core.GitRepoVolumeSource.Directory
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Directory, safe.Field(oldObj, func(oldObj *core.GitRepoVolumeSource) *string { return &oldObj.Directory }), fldPath.Child("Directory"))...)

	return errs
}

func Validate_GlusterfsPersistentVolumeSource(opCtx operation.Context, obj, oldObj *core.GlusterfsPersistentVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.GlusterfsPersistentVolumeSource.EndpointsName has no validation
	// field core.GlusterfsPersistentVolumeSource.Path has no validation

	// field core.GlusterfsPersistentVolumeSource.ReadOnly
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ReadOnly, safe.Field(oldObj, func(oldObj *core.GlusterfsPersistentVolumeSource) *bool { return &oldObj.ReadOnly }), fldPath.Child("ReadOnly"))...)

	// field core.GlusterfsPersistentVolumeSource.EndpointsNamespace
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.EndpointsNamespace, safe.Field(oldObj, func(oldObj *core.GlusterfsPersistentVolumeSource) *string { return oldObj.EndpointsNamespace }), fldPath.Child("EndpointsNamespace"))...)

	return errs
}

func Validate_GlusterfsVolumeSource(opCtx operation.Context, obj, oldObj *core.GlusterfsVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.GlusterfsVolumeSource.EndpointsName has no validation
	// field core.GlusterfsVolumeSource.Path has no validation

	// field core.GlusterfsVolumeSource.ReadOnly
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ReadOnly, safe.Field(oldObj, func(oldObj *core.GlusterfsVolumeSource) *bool { return &oldObj.ReadOnly }), fldPath.Child("ReadOnly"))...)

	return errs
}

func Validate_HTTPGetAction(opCtx operation.Context, obj, oldObj *core.HTTPGetAction, fldPath *field.Path) (errs field.ErrorList) {
	// field core.HTTPGetAction.Path
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Path, safe.Field(oldObj, func(oldObj *core.HTTPGetAction) *string { return &oldObj.Path }), fldPath.Child("Path"))...)

	// field core.HTTPGetAction.Port
	errs = append(errs,
		func(obj, oldObj *intstr.IntOrString, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			// NOTE: Type intstr.IntOrString is in a non-included package.
			//       Any validations defined on this type are not available from here.
			return
		}(&obj.Port, safe.Field(oldObj, func(oldObj *core.HTTPGetAction) *intstr.IntOrString { return &oldObj.Port }), fldPath.Child("Port"))...)

	// field core.HTTPGetAction.Host
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Host, safe.Field(oldObj, func(oldObj *core.HTTPGetAction) *string { return &oldObj.Host }), fldPath.Child("Host"))...)

	// field core.HTTPGetAction.Scheme
	errs = append(errs,
		func(obj, oldObj *core.URIScheme, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Scheme, safe.Field(oldObj, func(oldObj *core.HTTPGetAction) *core.URIScheme { return &oldObj.Scheme }), fldPath.Child("Scheme"))...)

	// field core.HTTPGetAction.HTTPHeaders
	errs = append(errs,
		func(obj, oldObj []core.HTTPHeader, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.HTTPHeaders, safe.Field(oldObj, func(oldObj *core.HTTPGetAction) []core.HTTPHeader { return oldObj.HTTPHeaders }), fldPath.Child("HTTPHeaders"))...)

	return errs
}

func Validate_ISCSIPersistentVolumeSource(opCtx operation.Context, obj, oldObj *core.ISCSIPersistentVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ISCSIPersistentVolumeSource.TargetPortal
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.TargetPortal, safe.Field(oldObj, func(oldObj *core.ISCSIPersistentVolumeSource) *string { return &oldObj.TargetPortal }), fldPath.Child("TargetPortal"))...)

	// field core.ISCSIPersistentVolumeSource.IQN
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.IQN, safe.Field(oldObj, func(oldObj *core.ISCSIPersistentVolumeSource) *string { return &oldObj.IQN }), fldPath.Child("IQN"))...)

	// field core.ISCSIPersistentVolumeSource.Lun
	errs = append(errs,
		func(obj, oldObj *int32, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Lun, safe.Field(oldObj, func(oldObj *core.ISCSIPersistentVolumeSource) *int32 { return &oldObj.Lun }), fldPath.Child("Lun"))...)

	// field core.ISCSIPersistentVolumeSource.ISCSIInterface
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ISCSIInterface, safe.Field(oldObj, func(oldObj *core.ISCSIPersistentVolumeSource) *string { return &oldObj.ISCSIInterface }), fldPath.Child("ISCSIInterface"))...)

	// field core.ISCSIPersistentVolumeSource.FSType
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.FSType, safe.Field(oldObj, func(oldObj *core.ISCSIPersistentVolumeSource) *string { return &oldObj.FSType }), fldPath.Child("FSType"))...)

	// field core.ISCSIPersistentVolumeSource.ReadOnly
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ReadOnly, safe.Field(oldObj, func(oldObj *core.ISCSIPersistentVolumeSource) *bool { return &oldObj.ReadOnly }), fldPath.Child("ReadOnly"))...)

	// field core.ISCSIPersistentVolumeSource.Portals
	errs = append(errs,
		func(obj, oldObj []string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Portals, safe.Field(oldObj, func(oldObj *core.ISCSIPersistentVolumeSource) []string { return oldObj.Portals }), fldPath.Child("Portals"))...)

	// field core.ISCSIPersistentVolumeSource.DiscoveryCHAPAuth
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.DiscoveryCHAPAuth, safe.Field(oldObj, func(oldObj *core.ISCSIPersistentVolumeSource) *bool { return &oldObj.DiscoveryCHAPAuth }), fldPath.Child("DiscoveryCHAPAuth"))...)

	// field core.ISCSIPersistentVolumeSource.SessionCHAPAuth
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.SessionCHAPAuth, safe.Field(oldObj, func(oldObj *core.ISCSIPersistentVolumeSource) *bool { return &oldObj.SessionCHAPAuth }), fldPath.Child("SessionCHAPAuth"))...)

	// field core.ISCSIPersistentVolumeSource.SecretRef
	errs = append(errs,
		func(obj, oldObj *core.SecretReference, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_SecretReference(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.SecretRef, safe.Field(oldObj, func(oldObj *core.ISCSIPersistentVolumeSource) *core.SecretReference { return oldObj.SecretRef }), fldPath.Child("SecretRef"))...)

	// field core.ISCSIPersistentVolumeSource.InitiatorName
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.InitiatorName, safe.Field(oldObj, func(oldObj *core.ISCSIPersistentVolumeSource) *string { return oldObj.InitiatorName }), fldPath.Child("InitiatorName"))...)

	return errs
}

func Validate_ISCSIVolumeSource(opCtx operation.Context, obj, oldObj *core.ISCSIVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ISCSIVolumeSource.TargetPortal
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.TargetPortal, safe.Field(oldObj, func(oldObj *core.ISCSIVolumeSource) *string { return &oldObj.TargetPortal }), fldPath.Child("TargetPortal"))...)

	// field core.ISCSIVolumeSource.IQN
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.IQN, safe.Field(oldObj, func(oldObj *core.ISCSIVolumeSource) *string { return &oldObj.IQN }), fldPath.Child("IQN"))...)

	// field core.ISCSIVolumeSource.Lun
	errs = append(errs,
		func(obj, oldObj *int32, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Lun, safe.Field(oldObj, func(oldObj *core.ISCSIVolumeSource) *int32 { return &oldObj.Lun }), fldPath.Child("Lun"))...)

	// field core.ISCSIVolumeSource.ISCSIInterface
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ISCSIInterface, safe.Field(oldObj, func(oldObj *core.ISCSIVolumeSource) *string { return &oldObj.ISCSIInterface }), fldPath.Child("ISCSIInterface"))...)

	// field core.ISCSIVolumeSource.FSType
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.FSType, safe.Field(oldObj, func(oldObj *core.ISCSIVolumeSource) *string { return &oldObj.FSType }), fldPath.Child("FSType"))...)

	// field core.ISCSIVolumeSource.ReadOnly
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ReadOnly, safe.Field(oldObj, func(oldObj *core.ISCSIVolumeSource) *bool { return &oldObj.ReadOnly }), fldPath.Child("ReadOnly"))...)

	// field core.ISCSIVolumeSource.Portals
	errs = append(errs,
		func(obj, oldObj []string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Portals, safe.Field(oldObj, func(oldObj *core.ISCSIVolumeSource) []string { return oldObj.Portals }), fldPath.Child("Portals"))...)

	// field core.ISCSIVolumeSource.DiscoveryCHAPAuth
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.DiscoveryCHAPAuth, safe.Field(oldObj, func(oldObj *core.ISCSIVolumeSource) *bool { return &oldObj.DiscoveryCHAPAuth }), fldPath.Child("DiscoveryCHAPAuth"))...)

	// field core.ISCSIVolumeSource.SessionCHAPAuth
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.SessionCHAPAuth, safe.Field(oldObj, func(oldObj *core.ISCSIVolumeSource) *bool { return &oldObj.SessionCHAPAuth }), fldPath.Child("SessionCHAPAuth"))...)

	// field core.ISCSIVolumeSource.SecretRef
	errs = append(errs,
		func(obj, oldObj *core.LocalObjectReference, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.SecretRef, safe.Field(oldObj, func(oldObj *core.ISCSIVolumeSource) *core.LocalObjectReference { return oldObj.SecretRef }), fldPath.Child("SecretRef"))...)

	// field core.ISCSIVolumeSource.InitiatorName
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.InitiatorName, safe.Field(oldObj, func(oldObj *core.ISCSIVolumeSource) *string { return oldObj.InitiatorName }), fldPath.Child("InitiatorName"))...)

	return errs
}

func Validate_ImageVolumeSource(opCtx operation.Context, obj, oldObj *core.ImageVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ImageVolumeSource.Reference
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Reference, safe.Field(oldObj, func(oldObj *core.ImageVolumeSource) *string { return &oldObj.Reference }), fldPath.Child("Reference"))...)

	// field core.ImageVolumeSource.PullPolicy
	errs = append(errs,
		func(obj, oldObj *core.PullPolicy, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.PullPolicy, safe.Field(oldObj, func(oldObj *core.ImageVolumeSource) *core.PullPolicy { return &oldObj.PullPolicy }), fldPath.Child("PullPolicy"))...)

	return errs
}

func Validate_KeyToPath(opCtx operation.Context, obj, oldObj *core.KeyToPath, fldPath *field.Path) (errs field.ErrorList) {
	// field core.KeyToPath.Key has no validation
	// field core.KeyToPath.Path has no validation

	// field core.KeyToPath.Mode
	errs = append(errs,
		func(obj, oldObj *int32, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Mode, safe.Field(oldObj, func(oldObj *core.KeyToPath) *int32 { return oldObj.Mode }), fldPath.Child("Mode"))...)

	return errs
}

func Validate_Lifecycle(opCtx operation.Context, obj, oldObj *core.Lifecycle, fldPath *field.Path) (errs field.ErrorList) {
	// field core.Lifecycle.PostStart
	errs = append(errs,
		func(obj, oldObj *core.LifecycleHandler, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_LifecycleHandler(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.PostStart, safe.Field(oldObj, func(oldObj *core.Lifecycle) *core.LifecycleHandler { return oldObj.PostStart }), fldPath.Child("PostStart"))...)

	// field core.Lifecycle.PreStop
	errs = append(errs,
		func(obj, oldObj *core.LifecycleHandler, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_LifecycleHandler(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.PreStop, safe.Field(oldObj, func(oldObj *core.Lifecycle) *core.LifecycleHandler { return oldObj.PreStop }), fldPath.Child("PreStop"))...)

	return errs
}

func Validate_LifecycleHandler(opCtx operation.Context, obj, oldObj *core.LifecycleHandler, fldPath *field.Path) (errs field.ErrorList) {
	// field core.LifecycleHandler.Exec
	errs = append(errs,
		func(obj, oldObj *core.ExecAction, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_ExecAction(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.Exec, safe.Field(oldObj, func(oldObj *core.LifecycleHandler) *core.ExecAction { return oldObj.Exec }), fldPath.Child("Exec"))...)

	// field core.LifecycleHandler.HTTPGet
	errs = append(errs,
		func(obj, oldObj *core.HTTPGetAction, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_HTTPGetAction(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.HTTPGet, safe.Field(oldObj, func(oldObj *core.LifecycleHandler) *core.HTTPGetAction { return oldObj.HTTPGet }), fldPath.Child("HTTPGet"))...)

	// field core.LifecycleHandler.TCPSocket
	errs = append(errs,
		func(obj, oldObj *core.TCPSocketAction, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_TCPSocketAction(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.TCPSocket, safe.Field(oldObj, func(oldObj *core.LifecycleHandler) *core.TCPSocketAction { return oldObj.TCPSocket }), fldPath.Child("TCPSocket"))...)

	// field core.LifecycleHandler.Sleep
	errs = append(errs,
		func(obj, oldObj *core.SleepAction, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Sleep, safe.Field(oldObj, func(oldObj *core.LifecycleHandler) *core.SleepAction { return oldObj.Sleep }), fldPath.Child("Sleep"))...)

	return errs
}

func Validate_LimitRange(opCtx operation.Context, obj, oldObj *core.LimitRange, fldPath *field.Path) (errs field.ErrorList) {
	// field core.LimitRange.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.LimitRange) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.LimitRange.ObjectMeta
	errs = append(errs,
		func(obj, oldObj *v1.ObjectMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ObjectMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ObjectMeta, safe.Field(oldObj, func(oldObj *core.LimitRange) *v1.ObjectMeta { return &oldObj.ObjectMeta }), fldPath.Child("ObjectMeta"))...)

	// field core.LimitRange.Spec
	errs = append(errs,
		func(obj, oldObj *core.LimitRangeSpec, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_LimitRangeSpec(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.Spec, safe.Field(oldObj, func(oldObj *core.LimitRange) *core.LimitRangeSpec { return &oldObj.Spec }), fldPath.Child("Spec"))...)

	return errs
}

func Validate_LimitRangeItem(opCtx operation.Context, obj, oldObj *core.LimitRangeItem, fldPath *field.Path) (errs field.ErrorList) {
	// field core.LimitRangeItem.Type
	errs = append(errs,
		func(obj, oldObj *core.LimitType, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Type, safe.Field(oldObj, func(oldObj *core.LimitRangeItem) *core.LimitType { return &oldObj.Type }), fldPath.Child("Type"))...)

	// field core.LimitRangeItem.Max
	errs = append(errs,
		func(obj, oldObj core.ResourceList, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for key, val := range obj {
				errs = append(errs,
					func(obj, oldObj *resource.Quantity, fldPath *field.Path) (errs field.ErrorList) {
						// NOTE: Type resource.Quantity is in a non-included package.
						//       Any validations defined on this type are not available from here.
						return
					}(&val, safe.Lookup(oldObj, key, safe.PtrTo), fldPath.Key(string(key)))...)
			}
			return
		}(obj.Max, safe.Field(oldObj, func(oldObj *core.LimitRangeItem) core.ResourceList { return oldObj.Max }), fldPath.Child("Max"))...)

	// field core.LimitRangeItem.Min
	errs = append(errs,
		func(obj, oldObj core.ResourceList, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for key, val := range obj {
				errs = append(errs,
					func(obj, oldObj *resource.Quantity, fldPath *field.Path) (errs field.ErrorList) {
						// NOTE: Type resource.Quantity is in a non-included package.
						//       Any validations defined on this type are not available from here.
						return
					}(&val, safe.Lookup(oldObj, key, safe.PtrTo), fldPath.Key(string(key)))...)
			}
			return
		}(obj.Min, safe.Field(oldObj, func(oldObj *core.LimitRangeItem) core.ResourceList { return oldObj.Min }), fldPath.Child("Min"))...)

	// field core.LimitRangeItem.Default
	errs = append(errs,
		func(obj, oldObj core.ResourceList, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for key, val := range obj {
				errs = append(errs,
					func(obj, oldObj *resource.Quantity, fldPath *field.Path) (errs field.ErrorList) {
						// NOTE: Type resource.Quantity is in a non-included package.
						//       Any validations defined on this type are not available from here.
						return
					}(&val, safe.Lookup(oldObj, key, safe.PtrTo), fldPath.Key(string(key)))...)
			}
			return
		}(obj.Default, safe.Field(oldObj, func(oldObj *core.LimitRangeItem) core.ResourceList { return oldObj.Default }), fldPath.Child("Default"))...)

	// field core.LimitRangeItem.DefaultRequest
	errs = append(errs,
		func(obj, oldObj core.ResourceList, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for key, val := range obj {
				errs = append(errs,
					func(obj, oldObj *resource.Quantity, fldPath *field.Path) (errs field.ErrorList) {
						// NOTE: Type resource.Quantity is in a non-included package.
						//       Any validations defined on this type are not available from here.
						return
					}(&val, safe.Lookup(oldObj, key, safe.PtrTo), fldPath.Key(string(key)))...)
			}
			return
		}(obj.DefaultRequest, safe.Field(oldObj, func(oldObj *core.LimitRangeItem) core.ResourceList { return oldObj.DefaultRequest }), fldPath.Child("DefaultRequest"))...)

	// field core.LimitRangeItem.MaxLimitRequestRatio
	errs = append(errs,
		func(obj, oldObj core.ResourceList, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for key, val := range obj {
				errs = append(errs,
					func(obj, oldObj *resource.Quantity, fldPath *field.Path) (errs field.ErrorList) {
						// NOTE: Type resource.Quantity is in a non-included package.
						//       Any validations defined on this type are not available from here.
						return
					}(&val, safe.Lookup(oldObj, key, safe.PtrTo), fldPath.Key(string(key)))...)
			}
			return
		}(obj.MaxLimitRequestRatio, safe.Field(oldObj, func(oldObj *core.LimitRangeItem) core.ResourceList { return oldObj.MaxLimitRequestRatio }), fldPath.Child("MaxLimitRequestRatio"))...)

	return errs
}

func Validate_LimitRangeList(opCtx operation.Context, obj, oldObj *core.LimitRangeList, fldPath *field.Path) (errs field.ErrorList) {
	// field core.LimitRangeList.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.LimitRangeList) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.LimitRangeList.ListMeta
	errs = append(errs,
		func(obj, oldObj *v1.ListMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ListMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ListMeta, safe.Field(oldObj, func(oldObj *core.LimitRangeList) *v1.ListMeta { return &oldObj.ListMeta }), fldPath.Child("ListMeta"))...)

	// field core.LimitRangeList.Items
	errs = append(errs,
		func(obj, oldObj []core.LimitRange, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.LimitRange, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_LimitRange(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Items, safe.Field(oldObj, func(oldObj *core.LimitRangeList) []core.LimitRange { return oldObj.Items }), fldPath.Child("Items"))...)

	return errs
}

func Validate_LimitRangeSpec(opCtx operation.Context, obj, oldObj *core.LimitRangeSpec, fldPath *field.Path) (errs field.ErrorList) {
	// field core.LimitRangeSpec.Limits
	errs = append(errs,
		func(obj, oldObj []core.LimitRangeItem, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.LimitRangeItem, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_LimitRangeItem(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Limits, safe.Field(oldObj, func(oldObj *core.LimitRangeSpec) []core.LimitRangeItem { return oldObj.Limits }), fldPath.Child("Limits"))...)

	return errs
}

func Validate_List(opCtx operation.Context, obj, oldObj *core.List, fldPath *field.Path) (errs field.ErrorList) {
	// field core.List.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.List) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.List.ListMeta
	errs = append(errs,
		func(obj, oldObj *v1.ListMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ListMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ListMeta, safe.Field(oldObj, func(oldObj *core.List) *v1.ListMeta { return &oldObj.ListMeta }), fldPath.Child("ListMeta"))...)

	// field core.List.Items
	errs = append(errs,
		func(obj, oldObj []runtime.Object, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj runtime.Object, fldPath *field.Path) (errs field.ErrorList) {
						// NOTE: Type runtime.Object is in a non-included package.
						//       Any validations defined on this type are not available from here.
						return
					}(val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Items, safe.Field(oldObj, func(oldObj *core.List) []runtime.Object { return oldObj.Items }), fldPath.Child("Items"))...)

	return errs
}

func Validate_LoadBalancerIngress(opCtx operation.Context, obj, oldObj *core.LoadBalancerIngress, fldPath *field.Path) (errs field.ErrorList) {
	// field core.LoadBalancerIngress.IP
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.IP, safe.Field(oldObj, func(oldObj *core.LoadBalancerIngress) *string { return &oldObj.IP }), fldPath.Child("IP"))...)

	// field core.LoadBalancerIngress.Hostname
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Hostname, safe.Field(oldObj, func(oldObj *core.LoadBalancerIngress) *string { return &oldObj.Hostname }), fldPath.Child("Hostname"))...)

	// field core.LoadBalancerIngress.IPMode
	errs = append(errs,
		func(obj, oldObj *core.LoadBalancerIPMode, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.IPMode, safe.Field(oldObj, func(oldObj *core.LoadBalancerIngress) *core.LoadBalancerIPMode { return oldObj.IPMode }), fldPath.Child("IPMode"))...)

	// field core.LoadBalancerIngress.Ports
	errs = append(errs,
		func(obj, oldObj []core.PortStatus, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.PortStatus, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_PortStatus(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Ports, safe.Field(oldObj, func(oldObj *core.LoadBalancerIngress) []core.PortStatus { return oldObj.Ports }), fldPath.Child("Ports"))...)

	return errs
}

func Validate_LoadBalancerStatus(opCtx operation.Context, obj, oldObj *core.LoadBalancerStatus, fldPath *field.Path) (errs field.ErrorList) {
	// field core.LoadBalancerStatus.Ingress
	errs = append(errs,
		func(obj, oldObj []core.LoadBalancerIngress, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.LoadBalancerIngress, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_LoadBalancerIngress(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Ingress, safe.Field(oldObj, func(oldObj *core.LoadBalancerStatus) []core.LoadBalancerIngress { return oldObj.Ingress }), fldPath.Child("Ingress"))...)

	return errs
}

func Validate_LocalVolumeSource(opCtx operation.Context, obj, oldObj *core.LocalVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.LocalVolumeSource.Path has no validation

	// field core.LocalVolumeSource.FSType
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.FSType, safe.Field(oldObj, func(oldObj *core.LocalVolumeSource) *string { return oldObj.FSType }), fldPath.Child("FSType"))...)

	return errs
}

func Validate_NFSVolumeSource(opCtx operation.Context, obj, oldObj *core.NFSVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.NFSVolumeSource.Server has no validation
	// field core.NFSVolumeSource.Path has no validation

	// field core.NFSVolumeSource.ReadOnly
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ReadOnly, safe.Field(oldObj, func(oldObj *core.NFSVolumeSource) *bool { return &oldObj.ReadOnly }), fldPath.Child("ReadOnly"))...)

	return errs
}

func Validate_Namespace(opCtx operation.Context, obj, oldObj *core.Namespace, fldPath *field.Path) (errs field.ErrorList) {
	// field core.Namespace.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.Namespace) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.Namespace.ObjectMeta
	errs = append(errs,
		func(obj, oldObj *v1.ObjectMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ObjectMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ObjectMeta, safe.Field(oldObj, func(oldObj *core.Namespace) *v1.ObjectMeta { return &oldObj.ObjectMeta }), fldPath.Child("ObjectMeta"))...)

	// field core.Namespace.Spec
	errs = append(errs,
		func(obj, oldObj *core.NamespaceSpec, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Spec, safe.Field(oldObj, func(oldObj *core.Namespace) *core.NamespaceSpec { return &oldObj.Spec }), fldPath.Child("Spec"))...)

	// field core.Namespace.Status
	errs = append(errs,
		func(obj, oldObj *core.NamespaceStatus, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_NamespaceStatus(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.Status, safe.Field(oldObj, func(oldObj *core.Namespace) *core.NamespaceStatus { return &oldObj.Status }), fldPath.Child("Status"))...)

	return errs
}

func Validate_NamespaceCondition(opCtx operation.Context, obj, oldObj *core.NamespaceCondition, fldPath *field.Path) (errs field.ErrorList) {
	// field core.NamespaceCondition.Type has no validation
	// field core.NamespaceCondition.Status has no validation

	// field core.NamespaceCondition.LastTransitionTime
	errs = append(errs,
		func(obj, oldObj *v1.Time, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.LastTransitionTime, safe.Field(oldObj, func(oldObj *core.NamespaceCondition) *v1.Time { return &oldObj.LastTransitionTime }), fldPath.Child("LastTransitionTime"))...)

	// field core.NamespaceCondition.Reason
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Reason, safe.Field(oldObj, func(oldObj *core.NamespaceCondition) *string { return &oldObj.Reason }), fldPath.Child("Reason"))...)

	// field core.NamespaceCondition.Message
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Message, safe.Field(oldObj, func(oldObj *core.NamespaceCondition) *string { return &oldObj.Message }), fldPath.Child("Message"))...)

	return errs
}

func Validate_NamespaceList(opCtx operation.Context, obj, oldObj *core.NamespaceList, fldPath *field.Path) (errs field.ErrorList) {
	// field core.NamespaceList.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.NamespaceList) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.NamespaceList.ListMeta
	errs = append(errs,
		func(obj, oldObj *v1.ListMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ListMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ListMeta, safe.Field(oldObj, func(oldObj *core.NamespaceList) *v1.ListMeta { return &oldObj.ListMeta }), fldPath.Child("ListMeta"))...)

	// field core.NamespaceList.Items
	errs = append(errs,
		func(obj, oldObj []core.Namespace, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.Namespace, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_Namespace(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Items, safe.Field(oldObj, func(oldObj *core.NamespaceList) []core.Namespace { return oldObj.Items }), fldPath.Child("Items"))...)

	return errs
}

func Validate_NamespaceStatus(opCtx operation.Context, obj, oldObj *core.NamespaceStatus, fldPath *field.Path) (errs field.ErrorList) {
	// field core.NamespaceStatus.Phase
	errs = append(errs,
		func(obj, oldObj *core.NamespacePhase, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Phase, safe.Field(oldObj, func(oldObj *core.NamespaceStatus) *core.NamespacePhase { return &oldObj.Phase }), fldPath.Child("Phase"))...)

	// field core.NamespaceStatus.Conditions
	errs = append(errs,
		func(obj, oldObj []core.NamespaceCondition, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.NamespaceCondition, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_NamespaceCondition(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Conditions, safe.Field(oldObj, func(oldObj *core.NamespaceStatus) []core.NamespaceCondition { return oldObj.Conditions }), fldPath.Child("Conditions"))...)

	return errs
}

func Validate_Node(opCtx operation.Context, obj, oldObj *core.Node, fldPath *field.Path) (errs field.ErrorList) {
	// field core.Node.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.Node) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.Node.ObjectMeta
	errs = append(errs,
		func(obj, oldObj *v1.ObjectMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ObjectMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ObjectMeta, safe.Field(oldObj, func(oldObj *core.Node) *v1.ObjectMeta { return &oldObj.ObjectMeta }), fldPath.Child("ObjectMeta"))...)

	// field core.Node.Spec
	errs = append(errs,
		func(obj, oldObj *core.NodeSpec, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_NodeSpec(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.Spec, safe.Field(oldObj, func(oldObj *core.Node) *core.NodeSpec { return &oldObj.Spec }), fldPath.Child("Spec"))...)

	// field core.Node.Status
	errs = append(errs,
		func(obj, oldObj *core.NodeStatus, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_NodeStatus(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.Status, safe.Field(oldObj, func(oldObj *core.Node) *core.NodeStatus { return &oldObj.Status }), fldPath.Child("Status"))...)

	return errs
}

func Validate_NodeAffinity(opCtx operation.Context, obj, oldObj *core.NodeAffinity, fldPath *field.Path) (errs field.ErrorList) {
	// field core.NodeAffinity.RequiredDuringSchedulingIgnoredDuringExecution
	errs = append(errs,
		func(obj, oldObj *core.NodeSelector, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_NodeSelector(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.RequiredDuringSchedulingIgnoredDuringExecution, safe.Field(oldObj, func(oldObj *core.NodeAffinity) *core.NodeSelector {
			return oldObj.RequiredDuringSchedulingIgnoredDuringExecution
		}), fldPath.Child("RequiredDuringSchedulingIgnoredDuringExecution"))...)

	// field core.NodeAffinity.PreferredDuringSchedulingIgnoredDuringExecution
	errs = append(errs,
		func(obj, oldObj []core.PreferredSchedulingTerm, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.PreferredSchedulingTerm, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_PreferredSchedulingTerm(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.PreferredDuringSchedulingIgnoredDuringExecution, safe.Field(oldObj, func(oldObj *core.NodeAffinity) []core.PreferredSchedulingTerm {
			return oldObj.PreferredDuringSchedulingIgnoredDuringExecution
		}), fldPath.Child("PreferredDuringSchedulingIgnoredDuringExecution"))...)

	return errs
}

func Validate_NodeCondition(opCtx operation.Context, obj, oldObj *core.NodeCondition, fldPath *field.Path) (errs field.ErrorList) {
	// field core.NodeCondition.Type has no validation
	// field core.NodeCondition.Status has no validation

	// field core.NodeCondition.LastHeartbeatTime
	errs = append(errs,
		func(obj, oldObj *v1.Time, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.LastHeartbeatTime, safe.Field(oldObj, func(oldObj *core.NodeCondition) *v1.Time { return &oldObj.LastHeartbeatTime }), fldPath.Child("LastHeartbeatTime"))...)

	// field core.NodeCondition.LastTransitionTime
	errs = append(errs,
		func(obj, oldObj *v1.Time, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.LastTransitionTime, safe.Field(oldObj, func(oldObj *core.NodeCondition) *v1.Time { return &oldObj.LastTransitionTime }), fldPath.Child("LastTransitionTime"))...)

	// field core.NodeCondition.Reason
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Reason, safe.Field(oldObj, func(oldObj *core.NodeCondition) *string { return &oldObj.Reason }), fldPath.Child("Reason"))...)

	// field core.NodeCondition.Message
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Message, safe.Field(oldObj, func(oldObj *core.NodeCondition) *string { return &oldObj.Message }), fldPath.Child("Message"))...)

	return errs
}

func Validate_NodeConfigSource(opCtx operation.Context, obj, oldObj *core.NodeConfigSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.NodeConfigSource.ConfigMap
	errs = append(errs,
		func(obj, oldObj *core.ConfigMapNodeConfigSource, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, Validate_ConfigMapNodeConfigSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.ConfigMap, safe.Field(oldObj, func(oldObj *core.NodeConfigSource) *core.ConfigMapNodeConfigSource { return oldObj.ConfigMap }), fldPath.Child("ConfigMap"))...)

	return errs
}

func Validate_NodeConfigStatus(opCtx operation.Context, obj, oldObj *core.NodeConfigStatus, fldPath *field.Path) (errs field.ErrorList) {
	// field core.NodeConfigStatus.Assigned
	errs = append(errs,
		func(obj, oldObj *core.NodeConfigSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_NodeConfigSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.Assigned, safe.Field(oldObj, func(oldObj *core.NodeConfigStatus) *core.NodeConfigSource { return oldObj.Assigned }), fldPath.Child("Assigned"))...)

	// field core.NodeConfigStatus.Active
	errs = append(errs,
		func(obj, oldObj *core.NodeConfigSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_NodeConfigSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.Active, safe.Field(oldObj, func(oldObj *core.NodeConfigStatus) *core.NodeConfigSource { return oldObj.Active }), fldPath.Child("Active"))...)

	// field core.NodeConfigStatus.LastKnownGood
	errs = append(errs,
		func(obj, oldObj *core.NodeConfigSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_NodeConfigSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.LastKnownGood, safe.Field(oldObj, func(oldObj *core.NodeConfigStatus) *core.NodeConfigSource { return oldObj.LastKnownGood }), fldPath.Child("LastKnownGood"))...)

	// field core.NodeConfigStatus.Error
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Error, safe.Field(oldObj, func(oldObj *core.NodeConfigStatus) *string { return &oldObj.Error }), fldPath.Child("Error"))...)

	return errs
}

func Validate_NodeDaemonEndpoints(opCtx operation.Context, obj, oldObj *core.NodeDaemonEndpoints, fldPath *field.Path) (errs field.ErrorList) {
	// field core.NodeDaemonEndpoints.KubeletEndpoint
	errs = append(errs,
		func(obj, oldObj *core.DaemonEndpoint, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.KubeletEndpoint, safe.Field(oldObj, func(oldObj *core.NodeDaemonEndpoints) *core.DaemonEndpoint { return &oldObj.KubeletEndpoint }), fldPath.Child("KubeletEndpoint"))...)

	return errs
}

func Validate_NodeFeatures(opCtx operation.Context, obj, oldObj *core.NodeFeatures, fldPath *field.Path) (errs field.ErrorList) {
	// field core.NodeFeatures.SupplementalGroupsPolicy
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.SupplementalGroupsPolicy, safe.Field(oldObj, func(oldObj *core.NodeFeatures) *bool { return oldObj.SupplementalGroupsPolicy }), fldPath.Child("SupplementalGroupsPolicy"))...)

	return errs
}

func Validate_NodeList(opCtx operation.Context, obj, oldObj *core.NodeList, fldPath *field.Path) (errs field.ErrorList) {
	// field core.NodeList.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.NodeList) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.NodeList.ListMeta
	errs = append(errs,
		func(obj, oldObj *v1.ListMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ListMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ListMeta, safe.Field(oldObj, func(oldObj *core.NodeList) *v1.ListMeta { return &oldObj.ListMeta }), fldPath.Child("ListMeta"))...)

	// field core.NodeList.Items
	errs = append(errs,
		func(obj, oldObj []core.Node, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.Node, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_Node(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Items, safe.Field(oldObj, func(oldObj *core.NodeList) []core.Node { return oldObj.Items }), fldPath.Child("Items"))...)

	return errs
}

func Validate_NodeProxyOptions(opCtx operation.Context, obj, oldObj *core.NodeProxyOptions, fldPath *field.Path) (errs field.ErrorList) {
	// field core.NodeProxyOptions.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.NodeProxyOptions) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.NodeProxyOptions.Path has no validation
	return errs
}

func Validate_NodeRuntimeHandler(opCtx operation.Context, obj, oldObj *core.NodeRuntimeHandler, fldPath *field.Path) (errs field.ErrorList) {
	// field core.NodeRuntimeHandler.Name
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Name, safe.Field(oldObj, func(oldObj *core.NodeRuntimeHandler) *string { return &oldObj.Name }), fldPath.Child("Name"))...)

	// field core.NodeRuntimeHandler.Features
	errs = append(errs,
		func(obj, oldObj *core.NodeRuntimeHandlerFeatures, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_NodeRuntimeHandlerFeatures(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.Features, safe.Field(oldObj, func(oldObj *core.NodeRuntimeHandler) *core.NodeRuntimeHandlerFeatures { return oldObj.Features }), fldPath.Child("Features"))...)

	return errs
}

func Validate_NodeRuntimeHandlerFeatures(opCtx operation.Context, obj, oldObj *core.NodeRuntimeHandlerFeatures, fldPath *field.Path) (errs field.ErrorList) {
	// field core.NodeRuntimeHandlerFeatures.RecursiveReadOnlyMounts
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.RecursiveReadOnlyMounts, safe.Field(oldObj, func(oldObj *core.NodeRuntimeHandlerFeatures) *bool { return oldObj.RecursiveReadOnlyMounts }), fldPath.Child("RecursiveReadOnlyMounts"))...)

	// field core.NodeRuntimeHandlerFeatures.UserNamespaces
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.UserNamespaces, safe.Field(oldObj, func(oldObj *core.NodeRuntimeHandlerFeatures) *bool { return oldObj.UserNamespaces }), fldPath.Child("UserNamespaces"))...)

	return errs
}

func Validate_NodeSelector(opCtx operation.Context, obj, oldObj *core.NodeSelector, fldPath *field.Path) (errs field.ErrorList) {
	// field core.NodeSelector.NodeSelectorTerms
	errs = append(errs,
		func(obj, oldObj []core.NodeSelectorTerm, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.NodeSelectorTerm, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_NodeSelectorTerm(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.NodeSelectorTerms, safe.Field(oldObj, func(oldObj *core.NodeSelector) []core.NodeSelectorTerm { return oldObj.NodeSelectorTerms }), fldPath.Child("NodeSelectorTerms"))...)

	return errs
}

func Validate_NodeSelectorRequirement(opCtx operation.Context, obj, oldObj *core.NodeSelectorRequirement, fldPath *field.Path) (errs field.ErrorList) {
	// field core.NodeSelectorRequirement.Key has no validation
	// field core.NodeSelectorRequirement.Operator has no validation

	// field core.NodeSelectorRequirement.Values
	errs = append(errs,
		func(obj, oldObj []string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Values, safe.Field(oldObj, func(oldObj *core.NodeSelectorRequirement) []string { return oldObj.Values }), fldPath.Child("Values"))...)

	return errs
}

func Validate_NodeSelectorTerm(opCtx operation.Context, obj, oldObj *core.NodeSelectorTerm, fldPath *field.Path) (errs field.ErrorList) {
	// field core.NodeSelectorTerm.MatchExpressions
	errs = append(errs,
		func(obj, oldObj []core.NodeSelectorRequirement, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.NodeSelectorRequirement, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_NodeSelectorRequirement(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.MatchExpressions, safe.Field(oldObj, func(oldObj *core.NodeSelectorTerm) []core.NodeSelectorRequirement { return oldObj.MatchExpressions }), fldPath.Child("MatchExpressions"))...)

	// field core.NodeSelectorTerm.MatchFields
	errs = append(errs,
		func(obj, oldObj []core.NodeSelectorRequirement, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.NodeSelectorRequirement, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_NodeSelectorRequirement(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.MatchFields, safe.Field(oldObj, func(oldObj *core.NodeSelectorTerm) []core.NodeSelectorRequirement { return oldObj.MatchFields }), fldPath.Child("MatchFields"))...)

	return errs
}

func Validate_NodeSpec(opCtx operation.Context, obj, oldObj *core.NodeSpec, fldPath *field.Path) (errs field.ErrorList) {
	// field core.NodeSpec.PodCIDRs
	errs = append(errs,
		func(obj, oldObj []string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.PodCIDRs, safe.Field(oldObj, func(oldObj *core.NodeSpec) []string { return oldObj.PodCIDRs }), fldPath.Child("PodCIDRs"))...)

	// field core.NodeSpec.ProviderID
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ProviderID, safe.Field(oldObj, func(oldObj *core.NodeSpec) *string { return &oldObj.ProviderID }), fldPath.Child("ProviderID"))...)

	// field core.NodeSpec.Unschedulable
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Unschedulable, safe.Field(oldObj, func(oldObj *core.NodeSpec) *bool { return &oldObj.Unschedulable }), fldPath.Child("Unschedulable"))...)

	// field core.NodeSpec.Taints
	errs = append(errs,
		func(obj, oldObj []core.Taint, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.Taint, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_Taint(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Taints, safe.Field(oldObj, func(oldObj *core.NodeSpec) []core.Taint { return oldObj.Taints }), fldPath.Child("Taints"))...)

	// field core.NodeSpec.ConfigSource
	errs = append(errs,
		func(obj, oldObj *core.NodeConfigSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_NodeConfigSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.ConfigSource, safe.Field(oldObj, func(oldObj *core.NodeSpec) *core.NodeConfigSource { return oldObj.ConfigSource }), fldPath.Child("ConfigSource"))...)

	// field core.NodeSpec.DoNotUseExternalID
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.DoNotUseExternalID, safe.Field(oldObj, func(oldObj *core.NodeSpec) *string { return &oldObj.DoNotUseExternalID }), fldPath.Child("DoNotUseExternalID"))...)

	return errs
}

func Validate_NodeStatus(opCtx operation.Context, obj, oldObj *core.NodeStatus, fldPath *field.Path) (errs field.ErrorList) {
	// field core.NodeStatus.Capacity
	errs = append(errs,
		func(obj, oldObj core.ResourceList, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for key, val := range obj {
				errs = append(errs,
					func(obj, oldObj *resource.Quantity, fldPath *field.Path) (errs field.ErrorList) {
						// NOTE: Type resource.Quantity is in a non-included package.
						//       Any validations defined on this type are not available from here.
						return
					}(&val, safe.Lookup(oldObj, key, safe.PtrTo), fldPath.Key(string(key)))...)
			}
			return
		}(obj.Capacity, safe.Field(oldObj, func(oldObj *core.NodeStatus) core.ResourceList { return oldObj.Capacity }), fldPath.Child("Capacity"))...)

	// field core.NodeStatus.Allocatable
	errs = append(errs,
		func(obj, oldObj core.ResourceList, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for key, val := range obj {
				errs = append(errs,
					func(obj, oldObj *resource.Quantity, fldPath *field.Path) (errs field.ErrorList) {
						// NOTE: Type resource.Quantity is in a non-included package.
						//       Any validations defined on this type are not available from here.
						return
					}(&val, safe.Lookup(oldObj, key, safe.PtrTo), fldPath.Key(string(key)))...)
			}
			return
		}(obj.Allocatable, safe.Field(oldObj, func(oldObj *core.NodeStatus) core.ResourceList { return oldObj.Allocatable }), fldPath.Child("Allocatable"))...)

	// field core.NodeStatus.Phase
	errs = append(errs,
		func(obj, oldObj *core.NodePhase, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Phase, safe.Field(oldObj, func(oldObj *core.NodeStatus) *core.NodePhase { return &oldObj.Phase }), fldPath.Child("Phase"))...)

	// field core.NodeStatus.Conditions
	errs = append(errs,
		func(obj, oldObj []core.NodeCondition, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.NodeCondition, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_NodeCondition(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Conditions, safe.Field(oldObj, func(oldObj *core.NodeStatus) []core.NodeCondition { return oldObj.Conditions }), fldPath.Child("Conditions"))...)

	// field core.NodeStatus.Addresses
	errs = append(errs,
		func(obj, oldObj []core.NodeAddress, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Addresses, safe.Field(oldObj, func(oldObj *core.NodeStatus) []core.NodeAddress { return oldObj.Addresses }), fldPath.Child("Addresses"))...)

	// field core.NodeStatus.DaemonEndpoints
	errs = append(errs,
		func(obj, oldObj *core.NodeDaemonEndpoints, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_NodeDaemonEndpoints(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.DaemonEndpoints, safe.Field(oldObj, func(oldObj *core.NodeStatus) *core.NodeDaemonEndpoints { return &oldObj.DaemonEndpoints }), fldPath.Child("DaemonEndpoints"))...)

	// field core.NodeStatus.NodeInfo
	errs = append(errs,
		func(obj, oldObj *core.NodeSystemInfo, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.NodeInfo, safe.Field(oldObj, func(oldObj *core.NodeStatus) *core.NodeSystemInfo { return &oldObj.NodeInfo }), fldPath.Child("NodeInfo"))...)

	// field core.NodeStatus.Images
	errs = append(errs,
		func(obj, oldObj []core.ContainerImage, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.ContainerImage, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_ContainerImage(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Images, safe.Field(oldObj, func(oldObj *core.NodeStatus) []core.ContainerImage { return oldObj.Images }), fldPath.Child("Images"))...)

	// field core.NodeStatus.VolumesInUse
	errs = append(errs,
		func(obj, oldObj []core.UniqueVolumeName, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.VolumesInUse, safe.Field(oldObj, func(oldObj *core.NodeStatus) []core.UniqueVolumeName { return oldObj.VolumesInUse }), fldPath.Child("VolumesInUse"))...)

	// field core.NodeStatus.VolumesAttached
	errs = append(errs,
		func(obj, oldObj []core.AttachedVolume, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.VolumesAttached, safe.Field(oldObj, func(oldObj *core.NodeStatus) []core.AttachedVolume { return oldObj.VolumesAttached }), fldPath.Child("VolumesAttached"))...)

	// field core.NodeStatus.Config
	errs = append(errs,
		func(obj, oldObj *core.NodeConfigStatus, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_NodeConfigStatus(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.Config, safe.Field(oldObj, func(oldObj *core.NodeStatus) *core.NodeConfigStatus { return oldObj.Config }), fldPath.Child("Config"))...)

	// field core.NodeStatus.RuntimeHandlers
	errs = append(errs,
		func(obj, oldObj []core.NodeRuntimeHandler, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.NodeRuntimeHandler, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_NodeRuntimeHandler(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.RuntimeHandlers, safe.Field(oldObj, func(oldObj *core.NodeStatus) []core.NodeRuntimeHandler { return oldObj.RuntimeHandlers }), fldPath.Child("RuntimeHandlers"))...)

	// field core.NodeStatus.Features
	errs = append(errs,
		func(obj, oldObj *core.NodeFeatures, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_NodeFeatures(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.Features, safe.Field(oldObj, func(oldObj *core.NodeStatus) *core.NodeFeatures { return oldObj.Features }), fldPath.Child("Features"))...)

	return errs
}

func Validate_ObjectReference(opCtx operation.Context, obj, oldObj *core.ObjectReference, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ObjectReference.Kind
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Kind, safe.Field(oldObj, func(oldObj *core.ObjectReference) *string { return &oldObj.Kind }), fldPath.Child("Kind"))...)

	// field core.ObjectReference.Namespace
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Namespace, safe.Field(oldObj, func(oldObj *core.ObjectReference) *string { return &oldObj.Namespace }), fldPath.Child("Namespace"))...)

	// field core.ObjectReference.Name
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Name, safe.Field(oldObj, func(oldObj *core.ObjectReference) *string { return &oldObj.Name }), fldPath.Child("Name"))...)

	// field core.ObjectReference.UID
	errs = append(errs,
		func(obj, oldObj *types.UID, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			// NOTE: Type types.UID is in a non-included package.
			//       Any validations defined on this type are not available from here.
			return
		}(&obj.UID, safe.Field(oldObj, func(oldObj *core.ObjectReference) *types.UID { return &oldObj.UID }), fldPath.Child("UID"))...)

	// field core.ObjectReference.APIVersion
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.APIVersion, safe.Field(oldObj, func(oldObj *core.ObjectReference) *string { return &oldObj.APIVersion }), fldPath.Child("APIVersion"))...)

	// field core.ObjectReference.ResourceVersion
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ResourceVersion, safe.Field(oldObj, func(oldObj *core.ObjectReference) *string { return &oldObj.ResourceVersion }), fldPath.Child("ResourceVersion"))...)

	// field core.ObjectReference.FieldPath
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.FieldPath, safe.Field(oldObj, func(oldObj *core.ObjectReference) *string { return &oldObj.FieldPath }), fldPath.Child("FieldPath"))...)

	return errs
}

func Validate_PersistentVolume(opCtx operation.Context, obj, oldObj *core.PersistentVolume, fldPath *field.Path) (errs field.ErrorList) {
	// field core.PersistentVolume.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.PersistentVolume) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.PersistentVolume.ObjectMeta
	errs = append(errs,
		func(obj, oldObj *v1.ObjectMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ObjectMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ObjectMeta, safe.Field(oldObj, func(oldObj *core.PersistentVolume) *v1.ObjectMeta { return &oldObj.ObjectMeta }), fldPath.Child("ObjectMeta"))...)

	// field core.PersistentVolume.Spec
	errs = append(errs,
		func(obj, oldObj *core.PersistentVolumeSpec, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_PersistentVolumeSpec(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.Spec, safe.Field(oldObj, func(oldObj *core.PersistentVolume) *core.PersistentVolumeSpec { return &oldObj.Spec }), fldPath.Child("Spec"))...)

	// field core.PersistentVolume.Status
	errs = append(errs,
		func(obj, oldObj *core.PersistentVolumeStatus, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_PersistentVolumeStatus(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.Status, safe.Field(oldObj, func(oldObj *core.PersistentVolume) *core.PersistentVolumeStatus { return &oldObj.Status }), fldPath.Child("Status"))...)

	return errs
}

func Validate_PersistentVolumeClaim(opCtx operation.Context, obj, oldObj *core.PersistentVolumeClaim, fldPath *field.Path) (errs field.ErrorList) {
	// field core.PersistentVolumeClaim.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.PersistentVolumeClaim) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.PersistentVolumeClaim.ObjectMeta
	errs = append(errs,
		func(obj, oldObj *v1.ObjectMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ObjectMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ObjectMeta, safe.Field(oldObj, func(oldObj *core.PersistentVolumeClaim) *v1.ObjectMeta { return &oldObj.ObjectMeta }), fldPath.Child("ObjectMeta"))...)

	// field core.PersistentVolumeClaim.Spec
	errs = append(errs,
		func(obj, oldObj *core.PersistentVolumeClaimSpec, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_PersistentVolumeClaimSpec(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.Spec, safe.Field(oldObj, func(oldObj *core.PersistentVolumeClaim) *core.PersistentVolumeClaimSpec { return &oldObj.Spec }), fldPath.Child("Spec"))...)

	// field core.PersistentVolumeClaim.Status
	errs = append(errs,
		func(obj, oldObj *core.PersistentVolumeClaimStatus, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_PersistentVolumeClaimStatus(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.Status, safe.Field(oldObj, func(oldObj *core.PersistentVolumeClaim) *core.PersistentVolumeClaimStatus { return &oldObj.Status }), fldPath.Child("Status"))...)

	return errs
}

func Validate_PersistentVolumeClaimCondition(opCtx operation.Context, obj, oldObj *core.PersistentVolumeClaimCondition, fldPath *field.Path) (errs field.ErrorList) {
	// field core.PersistentVolumeClaimCondition.Type has no validation
	// field core.PersistentVolumeClaimCondition.Status has no validation

	// field core.PersistentVolumeClaimCondition.LastProbeTime
	errs = append(errs,
		func(obj, oldObj *v1.Time, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.LastProbeTime, safe.Field(oldObj, func(oldObj *core.PersistentVolumeClaimCondition) *v1.Time { return &oldObj.LastProbeTime }), fldPath.Child("LastProbeTime"))...)

	// field core.PersistentVolumeClaimCondition.LastTransitionTime
	errs = append(errs,
		func(obj, oldObj *v1.Time, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.LastTransitionTime, safe.Field(oldObj, func(oldObj *core.PersistentVolumeClaimCondition) *v1.Time { return &oldObj.LastTransitionTime }), fldPath.Child("LastTransitionTime"))...)

	// field core.PersistentVolumeClaimCondition.Reason
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Reason, safe.Field(oldObj, func(oldObj *core.PersistentVolumeClaimCondition) *string { return &oldObj.Reason }), fldPath.Child("Reason"))...)

	// field core.PersistentVolumeClaimCondition.Message
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Message, safe.Field(oldObj, func(oldObj *core.PersistentVolumeClaimCondition) *string { return &oldObj.Message }), fldPath.Child("Message"))...)

	return errs
}

func Validate_PersistentVolumeClaimList(opCtx operation.Context, obj, oldObj *core.PersistentVolumeClaimList, fldPath *field.Path) (errs field.ErrorList) {
	// field core.PersistentVolumeClaimList.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.PersistentVolumeClaimList) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.PersistentVolumeClaimList.ListMeta
	errs = append(errs,
		func(obj, oldObj *v1.ListMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ListMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ListMeta, safe.Field(oldObj, func(oldObj *core.PersistentVolumeClaimList) *v1.ListMeta { return &oldObj.ListMeta }), fldPath.Child("ListMeta"))...)

	// field core.PersistentVolumeClaimList.Items
	errs = append(errs,
		func(obj, oldObj []core.PersistentVolumeClaim, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.PersistentVolumeClaim, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_PersistentVolumeClaim(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Items, safe.Field(oldObj, func(oldObj *core.PersistentVolumeClaimList) []core.PersistentVolumeClaim { return oldObj.Items }), fldPath.Child("Items"))...)

	return errs
}

func Validate_PersistentVolumeClaimSpec(opCtx operation.Context, obj, oldObj *core.PersistentVolumeClaimSpec, fldPath *field.Path) (errs field.ErrorList) {
	// field core.PersistentVolumeClaimSpec.AccessModes
	errs = append(errs,
		func(obj, oldObj []core.PersistentVolumeAccessMode, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.AccessModes, safe.Field(oldObj, func(oldObj *core.PersistentVolumeClaimSpec) []core.PersistentVolumeAccessMode {
			return oldObj.AccessModes
		}), fldPath.Child("AccessModes"))...)

	// field core.PersistentVolumeClaimSpec.Selector
	errs = append(errs,
		func(obj, oldObj *v1.LabelSelector, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_LabelSelector(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.Selector, safe.Field(oldObj, func(oldObj *core.PersistentVolumeClaimSpec) *v1.LabelSelector { return oldObj.Selector }), fldPath.Child("Selector"))...)

	// field core.PersistentVolumeClaimSpec.Resources
	errs = append(errs,
		func(obj, oldObj *core.VolumeResourceRequirements, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_VolumeResourceRequirements(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.Resources, safe.Field(oldObj, func(oldObj *core.PersistentVolumeClaimSpec) *core.VolumeResourceRequirements {
			return &oldObj.Resources
		}), fldPath.Child("Resources"))...)

	// field core.PersistentVolumeClaimSpec.VolumeName
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.VolumeName, safe.Field(oldObj, func(oldObj *core.PersistentVolumeClaimSpec) *string { return &oldObj.VolumeName }), fldPath.Child("VolumeName"))...)

	// field core.PersistentVolumeClaimSpec.StorageClassName
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.StorageClassName, safe.Field(oldObj, func(oldObj *core.PersistentVolumeClaimSpec) *string { return oldObj.StorageClassName }), fldPath.Child("StorageClassName"))...)

	// field core.PersistentVolumeClaimSpec.VolumeMode
	errs = append(errs,
		func(obj, oldObj *core.PersistentVolumeMode, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.VolumeMode, safe.Field(oldObj, func(oldObj *core.PersistentVolumeClaimSpec) *core.PersistentVolumeMode { return oldObj.VolumeMode }), fldPath.Child("VolumeMode"))...)

	// field core.PersistentVolumeClaimSpec.DataSource
	errs = append(errs,
		func(obj, oldObj *core.TypedLocalObjectReference, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_TypedLocalObjectReference(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.DataSource, safe.Field(oldObj, func(oldObj *core.PersistentVolumeClaimSpec) *core.TypedLocalObjectReference { return oldObj.DataSource }), fldPath.Child("DataSource"))...)

	// field core.PersistentVolumeClaimSpec.DataSourceRef
	errs = append(errs,
		func(obj, oldObj *core.TypedObjectReference, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_TypedObjectReference(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.DataSourceRef, safe.Field(oldObj, func(oldObj *core.PersistentVolumeClaimSpec) *core.TypedObjectReference { return oldObj.DataSourceRef }), fldPath.Child("DataSourceRef"))...)

	// field core.PersistentVolumeClaimSpec.VolumeAttributesClassName
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.VolumeAttributesClassName, safe.Field(oldObj, func(oldObj *core.PersistentVolumeClaimSpec) *string { return oldObj.VolumeAttributesClassName }), fldPath.Child("VolumeAttributesClassName"))...)

	return errs
}

func Validate_PersistentVolumeClaimStatus(opCtx operation.Context, obj, oldObj *core.PersistentVolumeClaimStatus, fldPath *field.Path) (errs field.ErrorList) {
	// field core.PersistentVolumeClaimStatus.Phase
	errs = append(errs,
		func(obj, oldObj *core.PersistentVolumeClaimPhase, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Phase, safe.Field(oldObj, func(oldObj *core.PersistentVolumeClaimStatus) *core.PersistentVolumeClaimPhase { return &oldObj.Phase }), fldPath.Child("Phase"))...)

	// field core.PersistentVolumeClaimStatus.AccessModes
	errs = append(errs,
		func(obj, oldObj []core.PersistentVolumeAccessMode, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.AccessModes, safe.Field(oldObj, func(oldObj *core.PersistentVolumeClaimStatus) []core.PersistentVolumeAccessMode {
			return oldObj.AccessModes
		}), fldPath.Child("AccessModes"))...)

	// field core.PersistentVolumeClaimStatus.Capacity
	errs = append(errs,
		func(obj, oldObj core.ResourceList, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for key, val := range obj {
				errs = append(errs,
					func(obj, oldObj *resource.Quantity, fldPath *field.Path) (errs field.ErrorList) {
						// NOTE: Type resource.Quantity is in a non-included package.
						//       Any validations defined on this type are not available from here.
						return
					}(&val, safe.Lookup(oldObj, key, safe.PtrTo), fldPath.Key(string(key)))...)
			}
			return
		}(obj.Capacity, safe.Field(oldObj, func(oldObj *core.PersistentVolumeClaimStatus) core.ResourceList { return oldObj.Capacity }), fldPath.Child("Capacity"))...)

	// field core.PersistentVolumeClaimStatus.Conditions
	errs = append(errs,
		func(obj, oldObj []core.PersistentVolumeClaimCondition, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.PersistentVolumeClaimCondition, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_PersistentVolumeClaimCondition(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Conditions, safe.Field(oldObj, func(oldObj *core.PersistentVolumeClaimStatus) []core.PersistentVolumeClaimCondition {
			return oldObj.Conditions
		}), fldPath.Child("Conditions"))...)

	// field core.PersistentVolumeClaimStatus.AllocatedResources
	errs = append(errs,
		func(obj, oldObj core.ResourceList, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for key, val := range obj {
				errs = append(errs,
					func(obj, oldObj *resource.Quantity, fldPath *field.Path) (errs field.ErrorList) {
						// NOTE: Type resource.Quantity is in a non-included package.
						//       Any validations defined on this type are not available from here.
						return
					}(&val, safe.Lookup(oldObj, key, safe.PtrTo), fldPath.Key(string(key)))...)
			}
			return
		}(obj.AllocatedResources, safe.Field(oldObj, func(oldObj *core.PersistentVolumeClaimStatus) core.ResourceList { return oldObj.AllocatedResources }), fldPath.Child("AllocatedResources"))...)

	// field core.PersistentVolumeClaimStatus.AllocatedResourceStatuses
	errs = append(errs,
		func(obj, oldObj map[core.ResourceName]core.ClaimResourceStatus, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.AllocatedResourceStatuses, safe.Field(oldObj, func(oldObj *core.PersistentVolumeClaimStatus) map[core.ResourceName]core.ClaimResourceStatus {
			return oldObj.AllocatedResourceStatuses
		}), fldPath.Child("AllocatedResourceStatuses"))...)

	// field core.PersistentVolumeClaimStatus.CurrentVolumeAttributesClassName
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.CurrentVolumeAttributesClassName, safe.Field(oldObj, func(oldObj *core.PersistentVolumeClaimStatus) *string { return oldObj.CurrentVolumeAttributesClassName }), fldPath.Child("CurrentVolumeAttributesClassName"))...)

	// field core.PersistentVolumeClaimStatus.ModifyVolumeStatus
	errs = append(errs,
		func(obj, oldObj *core.ModifyVolumeStatus, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.ModifyVolumeStatus, safe.Field(oldObj, func(oldObj *core.PersistentVolumeClaimStatus) *core.ModifyVolumeStatus {
			return oldObj.ModifyVolumeStatus
		}), fldPath.Child("ModifyVolumeStatus"))...)

	return errs
}

func Validate_PersistentVolumeClaimTemplate(opCtx operation.Context, obj, oldObj *core.PersistentVolumeClaimTemplate, fldPath *field.Path) (errs field.ErrorList) {
	// field core.PersistentVolumeClaimTemplate.ObjectMeta
	errs = append(errs,
		func(obj, oldObj *v1.ObjectMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ObjectMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ObjectMeta, safe.Field(oldObj, func(oldObj *core.PersistentVolumeClaimTemplate) *v1.ObjectMeta { return &oldObj.ObjectMeta }), fldPath.Child("ObjectMeta"))...)

	// field core.PersistentVolumeClaimTemplate.Spec
	errs = append(errs,
		func(obj, oldObj *core.PersistentVolumeClaimSpec, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, Validate_PersistentVolumeClaimSpec(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.Spec, safe.Field(oldObj, func(oldObj *core.PersistentVolumeClaimTemplate) *core.PersistentVolumeClaimSpec { return &oldObj.Spec }), fldPath.Child("Spec"))...)

	return errs
}

func Validate_PersistentVolumeClaimVolumeSource(opCtx operation.Context, obj, oldObj *core.PersistentVolumeClaimVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.PersistentVolumeClaimVolumeSource.ClaimName has no validation

	// field core.PersistentVolumeClaimVolumeSource.ReadOnly
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ReadOnly, safe.Field(oldObj, func(oldObj *core.PersistentVolumeClaimVolumeSource) *bool { return &oldObj.ReadOnly }), fldPath.Child("ReadOnly"))...)

	return errs
}

func Validate_PersistentVolumeList(opCtx operation.Context, obj, oldObj *core.PersistentVolumeList, fldPath *field.Path) (errs field.ErrorList) {
	// field core.PersistentVolumeList.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.PersistentVolumeList) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.PersistentVolumeList.ListMeta
	errs = append(errs,
		func(obj, oldObj *v1.ListMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ListMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ListMeta, safe.Field(oldObj, func(oldObj *core.PersistentVolumeList) *v1.ListMeta { return &oldObj.ListMeta }), fldPath.Child("ListMeta"))...)

	// field core.PersistentVolumeList.Items
	errs = append(errs,
		func(obj, oldObj []core.PersistentVolume, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.PersistentVolume, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_PersistentVolume(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Items, safe.Field(oldObj, func(oldObj *core.PersistentVolumeList) []core.PersistentVolume { return oldObj.Items }), fldPath.Child("Items"))...)

	return errs
}

func Validate_PersistentVolumeSource(opCtx operation.Context, obj, oldObj *core.PersistentVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.PersistentVolumeSource.GCEPersistentDisk
	errs = append(errs,
		func(obj, oldObj *core.GCEPersistentDiskVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_GCEPersistentDiskVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.GCEPersistentDisk, safe.Field(oldObj, func(oldObj *core.PersistentVolumeSource) *core.GCEPersistentDiskVolumeSource {
			return oldObj.GCEPersistentDisk
		}), fldPath.Child("GCEPersistentDisk"))...)

	// field core.PersistentVolumeSource.AWSElasticBlockStore
	errs = append(errs,
		func(obj, oldObj *core.AWSElasticBlockStoreVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_AWSElasticBlockStoreVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.AWSElasticBlockStore, safe.Field(oldObj, func(oldObj *core.PersistentVolumeSource) *core.AWSElasticBlockStoreVolumeSource {
			return oldObj.AWSElasticBlockStore
		}), fldPath.Child("AWSElasticBlockStore"))...)

	// field core.PersistentVolumeSource.HostPath
	errs = append(errs,
		func(obj, oldObj *core.HostPathVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.HostPath, safe.Field(oldObj, func(oldObj *core.PersistentVolumeSource) *core.HostPathVolumeSource { return oldObj.HostPath }), fldPath.Child("HostPath"))...)

	// field core.PersistentVolumeSource.Glusterfs
	errs = append(errs,
		func(obj, oldObj *core.GlusterfsPersistentVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_GlusterfsPersistentVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.Glusterfs, safe.Field(oldObj, func(oldObj *core.PersistentVolumeSource) *core.GlusterfsPersistentVolumeSource {
			return oldObj.Glusterfs
		}), fldPath.Child("Glusterfs"))...)

	// field core.PersistentVolumeSource.NFS
	errs = append(errs,
		func(obj, oldObj *core.NFSVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_NFSVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.NFS, safe.Field(oldObj, func(oldObj *core.PersistentVolumeSource) *core.NFSVolumeSource { return oldObj.NFS }), fldPath.Child("NFS"))...)

	// field core.PersistentVolumeSource.RBD
	errs = append(errs,
		func(obj, oldObj *core.RBDPersistentVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_RBDPersistentVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.RBD, safe.Field(oldObj, func(oldObj *core.PersistentVolumeSource) *core.RBDPersistentVolumeSource { return oldObj.RBD }), fldPath.Child("RBD"))...)

	// field core.PersistentVolumeSource.Quobyte
	errs = append(errs,
		func(obj, oldObj *core.QuobyteVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_QuobyteVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.Quobyte, safe.Field(oldObj, func(oldObj *core.PersistentVolumeSource) *core.QuobyteVolumeSource { return oldObj.Quobyte }), fldPath.Child("Quobyte"))...)

	// field core.PersistentVolumeSource.ISCSI
	errs = append(errs,
		func(obj, oldObj *core.ISCSIPersistentVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_ISCSIPersistentVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.ISCSI, safe.Field(oldObj, func(oldObj *core.PersistentVolumeSource) *core.ISCSIPersistentVolumeSource { return oldObj.ISCSI }), fldPath.Child("ISCSI"))...)

	// field core.PersistentVolumeSource.FlexVolume
	errs = append(errs,
		func(obj, oldObj *core.FlexPersistentVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_FlexPersistentVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.FlexVolume, safe.Field(oldObj, func(oldObj *core.PersistentVolumeSource) *core.FlexPersistentVolumeSource { return oldObj.FlexVolume }), fldPath.Child("FlexVolume"))...)

	// field core.PersistentVolumeSource.Cinder
	errs = append(errs,
		func(obj, oldObj *core.CinderPersistentVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_CinderPersistentVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.Cinder, safe.Field(oldObj, func(oldObj *core.PersistentVolumeSource) *core.CinderPersistentVolumeSource { return oldObj.Cinder }), fldPath.Child("Cinder"))...)

	// field core.PersistentVolumeSource.CephFS
	errs = append(errs,
		func(obj, oldObj *core.CephFSPersistentVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_CephFSPersistentVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.CephFS, safe.Field(oldObj, func(oldObj *core.PersistentVolumeSource) *core.CephFSPersistentVolumeSource { return oldObj.CephFS }), fldPath.Child("CephFS"))...)

	// field core.PersistentVolumeSource.FC
	errs = append(errs,
		func(obj, oldObj *core.FCVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_FCVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.FC, safe.Field(oldObj, func(oldObj *core.PersistentVolumeSource) *core.FCVolumeSource { return oldObj.FC }), fldPath.Child("FC"))...)

	// field core.PersistentVolumeSource.Flocker
	errs = append(errs,
		func(obj, oldObj *core.FlockerVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_FlockerVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.Flocker, safe.Field(oldObj, func(oldObj *core.PersistentVolumeSource) *core.FlockerVolumeSource { return oldObj.Flocker }), fldPath.Child("Flocker"))...)

	// field core.PersistentVolumeSource.AzureFile
	errs = append(errs,
		func(obj, oldObj *core.AzureFilePersistentVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_AzureFilePersistentVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.AzureFile, safe.Field(oldObj, func(oldObj *core.PersistentVolumeSource) *core.AzureFilePersistentVolumeSource {
			return oldObj.AzureFile
		}), fldPath.Child("AzureFile"))...)

	// field core.PersistentVolumeSource.VsphereVolume
	errs = append(errs,
		func(obj, oldObj *core.VsphereVirtualDiskVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_VsphereVirtualDiskVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.VsphereVolume, safe.Field(oldObj, func(oldObj *core.PersistentVolumeSource) *core.VsphereVirtualDiskVolumeSource {
			return oldObj.VsphereVolume
		}), fldPath.Child("VsphereVolume"))...)

	// field core.PersistentVolumeSource.AzureDisk
	errs = append(errs,
		func(obj, oldObj *core.AzureDiskVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_AzureDiskVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.AzureDisk, safe.Field(oldObj, func(oldObj *core.PersistentVolumeSource) *core.AzureDiskVolumeSource { return oldObj.AzureDisk }), fldPath.Child("AzureDisk"))...)

	// field core.PersistentVolumeSource.PhotonPersistentDisk has no validation

	// field core.PersistentVolumeSource.PortworxVolume
	errs = append(errs,
		func(obj, oldObj *core.PortworxVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_PortworxVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.PortworxVolume, safe.Field(oldObj, func(oldObj *core.PersistentVolumeSource) *core.PortworxVolumeSource { return oldObj.PortworxVolume }), fldPath.Child("PortworxVolume"))...)

	// field core.PersistentVolumeSource.ScaleIO
	errs = append(errs,
		func(obj, oldObj *core.ScaleIOPersistentVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_ScaleIOPersistentVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.ScaleIO, safe.Field(oldObj, func(oldObj *core.PersistentVolumeSource) *core.ScaleIOPersistentVolumeSource { return oldObj.ScaleIO }), fldPath.Child("ScaleIO"))...)

	// field core.PersistentVolumeSource.Local
	errs = append(errs,
		func(obj, oldObj *core.LocalVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_LocalVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.Local, safe.Field(oldObj, func(oldObj *core.PersistentVolumeSource) *core.LocalVolumeSource { return oldObj.Local }), fldPath.Child("Local"))...)

	// field core.PersistentVolumeSource.StorageOS
	errs = append(errs,
		func(obj, oldObj *core.StorageOSPersistentVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_StorageOSPersistentVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.StorageOS, safe.Field(oldObj, func(oldObj *core.PersistentVolumeSource) *core.StorageOSPersistentVolumeSource {
			return oldObj.StorageOS
		}), fldPath.Child("StorageOS"))...)

	// field core.PersistentVolumeSource.CSI
	errs = append(errs,
		func(obj, oldObj *core.CSIPersistentVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_CSIPersistentVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.CSI, safe.Field(oldObj, func(oldObj *core.PersistentVolumeSource) *core.CSIPersistentVolumeSource { return oldObj.CSI }), fldPath.Child("CSI"))...)

	return errs
}

func Validate_PersistentVolumeSpec(opCtx operation.Context, obj, oldObj *core.PersistentVolumeSpec, fldPath *field.Path) (errs field.ErrorList) {
	// field core.PersistentVolumeSpec.Capacity
	errs = append(errs,
		func(obj, oldObj core.ResourceList, fldPath *field.Path) (errs field.ErrorList) {
			for key, val := range obj {
				errs = append(errs,
					func(obj, oldObj *resource.Quantity, fldPath *field.Path) (errs field.ErrorList) {
						// NOTE: Type resource.Quantity is in a non-included package.
						//       Any validations defined on this type are not available from here.
						return
					}(&val, safe.Lookup(oldObj, key, safe.PtrTo), fldPath.Key(string(key)))...)
			}
			return
		}(obj.Capacity, safe.Field(oldObj, func(oldObj *core.PersistentVolumeSpec) core.ResourceList { return oldObj.Capacity }), fldPath.Child("Capacity"))...)

	// field core.PersistentVolumeSpec.PersistentVolumeSource
	errs = append(errs,
		func(obj, oldObj *core.PersistentVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, Validate_PersistentVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.PersistentVolumeSource, safe.Field(oldObj, func(oldObj *core.PersistentVolumeSpec) *core.PersistentVolumeSource {
			return &oldObj.PersistentVolumeSource
		}), fldPath.Child("PersistentVolumeSource"))...)

	// field core.PersistentVolumeSpec.AccessModes
	errs = append(errs,
		func(obj, oldObj []core.PersistentVolumeAccessMode, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.AccessModes, safe.Field(oldObj, func(oldObj *core.PersistentVolumeSpec) []core.PersistentVolumeAccessMode { return oldObj.AccessModes }), fldPath.Child("AccessModes"))...)

	// field core.PersistentVolumeSpec.ClaimRef
	errs = append(errs,
		func(obj, oldObj *core.ObjectReference, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_ObjectReference(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.ClaimRef, safe.Field(oldObj, func(oldObj *core.PersistentVolumeSpec) *core.ObjectReference { return oldObj.ClaimRef }), fldPath.Child("ClaimRef"))...)

	// field core.PersistentVolumeSpec.PersistentVolumeReclaimPolicy
	errs = append(errs,
		func(obj, oldObj *core.PersistentVolumeReclaimPolicy, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.PersistentVolumeReclaimPolicy, safe.Field(oldObj, func(oldObj *core.PersistentVolumeSpec) *core.PersistentVolumeReclaimPolicy {
			return &oldObj.PersistentVolumeReclaimPolicy
		}), fldPath.Child("PersistentVolumeReclaimPolicy"))...)

	// field core.PersistentVolumeSpec.StorageClassName
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.StorageClassName, safe.Field(oldObj, func(oldObj *core.PersistentVolumeSpec) *string { return &oldObj.StorageClassName }), fldPath.Child("StorageClassName"))...)

	// field core.PersistentVolumeSpec.MountOptions
	errs = append(errs,
		func(obj, oldObj []string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.MountOptions, safe.Field(oldObj, func(oldObj *core.PersistentVolumeSpec) []string { return oldObj.MountOptions }), fldPath.Child("MountOptions"))...)

	// field core.PersistentVolumeSpec.VolumeMode
	errs = append(errs,
		func(obj, oldObj *core.PersistentVolumeMode, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.VolumeMode, safe.Field(oldObj, func(oldObj *core.PersistentVolumeSpec) *core.PersistentVolumeMode { return oldObj.VolumeMode }), fldPath.Child("VolumeMode"))...)

	// field core.PersistentVolumeSpec.NodeAffinity
	errs = append(errs,
		func(obj, oldObj *core.VolumeNodeAffinity, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_VolumeNodeAffinity(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.NodeAffinity, safe.Field(oldObj, func(oldObj *core.PersistentVolumeSpec) *core.VolumeNodeAffinity { return oldObj.NodeAffinity }), fldPath.Child("NodeAffinity"))...)

	// field core.PersistentVolumeSpec.VolumeAttributesClassName
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.VolumeAttributesClassName, safe.Field(oldObj, func(oldObj *core.PersistentVolumeSpec) *string { return oldObj.VolumeAttributesClassName }), fldPath.Child("VolumeAttributesClassName"))...)

	return errs
}

func Validate_PersistentVolumeStatus(opCtx operation.Context, obj, oldObj *core.PersistentVolumeStatus, fldPath *field.Path) (errs field.ErrorList) {
	// field core.PersistentVolumeStatus.Phase
	errs = append(errs,
		func(obj, oldObj *core.PersistentVolumePhase, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Phase, safe.Field(oldObj, func(oldObj *core.PersistentVolumeStatus) *core.PersistentVolumePhase { return &oldObj.Phase }), fldPath.Child("Phase"))...)

	// field core.PersistentVolumeStatus.Message
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Message, safe.Field(oldObj, func(oldObj *core.PersistentVolumeStatus) *string { return &oldObj.Message }), fldPath.Child("Message"))...)

	// field core.PersistentVolumeStatus.Reason
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Reason, safe.Field(oldObj, func(oldObj *core.PersistentVolumeStatus) *string { return &oldObj.Reason }), fldPath.Child("Reason"))...)

	// field core.PersistentVolumeStatus.LastPhaseTransitionTime
	errs = append(errs,
		func(obj, oldObj *v1.Time, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.LastPhaseTransitionTime, safe.Field(oldObj, func(oldObj *core.PersistentVolumeStatus) *v1.Time { return oldObj.LastPhaseTransitionTime }), fldPath.Child("LastPhaseTransitionTime"))...)

	return errs
}

func Validate_Pod(opCtx operation.Context, obj, oldObj *core.Pod, fldPath *field.Path) (errs field.ErrorList) {
	// field core.Pod.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.Pod) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.Pod.ObjectMeta
	errs = append(errs,
		func(obj, oldObj *v1.ObjectMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ObjectMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ObjectMeta, safe.Field(oldObj, func(oldObj *core.Pod) *v1.ObjectMeta { return &oldObj.ObjectMeta }), fldPath.Child("ObjectMeta"))...)

	// field core.Pod.Spec
	errs = append(errs,
		func(obj, oldObj *core.PodSpec, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_PodSpec(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.Spec, safe.Field(oldObj, func(oldObj *core.Pod) *core.PodSpec { return &oldObj.Spec }), fldPath.Child("Spec"))...)

	// field core.Pod.Status
	errs = append(errs,
		func(obj, oldObj *core.PodStatus, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_PodStatus(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.Status, safe.Field(oldObj, func(oldObj *core.Pod) *core.PodStatus { return &oldObj.Status }), fldPath.Child("Status"))...)

	return errs
}

func Validate_PodAffinity(opCtx operation.Context, obj, oldObj *core.PodAffinity, fldPath *field.Path) (errs field.ErrorList) {
	// field core.PodAffinity.RequiredDuringSchedulingIgnoredDuringExecution
	errs = append(errs,
		func(obj, oldObj []core.PodAffinityTerm, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.PodAffinityTerm, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_PodAffinityTerm(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.RequiredDuringSchedulingIgnoredDuringExecution, safe.Field(oldObj, func(oldObj *core.PodAffinity) []core.PodAffinityTerm {
			return oldObj.RequiredDuringSchedulingIgnoredDuringExecution
		}), fldPath.Child("RequiredDuringSchedulingIgnoredDuringExecution"))...)

	// field core.PodAffinity.PreferredDuringSchedulingIgnoredDuringExecution
	errs = append(errs,
		func(obj, oldObj []core.WeightedPodAffinityTerm, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.WeightedPodAffinityTerm, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_WeightedPodAffinityTerm(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.PreferredDuringSchedulingIgnoredDuringExecution, safe.Field(oldObj, func(oldObj *core.PodAffinity) []core.WeightedPodAffinityTerm {
			return oldObj.PreferredDuringSchedulingIgnoredDuringExecution
		}), fldPath.Child("PreferredDuringSchedulingIgnoredDuringExecution"))...)

	return errs
}

func Validate_PodAffinityTerm(opCtx operation.Context, obj, oldObj *core.PodAffinityTerm, fldPath *field.Path) (errs field.ErrorList) {
	// field core.PodAffinityTerm.LabelSelector
	errs = append(errs,
		func(obj, oldObj *v1.LabelSelector, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_LabelSelector(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.LabelSelector, safe.Field(oldObj, func(oldObj *core.PodAffinityTerm) *v1.LabelSelector { return oldObj.LabelSelector }), fldPath.Child("LabelSelector"))...)

	// field core.PodAffinityTerm.Namespaces
	errs = append(errs,
		func(obj, oldObj []string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Namespaces, safe.Field(oldObj, func(oldObj *core.PodAffinityTerm) []string { return oldObj.Namespaces }), fldPath.Child("Namespaces"))...)

	// field core.PodAffinityTerm.TopologyKey has no validation

	// field core.PodAffinityTerm.NamespaceSelector
	errs = append(errs,
		func(obj, oldObj *v1.LabelSelector, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_LabelSelector(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.NamespaceSelector, safe.Field(oldObj, func(oldObj *core.PodAffinityTerm) *v1.LabelSelector { return oldObj.NamespaceSelector }), fldPath.Child("NamespaceSelector"))...)

	// field core.PodAffinityTerm.MatchLabelKeys
	errs = append(errs,
		func(obj, oldObj []string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.MatchLabelKeys, safe.Field(oldObj, func(oldObj *core.PodAffinityTerm) []string { return oldObj.MatchLabelKeys }), fldPath.Child("MatchLabelKeys"))...)

	// field core.PodAffinityTerm.MismatchLabelKeys
	errs = append(errs,
		func(obj, oldObj []string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.MismatchLabelKeys, safe.Field(oldObj, func(oldObj *core.PodAffinityTerm) []string { return oldObj.MismatchLabelKeys }), fldPath.Child("MismatchLabelKeys"))...)

	return errs
}

func Validate_PodAntiAffinity(opCtx operation.Context, obj, oldObj *core.PodAntiAffinity, fldPath *field.Path) (errs field.ErrorList) {
	// field core.PodAntiAffinity.RequiredDuringSchedulingIgnoredDuringExecution
	errs = append(errs,
		func(obj, oldObj []core.PodAffinityTerm, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.PodAffinityTerm, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_PodAffinityTerm(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.RequiredDuringSchedulingIgnoredDuringExecution, safe.Field(oldObj, func(oldObj *core.PodAntiAffinity) []core.PodAffinityTerm {
			return oldObj.RequiredDuringSchedulingIgnoredDuringExecution
		}), fldPath.Child("RequiredDuringSchedulingIgnoredDuringExecution"))...)

	// field core.PodAntiAffinity.PreferredDuringSchedulingIgnoredDuringExecution
	errs = append(errs,
		func(obj, oldObj []core.WeightedPodAffinityTerm, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.WeightedPodAffinityTerm, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_WeightedPodAffinityTerm(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.PreferredDuringSchedulingIgnoredDuringExecution, safe.Field(oldObj, func(oldObj *core.PodAntiAffinity) []core.WeightedPodAffinityTerm {
			return oldObj.PreferredDuringSchedulingIgnoredDuringExecution
		}), fldPath.Child("PreferredDuringSchedulingIgnoredDuringExecution"))...)

	return errs
}

func Validate_PodAttachOptions(opCtx operation.Context, obj, oldObj *core.PodAttachOptions, fldPath *field.Path) (errs field.ErrorList) {
	// field core.PodAttachOptions.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.PodAttachOptions) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.PodAttachOptions.Stdin
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Stdin, safe.Field(oldObj, func(oldObj *core.PodAttachOptions) *bool { return &oldObj.Stdin }), fldPath.Child("Stdin"))...)

	// field core.PodAttachOptions.Stdout
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Stdout, safe.Field(oldObj, func(oldObj *core.PodAttachOptions) *bool { return &oldObj.Stdout }), fldPath.Child("Stdout"))...)

	// field core.PodAttachOptions.Stderr
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Stderr, safe.Field(oldObj, func(oldObj *core.PodAttachOptions) *bool { return &oldObj.Stderr }), fldPath.Child("Stderr"))...)

	// field core.PodAttachOptions.TTY
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.TTY, safe.Field(oldObj, func(oldObj *core.PodAttachOptions) *bool { return &oldObj.TTY }), fldPath.Child("TTY"))...)

	// field core.PodAttachOptions.Container
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Container, safe.Field(oldObj, func(oldObj *core.PodAttachOptions) *string { return &oldObj.Container }), fldPath.Child("Container"))...)

	return errs
}

func Validate_PodCondition(opCtx operation.Context, obj, oldObj *core.PodCondition, fldPath *field.Path) (errs field.ErrorList) {
	// field core.PodCondition.Type has no validation
	// field core.PodCondition.Status has no validation

	// field core.PodCondition.LastProbeTime
	errs = append(errs,
		func(obj, oldObj *v1.Time, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.LastProbeTime, safe.Field(oldObj, func(oldObj *core.PodCondition) *v1.Time { return &oldObj.LastProbeTime }), fldPath.Child("LastProbeTime"))...)

	// field core.PodCondition.LastTransitionTime
	errs = append(errs,
		func(obj, oldObj *v1.Time, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.LastTransitionTime, safe.Field(oldObj, func(oldObj *core.PodCondition) *v1.Time { return &oldObj.LastTransitionTime }), fldPath.Child("LastTransitionTime"))...)

	// field core.PodCondition.Reason
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Reason, safe.Field(oldObj, func(oldObj *core.PodCondition) *string { return &oldObj.Reason }), fldPath.Child("Reason"))...)

	// field core.PodCondition.Message
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Message, safe.Field(oldObj, func(oldObj *core.PodCondition) *string { return &oldObj.Message }), fldPath.Child("Message"))...)

	return errs
}

func Validate_PodDNSConfig(opCtx operation.Context, obj, oldObj *core.PodDNSConfig, fldPath *field.Path) (errs field.ErrorList) {
	// field core.PodDNSConfig.Nameservers
	errs = append(errs,
		func(obj, oldObj []string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Nameservers, safe.Field(oldObj, func(oldObj *core.PodDNSConfig) []string { return oldObj.Nameservers }), fldPath.Child("Nameservers"))...)

	// field core.PodDNSConfig.Searches
	errs = append(errs,
		func(obj, oldObj []string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Searches, safe.Field(oldObj, func(oldObj *core.PodDNSConfig) []string { return oldObj.Searches }), fldPath.Child("Searches"))...)

	// field core.PodDNSConfig.Options
	errs = append(errs,
		func(obj, oldObj []core.PodDNSConfigOption, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.PodDNSConfigOption, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_PodDNSConfigOption(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Options, safe.Field(oldObj, func(oldObj *core.PodDNSConfig) []core.PodDNSConfigOption { return oldObj.Options }), fldPath.Child("Options"))...)

	return errs
}

func Validate_PodDNSConfigOption(opCtx operation.Context, obj, oldObj *core.PodDNSConfigOption, fldPath *field.Path) (errs field.ErrorList) {
	// field core.PodDNSConfigOption.Name has no validation

	// field core.PodDNSConfigOption.Value
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Value, safe.Field(oldObj, func(oldObj *core.PodDNSConfigOption) *string { return oldObj.Value }), fldPath.Child("Value"))...)

	return errs
}

func Validate_PodExecOptions(opCtx operation.Context, obj, oldObj *core.PodExecOptions, fldPath *field.Path) (errs field.ErrorList) {
	// field core.PodExecOptions.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.PodExecOptions) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.PodExecOptions.Stdin has no validation
	// field core.PodExecOptions.Stdout has no validation
	// field core.PodExecOptions.Stderr has no validation
	// field core.PodExecOptions.TTY has no validation
	// field core.PodExecOptions.Container has no validation
	// field core.PodExecOptions.Command has no validation
	return errs
}

func Validate_PodList(opCtx operation.Context, obj, oldObj *core.PodList, fldPath *field.Path) (errs field.ErrorList) {
	// field core.PodList.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.PodList) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.PodList.ListMeta
	errs = append(errs,
		func(obj, oldObj *v1.ListMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ListMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ListMeta, safe.Field(oldObj, func(oldObj *core.PodList) *v1.ListMeta { return &oldObj.ListMeta }), fldPath.Child("ListMeta"))...)

	// field core.PodList.Items
	errs = append(errs,
		func(obj, oldObj []core.Pod, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.Pod, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_Pod(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Items, safe.Field(oldObj, func(oldObj *core.PodList) []core.Pod { return oldObj.Items }), fldPath.Child("Items"))...)

	return errs
}

func Validate_PodLogOptions(opCtx operation.Context, obj, oldObj *core.PodLogOptions, fldPath *field.Path) (errs field.ErrorList) {
	// field core.PodLogOptions.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.PodLogOptions) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.PodLogOptions.Container has no validation
	// field core.PodLogOptions.Follow has no validation
	// field core.PodLogOptions.Previous has no validation
	// field core.PodLogOptions.SinceSeconds has no validation
	// field core.PodLogOptions.SinceTime has no validation
	// field core.PodLogOptions.Timestamps has no validation
	// field core.PodLogOptions.TailLines has no validation
	// field core.PodLogOptions.LimitBytes has no validation

	// field core.PodLogOptions.InsecureSkipTLSVerifyBackend
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.InsecureSkipTLSVerifyBackend, safe.Field(oldObj, func(oldObj *core.PodLogOptions) *bool { return &oldObj.InsecureSkipTLSVerifyBackend }), fldPath.Child("InsecureSkipTLSVerifyBackend"))...)

	return errs
}

func Validate_PodPortForwardOptions(opCtx operation.Context, obj, oldObj *core.PodPortForwardOptions, fldPath *field.Path) (errs field.ErrorList) {
	// field core.PodPortForwardOptions.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.PodPortForwardOptions) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.PodPortForwardOptions.Ports
	errs = append(errs,
		func(obj, oldObj []int32, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Ports, safe.Field(oldObj, func(oldObj *core.PodPortForwardOptions) []int32 { return oldObj.Ports }), fldPath.Child("Ports"))...)

	return errs
}

func Validate_PodProxyOptions(opCtx operation.Context, obj, oldObj *core.PodProxyOptions, fldPath *field.Path) (errs field.ErrorList) {
	// field core.PodProxyOptions.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.PodProxyOptions) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.PodProxyOptions.Path has no validation
	return errs
}

func Validate_PodSecurityContext(opCtx operation.Context, obj, oldObj *core.PodSecurityContext, fldPath *field.Path) (errs field.ErrorList) {
	// field core.PodSecurityContext.HostNetwork
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.HostNetwork, safe.Field(oldObj, func(oldObj *core.PodSecurityContext) *bool { return &oldObj.HostNetwork }), fldPath.Child("HostNetwork"))...)

	// field core.PodSecurityContext.HostPID
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.HostPID, safe.Field(oldObj, func(oldObj *core.PodSecurityContext) *bool { return &oldObj.HostPID }), fldPath.Child("HostPID"))...)

	// field core.PodSecurityContext.HostIPC
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.HostIPC, safe.Field(oldObj, func(oldObj *core.PodSecurityContext) *bool { return &oldObj.HostIPC }), fldPath.Child("HostIPC"))...)

	// field core.PodSecurityContext.ShareProcessNamespace
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.ShareProcessNamespace, safe.Field(oldObj, func(oldObj *core.PodSecurityContext) *bool { return oldObj.ShareProcessNamespace }), fldPath.Child("ShareProcessNamespace"))...)

	// field core.PodSecurityContext.HostUsers
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.HostUsers, safe.Field(oldObj, func(oldObj *core.PodSecurityContext) *bool { return oldObj.HostUsers }), fldPath.Child("HostUsers"))...)

	// field core.PodSecurityContext.SELinuxOptions
	errs = append(errs,
		func(obj, oldObj *core.SELinuxOptions, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_SELinuxOptions(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.SELinuxOptions, safe.Field(oldObj, func(oldObj *core.PodSecurityContext) *core.SELinuxOptions { return oldObj.SELinuxOptions }), fldPath.Child("SELinuxOptions"))...)

	// field core.PodSecurityContext.WindowsOptions
	errs = append(errs,
		func(obj, oldObj *core.WindowsSecurityContextOptions, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_WindowsSecurityContextOptions(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.WindowsOptions, safe.Field(oldObj, func(oldObj *core.PodSecurityContext) *core.WindowsSecurityContextOptions {
			return oldObj.WindowsOptions
		}), fldPath.Child("WindowsOptions"))...)

	// field core.PodSecurityContext.RunAsUser
	errs = append(errs,
		func(obj, oldObj *int64, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.RunAsUser, safe.Field(oldObj, func(oldObj *core.PodSecurityContext) *int64 { return oldObj.RunAsUser }), fldPath.Child("RunAsUser"))...)

	// field core.PodSecurityContext.RunAsGroup
	errs = append(errs,
		func(obj, oldObj *int64, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.RunAsGroup, safe.Field(oldObj, func(oldObj *core.PodSecurityContext) *int64 { return oldObj.RunAsGroup }), fldPath.Child("RunAsGroup"))...)

	// field core.PodSecurityContext.RunAsNonRoot
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.RunAsNonRoot, safe.Field(oldObj, func(oldObj *core.PodSecurityContext) *bool { return oldObj.RunAsNonRoot }), fldPath.Child("RunAsNonRoot"))...)

	// field core.PodSecurityContext.SupplementalGroups
	errs = append(errs,
		func(obj, oldObj []int64, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.SupplementalGroups, safe.Field(oldObj, func(oldObj *core.PodSecurityContext) []int64 { return oldObj.SupplementalGroups }), fldPath.Child("SupplementalGroups"))...)

	// field core.PodSecurityContext.SupplementalGroupsPolicy
	errs = append(errs,
		func(obj, oldObj *core.SupplementalGroupsPolicy, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.SupplementalGroupsPolicy, safe.Field(oldObj, func(oldObj *core.PodSecurityContext) *core.SupplementalGroupsPolicy {
			return oldObj.SupplementalGroupsPolicy
		}), fldPath.Child("SupplementalGroupsPolicy"))...)

	// field core.PodSecurityContext.FSGroup
	errs = append(errs,
		func(obj, oldObj *int64, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.FSGroup, safe.Field(oldObj, func(oldObj *core.PodSecurityContext) *int64 { return oldObj.FSGroup }), fldPath.Child("FSGroup"))...)

	// field core.PodSecurityContext.FSGroupChangePolicy
	errs = append(errs,
		func(obj, oldObj *core.PodFSGroupChangePolicy, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.FSGroupChangePolicy, safe.Field(oldObj, func(oldObj *core.PodSecurityContext) *core.PodFSGroupChangePolicy { return oldObj.FSGroupChangePolicy }), fldPath.Child("FSGroupChangePolicy"))...)

	// field core.PodSecurityContext.Sysctls
	errs = append(errs,
		func(obj, oldObj []core.Sysctl, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Sysctls, safe.Field(oldObj, func(oldObj *core.PodSecurityContext) []core.Sysctl { return oldObj.Sysctls }), fldPath.Child("Sysctls"))...)

	// field core.PodSecurityContext.SeccompProfile
	errs = append(errs,
		func(obj, oldObj *core.SeccompProfile, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_SeccompProfile(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.SeccompProfile, safe.Field(oldObj, func(oldObj *core.PodSecurityContext) *core.SeccompProfile { return oldObj.SeccompProfile }), fldPath.Child("SeccompProfile"))...)

	// field core.PodSecurityContext.AppArmorProfile
	errs = append(errs,
		func(obj, oldObj *core.AppArmorProfile, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_AppArmorProfile(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.AppArmorProfile, safe.Field(oldObj, func(oldObj *core.PodSecurityContext) *core.AppArmorProfile { return oldObj.AppArmorProfile }), fldPath.Child("AppArmorProfile"))...)

	return errs
}

func Validate_PodSpec(opCtx operation.Context, obj, oldObj *core.PodSpec, fldPath *field.Path) (errs field.ErrorList) {
	// field core.PodSpec.Volumes
	errs = append(errs,
		func(obj, oldObj []core.Volume, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.Volume, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_Volume(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Volumes, safe.Field(oldObj, func(oldObj *core.PodSpec) []core.Volume { return oldObj.Volumes }), fldPath.Child("Volumes"))...)

	// field core.PodSpec.InitContainers
	errs = append(errs,
		func(obj, oldObj []core.Container, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.Container, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_Container(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.InitContainers, safe.Field(oldObj, func(oldObj *core.PodSpec) []core.Container { return oldObj.InitContainers }), fldPath.Child("InitContainers"))...)

	// field core.PodSpec.Containers
	errs = append(errs,
		func(obj, oldObj []core.Container, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.Container, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_Container(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Containers, safe.Field(oldObj, func(oldObj *core.PodSpec) []core.Container { return oldObj.Containers }), fldPath.Child("Containers"))...)

	// field core.PodSpec.EphemeralContainers
	errs = append(errs,
		func(obj, oldObj []core.EphemeralContainer, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.EphemeralContainer, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_EphemeralContainer(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.EphemeralContainers, safe.Field(oldObj, func(oldObj *core.PodSpec) []core.EphemeralContainer { return oldObj.EphemeralContainers }), fldPath.Child("EphemeralContainers"))...)

	// field core.PodSpec.RestartPolicy
	errs = append(errs,
		func(obj, oldObj *core.RestartPolicy, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.RestartPolicy, safe.Field(oldObj, func(oldObj *core.PodSpec) *core.RestartPolicy { return &oldObj.RestartPolicy }), fldPath.Child("RestartPolicy"))...)

	// field core.PodSpec.TerminationGracePeriodSeconds
	errs = append(errs,
		func(obj, oldObj *int64, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.TerminationGracePeriodSeconds, safe.Field(oldObj, func(oldObj *core.PodSpec) *int64 { return oldObj.TerminationGracePeriodSeconds }), fldPath.Child("TerminationGracePeriodSeconds"))...)

	// field core.PodSpec.ActiveDeadlineSeconds
	errs = append(errs,
		func(obj, oldObj *int64, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.ActiveDeadlineSeconds, safe.Field(oldObj, func(oldObj *core.PodSpec) *int64 { return oldObj.ActiveDeadlineSeconds }), fldPath.Child("ActiveDeadlineSeconds"))...)

	// field core.PodSpec.DNSPolicy
	errs = append(errs,
		func(obj, oldObj *core.DNSPolicy, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.DNSPolicy, safe.Field(oldObj, func(oldObj *core.PodSpec) *core.DNSPolicy { return &oldObj.DNSPolicy }), fldPath.Child("DNSPolicy"))...)

	// field core.PodSpec.NodeSelector
	errs = append(errs,
		func(obj, oldObj map[string]string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.NodeSelector, safe.Field(oldObj, func(oldObj *core.PodSpec) map[string]string { return oldObj.NodeSelector }), fldPath.Child("NodeSelector"))...)

	// field core.PodSpec.ServiceAccountName has no validation

	// field core.PodSpec.AutomountServiceAccountToken
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.AutomountServiceAccountToken, safe.Field(oldObj, func(oldObj *core.PodSpec) *bool { return oldObj.AutomountServiceAccountToken }), fldPath.Child("AutomountServiceAccountToken"))...)

	// field core.PodSpec.NodeName
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.NodeName, safe.Field(oldObj, func(oldObj *core.PodSpec) *string { return &oldObj.NodeName }), fldPath.Child("NodeName"))...)

	// field core.PodSpec.SecurityContext
	errs = append(errs,
		func(obj, oldObj *core.PodSecurityContext, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_PodSecurityContext(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.SecurityContext, safe.Field(oldObj, func(oldObj *core.PodSpec) *core.PodSecurityContext { return oldObj.SecurityContext }), fldPath.Child("SecurityContext"))...)

	// field core.PodSpec.ImagePullSecrets
	errs = append(errs,
		func(obj, oldObj []core.LocalObjectReference, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.ImagePullSecrets, safe.Field(oldObj, func(oldObj *core.PodSpec) []core.LocalObjectReference { return oldObj.ImagePullSecrets }), fldPath.Child("ImagePullSecrets"))...)

	// field core.PodSpec.Hostname
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Hostname, safe.Field(oldObj, func(oldObj *core.PodSpec) *string { return &oldObj.Hostname }), fldPath.Child("Hostname"))...)

	// field core.PodSpec.Subdomain
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Subdomain, safe.Field(oldObj, func(oldObj *core.PodSpec) *string { return &oldObj.Subdomain }), fldPath.Child("Subdomain"))...)

	// field core.PodSpec.SetHostnameAsFQDN
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.SetHostnameAsFQDN, safe.Field(oldObj, func(oldObj *core.PodSpec) *bool { return oldObj.SetHostnameAsFQDN }), fldPath.Child("SetHostnameAsFQDN"))...)

	// field core.PodSpec.Affinity
	errs = append(errs,
		func(obj, oldObj *core.Affinity, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_Affinity(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.Affinity, safe.Field(oldObj, func(oldObj *core.PodSpec) *core.Affinity { return oldObj.Affinity }), fldPath.Child("Affinity"))...)

	// field core.PodSpec.SchedulerName
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.SchedulerName, safe.Field(oldObj, func(oldObj *core.PodSpec) *string { return &oldObj.SchedulerName }), fldPath.Child("SchedulerName"))...)

	// field core.PodSpec.Tolerations
	errs = append(errs,
		func(obj, oldObj []core.Toleration, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.Toleration, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_Toleration(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Tolerations, safe.Field(oldObj, func(oldObj *core.PodSpec) []core.Toleration { return oldObj.Tolerations }), fldPath.Child("Tolerations"))...)

	// field core.PodSpec.HostAliases
	errs = append(errs,
		func(obj, oldObj []core.HostAlias, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.HostAliases, safe.Field(oldObj, func(oldObj *core.PodSpec) []core.HostAlias { return oldObj.HostAliases }), fldPath.Child("HostAliases"))...)

	// field core.PodSpec.PriorityClassName
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.PriorityClassName, safe.Field(oldObj, func(oldObj *core.PodSpec) *string { return &oldObj.PriorityClassName }), fldPath.Child("PriorityClassName"))...)

	// field core.PodSpec.Priority
	errs = append(errs,
		func(obj, oldObj *int32, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Priority, safe.Field(oldObj, func(oldObj *core.PodSpec) *int32 { return oldObj.Priority }), fldPath.Child("Priority"))...)

	// field core.PodSpec.PreemptionPolicy
	errs = append(errs,
		func(obj, oldObj *core.PreemptionPolicy, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.PreemptionPolicy, safe.Field(oldObj, func(oldObj *core.PodSpec) *core.PreemptionPolicy { return oldObj.PreemptionPolicy }), fldPath.Child("PreemptionPolicy"))...)

	// field core.PodSpec.DNSConfig
	errs = append(errs,
		func(obj, oldObj *core.PodDNSConfig, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_PodDNSConfig(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.DNSConfig, safe.Field(oldObj, func(oldObj *core.PodSpec) *core.PodDNSConfig { return oldObj.DNSConfig }), fldPath.Child("DNSConfig"))...)

	// field core.PodSpec.ReadinessGates
	errs = append(errs,
		func(obj, oldObj []core.PodReadinessGate, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.ReadinessGates, safe.Field(oldObj, func(oldObj *core.PodSpec) []core.PodReadinessGate { return oldObj.ReadinessGates }), fldPath.Child("ReadinessGates"))...)

	// field core.PodSpec.RuntimeClassName
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.RuntimeClassName, safe.Field(oldObj, func(oldObj *core.PodSpec) *string { return oldObj.RuntimeClassName }), fldPath.Child("RuntimeClassName"))...)

	// field core.PodSpec.Overhead
	errs = append(errs,
		func(obj, oldObj core.ResourceList, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for key, val := range obj {
				errs = append(errs,
					func(obj, oldObj *resource.Quantity, fldPath *field.Path) (errs field.ErrorList) {
						// NOTE: Type resource.Quantity is in a non-included package.
						//       Any validations defined on this type are not available from here.
						return
					}(&val, safe.Lookup(oldObj, key, safe.PtrTo), fldPath.Key(string(key)))...)
			}
			return
		}(obj.Overhead, safe.Field(oldObj, func(oldObj *core.PodSpec) core.ResourceList { return oldObj.Overhead }), fldPath.Child("Overhead"))...)

	// field core.PodSpec.EnableServiceLinks
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.EnableServiceLinks, safe.Field(oldObj, func(oldObj *core.PodSpec) *bool { return oldObj.EnableServiceLinks }), fldPath.Child("EnableServiceLinks"))...)

	// field core.PodSpec.TopologySpreadConstraints
	errs = append(errs,
		func(obj, oldObj []core.TopologySpreadConstraint, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.TopologySpreadConstraint, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_TopologySpreadConstraint(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.TopologySpreadConstraints, safe.Field(oldObj, func(oldObj *core.PodSpec) []core.TopologySpreadConstraint { return oldObj.TopologySpreadConstraints }), fldPath.Child("TopologySpreadConstraints"))...)

	// field core.PodSpec.OS
	errs = append(errs,
		func(obj, oldObj *core.PodOS, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.OS, safe.Field(oldObj, func(oldObj *core.PodSpec) *core.PodOS { return oldObj.OS }), fldPath.Child("OS"))...)

	// field core.PodSpec.SchedulingGates
	errs = append(errs,
		func(obj, oldObj []core.PodSchedulingGate, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.SchedulingGates, safe.Field(oldObj, func(oldObj *core.PodSpec) []core.PodSchedulingGate { return oldObj.SchedulingGates }), fldPath.Child("SchedulingGates"))...)

	// field core.PodSpec.ResourceClaims
	errs = append(errs,
		func(obj, oldObj []core.PodResourceClaim, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.ResourceClaims, safe.Field(oldObj, func(oldObj *core.PodSpec) []core.PodResourceClaim { return oldObj.ResourceClaims }), fldPath.Child("ResourceClaims"))...)

	return errs
}

func Validate_PodStatus(opCtx operation.Context, obj, oldObj *core.PodStatus, fldPath *field.Path) (errs field.ErrorList) {
	// field core.PodStatus.Phase
	errs = append(errs,
		func(obj, oldObj *core.PodPhase, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Phase, safe.Field(oldObj, func(oldObj *core.PodStatus) *core.PodPhase { return &oldObj.Phase }), fldPath.Child("Phase"))...)

	// field core.PodStatus.Conditions
	errs = append(errs,
		func(obj, oldObj []core.PodCondition, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.PodCondition, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_PodCondition(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Conditions, safe.Field(oldObj, func(oldObj *core.PodStatus) []core.PodCondition { return oldObj.Conditions }), fldPath.Child("Conditions"))...)

	// field core.PodStatus.Message
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Message, safe.Field(oldObj, func(oldObj *core.PodStatus) *string { return &oldObj.Message }), fldPath.Child("Message"))...)

	// field core.PodStatus.Reason
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Reason, safe.Field(oldObj, func(oldObj *core.PodStatus) *string { return &oldObj.Reason }), fldPath.Child("Reason"))...)

	// field core.PodStatus.NominatedNodeName
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.NominatedNodeName, safe.Field(oldObj, func(oldObj *core.PodStatus) *string { return &oldObj.NominatedNodeName }), fldPath.Child("NominatedNodeName"))...)

	// field core.PodStatus.HostIP
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.HostIP, safe.Field(oldObj, func(oldObj *core.PodStatus) *string { return &oldObj.HostIP }), fldPath.Child("HostIP"))...)

	// field core.PodStatus.HostIPs
	errs = append(errs,
		func(obj, oldObj []core.HostIP, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.HostIPs, safe.Field(oldObj, func(oldObj *core.PodStatus) []core.HostIP { return oldObj.HostIPs }), fldPath.Child("HostIPs"))...)

	// field core.PodStatus.PodIPs
	errs = append(errs,
		func(obj, oldObj []core.PodIP, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.PodIPs, safe.Field(oldObj, func(oldObj *core.PodStatus) []core.PodIP { return oldObj.PodIPs }), fldPath.Child("PodIPs"))...)

	// field core.PodStatus.StartTime
	errs = append(errs,
		func(obj, oldObj *v1.Time, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.StartTime, safe.Field(oldObj, func(oldObj *core.PodStatus) *v1.Time { return oldObj.StartTime }), fldPath.Child("StartTime"))...)

	// field core.PodStatus.QOSClass
	errs = append(errs,
		func(obj, oldObj *core.PodQOSClass, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.QOSClass, safe.Field(oldObj, func(oldObj *core.PodStatus) *core.PodQOSClass { return &oldObj.QOSClass }), fldPath.Child("QOSClass"))...)

	// field core.PodStatus.InitContainerStatuses
	errs = append(errs,
		func(obj, oldObj []core.ContainerStatus, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.ContainerStatus, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_ContainerStatus(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.InitContainerStatuses, safe.Field(oldObj, func(oldObj *core.PodStatus) []core.ContainerStatus { return oldObj.InitContainerStatuses }), fldPath.Child("InitContainerStatuses"))...)

	// field core.PodStatus.ContainerStatuses
	errs = append(errs,
		func(obj, oldObj []core.ContainerStatus, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.ContainerStatus, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_ContainerStatus(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.ContainerStatuses, safe.Field(oldObj, func(oldObj *core.PodStatus) []core.ContainerStatus { return oldObj.ContainerStatuses }), fldPath.Child("ContainerStatuses"))...)

	// field core.PodStatus.EphemeralContainerStatuses
	errs = append(errs,
		func(obj, oldObj []core.ContainerStatus, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.ContainerStatus, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_ContainerStatus(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.EphemeralContainerStatuses, safe.Field(oldObj, func(oldObj *core.PodStatus) []core.ContainerStatus { return oldObj.EphemeralContainerStatuses }), fldPath.Child("EphemeralContainerStatuses"))...)

	// field core.PodStatus.Resize
	errs = append(errs,
		func(obj, oldObj *core.PodResizeStatus, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Resize, safe.Field(oldObj, func(oldObj *core.PodStatus) *core.PodResizeStatus { return &oldObj.Resize }), fldPath.Child("Resize"))...)

	// field core.PodStatus.ResourceClaimStatuses
	errs = append(errs,
		func(obj, oldObj []core.PodResourceClaimStatus, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.ResourceClaimStatuses, safe.Field(oldObj, func(oldObj *core.PodStatus) []core.PodResourceClaimStatus { return oldObj.ResourceClaimStatuses }), fldPath.Child("ResourceClaimStatuses"))...)

	return errs
}

func Validate_PodStatusResult(opCtx operation.Context, obj, oldObj *core.PodStatusResult, fldPath *field.Path) (errs field.ErrorList) {
	// field core.PodStatusResult.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.PodStatusResult) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.PodStatusResult.ObjectMeta
	errs = append(errs,
		func(obj, oldObj *v1.ObjectMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ObjectMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ObjectMeta, safe.Field(oldObj, func(oldObj *core.PodStatusResult) *v1.ObjectMeta { return &oldObj.ObjectMeta }), fldPath.Child("ObjectMeta"))...)

	// field core.PodStatusResult.Status
	errs = append(errs,
		func(obj, oldObj *core.PodStatus, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_PodStatus(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.Status, safe.Field(oldObj, func(oldObj *core.PodStatusResult) *core.PodStatus { return &oldObj.Status }), fldPath.Child("Status"))...)

	return errs
}

func Validate_PodTemplate(opCtx operation.Context, obj, oldObj *core.PodTemplate, fldPath *field.Path) (errs field.ErrorList) {
	// field core.PodTemplate.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.PodTemplate) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.PodTemplate.ObjectMeta
	errs = append(errs,
		func(obj, oldObj *v1.ObjectMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ObjectMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ObjectMeta, safe.Field(oldObj, func(oldObj *core.PodTemplate) *v1.ObjectMeta { return &oldObj.ObjectMeta }), fldPath.Child("ObjectMeta"))...)

	// field core.PodTemplate.Template
	errs = append(errs,
		func(obj, oldObj *core.PodTemplateSpec, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_PodTemplateSpec(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.Template, safe.Field(oldObj, func(oldObj *core.PodTemplate) *core.PodTemplateSpec { return &oldObj.Template }), fldPath.Child("Template"))...)

	return errs
}

func Validate_PodTemplateList(opCtx operation.Context, obj, oldObj *core.PodTemplateList, fldPath *field.Path) (errs field.ErrorList) {
	// field core.PodTemplateList.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.PodTemplateList) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.PodTemplateList.ListMeta
	errs = append(errs,
		func(obj, oldObj *v1.ListMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ListMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ListMeta, safe.Field(oldObj, func(oldObj *core.PodTemplateList) *v1.ListMeta { return &oldObj.ListMeta }), fldPath.Child("ListMeta"))...)

	// field core.PodTemplateList.Items
	errs = append(errs,
		func(obj, oldObj []core.PodTemplate, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.PodTemplate, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_PodTemplate(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Items, safe.Field(oldObj, func(oldObj *core.PodTemplateList) []core.PodTemplate { return oldObj.Items }), fldPath.Child("Items"))...)

	return errs
}

func Validate_PodTemplateSpec(opCtx operation.Context, obj, oldObj *core.PodTemplateSpec, fldPath *field.Path) (errs field.ErrorList) {
	// field core.PodTemplateSpec.ObjectMeta
	errs = append(errs,
		func(obj, oldObj *v1.ObjectMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ObjectMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ObjectMeta, safe.Field(oldObj, func(oldObj *core.PodTemplateSpec) *v1.ObjectMeta { return &oldObj.ObjectMeta }), fldPath.Child("ObjectMeta"))...)

	// field core.PodTemplateSpec.Spec
	errs = append(errs,
		func(obj, oldObj *core.PodSpec, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_PodSpec(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.Spec, safe.Field(oldObj, func(oldObj *core.PodTemplateSpec) *core.PodSpec { return &oldObj.Spec }), fldPath.Child("Spec"))...)

	return errs
}

func Validate_PortStatus(opCtx operation.Context, obj, oldObj *core.PortStatus, fldPath *field.Path) (errs field.ErrorList) {
	// field core.PortStatus.Port has no validation
	// field core.PortStatus.Protocol has no validation

	// field core.PortStatus.Error
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Error, safe.Field(oldObj, func(oldObj *core.PortStatus) *string { return oldObj.Error }), fldPath.Child("Error"))...)

	return errs
}

func Validate_PortworxVolumeSource(opCtx operation.Context, obj, oldObj *core.PortworxVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.PortworxVolumeSource.VolumeID has no validation

	// field core.PortworxVolumeSource.FSType
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.FSType, safe.Field(oldObj, func(oldObj *core.PortworxVolumeSource) *string { return &oldObj.FSType }), fldPath.Child("FSType"))...)

	// field core.PortworxVolumeSource.ReadOnly
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ReadOnly, safe.Field(oldObj, func(oldObj *core.PortworxVolumeSource) *bool { return &oldObj.ReadOnly }), fldPath.Child("ReadOnly"))...)

	return errs
}

func Validate_PreferredSchedulingTerm(opCtx operation.Context, obj, oldObj *core.PreferredSchedulingTerm, fldPath *field.Path) (errs field.ErrorList) {
	// field core.PreferredSchedulingTerm.Weight has no validation

	// field core.PreferredSchedulingTerm.Preference
	errs = append(errs,
		func(obj, oldObj *core.NodeSelectorTerm, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, Validate_NodeSelectorTerm(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.Preference, safe.Field(oldObj, func(oldObj *core.PreferredSchedulingTerm) *core.NodeSelectorTerm { return &oldObj.Preference }), fldPath.Child("Preference"))...)

	return errs
}

func Validate_Probe(opCtx operation.Context, obj, oldObj *core.Probe, fldPath *field.Path) (errs field.ErrorList) {
	// field core.Probe.ProbeHandler
	errs = append(errs,
		func(obj, oldObj *core.ProbeHandler, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, Validate_ProbeHandler(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ProbeHandler, safe.Field(oldObj, func(oldObj *core.Probe) *core.ProbeHandler { return &oldObj.ProbeHandler }), fldPath.Child("ProbeHandler"))...)

	// field core.Probe.InitialDelaySeconds
	errs = append(errs,
		func(obj, oldObj *int32, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.InitialDelaySeconds, safe.Field(oldObj, func(oldObj *core.Probe) *int32 { return &oldObj.InitialDelaySeconds }), fldPath.Child("InitialDelaySeconds"))...)

	// field core.Probe.TimeoutSeconds
	errs = append(errs,
		func(obj, oldObj *int32, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.TimeoutSeconds, safe.Field(oldObj, func(oldObj *core.Probe) *int32 { return &oldObj.TimeoutSeconds }), fldPath.Child("TimeoutSeconds"))...)

	// field core.Probe.PeriodSeconds
	errs = append(errs,
		func(obj, oldObj *int32, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.PeriodSeconds, safe.Field(oldObj, func(oldObj *core.Probe) *int32 { return &oldObj.PeriodSeconds }), fldPath.Child("PeriodSeconds"))...)

	// field core.Probe.SuccessThreshold
	errs = append(errs,
		func(obj, oldObj *int32, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.SuccessThreshold, safe.Field(oldObj, func(oldObj *core.Probe) *int32 { return &oldObj.SuccessThreshold }), fldPath.Child("SuccessThreshold"))...)

	// field core.Probe.FailureThreshold
	errs = append(errs,
		func(obj, oldObj *int32, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.FailureThreshold, safe.Field(oldObj, func(oldObj *core.Probe) *int32 { return &oldObj.FailureThreshold }), fldPath.Child("FailureThreshold"))...)

	// field core.Probe.TerminationGracePeriodSeconds
	errs = append(errs,
		func(obj, oldObj *int64, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.TerminationGracePeriodSeconds, safe.Field(oldObj, func(oldObj *core.Probe) *int64 { return oldObj.TerminationGracePeriodSeconds }), fldPath.Child("TerminationGracePeriodSeconds"))...)

	return errs
}

func Validate_ProbeHandler(opCtx operation.Context, obj, oldObj *core.ProbeHandler, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ProbeHandler.Exec
	errs = append(errs,
		func(obj, oldObj *core.ExecAction, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_ExecAction(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.Exec, safe.Field(oldObj, func(oldObj *core.ProbeHandler) *core.ExecAction { return oldObj.Exec }), fldPath.Child("Exec"))...)

	// field core.ProbeHandler.HTTPGet
	errs = append(errs,
		func(obj, oldObj *core.HTTPGetAction, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_HTTPGetAction(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.HTTPGet, safe.Field(oldObj, func(oldObj *core.ProbeHandler) *core.HTTPGetAction { return oldObj.HTTPGet }), fldPath.Child("HTTPGet"))...)

	// field core.ProbeHandler.TCPSocket
	errs = append(errs,
		func(obj, oldObj *core.TCPSocketAction, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_TCPSocketAction(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.TCPSocket, safe.Field(oldObj, func(oldObj *core.ProbeHandler) *core.TCPSocketAction { return oldObj.TCPSocket }), fldPath.Child("TCPSocket"))...)

	// field core.ProbeHandler.GRPC
	errs = append(errs,
		func(obj, oldObj *core.GRPCAction, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_GRPCAction(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.GRPC, safe.Field(oldObj, func(oldObj *core.ProbeHandler) *core.GRPCAction { return oldObj.GRPC }), fldPath.Child("GRPC"))...)

	return errs
}

func Validate_ProjectedVolumeSource(opCtx operation.Context, obj, oldObj *core.ProjectedVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ProjectedVolumeSource.Sources
	errs = append(errs,
		func(obj, oldObj []core.VolumeProjection, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.VolumeProjection, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_VolumeProjection(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Sources, safe.Field(oldObj, func(oldObj *core.ProjectedVolumeSource) []core.VolumeProjection { return oldObj.Sources }), fldPath.Child("Sources"))...)

	// field core.ProjectedVolumeSource.DefaultMode
	errs = append(errs,
		func(obj, oldObj *int32, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.DefaultMode, safe.Field(oldObj, func(oldObj *core.ProjectedVolumeSource) *int32 { return oldObj.DefaultMode }), fldPath.Child("DefaultMode"))...)

	return errs
}

func Validate_QuobyteVolumeSource(opCtx operation.Context, obj, oldObj *core.QuobyteVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.QuobyteVolumeSource.Registry has no validation
	// field core.QuobyteVolumeSource.Volume has no validation

	// field core.QuobyteVolumeSource.ReadOnly
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ReadOnly, safe.Field(oldObj, func(oldObj *core.QuobyteVolumeSource) *bool { return &oldObj.ReadOnly }), fldPath.Child("ReadOnly"))...)

	// field core.QuobyteVolumeSource.User
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.User, safe.Field(oldObj, func(oldObj *core.QuobyteVolumeSource) *string { return &oldObj.User }), fldPath.Child("User"))...)

	// field core.QuobyteVolumeSource.Group
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Group, safe.Field(oldObj, func(oldObj *core.QuobyteVolumeSource) *string { return &oldObj.Group }), fldPath.Child("Group"))...)

	// field core.QuobyteVolumeSource.Tenant
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Tenant, safe.Field(oldObj, func(oldObj *core.QuobyteVolumeSource) *string { return &oldObj.Tenant }), fldPath.Child("Tenant"))...)

	return errs
}

func Validate_RBDPersistentVolumeSource(opCtx operation.Context, obj, oldObj *core.RBDPersistentVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.RBDPersistentVolumeSource.CephMonitors has no validation
	// field core.RBDPersistentVolumeSource.RBDImage has no validation

	// field core.RBDPersistentVolumeSource.FSType
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.FSType, safe.Field(oldObj, func(oldObj *core.RBDPersistentVolumeSource) *string { return &oldObj.FSType }), fldPath.Child("FSType"))...)

	// field core.RBDPersistentVolumeSource.RBDPool
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.RBDPool, safe.Field(oldObj, func(oldObj *core.RBDPersistentVolumeSource) *string { return &oldObj.RBDPool }), fldPath.Child("RBDPool"))...)

	// field core.RBDPersistentVolumeSource.RadosUser
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.RadosUser, safe.Field(oldObj, func(oldObj *core.RBDPersistentVolumeSource) *string { return &oldObj.RadosUser }), fldPath.Child("RadosUser"))...)

	// field core.RBDPersistentVolumeSource.Keyring
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Keyring, safe.Field(oldObj, func(oldObj *core.RBDPersistentVolumeSource) *string { return &oldObj.Keyring }), fldPath.Child("Keyring"))...)

	// field core.RBDPersistentVolumeSource.SecretRef
	errs = append(errs,
		func(obj, oldObj *core.SecretReference, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_SecretReference(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.SecretRef, safe.Field(oldObj, func(oldObj *core.RBDPersistentVolumeSource) *core.SecretReference { return oldObj.SecretRef }), fldPath.Child("SecretRef"))...)

	// field core.RBDPersistentVolumeSource.ReadOnly
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ReadOnly, safe.Field(oldObj, func(oldObj *core.RBDPersistentVolumeSource) *bool { return &oldObj.ReadOnly }), fldPath.Child("ReadOnly"))...)

	return errs
}

func Validate_RBDVolumeSource(opCtx operation.Context, obj, oldObj *core.RBDVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.RBDVolumeSource.CephMonitors has no validation
	// field core.RBDVolumeSource.RBDImage has no validation

	// field core.RBDVolumeSource.FSType
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.FSType, safe.Field(oldObj, func(oldObj *core.RBDVolumeSource) *string { return &oldObj.FSType }), fldPath.Child("FSType"))...)

	// field core.RBDVolumeSource.RBDPool
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.RBDPool, safe.Field(oldObj, func(oldObj *core.RBDVolumeSource) *string { return &oldObj.RBDPool }), fldPath.Child("RBDPool"))...)

	// field core.RBDVolumeSource.RadosUser
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.RadosUser, safe.Field(oldObj, func(oldObj *core.RBDVolumeSource) *string { return &oldObj.RadosUser }), fldPath.Child("RadosUser"))...)

	// field core.RBDVolumeSource.Keyring
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Keyring, safe.Field(oldObj, func(oldObj *core.RBDVolumeSource) *string { return &oldObj.Keyring }), fldPath.Child("Keyring"))...)

	// field core.RBDVolumeSource.SecretRef
	errs = append(errs,
		func(obj, oldObj *core.LocalObjectReference, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.SecretRef, safe.Field(oldObj, func(oldObj *core.RBDVolumeSource) *core.LocalObjectReference { return oldObj.SecretRef }), fldPath.Child("SecretRef"))...)

	// field core.RBDVolumeSource.ReadOnly
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ReadOnly, safe.Field(oldObj, func(oldObj *core.RBDVolumeSource) *bool { return &oldObj.ReadOnly }), fldPath.Child("ReadOnly"))...)

	return errs
}

func Validate_RangeAllocation(opCtx operation.Context, obj, oldObj *core.RangeAllocation, fldPath *field.Path) (errs field.ErrorList) {
	// field core.RangeAllocation.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.RangeAllocation) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.RangeAllocation.ObjectMeta
	errs = append(errs,
		func(obj, oldObj *v1.ObjectMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ObjectMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ObjectMeta, safe.Field(oldObj, func(oldObj *core.RangeAllocation) *v1.ObjectMeta { return &oldObj.ObjectMeta }), fldPath.Child("ObjectMeta"))...)

	// field core.RangeAllocation.Range has no validation
	// field core.RangeAllocation.Data has no validation
	return errs
}

func Validate_ReplicationController(opCtx operation.Context, obj, oldObj *core.ReplicationController, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ReplicationController.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.ReplicationController) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.ReplicationController.ObjectMeta
	errs = append(errs,
		func(obj, oldObj *v1.ObjectMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ObjectMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ObjectMeta, safe.Field(oldObj, func(oldObj *core.ReplicationController) *v1.ObjectMeta { return &oldObj.ObjectMeta }), fldPath.Child("ObjectMeta"))...)

	// field core.ReplicationController.Spec
	errs = append(errs,
		func(obj, oldObj *core.ReplicationControllerSpec, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_ReplicationControllerSpec(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.Spec, safe.Field(oldObj, func(oldObj *core.ReplicationController) *core.ReplicationControllerSpec { return &oldObj.Spec }), fldPath.Child("Spec"))...)

	// field core.ReplicationController.Status
	errs = append(errs,
		func(obj, oldObj *core.ReplicationControllerStatus, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_ReplicationControllerStatus(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.Status, safe.Field(oldObj, func(oldObj *core.ReplicationController) *core.ReplicationControllerStatus { return &oldObj.Status }), fldPath.Child("Status"))...)

	return errs
}

func Validate_ReplicationControllerCondition(opCtx operation.Context, obj, oldObj *core.ReplicationControllerCondition, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ReplicationControllerCondition.Type has no validation
	// field core.ReplicationControllerCondition.Status has no validation

	// field core.ReplicationControllerCondition.LastTransitionTime
	errs = append(errs,
		func(obj, oldObj *v1.Time, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.LastTransitionTime, safe.Field(oldObj, func(oldObj *core.ReplicationControllerCondition) *v1.Time { return &oldObj.LastTransitionTime }), fldPath.Child("LastTransitionTime"))...)

	// field core.ReplicationControllerCondition.Reason
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Reason, safe.Field(oldObj, func(oldObj *core.ReplicationControllerCondition) *string { return &oldObj.Reason }), fldPath.Child("Reason"))...)

	// field core.ReplicationControllerCondition.Message
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Message, safe.Field(oldObj, func(oldObj *core.ReplicationControllerCondition) *string { return &oldObj.Message }), fldPath.Child("Message"))...)

	return errs
}

func Validate_ReplicationControllerList(opCtx operation.Context, obj, oldObj *core.ReplicationControllerList, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ReplicationControllerList.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.ReplicationControllerList) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.ReplicationControllerList.ListMeta
	errs = append(errs,
		func(obj, oldObj *v1.ListMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ListMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ListMeta, safe.Field(oldObj, func(oldObj *core.ReplicationControllerList) *v1.ListMeta { return &oldObj.ListMeta }), fldPath.Child("ListMeta"))...)

	// field core.ReplicationControllerList.Items
	errs = append(errs,
		func(obj, oldObj []core.ReplicationController, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.ReplicationController, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_ReplicationController(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Items, safe.Field(oldObj, func(oldObj *core.ReplicationControllerList) []core.ReplicationController { return oldObj.Items }), fldPath.Child("Items"))...)

	return errs
}

func Validate_ReplicationControllerSpec(opCtx operation.Context, obj, oldObj *core.ReplicationControllerSpec, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ReplicationControllerSpec.Replicas has no validation

	// field core.ReplicationControllerSpec.MinReadySeconds
	errs = append(errs,
		func(obj, oldObj *int32, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.MinReadySeconds, safe.Field(oldObj, func(oldObj *core.ReplicationControllerSpec) *int32 { return &oldObj.MinReadySeconds }), fldPath.Child("MinReadySeconds"))...)

	// field core.ReplicationControllerSpec.Selector has no validation

	// field core.ReplicationControllerSpec.Template
	errs = append(errs,
		func(obj, oldObj *core.PodTemplateSpec, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_PodTemplateSpec(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.Template, safe.Field(oldObj, func(oldObj *core.ReplicationControllerSpec) *core.PodTemplateSpec { return oldObj.Template }), fldPath.Child("Template"))...)

	return errs
}

func Validate_ReplicationControllerStatus(opCtx operation.Context, obj, oldObj *core.ReplicationControllerStatus, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ReplicationControllerStatus.Replicas has no validation

	// field core.ReplicationControllerStatus.FullyLabeledReplicas
	errs = append(errs,
		func(obj, oldObj *int32, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.FullyLabeledReplicas, safe.Field(oldObj, func(oldObj *core.ReplicationControllerStatus) *int32 { return &oldObj.FullyLabeledReplicas }), fldPath.Child("FullyLabeledReplicas"))...)

	// field core.ReplicationControllerStatus.ReadyReplicas
	errs = append(errs,
		func(obj, oldObj *int32, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ReadyReplicas, safe.Field(oldObj, func(oldObj *core.ReplicationControllerStatus) *int32 { return &oldObj.ReadyReplicas }), fldPath.Child("ReadyReplicas"))...)

	// field core.ReplicationControllerStatus.AvailableReplicas
	errs = append(errs,
		func(obj, oldObj *int32, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.AvailableReplicas, safe.Field(oldObj, func(oldObj *core.ReplicationControllerStatus) *int32 { return &oldObj.AvailableReplicas }), fldPath.Child("AvailableReplicas"))...)

	// field core.ReplicationControllerStatus.ObservedGeneration
	errs = append(errs,
		func(obj, oldObj *int64, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ObservedGeneration, safe.Field(oldObj, func(oldObj *core.ReplicationControllerStatus) *int64 { return &oldObj.ObservedGeneration }), fldPath.Child("ObservedGeneration"))...)

	// field core.ReplicationControllerStatus.Conditions
	errs = append(errs,
		func(obj, oldObj []core.ReplicationControllerCondition, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.ReplicationControllerCondition, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_ReplicationControllerCondition(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Conditions, safe.Field(oldObj, func(oldObj *core.ReplicationControllerStatus) []core.ReplicationControllerCondition {
			return oldObj.Conditions
		}), fldPath.Child("Conditions"))...)

	return errs
}

func Validate_ResourceClaim(opCtx operation.Context, obj, oldObj *core.ResourceClaim, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ResourceClaim.Name has no validation

	// field core.ResourceClaim.Request
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Request, safe.Field(oldObj, func(oldObj *core.ResourceClaim) *string { return &oldObj.Request }), fldPath.Child("Request"))...)

	return errs
}

func Validate_ResourceFieldSelector(opCtx operation.Context, obj, oldObj *core.ResourceFieldSelector, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ResourceFieldSelector.ContainerName
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ContainerName, safe.Field(oldObj, func(oldObj *core.ResourceFieldSelector) *string { return &oldObj.ContainerName }), fldPath.Child("ContainerName"))...)

	// field core.ResourceFieldSelector.Resource has no validation

	// field core.ResourceFieldSelector.Divisor
	errs = append(errs,
		func(obj, oldObj *resource.Quantity, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			// NOTE: Type resource.Quantity is in a non-included package.
			//       Any validations defined on this type are not available from here.
			return
		}(&obj.Divisor, safe.Field(oldObj, func(oldObj *core.ResourceFieldSelector) *resource.Quantity { return &oldObj.Divisor }), fldPath.Child("Divisor"))...)

	return errs
}

func Validate_ResourceQuota(opCtx operation.Context, obj, oldObj *core.ResourceQuota, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ResourceQuota.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.ResourceQuota) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.ResourceQuota.ObjectMeta
	errs = append(errs,
		func(obj, oldObj *v1.ObjectMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ObjectMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ObjectMeta, safe.Field(oldObj, func(oldObj *core.ResourceQuota) *v1.ObjectMeta { return &oldObj.ObjectMeta }), fldPath.Child("ObjectMeta"))...)

	// field core.ResourceQuota.Spec
	errs = append(errs,
		func(obj, oldObj *core.ResourceQuotaSpec, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_ResourceQuotaSpec(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.Spec, safe.Field(oldObj, func(oldObj *core.ResourceQuota) *core.ResourceQuotaSpec { return &oldObj.Spec }), fldPath.Child("Spec"))...)

	// field core.ResourceQuota.Status
	errs = append(errs,
		func(obj, oldObj *core.ResourceQuotaStatus, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_ResourceQuotaStatus(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.Status, safe.Field(oldObj, func(oldObj *core.ResourceQuota) *core.ResourceQuotaStatus { return &oldObj.Status }), fldPath.Child("Status"))...)

	return errs
}

func Validate_ResourceQuotaList(opCtx operation.Context, obj, oldObj *core.ResourceQuotaList, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ResourceQuotaList.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.ResourceQuotaList) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.ResourceQuotaList.ListMeta
	errs = append(errs,
		func(obj, oldObj *v1.ListMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ListMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ListMeta, safe.Field(oldObj, func(oldObj *core.ResourceQuotaList) *v1.ListMeta { return &oldObj.ListMeta }), fldPath.Child("ListMeta"))...)

	// field core.ResourceQuotaList.Items
	errs = append(errs,
		func(obj, oldObj []core.ResourceQuota, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.ResourceQuota, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_ResourceQuota(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Items, safe.Field(oldObj, func(oldObj *core.ResourceQuotaList) []core.ResourceQuota { return oldObj.Items }), fldPath.Child("Items"))...)

	return errs
}

func Validate_ResourceQuotaSpec(opCtx operation.Context, obj, oldObj *core.ResourceQuotaSpec, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ResourceQuotaSpec.Hard
	errs = append(errs,
		func(obj, oldObj core.ResourceList, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for key, val := range obj {
				errs = append(errs,
					func(obj, oldObj *resource.Quantity, fldPath *field.Path) (errs field.ErrorList) {
						// NOTE: Type resource.Quantity is in a non-included package.
						//       Any validations defined on this type are not available from here.
						return
					}(&val, safe.Lookup(oldObj, key, safe.PtrTo), fldPath.Key(string(key)))...)
			}
			return
		}(obj.Hard, safe.Field(oldObj, func(oldObj *core.ResourceQuotaSpec) core.ResourceList { return oldObj.Hard }), fldPath.Child("Hard"))...)

	// field core.ResourceQuotaSpec.Scopes
	errs = append(errs,
		func(obj, oldObj []core.ResourceQuotaScope, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Scopes, safe.Field(oldObj, func(oldObj *core.ResourceQuotaSpec) []core.ResourceQuotaScope { return oldObj.Scopes }), fldPath.Child("Scopes"))...)

	// field core.ResourceQuotaSpec.ScopeSelector
	errs = append(errs,
		func(obj, oldObj *core.ScopeSelector, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_ScopeSelector(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.ScopeSelector, safe.Field(oldObj, func(oldObj *core.ResourceQuotaSpec) *core.ScopeSelector { return oldObj.ScopeSelector }), fldPath.Child("ScopeSelector"))...)

	return errs
}

func Validate_ResourceQuotaStatus(opCtx operation.Context, obj, oldObj *core.ResourceQuotaStatus, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ResourceQuotaStatus.Hard
	errs = append(errs,
		func(obj, oldObj core.ResourceList, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for key, val := range obj {
				errs = append(errs,
					func(obj, oldObj *resource.Quantity, fldPath *field.Path) (errs field.ErrorList) {
						// NOTE: Type resource.Quantity is in a non-included package.
						//       Any validations defined on this type are not available from here.
						return
					}(&val, safe.Lookup(oldObj, key, safe.PtrTo), fldPath.Key(string(key)))...)
			}
			return
		}(obj.Hard, safe.Field(oldObj, func(oldObj *core.ResourceQuotaStatus) core.ResourceList { return oldObj.Hard }), fldPath.Child("Hard"))...)

	// field core.ResourceQuotaStatus.Used
	errs = append(errs,
		func(obj, oldObj core.ResourceList, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for key, val := range obj {
				errs = append(errs,
					func(obj, oldObj *resource.Quantity, fldPath *field.Path) (errs field.ErrorList) {
						// NOTE: Type resource.Quantity is in a non-included package.
						//       Any validations defined on this type are not available from here.
						return
					}(&val, safe.Lookup(oldObj, key, safe.PtrTo), fldPath.Key(string(key)))...)
			}
			return
		}(obj.Used, safe.Field(oldObj, func(oldObj *core.ResourceQuotaStatus) core.ResourceList { return oldObj.Used }), fldPath.Child("Used"))...)

	return errs
}

func Validate_ResourceRequirements(opCtx operation.Context, obj, oldObj *core.ResourceRequirements, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ResourceRequirements.Limits
	errs = append(errs,
		func(obj, oldObj core.ResourceList, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for key, val := range obj {
				errs = append(errs,
					func(obj, oldObj *resource.Quantity, fldPath *field.Path) (errs field.ErrorList) {
						// NOTE: Type resource.Quantity is in a non-included package.
						//       Any validations defined on this type are not available from here.
						return
					}(&val, safe.Lookup(oldObj, key, safe.PtrTo), fldPath.Key(string(key)))...)
			}
			return
		}(obj.Limits, safe.Field(oldObj, func(oldObj *core.ResourceRequirements) core.ResourceList { return oldObj.Limits }), fldPath.Child("Limits"))...)

	// field core.ResourceRequirements.Requests
	errs = append(errs,
		func(obj, oldObj core.ResourceList, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for key, val := range obj {
				errs = append(errs,
					func(obj, oldObj *resource.Quantity, fldPath *field.Path) (errs field.ErrorList) {
						// NOTE: Type resource.Quantity is in a non-included package.
						//       Any validations defined on this type are not available from here.
						return
					}(&val, safe.Lookup(oldObj, key, safe.PtrTo), fldPath.Key(string(key)))...)
			}
			return
		}(obj.Requests, safe.Field(oldObj, func(oldObj *core.ResourceRequirements) core.ResourceList { return oldObj.Requests }), fldPath.Child("Requests"))...)

	// field core.ResourceRequirements.Claims
	errs = append(errs,
		func(obj, oldObj []core.ResourceClaim, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.ResourceClaim, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_ResourceClaim(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Claims, safe.Field(oldObj, func(oldObj *core.ResourceRequirements) []core.ResourceClaim { return oldObj.Claims }), fldPath.Child("Claims"))...)

	return errs
}

func Validate_SELinuxOptions(opCtx operation.Context, obj, oldObj *core.SELinuxOptions, fldPath *field.Path) (errs field.ErrorList) {
	// field core.SELinuxOptions.User
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.User, safe.Field(oldObj, func(oldObj *core.SELinuxOptions) *string { return &oldObj.User }), fldPath.Child("User"))...)

	// field core.SELinuxOptions.Role
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Role, safe.Field(oldObj, func(oldObj *core.SELinuxOptions) *string { return &oldObj.Role }), fldPath.Child("Role"))...)

	// field core.SELinuxOptions.Type
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Type, safe.Field(oldObj, func(oldObj *core.SELinuxOptions) *string { return &oldObj.Type }), fldPath.Child("Type"))...)

	// field core.SELinuxOptions.Level
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Level, safe.Field(oldObj, func(oldObj *core.SELinuxOptions) *string { return &oldObj.Level }), fldPath.Child("Level"))...)

	return errs
}

func Validate_ScaleIOPersistentVolumeSource(opCtx operation.Context, obj, oldObj *core.ScaleIOPersistentVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ScaleIOPersistentVolumeSource.Gateway has no validation
	// field core.ScaleIOPersistentVolumeSource.System has no validation

	// field core.ScaleIOPersistentVolumeSource.SecretRef
	errs = append(errs,
		func(obj, oldObj *core.SecretReference, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, Validate_SecretReference(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.SecretRef, safe.Field(oldObj, func(oldObj *core.ScaleIOPersistentVolumeSource) *core.SecretReference { return oldObj.SecretRef }), fldPath.Child("SecretRef"))...)

	// field core.ScaleIOPersistentVolumeSource.SSLEnabled
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.SSLEnabled, safe.Field(oldObj, func(oldObj *core.ScaleIOPersistentVolumeSource) *bool { return &oldObj.SSLEnabled }), fldPath.Child("SSLEnabled"))...)

	// field core.ScaleIOPersistentVolumeSource.ProtectionDomain
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ProtectionDomain, safe.Field(oldObj, func(oldObj *core.ScaleIOPersistentVolumeSource) *string { return &oldObj.ProtectionDomain }), fldPath.Child("ProtectionDomain"))...)

	// field core.ScaleIOPersistentVolumeSource.StoragePool
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.StoragePool, safe.Field(oldObj, func(oldObj *core.ScaleIOPersistentVolumeSource) *string { return &oldObj.StoragePool }), fldPath.Child("StoragePool"))...)

	// field core.ScaleIOPersistentVolumeSource.StorageMode
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.StorageMode, safe.Field(oldObj, func(oldObj *core.ScaleIOPersistentVolumeSource) *string { return &oldObj.StorageMode }), fldPath.Child("StorageMode"))...)

	// field core.ScaleIOPersistentVolumeSource.VolumeName has no validation

	// field core.ScaleIOPersistentVolumeSource.FSType
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.FSType, safe.Field(oldObj, func(oldObj *core.ScaleIOPersistentVolumeSource) *string { return &oldObj.FSType }), fldPath.Child("FSType"))...)

	// field core.ScaleIOPersistentVolumeSource.ReadOnly
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ReadOnly, safe.Field(oldObj, func(oldObj *core.ScaleIOPersistentVolumeSource) *bool { return &oldObj.ReadOnly }), fldPath.Child("ReadOnly"))...)

	return errs
}

func Validate_ScaleIOVolumeSource(opCtx operation.Context, obj, oldObj *core.ScaleIOVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ScaleIOVolumeSource.Gateway has no validation
	// field core.ScaleIOVolumeSource.System has no validation
	// field core.ScaleIOVolumeSource.SecretRef has no validation

	// field core.ScaleIOVolumeSource.SSLEnabled
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.SSLEnabled, safe.Field(oldObj, func(oldObj *core.ScaleIOVolumeSource) *bool { return &oldObj.SSLEnabled }), fldPath.Child("SSLEnabled"))...)

	// field core.ScaleIOVolumeSource.ProtectionDomain
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ProtectionDomain, safe.Field(oldObj, func(oldObj *core.ScaleIOVolumeSource) *string { return &oldObj.ProtectionDomain }), fldPath.Child("ProtectionDomain"))...)

	// field core.ScaleIOVolumeSource.StoragePool
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.StoragePool, safe.Field(oldObj, func(oldObj *core.ScaleIOVolumeSource) *string { return &oldObj.StoragePool }), fldPath.Child("StoragePool"))...)

	// field core.ScaleIOVolumeSource.StorageMode
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.StorageMode, safe.Field(oldObj, func(oldObj *core.ScaleIOVolumeSource) *string { return &oldObj.StorageMode }), fldPath.Child("StorageMode"))...)

	// field core.ScaleIOVolumeSource.VolumeName has no validation

	// field core.ScaleIOVolumeSource.FSType
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.FSType, safe.Field(oldObj, func(oldObj *core.ScaleIOVolumeSource) *string { return &oldObj.FSType }), fldPath.Child("FSType"))...)

	// field core.ScaleIOVolumeSource.ReadOnly
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ReadOnly, safe.Field(oldObj, func(oldObj *core.ScaleIOVolumeSource) *bool { return &oldObj.ReadOnly }), fldPath.Child("ReadOnly"))...)

	return errs
}

func Validate_ScopeSelector(opCtx operation.Context, obj, oldObj *core.ScopeSelector, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ScopeSelector.MatchExpressions
	errs = append(errs,
		func(obj, oldObj []core.ScopedResourceSelectorRequirement, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.ScopedResourceSelectorRequirement, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_ScopedResourceSelectorRequirement(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.MatchExpressions, safe.Field(oldObj, func(oldObj *core.ScopeSelector) []core.ScopedResourceSelectorRequirement {
			return oldObj.MatchExpressions
		}), fldPath.Child("MatchExpressions"))...)

	return errs
}

func Validate_ScopedResourceSelectorRequirement(opCtx operation.Context, obj, oldObj *core.ScopedResourceSelectorRequirement, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ScopedResourceSelectorRequirement.ScopeName has no validation
	// field core.ScopedResourceSelectorRequirement.Operator has no validation

	// field core.ScopedResourceSelectorRequirement.Values
	errs = append(errs,
		func(obj, oldObj []string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Values, safe.Field(oldObj, func(oldObj *core.ScopedResourceSelectorRequirement) []string { return oldObj.Values }), fldPath.Child("Values"))...)

	return errs
}

var unionMembershipForSeccompProfile = validate.NewDiscriminatedUnionMembership("Type")

func Validate_SeccompProfile(opCtx operation.Context, obj, oldObj *core.SeccompProfile, fldPath *field.Path) (errs field.ErrorList) {
	// type core.SeccompProfile
	errs = append(errs, validate.DiscriminatedUnion(opCtx, fldPath, obj, oldObj, unionMembershipForSeccompProfile, obj.Type)...)

	// field core.SeccompProfile.Type has no validation

	// field core.SeccompProfile.LocalhostProfile
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.LocalhostProfile, safe.Field(oldObj, func(oldObj *core.SeccompProfile) *string { return oldObj.LocalhostProfile }), fldPath.Child("LocalhostProfile"))...)

	return errs
}

func Validate_Secret(opCtx operation.Context, obj, oldObj *core.Secret, fldPath *field.Path) (errs field.ErrorList) {
	// field core.Secret.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.Secret) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.Secret.ObjectMeta
	errs = append(errs,
		func(obj, oldObj *v1.ObjectMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ObjectMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ObjectMeta, safe.Field(oldObj, func(oldObj *core.Secret) *v1.ObjectMeta { return &oldObj.ObjectMeta }), fldPath.Child("ObjectMeta"))...)

	// field core.Secret.Immutable
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Immutable, safe.Field(oldObj, func(oldObj *core.Secret) *bool { return oldObj.Immutable }), fldPath.Child("Immutable"))...)

	// field core.Secret.Data
	errs = append(errs,
		func(obj, oldObj map[string][]byte, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Data, safe.Field(oldObj, func(oldObj *core.Secret) map[string][]byte { return oldObj.Data }), fldPath.Child("Data"))...)

	// field core.Secret.Type
	errs = append(errs,
		func(obj, oldObj *core.SecretType, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Type, safe.Field(oldObj, func(oldObj *core.Secret) *core.SecretType { return &oldObj.Type }), fldPath.Child("Type"))...)

	return errs
}

func Validate_SecretEnvSource(opCtx operation.Context, obj, oldObj *core.SecretEnvSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.SecretEnvSource.LocalObjectReference has no validation

	// field core.SecretEnvSource.Optional
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Optional, safe.Field(oldObj, func(oldObj *core.SecretEnvSource) *bool { return oldObj.Optional }), fldPath.Child("Optional"))...)

	return errs
}

func Validate_SecretKeySelector(opCtx operation.Context, obj, oldObj *core.SecretKeySelector, fldPath *field.Path) (errs field.ErrorList) {
	// field core.SecretKeySelector.LocalObjectReference has no validation
	// field core.SecretKeySelector.Key has no validation

	// field core.SecretKeySelector.Optional
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Optional, safe.Field(oldObj, func(oldObj *core.SecretKeySelector) *bool { return oldObj.Optional }), fldPath.Child("Optional"))...)

	return errs
}

func Validate_SecretList(opCtx operation.Context, obj, oldObj *core.SecretList, fldPath *field.Path) (errs field.ErrorList) {
	// field core.SecretList.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.SecretList) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.SecretList.ListMeta
	errs = append(errs,
		func(obj, oldObj *v1.ListMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ListMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ListMeta, safe.Field(oldObj, func(oldObj *core.SecretList) *v1.ListMeta { return &oldObj.ListMeta }), fldPath.Child("ListMeta"))...)

	// field core.SecretList.Items
	errs = append(errs,
		func(obj, oldObj []core.Secret, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.Secret, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_Secret(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Items, safe.Field(oldObj, func(oldObj *core.SecretList) []core.Secret { return oldObj.Items }), fldPath.Child("Items"))...)

	return errs
}

func Validate_SecretProjection(opCtx operation.Context, obj, oldObj *core.SecretProjection, fldPath *field.Path) (errs field.ErrorList) {
	// field core.SecretProjection.LocalObjectReference has no validation

	// field core.SecretProjection.Items
	errs = append(errs,
		func(obj, oldObj []core.KeyToPath, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.KeyToPath, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_KeyToPath(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Items, safe.Field(oldObj, func(oldObj *core.SecretProjection) []core.KeyToPath { return oldObj.Items }), fldPath.Child("Items"))...)

	// field core.SecretProjection.Optional
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Optional, safe.Field(oldObj, func(oldObj *core.SecretProjection) *bool { return oldObj.Optional }), fldPath.Child("Optional"))...)

	return errs
}

func Validate_SecretReference(opCtx operation.Context, obj, oldObj *core.SecretReference, fldPath *field.Path) (errs field.ErrorList) {
	// field core.SecretReference.Name
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Name, safe.Field(oldObj, func(oldObj *core.SecretReference) *string { return &oldObj.Name }), fldPath.Child("Name"))...)

	// field core.SecretReference.Namespace
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Namespace, safe.Field(oldObj, func(oldObj *core.SecretReference) *string { return &oldObj.Namespace }), fldPath.Child("Namespace"))...)

	return errs
}

func Validate_SecretVolumeSource(opCtx operation.Context, obj, oldObj *core.SecretVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.SecretVolumeSource.SecretName
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.SecretName, safe.Field(oldObj, func(oldObj *core.SecretVolumeSource) *string { return &oldObj.SecretName }), fldPath.Child("SecretName"))...)

	// field core.SecretVolumeSource.Items
	errs = append(errs,
		func(obj, oldObj []core.KeyToPath, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.KeyToPath, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_KeyToPath(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Items, safe.Field(oldObj, func(oldObj *core.SecretVolumeSource) []core.KeyToPath { return oldObj.Items }), fldPath.Child("Items"))...)

	// field core.SecretVolumeSource.DefaultMode
	errs = append(errs,
		func(obj, oldObj *int32, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.DefaultMode, safe.Field(oldObj, func(oldObj *core.SecretVolumeSource) *int32 { return oldObj.DefaultMode }), fldPath.Child("DefaultMode"))...)

	// field core.SecretVolumeSource.Optional
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Optional, safe.Field(oldObj, func(oldObj *core.SecretVolumeSource) *bool { return oldObj.Optional }), fldPath.Child("Optional"))...)

	return errs
}

func Validate_SecurityContext(opCtx operation.Context, obj, oldObj *core.SecurityContext, fldPath *field.Path) (errs field.ErrorList) {
	// field core.SecurityContext.Capabilities
	errs = append(errs,
		func(obj, oldObj *core.Capabilities, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_Capabilities(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.Capabilities, safe.Field(oldObj, func(oldObj *core.SecurityContext) *core.Capabilities { return oldObj.Capabilities }), fldPath.Child("Capabilities"))...)

	// field core.SecurityContext.Privileged
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Privileged, safe.Field(oldObj, func(oldObj *core.SecurityContext) *bool { return oldObj.Privileged }), fldPath.Child("Privileged"))...)

	// field core.SecurityContext.SELinuxOptions
	errs = append(errs,
		func(obj, oldObj *core.SELinuxOptions, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_SELinuxOptions(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.SELinuxOptions, safe.Field(oldObj, func(oldObj *core.SecurityContext) *core.SELinuxOptions { return oldObj.SELinuxOptions }), fldPath.Child("SELinuxOptions"))...)

	// field core.SecurityContext.WindowsOptions
	errs = append(errs,
		func(obj, oldObj *core.WindowsSecurityContextOptions, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_WindowsSecurityContextOptions(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.WindowsOptions, safe.Field(oldObj, func(oldObj *core.SecurityContext) *core.WindowsSecurityContextOptions { return oldObj.WindowsOptions }), fldPath.Child("WindowsOptions"))...)

	// field core.SecurityContext.RunAsUser
	errs = append(errs,
		func(obj, oldObj *int64, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.RunAsUser, safe.Field(oldObj, func(oldObj *core.SecurityContext) *int64 { return oldObj.RunAsUser }), fldPath.Child("RunAsUser"))...)

	// field core.SecurityContext.RunAsGroup
	errs = append(errs,
		func(obj, oldObj *int64, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.RunAsGroup, safe.Field(oldObj, func(oldObj *core.SecurityContext) *int64 { return oldObj.RunAsGroup }), fldPath.Child("RunAsGroup"))...)

	// field core.SecurityContext.RunAsNonRoot
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.RunAsNonRoot, safe.Field(oldObj, func(oldObj *core.SecurityContext) *bool { return oldObj.RunAsNonRoot }), fldPath.Child("RunAsNonRoot"))...)

	// field core.SecurityContext.ReadOnlyRootFilesystem
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.ReadOnlyRootFilesystem, safe.Field(oldObj, func(oldObj *core.SecurityContext) *bool { return oldObj.ReadOnlyRootFilesystem }), fldPath.Child("ReadOnlyRootFilesystem"))...)

	// field core.SecurityContext.AllowPrivilegeEscalation
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.AllowPrivilegeEscalation, safe.Field(oldObj, func(oldObj *core.SecurityContext) *bool { return oldObj.AllowPrivilegeEscalation }), fldPath.Child("AllowPrivilegeEscalation"))...)

	// field core.SecurityContext.ProcMount
	errs = append(errs,
		func(obj, oldObj *core.ProcMountType, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.ProcMount, safe.Field(oldObj, func(oldObj *core.SecurityContext) *core.ProcMountType { return oldObj.ProcMount }), fldPath.Child("ProcMount"))...)

	// field core.SecurityContext.SeccompProfile
	errs = append(errs,
		func(obj, oldObj *core.SeccompProfile, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_SeccompProfile(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.SeccompProfile, safe.Field(oldObj, func(oldObj *core.SecurityContext) *core.SeccompProfile { return oldObj.SeccompProfile }), fldPath.Child("SeccompProfile"))...)

	// field core.SecurityContext.AppArmorProfile
	errs = append(errs,
		func(obj, oldObj *core.AppArmorProfile, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_AppArmorProfile(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.AppArmorProfile, safe.Field(oldObj, func(oldObj *core.SecurityContext) *core.AppArmorProfile { return oldObj.AppArmorProfile }), fldPath.Child("AppArmorProfile"))...)

	return errs
}

func Validate_SerializedReference(opCtx operation.Context, obj, oldObj *core.SerializedReference, fldPath *field.Path) (errs field.ErrorList) {
	// field core.SerializedReference.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.SerializedReference) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.SerializedReference.Reference
	errs = append(errs,
		func(obj, oldObj *core.ObjectReference, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_ObjectReference(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.Reference, safe.Field(oldObj, func(oldObj *core.SerializedReference) *core.ObjectReference { return &oldObj.Reference }), fldPath.Child("Reference"))...)

	return errs
}

func Validate_Service(opCtx operation.Context, obj, oldObj *core.Service, fldPath *field.Path) (errs field.ErrorList) {
	// field core.Service.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.Service) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.Service.ObjectMeta
	errs = append(errs,
		func(obj, oldObj *v1.ObjectMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ObjectMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ObjectMeta, safe.Field(oldObj, func(oldObj *core.Service) *v1.ObjectMeta { return &oldObj.ObjectMeta }), fldPath.Child("ObjectMeta"))...)

	// field core.Service.Spec
	errs = append(errs,
		func(obj, oldObj *core.ServiceSpec, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_ServiceSpec(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.Spec, safe.Field(oldObj, func(oldObj *core.Service) *core.ServiceSpec { return &oldObj.Spec }), fldPath.Child("Spec"))...)

	// field core.Service.Status
	errs = append(errs,
		func(obj, oldObj *core.ServiceStatus, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_ServiceStatus(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.Status, safe.Field(oldObj, func(oldObj *core.Service) *core.ServiceStatus { return &oldObj.Status }), fldPath.Child("Status"))...)

	return errs
}

func Validate_ServiceAccount(opCtx operation.Context, obj, oldObj *core.ServiceAccount, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ServiceAccount.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.ServiceAccount) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.ServiceAccount.ObjectMeta
	errs = append(errs,
		func(obj, oldObj *v1.ObjectMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ObjectMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ObjectMeta, safe.Field(oldObj, func(oldObj *core.ServiceAccount) *v1.ObjectMeta { return &oldObj.ObjectMeta }), fldPath.Child("ObjectMeta"))...)

	// field core.ServiceAccount.Secrets
	errs = append(errs,
		func(obj, oldObj []core.ObjectReference, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.ObjectReference, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_ObjectReference(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Secrets, safe.Field(oldObj, func(oldObj *core.ServiceAccount) []core.ObjectReference { return oldObj.Secrets }), fldPath.Child("Secrets"))...)

	// field core.ServiceAccount.ImagePullSecrets
	errs = append(errs,
		func(obj, oldObj []core.LocalObjectReference, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.ImagePullSecrets, safe.Field(oldObj, func(oldObj *core.ServiceAccount) []core.LocalObjectReference { return oldObj.ImagePullSecrets }), fldPath.Child("ImagePullSecrets"))...)

	// field core.ServiceAccount.AutomountServiceAccountToken
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.AutomountServiceAccountToken, safe.Field(oldObj, func(oldObj *core.ServiceAccount) *bool { return oldObj.AutomountServiceAccountToken }), fldPath.Child("AutomountServiceAccountToken"))...)

	return errs
}

func Validate_ServiceAccountList(opCtx operation.Context, obj, oldObj *core.ServiceAccountList, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ServiceAccountList.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.ServiceAccountList) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.ServiceAccountList.ListMeta
	errs = append(errs,
		func(obj, oldObj *v1.ListMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ListMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ListMeta, safe.Field(oldObj, func(oldObj *core.ServiceAccountList) *v1.ListMeta { return &oldObj.ListMeta }), fldPath.Child("ListMeta"))...)

	// field core.ServiceAccountList.Items
	errs = append(errs,
		func(obj, oldObj []core.ServiceAccount, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.ServiceAccount, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_ServiceAccount(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Items, safe.Field(oldObj, func(oldObj *core.ServiceAccountList) []core.ServiceAccount { return oldObj.Items }), fldPath.Child("Items"))...)

	return errs
}

func Validate_ServiceList(opCtx operation.Context, obj, oldObj *core.ServiceList, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ServiceList.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.ServiceList) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.ServiceList.ListMeta
	errs = append(errs,
		func(obj, oldObj *v1.ListMeta, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_ListMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.ListMeta, safe.Field(oldObj, func(oldObj *core.ServiceList) *v1.ListMeta { return &oldObj.ListMeta }), fldPath.Child("ListMeta"))...)

	// field core.ServiceList.Items
	errs = append(errs,
		func(obj, oldObj []core.Service, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.Service, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_Service(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Items, safe.Field(oldObj, func(oldObj *core.ServiceList) []core.Service { return oldObj.Items }), fldPath.Child("Items"))...)

	return errs
}

func Validate_ServicePort(opCtx operation.Context, obj, oldObj *core.ServicePort, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ServicePort.Name has no validation
	// field core.ServicePort.Protocol has no validation

	// field core.ServicePort.AppProtocol
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.AppProtocol, safe.Field(oldObj, func(oldObj *core.ServicePort) *string { return oldObj.AppProtocol }), fldPath.Child("AppProtocol"))...)

	// field core.ServicePort.Port has no validation

	// field core.ServicePort.TargetPort
	errs = append(errs,
		func(obj, oldObj *intstr.IntOrString, fldPath *field.Path) (errs field.ErrorList) {
			// NOTE: Type intstr.IntOrString is in a non-included package.
			//       Any validations defined on this type are not available from here.
			return
		}(&obj.TargetPort, safe.Field(oldObj, func(oldObj *core.ServicePort) *intstr.IntOrString { return &oldObj.TargetPort }), fldPath.Child("TargetPort"))...)

	// field core.ServicePort.NodePort has no validation
	return errs
}

func Validate_ServiceProxyOptions(opCtx operation.Context, obj, oldObj *core.ServiceProxyOptions, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ServiceProxyOptions.TypeMeta
	errs = append(errs,
		func(obj, oldObj *v1.TypeMeta, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, v1.Validate_TypeMeta(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.TypeMeta, safe.Field(oldObj, func(oldObj *core.ServiceProxyOptions) *v1.TypeMeta { return &oldObj.TypeMeta }), fldPath.Child("TypeMeta"))...)

	// field core.ServiceProxyOptions.Path has no validation
	return errs
}

func Validate_ServiceSpec(opCtx operation.Context, obj, oldObj *core.ServiceSpec, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ServiceSpec.Type
	errs = append(errs,
		func(obj, oldObj *core.ServiceType, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Type, safe.Field(oldObj, func(oldObj *core.ServiceSpec) *core.ServiceType { return &oldObj.Type }), fldPath.Child("Type"))...)

	// field core.ServiceSpec.Ports
	errs = append(errs,
		func(obj, oldObj []core.ServicePort, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *core.ServicePort, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_ServicePort(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Ports, safe.Field(oldObj, func(oldObj *core.ServiceSpec) []core.ServicePort { return oldObj.Ports }), fldPath.Child("Ports"))...)

	// field core.ServiceSpec.Selector has no validation

	// field core.ServiceSpec.ClusterIP
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ClusterIP, safe.Field(oldObj, func(oldObj *core.ServiceSpec) *string { return &oldObj.ClusterIP }), fldPath.Child("ClusterIP"))...)

	// field core.ServiceSpec.ClusterIPs
	errs = append(errs,
		func(obj, oldObj []string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.ClusterIPs, safe.Field(oldObj, func(oldObj *core.ServiceSpec) []string { return oldObj.ClusterIPs }), fldPath.Child("ClusterIPs"))...)

	// field core.ServiceSpec.IPFamilies
	errs = append(errs,
		func(obj, oldObj []core.IPFamily, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.IPFamilies, safe.Field(oldObj, func(oldObj *core.ServiceSpec) []core.IPFamily { return oldObj.IPFamilies }), fldPath.Child("IPFamilies"))...)

	// field core.ServiceSpec.IPFamilyPolicy
	errs = append(errs,
		func(obj, oldObj *core.IPFamilyPolicy, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.IPFamilyPolicy, safe.Field(oldObj, func(oldObj *core.ServiceSpec) *core.IPFamilyPolicy { return oldObj.IPFamilyPolicy }), fldPath.Child("IPFamilyPolicy"))...)

	// field core.ServiceSpec.ExternalName has no validation

	// field core.ServiceSpec.ExternalIPs
	errs = append(errs,
		func(obj, oldObj []string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.ExternalIPs, safe.Field(oldObj, func(oldObj *core.ServiceSpec) []string { return oldObj.ExternalIPs }), fldPath.Child("ExternalIPs"))...)

	// field core.ServiceSpec.LoadBalancerIP
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.LoadBalancerIP, safe.Field(oldObj, func(oldObj *core.ServiceSpec) *string { return &oldObj.LoadBalancerIP }), fldPath.Child("LoadBalancerIP"))...)

	// field core.ServiceSpec.SessionAffinity
	errs = append(errs,
		func(obj, oldObj *core.ServiceAffinity, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.SessionAffinity, safe.Field(oldObj, func(oldObj *core.ServiceSpec) *core.ServiceAffinity { return &oldObj.SessionAffinity }), fldPath.Child("SessionAffinity"))...)

	// field core.ServiceSpec.SessionAffinityConfig
	errs = append(errs,
		func(obj, oldObj *core.SessionAffinityConfig, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_SessionAffinityConfig(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.SessionAffinityConfig, safe.Field(oldObj, func(oldObj *core.ServiceSpec) *core.SessionAffinityConfig { return oldObj.SessionAffinityConfig }), fldPath.Child("SessionAffinityConfig"))...)

	// field core.ServiceSpec.LoadBalancerSourceRanges
	errs = append(errs,
		func(obj, oldObj []string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.LoadBalancerSourceRanges, safe.Field(oldObj, func(oldObj *core.ServiceSpec) []string { return oldObj.LoadBalancerSourceRanges }), fldPath.Child("LoadBalancerSourceRanges"))...)

	// field core.ServiceSpec.ExternalTrafficPolicy
	errs = append(errs,
		func(obj, oldObj *core.ServiceExternalTrafficPolicy, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ExternalTrafficPolicy, safe.Field(oldObj, func(oldObj *core.ServiceSpec) *core.ServiceExternalTrafficPolicy {
			return &oldObj.ExternalTrafficPolicy
		}), fldPath.Child("ExternalTrafficPolicy"))...)

	// field core.ServiceSpec.HealthCheckNodePort
	errs = append(errs,
		func(obj, oldObj *int32, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.HealthCheckNodePort, safe.Field(oldObj, func(oldObj *core.ServiceSpec) *int32 { return &oldObj.HealthCheckNodePort }), fldPath.Child("HealthCheckNodePort"))...)

	// field core.ServiceSpec.PublishNotReadyAddresses
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.PublishNotReadyAddresses, safe.Field(oldObj, func(oldObj *core.ServiceSpec) *bool { return &oldObj.PublishNotReadyAddresses }), fldPath.Child("PublishNotReadyAddresses"))...)

	// field core.ServiceSpec.AllocateLoadBalancerNodePorts
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.AllocateLoadBalancerNodePorts, safe.Field(oldObj, func(oldObj *core.ServiceSpec) *bool { return oldObj.AllocateLoadBalancerNodePorts }), fldPath.Child("AllocateLoadBalancerNodePorts"))...)

	// field core.ServiceSpec.LoadBalancerClass
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.LoadBalancerClass, safe.Field(oldObj, func(oldObj *core.ServiceSpec) *string { return oldObj.LoadBalancerClass }), fldPath.Child("LoadBalancerClass"))...)

	// field core.ServiceSpec.InternalTrafficPolicy
	errs = append(errs,
		func(obj, oldObj *core.ServiceInternalTrafficPolicy, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.InternalTrafficPolicy, safe.Field(oldObj, func(oldObj *core.ServiceSpec) *core.ServiceInternalTrafficPolicy { return oldObj.InternalTrafficPolicy }), fldPath.Child("InternalTrafficPolicy"))...)

	// field core.ServiceSpec.TrafficDistribution
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.TrafficDistribution, safe.Field(oldObj, func(oldObj *core.ServiceSpec) *string { return oldObj.TrafficDistribution }), fldPath.Child("TrafficDistribution"))...)

	return errs
}

func Validate_ServiceStatus(opCtx operation.Context, obj, oldObj *core.ServiceStatus, fldPath *field.Path) (errs field.ErrorList) {
	// field core.ServiceStatus.LoadBalancer
	errs = append(errs,
		func(obj, oldObj *core.LoadBalancerStatus, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_LoadBalancerStatus(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.LoadBalancer, safe.Field(oldObj, func(oldObj *core.ServiceStatus) *core.LoadBalancerStatus { return &oldObj.LoadBalancer }), fldPath.Child("LoadBalancer"))...)

	// field core.ServiceStatus.Conditions
	errs = append(errs,
		func(obj, oldObj []v1.Condition, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for i, val := range obj {
				errs = append(errs,
					func(obj, oldObj *v1.Condition, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, v1.Validate_Condition(opCtx, obj, oldObj, fldPath)...)
						return
					}(&val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Conditions, safe.Field(oldObj, func(oldObj *core.ServiceStatus) []v1.Condition { return oldObj.Conditions }), fldPath.Child("Conditions"))...)

	return errs
}

func Validate_SessionAffinityConfig(opCtx operation.Context, obj, oldObj *core.SessionAffinityConfig, fldPath *field.Path) (errs field.ErrorList) {
	// field core.SessionAffinityConfig.ClientIP
	errs = append(errs,
		func(obj, oldObj *core.ClientIPConfig, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_ClientIPConfig(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.ClientIP, safe.Field(oldObj, func(oldObj *core.SessionAffinityConfig) *core.ClientIPConfig { return oldObj.ClientIP }), fldPath.Child("ClientIP"))...)

	return errs
}

func Validate_StorageOSPersistentVolumeSource(opCtx operation.Context, obj, oldObj *core.StorageOSPersistentVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.StorageOSPersistentVolumeSource.VolumeName has no validation

	// field core.StorageOSPersistentVolumeSource.VolumeNamespace
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.VolumeNamespace, safe.Field(oldObj, func(oldObj *core.StorageOSPersistentVolumeSource) *string { return &oldObj.VolumeNamespace }), fldPath.Child("VolumeNamespace"))...)

	// field core.StorageOSPersistentVolumeSource.FSType
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.FSType, safe.Field(oldObj, func(oldObj *core.StorageOSPersistentVolumeSource) *string { return &oldObj.FSType }), fldPath.Child("FSType"))...)

	// field core.StorageOSPersistentVolumeSource.ReadOnly
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ReadOnly, safe.Field(oldObj, func(oldObj *core.StorageOSPersistentVolumeSource) *bool { return &oldObj.ReadOnly }), fldPath.Child("ReadOnly"))...)

	// field core.StorageOSPersistentVolumeSource.SecretRef
	errs = append(errs,
		func(obj, oldObj *core.ObjectReference, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_ObjectReference(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.SecretRef, safe.Field(oldObj, func(oldObj *core.StorageOSPersistentVolumeSource) *core.ObjectReference { return oldObj.SecretRef }), fldPath.Child("SecretRef"))...)

	return errs
}

func Validate_StorageOSVolumeSource(opCtx operation.Context, obj, oldObj *core.StorageOSVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.StorageOSVolumeSource.VolumeName has no validation

	// field core.StorageOSVolumeSource.VolumeNamespace
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.VolumeNamespace, safe.Field(oldObj, func(oldObj *core.StorageOSVolumeSource) *string { return &oldObj.VolumeNamespace }), fldPath.Child("VolumeNamespace"))...)

	// field core.StorageOSVolumeSource.FSType
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.FSType, safe.Field(oldObj, func(oldObj *core.StorageOSVolumeSource) *string { return &oldObj.FSType }), fldPath.Child("FSType"))...)

	// field core.StorageOSVolumeSource.ReadOnly
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ReadOnly, safe.Field(oldObj, func(oldObj *core.StorageOSVolumeSource) *bool { return &oldObj.ReadOnly }), fldPath.Child("ReadOnly"))...)

	// field core.StorageOSVolumeSource.SecretRef
	errs = append(errs,
		func(obj, oldObj *core.LocalObjectReference, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.SecretRef, safe.Field(oldObj, func(oldObj *core.StorageOSVolumeSource) *core.LocalObjectReference { return oldObj.SecretRef }), fldPath.Child("SecretRef"))...)

	return errs
}

func Validate_TCPSocketAction(opCtx operation.Context, obj, oldObj *core.TCPSocketAction, fldPath *field.Path) (errs field.ErrorList) {
	// field core.TCPSocketAction.Port
	errs = append(errs,
		func(obj, oldObj *intstr.IntOrString, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			// NOTE: Type intstr.IntOrString is in a non-included package.
			//       Any validations defined on this type are not available from here.
			return
		}(&obj.Port, safe.Field(oldObj, func(oldObj *core.TCPSocketAction) *intstr.IntOrString { return &oldObj.Port }), fldPath.Child("Port"))...)

	// field core.TCPSocketAction.Host
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Host, safe.Field(oldObj, func(oldObj *core.TCPSocketAction) *string { return &oldObj.Host }), fldPath.Child("Host"))...)

	return errs
}

func Validate_Taint(opCtx operation.Context, obj, oldObj *core.Taint, fldPath *field.Path) (errs field.ErrorList) {
	// field core.Taint.Key has no validation

	// field core.Taint.Value
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Value, safe.Field(oldObj, func(oldObj *core.Taint) *string { return &oldObj.Value }), fldPath.Child("Value"))...)

	// field core.Taint.Effect has no validation

	// field core.Taint.TimeAdded
	errs = append(errs,
		func(obj, oldObj *v1.Time, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.TimeAdded, safe.Field(oldObj, func(oldObj *core.Taint) *v1.Time { return oldObj.TimeAdded }), fldPath.Child("TimeAdded"))...)

	return errs
}

func Validate_Toleration(opCtx operation.Context, obj, oldObj *core.Toleration, fldPath *field.Path) (errs field.ErrorList) {
	// field core.Toleration.Key
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Key, safe.Field(oldObj, func(oldObj *core.Toleration) *string { return &oldObj.Key }), fldPath.Child("Key"))...)

	// field core.Toleration.Operator
	errs = append(errs,
		func(obj, oldObj *core.TolerationOperator, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Operator, safe.Field(oldObj, func(oldObj *core.Toleration) *core.TolerationOperator { return &oldObj.Operator }), fldPath.Child("Operator"))...)

	// field core.Toleration.Value
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Value, safe.Field(oldObj, func(oldObj *core.Toleration) *string { return &oldObj.Value }), fldPath.Child("Value"))...)

	// field core.Toleration.Effect
	errs = append(errs,
		func(obj, oldObj *core.TaintEffect, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.Effect, safe.Field(oldObj, func(oldObj *core.Toleration) *core.TaintEffect { return &oldObj.Effect }), fldPath.Child("Effect"))...)

	// field core.Toleration.TolerationSeconds
	errs = append(errs,
		func(obj, oldObj *int64, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.TolerationSeconds, safe.Field(oldObj, func(oldObj *core.Toleration) *int64 { return oldObj.TolerationSeconds }), fldPath.Child("TolerationSeconds"))...)

	return errs
}

func Validate_TopologySpreadConstraint(opCtx operation.Context, obj, oldObj *core.TopologySpreadConstraint, fldPath *field.Path) (errs field.ErrorList) {
	// field core.TopologySpreadConstraint.MaxSkew has no validation
	// field core.TopologySpreadConstraint.TopologyKey has no validation
	// field core.TopologySpreadConstraint.WhenUnsatisfiable has no validation

	// field core.TopologySpreadConstraint.LabelSelector
	errs = append(errs,
		func(obj, oldObj *v1.LabelSelector, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, v1.Validate_LabelSelector(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.LabelSelector, safe.Field(oldObj, func(oldObj *core.TopologySpreadConstraint) *v1.LabelSelector { return oldObj.LabelSelector }), fldPath.Child("LabelSelector"))...)

	// field core.TopologySpreadConstraint.MinDomains
	errs = append(errs,
		func(obj, oldObj *int32, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.MinDomains, safe.Field(oldObj, func(oldObj *core.TopologySpreadConstraint) *int32 { return oldObj.MinDomains }), fldPath.Child("MinDomains"))...)

	// field core.TopologySpreadConstraint.NodeAffinityPolicy
	errs = append(errs,
		func(obj, oldObj *core.NodeInclusionPolicy, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.NodeAffinityPolicy, safe.Field(oldObj, func(oldObj *core.TopologySpreadConstraint) *core.NodeInclusionPolicy {
			return oldObj.NodeAffinityPolicy
		}), fldPath.Child("NodeAffinityPolicy"))...)

	// field core.TopologySpreadConstraint.NodeTaintsPolicy
	errs = append(errs,
		func(obj, oldObj *core.NodeInclusionPolicy, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.NodeTaintsPolicy, safe.Field(oldObj, func(oldObj *core.TopologySpreadConstraint) *core.NodeInclusionPolicy { return oldObj.NodeTaintsPolicy }), fldPath.Child("NodeTaintsPolicy"))...)

	// field core.TopologySpreadConstraint.MatchLabelKeys
	errs = append(errs,
		func(obj, oldObj []string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.MatchLabelKeys, safe.Field(oldObj, func(oldObj *core.TopologySpreadConstraint) []string { return oldObj.MatchLabelKeys }), fldPath.Child("MatchLabelKeys"))...)

	return errs
}

func Validate_TypedLocalObjectReference(opCtx operation.Context, obj, oldObj *core.TypedLocalObjectReference, fldPath *field.Path) (errs field.ErrorList) {
	// field core.TypedLocalObjectReference.APIGroup
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.APIGroup, safe.Field(oldObj, func(oldObj *core.TypedLocalObjectReference) *string { return oldObj.APIGroup }), fldPath.Child("APIGroup"))...)

	// field core.TypedLocalObjectReference.Kind has no validation
	// field core.TypedLocalObjectReference.Name has no validation
	return errs
}

func Validate_TypedObjectReference(opCtx operation.Context, obj, oldObj *core.TypedObjectReference, fldPath *field.Path) (errs field.ErrorList) {
	// field core.TypedObjectReference.APIGroup
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.APIGroup, safe.Field(oldObj, func(oldObj *core.TypedObjectReference) *string { return oldObj.APIGroup }), fldPath.Child("APIGroup"))...)

	// field core.TypedObjectReference.Kind has no validation
	// field core.TypedObjectReference.Name has no validation

	// field core.TypedObjectReference.Namespace
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.Namespace, safe.Field(oldObj, func(oldObj *core.TypedObjectReference) *string { return oldObj.Namespace }), fldPath.Child("Namespace"))...)

	return errs
}

func Validate_Volume(opCtx operation.Context, obj, oldObj *core.Volume, fldPath *field.Path) (errs field.ErrorList) {
	// field core.Volume.Name has no validation

	// field core.Volume.VolumeSource
	errs = append(errs,
		func(obj, oldObj *core.VolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_VolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.VolumeSource, safe.Field(oldObj, func(oldObj *core.Volume) *core.VolumeSource { return &oldObj.VolumeSource }), fldPath.Child("VolumeSource"))...)

	return errs
}

func Validate_VolumeMount(opCtx operation.Context, obj, oldObj *core.VolumeMount, fldPath *field.Path) (errs field.ErrorList) {
	// field core.VolumeMount.Name has no validation

	// field core.VolumeMount.ReadOnly
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ReadOnly, safe.Field(oldObj, func(oldObj *core.VolumeMount) *bool { return &oldObj.ReadOnly }), fldPath.Child("ReadOnly"))...)

	// field core.VolumeMount.RecursiveReadOnly
	errs = append(errs,
		func(obj, oldObj *core.RecursiveReadOnlyMode, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.RecursiveReadOnly, safe.Field(oldObj, func(oldObj *core.VolumeMount) *core.RecursiveReadOnlyMode { return oldObj.RecursiveReadOnly }), fldPath.Child("RecursiveReadOnly"))...)

	// field core.VolumeMount.MountPath has no validation

	// field core.VolumeMount.SubPath
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.SubPath, safe.Field(oldObj, func(oldObj *core.VolumeMount) *string { return &oldObj.SubPath }), fldPath.Child("SubPath"))...)

	// field core.VolumeMount.MountPropagation
	errs = append(errs,
		func(obj, oldObj *core.MountPropagationMode, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.MountPropagation, safe.Field(oldObj, func(oldObj *core.VolumeMount) *core.MountPropagationMode { return oldObj.MountPropagation }), fldPath.Child("MountPropagation"))...)

	// field core.VolumeMount.SubPathExpr
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.SubPathExpr, safe.Field(oldObj, func(oldObj *core.VolumeMount) *string { return &oldObj.SubPathExpr }), fldPath.Child("SubPathExpr"))...)

	return errs
}

func Validate_VolumeMountStatus(opCtx operation.Context, obj, oldObj *core.VolumeMountStatus, fldPath *field.Path) (errs field.ErrorList) {
	// field core.VolumeMountStatus.Name has no validation
	// field core.VolumeMountStatus.MountPath has no validation

	// field core.VolumeMountStatus.ReadOnly
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.ReadOnly, safe.Field(oldObj, func(oldObj *core.VolumeMountStatus) *bool { return &oldObj.ReadOnly }), fldPath.Child("ReadOnly"))...)

	// field core.VolumeMountStatus.RecursiveReadOnly
	errs = append(errs,
		func(obj, oldObj *core.RecursiveReadOnlyMode, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.RecursiveReadOnly, safe.Field(oldObj, func(oldObj *core.VolumeMountStatus) *core.RecursiveReadOnlyMode { return oldObj.RecursiveReadOnly }), fldPath.Child("RecursiveReadOnly"))...)

	return errs
}

func Validate_VolumeNodeAffinity(opCtx operation.Context, obj, oldObj *core.VolumeNodeAffinity, fldPath *field.Path) (errs field.ErrorList) {
	// field core.VolumeNodeAffinity.Required
	errs = append(errs,
		func(obj, oldObj *core.NodeSelector, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, Validate_NodeSelector(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.Required, safe.Field(oldObj, func(oldObj *core.VolumeNodeAffinity) *core.NodeSelector { return oldObj.Required }), fldPath.Child("Required"))...)

	return errs
}

func Validate_VolumeProjection(opCtx operation.Context, obj, oldObj *core.VolumeProjection, fldPath *field.Path) (errs field.ErrorList) {
	// field core.VolumeProjection.Secret
	errs = append(errs,
		func(obj, oldObj *core.SecretProjection, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, Validate_SecretProjection(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.Secret, safe.Field(oldObj, func(oldObj *core.VolumeProjection) *core.SecretProjection { return oldObj.Secret }), fldPath.Child("Secret"))...)

	// field core.VolumeProjection.DownwardAPI
	errs = append(errs,
		func(obj, oldObj *core.DownwardAPIProjection, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, Validate_DownwardAPIProjection(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.DownwardAPI, safe.Field(oldObj, func(oldObj *core.VolumeProjection) *core.DownwardAPIProjection { return oldObj.DownwardAPI }), fldPath.Child("DownwardAPI"))...)

	// field core.VolumeProjection.ConfigMap
	errs = append(errs,
		func(obj, oldObj *core.ConfigMapProjection, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, Validate_ConfigMapProjection(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.ConfigMap, safe.Field(oldObj, func(oldObj *core.VolumeProjection) *core.ConfigMapProjection { return oldObj.ConfigMap }), fldPath.Child("ConfigMap"))...)

	// field core.VolumeProjection.ServiceAccountToken has no validation

	// field core.VolumeProjection.ClusterTrustBundle
	errs = append(errs,
		func(obj, oldObj *core.ClusterTrustBundleProjection, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, Validate_ClusterTrustBundleProjection(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.ClusterTrustBundle, safe.Field(oldObj, func(oldObj *core.VolumeProjection) *core.ClusterTrustBundleProjection {
			return oldObj.ClusterTrustBundle
		}), fldPath.Child("ClusterTrustBundle"))...)

	return errs
}

func Validate_VolumeResourceRequirements(opCtx operation.Context, obj, oldObj *core.VolumeResourceRequirements, fldPath *field.Path) (errs field.ErrorList) {
	// field core.VolumeResourceRequirements.Limits
	errs = append(errs,
		func(obj, oldObj core.ResourceList, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for key, val := range obj {
				errs = append(errs,
					func(obj, oldObj *resource.Quantity, fldPath *field.Path) (errs field.ErrorList) {
						// NOTE: Type resource.Quantity is in a non-included package.
						//       Any validations defined on this type are not available from here.
						return
					}(&val, safe.Lookup(oldObj, key, safe.PtrTo), fldPath.Key(string(key)))...)
			}
			return
		}(obj.Limits, safe.Field(oldObj, func(oldObj *core.VolumeResourceRequirements) core.ResourceList { return oldObj.Limits }), fldPath.Child("Limits"))...)

	// field core.VolumeResourceRequirements.Requests
	errs = append(errs,
		func(obj, oldObj core.ResourceList, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			for key, val := range obj {
				errs = append(errs,
					func(obj, oldObj *resource.Quantity, fldPath *field.Path) (errs field.ErrorList) {
						// NOTE: Type resource.Quantity is in a non-included package.
						//       Any validations defined on this type are not available from here.
						return
					}(&val, safe.Lookup(oldObj, key, safe.PtrTo), fldPath.Key(string(key)))...)
			}
			return
		}(obj.Requests, safe.Field(oldObj, func(oldObj *core.VolumeResourceRequirements) core.ResourceList { return oldObj.Requests }), fldPath.Child("Requests"))...)

	return errs
}

func Validate_VolumeSource(opCtx operation.Context, obj, oldObj *core.VolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.VolumeSource.HostPath
	errs = append(errs,
		func(obj, oldObj *core.HostPathVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.HostPath, safe.Field(oldObj, func(oldObj *core.VolumeSource) *core.HostPathVolumeSource { return oldObj.HostPath }), fldPath.Child("HostPath"))...)

	// field core.VolumeSource.EmptyDir
	errs = append(errs,
		func(obj, oldObj *core.EmptyDirVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_EmptyDirVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.EmptyDir, safe.Field(oldObj, func(oldObj *core.VolumeSource) *core.EmptyDirVolumeSource { return oldObj.EmptyDir }), fldPath.Child("EmptyDir"))...)

	// field core.VolumeSource.GCEPersistentDisk
	errs = append(errs,
		func(obj, oldObj *core.GCEPersistentDiskVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_GCEPersistentDiskVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.GCEPersistentDisk, safe.Field(oldObj, func(oldObj *core.VolumeSource) *core.GCEPersistentDiskVolumeSource { return oldObj.GCEPersistentDisk }), fldPath.Child("GCEPersistentDisk"))...)

	// field core.VolumeSource.AWSElasticBlockStore
	errs = append(errs,
		func(obj, oldObj *core.AWSElasticBlockStoreVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_AWSElasticBlockStoreVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.AWSElasticBlockStore, safe.Field(oldObj, func(oldObj *core.VolumeSource) *core.AWSElasticBlockStoreVolumeSource {
			return oldObj.AWSElasticBlockStore
		}), fldPath.Child("AWSElasticBlockStore"))...)

	// field core.VolumeSource.GitRepo
	errs = append(errs,
		func(obj, oldObj *core.GitRepoVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_GitRepoVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.GitRepo, safe.Field(oldObj, func(oldObj *core.VolumeSource) *core.GitRepoVolumeSource { return oldObj.GitRepo }), fldPath.Child("GitRepo"))...)

	// field core.VolumeSource.Secret
	errs = append(errs,
		func(obj, oldObj *core.SecretVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_SecretVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.Secret, safe.Field(oldObj, func(oldObj *core.VolumeSource) *core.SecretVolumeSource { return oldObj.Secret }), fldPath.Child("Secret"))...)

	// field core.VolumeSource.NFS
	errs = append(errs,
		func(obj, oldObj *core.NFSVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_NFSVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.NFS, safe.Field(oldObj, func(oldObj *core.VolumeSource) *core.NFSVolumeSource { return oldObj.NFS }), fldPath.Child("NFS"))...)

	// field core.VolumeSource.ISCSI
	errs = append(errs,
		func(obj, oldObj *core.ISCSIVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_ISCSIVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.ISCSI, safe.Field(oldObj, func(oldObj *core.VolumeSource) *core.ISCSIVolumeSource { return oldObj.ISCSI }), fldPath.Child("ISCSI"))...)

	// field core.VolumeSource.Glusterfs
	errs = append(errs,
		func(obj, oldObj *core.GlusterfsVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_GlusterfsVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.Glusterfs, safe.Field(oldObj, func(oldObj *core.VolumeSource) *core.GlusterfsVolumeSource { return oldObj.Glusterfs }), fldPath.Child("Glusterfs"))...)

	// field core.VolumeSource.PersistentVolumeClaim
	errs = append(errs,
		func(obj, oldObj *core.PersistentVolumeClaimVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_PersistentVolumeClaimVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.PersistentVolumeClaim, safe.Field(oldObj, func(oldObj *core.VolumeSource) *core.PersistentVolumeClaimVolumeSource {
			return oldObj.PersistentVolumeClaim
		}), fldPath.Child("PersistentVolumeClaim"))...)

	// field core.VolumeSource.RBD
	errs = append(errs,
		func(obj, oldObj *core.RBDVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_RBDVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.RBD, safe.Field(oldObj, func(oldObj *core.VolumeSource) *core.RBDVolumeSource { return oldObj.RBD }), fldPath.Child("RBD"))...)

	// field core.VolumeSource.Quobyte
	errs = append(errs,
		func(obj, oldObj *core.QuobyteVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_QuobyteVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.Quobyte, safe.Field(oldObj, func(oldObj *core.VolumeSource) *core.QuobyteVolumeSource { return oldObj.Quobyte }), fldPath.Child("Quobyte"))...)

	// field core.VolumeSource.FlexVolume
	errs = append(errs,
		func(obj, oldObj *core.FlexVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_FlexVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.FlexVolume, safe.Field(oldObj, func(oldObj *core.VolumeSource) *core.FlexVolumeSource { return oldObj.FlexVolume }), fldPath.Child("FlexVolume"))...)

	// field core.VolumeSource.Cinder
	errs = append(errs,
		func(obj, oldObj *core.CinderVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_CinderVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.Cinder, safe.Field(oldObj, func(oldObj *core.VolumeSource) *core.CinderVolumeSource { return oldObj.Cinder }), fldPath.Child("Cinder"))...)

	// field core.VolumeSource.CephFS
	errs = append(errs,
		func(obj, oldObj *core.CephFSVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_CephFSVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.CephFS, safe.Field(oldObj, func(oldObj *core.VolumeSource) *core.CephFSVolumeSource { return oldObj.CephFS }), fldPath.Child("CephFS"))...)

	// field core.VolumeSource.Flocker
	errs = append(errs,
		func(obj, oldObj *core.FlockerVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_FlockerVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.Flocker, safe.Field(oldObj, func(oldObj *core.VolumeSource) *core.FlockerVolumeSource { return oldObj.Flocker }), fldPath.Child("Flocker"))...)

	// field core.VolumeSource.DownwardAPI
	errs = append(errs,
		func(obj, oldObj *core.DownwardAPIVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_DownwardAPIVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.DownwardAPI, safe.Field(oldObj, func(oldObj *core.VolumeSource) *core.DownwardAPIVolumeSource { return oldObj.DownwardAPI }), fldPath.Child("DownwardAPI"))...)

	// field core.VolumeSource.FC
	errs = append(errs,
		func(obj, oldObj *core.FCVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_FCVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.FC, safe.Field(oldObj, func(oldObj *core.VolumeSource) *core.FCVolumeSource { return oldObj.FC }), fldPath.Child("FC"))...)

	// field core.VolumeSource.AzureFile
	errs = append(errs,
		func(obj, oldObj *core.AzureFileVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_AzureFileVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.AzureFile, safe.Field(oldObj, func(oldObj *core.VolumeSource) *core.AzureFileVolumeSource { return oldObj.AzureFile }), fldPath.Child("AzureFile"))...)

	// field core.VolumeSource.ConfigMap
	errs = append(errs,
		func(obj, oldObj *core.ConfigMapVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_ConfigMapVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.ConfigMap, safe.Field(oldObj, func(oldObj *core.VolumeSource) *core.ConfigMapVolumeSource { return oldObj.ConfigMap }), fldPath.Child("ConfigMap"))...)

	// field core.VolumeSource.VsphereVolume
	errs = append(errs,
		func(obj, oldObj *core.VsphereVirtualDiskVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_VsphereVirtualDiskVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.VsphereVolume, safe.Field(oldObj, func(oldObj *core.VolumeSource) *core.VsphereVirtualDiskVolumeSource { return oldObj.VsphereVolume }), fldPath.Child("VsphereVolume"))...)

	// field core.VolumeSource.AzureDisk
	errs = append(errs,
		func(obj, oldObj *core.AzureDiskVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_AzureDiskVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.AzureDisk, safe.Field(oldObj, func(oldObj *core.VolumeSource) *core.AzureDiskVolumeSource { return oldObj.AzureDisk }), fldPath.Child("AzureDisk"))...)

	// field core.VolumeSource.PhotonPersistentDisk has no validation

	// field core.VolumeSource.Projected
	errs = append(errs,
		func(obj, oldObj *core.ProjectedVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, Validate_ProjectedVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.Projected, safe.Field(oldObj, func(oldObj *core.VolumeSource) *core.ProjectedVolumeSource { return oldObj.Projected }), fldPath.Child("Projected"))...)

	// field core.VolumeSource.PortworxVolume
	errs = append(errs,
		func(obj, oldObj *core.PortworxVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_PortworxVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.PortworxVolume, safe.Field(oldObj, func(oldObj *core.VolumeSource) *core.PortworxVolumeSource { return oldObj.PortworxVolume }), fldPath.Child("PortworxVolume"))...)

	// field core.VolumeSource.ScaleIO
	errs = append(errs,
		func(obj, oldObj *core.ScaleIOVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_ScaleIOVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.ScaleIO, safe.Field(oldObj, func(oldObj *core.VolumeSource) *core.ScaleIOVolumeSource { return oldObj.ScaleIO }), fldPath.Child("ScaleIO"))...)

	// field core.VolumeSource.StorageOS
	errs = append(errs,
		func(obj, oldObj *core.StorageOSVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_StorageOSVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.StorageOS, safe.Field(oldObj, func(oldObj *core.VolumeSource) *core.StorageOSVolumeSource { return oldObj.StorageOS }), fldPath.Child("StorageOS"))...)

	// field core.VolumeSource.CSI
	errs = append(errs,
		func(obj, oldObj *core.CSIVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_CSIVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.CSI, safe.Field(oldObj, func(oldObj *core.VolumeSource) *core.CSIVolumeSource { return oldObj.CSI }), fldPath.Child("CSI"))...)

	// field core.VolumeSource.Ephemeral
	errs = append(errs,
		func(obj, oldObj *core.EphemeralVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_EphemeralVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.Ephemeral, safe.Field(oldObj, func(oldObj *core.VolumeSource) *core.EphemeralVolumeSource { return oldObj.Ephemeral }), fldPath.Child("Ephemeral"))...)

	// field core.VolumeSource.Image
	errs = append(errs,
		func(obj, oldObj *core.ImageVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, Validate_ImageVolumeSource(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.Image, safe.Field(oldObj, func(oldObj *core.VolumeSource) *core.ImageVolumeSource { return oldObj.Image }), fldPath.Child("Image"))...)

	return errs
}

func Validate_VsphereVirtualDiskVolumeSource(opCtx operation.Context, obj, oldObj *core.VsphereVirtualDiskVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	// field core.VsphereVirtualDiskVolumeSource.VolumePath has no validation

	// field core.VsphereVirtualDiskVolumeSource.FSType
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.FSType, safe.Field(oldObj, func(oldObj *core.VsphereVirtualDiskVolumeSource) *string { return &oldObj.FSType }), fldPath.Child("FSType"))...)

	// field core.VsphereVirtualDiskVolumeSource.StoragePolicyName
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.StoragePolicyName, safe.Field(oldObj, func(oldObj *core.VsphereVirtualDiskVolumeSource) *string { return &oldObj.StoragePolicyName }), fldPath.Child("StoragePolicyName"))...)

	// field core.VsphereVirtualDiskVolumeSource.StoragePolicyID
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(&obj.StoragePolicyID, safe.Field(oldObj, func(oldObj *core.VsphereVirtualDiskVolumeSource) *string { return &oldObj.StoragePolicyID }), fldPath.Child("StoragePolicyID"))...)

	return errs
}

func Validate_WeightedPodAffinityTerm(opCtx operation.Context, obj, oldObj *core.WeightedPodAffinityTerm, fldPath *field.Path) (errs field.ErrorList) {
	// field core.WeightedPodAffinityTerm.Weight has no validation

	// field core.WeightedPodAffinityTerm.PodAffinityTerm
	errs = append(errs,
		func(obj, oldObj *core.PodAffinityTerm, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, Validate_PodAffinityTerm(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.PodAffinityTerm, safe.Field(oldObj, func(oldObj *core.WeightedPodAffinityTerm) *core.PodAffinityTerm { return &oldObj.PodAffinityTerm }), fldPath.Child("PodAffinityTerm"))...)

	return errs
}

func Validate_WindowsSecurityContextOptions(opCtx operation.Context, obj, oldObj *core.WindowsSecurityContextOptions, fldPath *field.Path) (errs field.ErrorList) {
	// field core.WindowsSecurityContextOptions.GMSACredentialSpecName
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.GMSACredentialSpecName, safe.Field(oldObj, func(oldObj *core.WindowsSecurityContextOptions) *string { return oldObj.GMSACredentialSpecName }), fldPath.Child("GMSACredentialSpecName"))...)

	// field core.WindowsSecurityContextOptions.GMSACredentialSpec
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.GMSACredentialSpec, safe.Field(oldObj, func(oldObj *core.WindowsSecurityContextOptions) *string { return oldObj.GMSACredentialSpec }), fldPath.Child("GMSACredentialSpec"))...)

	// field core.WindowsSecurityContextOptions.RunAsUserName
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.RunAsUserName, safe.Field(oldObj, func(oldObj *core.WindowsSecurityContextOptions) *string { return oldObj.RunAsUserName }), fldPath.Child("RunAsUserName"))...)

	// field core.WindowsSecurityContextOptions.HostProcess
	errs = append(errs,
		func(obj, oldObj *bool, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Optional(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			return
		}(obj.HostProcess, safe.Field(oldObj, func(oldObj *core.WindowsSecurityContextOptions) *bool { return oldObj.HostProcess }), fldPath.Child("HostProcess"))...)

	return errs
}
