//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by validation-gen. DO NOT EDIT.

package v1

import (
	fmt "fmt"

	v1 "k8s.io/api/core/v1"
	validate "k8s.io/apimachinery/pkg/api/validate"
	runtime "k8s.io/apimachinery/pkg/runtime"
	field "k8s.io/apimachinery/pkg/util/validation/field"
)

func init() { localSchemeBuilder.Register(RegisterValidations) }

// RegisterValidations adds validation functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterValidations(scheme *runtime.Scheme) error {
	scheme.AddValidationFunc(&v1.Endpoints{}, func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Endpoints(obj.(*v1.Endpoints), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("No validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(&v1.EndpointsList{}, func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_EndpointsList(obj.(*v1.EndpointsList), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("No validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(&v1.Namespace{}, func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Namespace(obj.(*v1.Namespace), nil)
		}
		if len(subresources) == 1 && subresources[0] == "status" {
			root := obj.(*v1.Namespace)
			return Validate_NamespaceStatus(&root.Status, nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("No validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(&v1.NamespaceList{}, func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_NamespaceList(obj.(*v1.NamespaceList), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("No validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(&v1.Node{}, func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			root := obj.(*v1.Node)
			return Validate_NodeSpec(&root.Spec, nil)
		}
		if len(subresources) == 1 && subresources[0] == "status" {
			root := obj.(*v1.Node)
			return Validate_NodeStatus(&root.Status, nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("No validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(&v1.NodeList{}, func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_NodeList(obj.(*v1.NodeList), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("No validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(&v1.PersistentVolume{}, func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			root := obj.(*v1.PersistentVolume)
			return Validate_PersistentVolumeSpec(&root.Spec, nil)
		}
		if len(subresources) == 1 && subresources[0] == "status" {
			root := obj.(*v1.PersistentVolume)
			return Validate_PersistentVolumeStatus(&root.Status, nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("No validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(&v1.PersistentVolumeClaim{}, func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			root := obj.(*v1.PersistentVolumeClaim)
			return Validate_PersistentVolumeClaimSpec(&root.Spec, nil)
		}
		if len(subresources) == 1 && subresources[0] == "status" {
			root := obj.(*v1.PersistentVolumeClaim)
			return Validate_PersistentVolumeClaimStatus(&root.Status, nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("No validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(&v1.PersistentVolumeClaimList{}, func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PersistentVolumeClaimList(obj.(*v1.PersistentVolumeClaimList), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("No validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(&v1.PersistentVolumeList{}, func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PersistentVolumeList(obj.(*v1.PersistentVolumeList), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("No validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(&v1.Pod{}, func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			root := obj.(*v1.Pod)
			return Validate_PodSpec(&root.Spec, nil)
		}
		if len(subresources) == 1 && subresources[0] == "status" {
			root := obj.(*v1.Pod)
			return Validate_PodStatus(&root.Status, nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("No validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(&v1.PodList{}, func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodList(obj.(*v1.PodList), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("No validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(&v1.PodStatusResult{}, func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodStatusResult(obj.(*v1.PodStatusResult), nil)
		}
		if len(subresources) == 1 && subresources[0] == "status" {
			root := obj.(*v1.PodStatusResult)
			return Validate_PodStatus(&root.Status, nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("No validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(&v1.PodTemplate{}, func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodTemplate(obj.(*v1.PodTemplate), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("No validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(&v1.PodTemplateList{}, func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodTemplateList(obj.(*v1.PodTemplateList), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("No validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(&v1.ReplicationController{}, func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			root := obj.(*v1.ReplicationController)
			return Validate_ReplicationControllerSpec(&root.Spec, nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("No validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(&v1.ReplicationControllerList{}, func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ReplicationControllerList(obj.(*v1.ReplicationControllerList), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("No validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(&v1.ResourceQuota{}, func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			root := obj.(*v1.ResourceQuota)
			return Validate_ResourceQuotaSpec(&root.Spec, nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("No validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(&v1.ResourceQuotaList{}, func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ResourceQuotaList(obj.(*v1.ResourceQuotaList), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("No validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(&v1.Service{}, func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			root := obj.(*v1.Service)
			return Validate_ServiceSpec(&root.Spec, nil)
		}
		if len(subresources) == 1 && subresources[0] == "status" {
			root := obj.(*v1.Service)
			return Validate_ServiceStatus(&root.Status, nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("No validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(&v1.ServiceList{}, func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ServiceList(obj.(*v1.ServiceList), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("No validation found for %T, subresources: %v", obj, subresources))}
	})
	return nil
}

func Validate_Affinity(in *v1.Affinity, fldPath *field.Path) (errs field.ErrorList) {
	if in.NodeAffinity != nil {
		errs = append(errs, Validate_NodeAffinity(in.NodeAffinity, fldPath.Child("nodeAffinity"))...)
	}
	return errs
}

func Validate_AppArmorProfile(in *v1.AppArmorProfile, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, validate.Enum(fldPath.Child("type"), in.Type, "Localhost", "RuntimeDefault", "Unconfined")...)
	return errs
}

func Validate_AzureDiskVolumeSource(in *v1.AzureDiskVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	if in.CachingMode != nil {
		errs = append(errs, validate.Enum(fldPath.Child("cachingMode"), *in.CachingMode, "None", "ReadOnly", "ReadWrite")...)
	}
	if in.Kind != nil {
		errs = append(errs, validate.Enum(fldPath.Child("kind"), *in.Kind, "Dedicated", "Managed", "Shared")...)
	}
	return errs
}

func Validate_Container(in *v1.Container, fldPath *field.Path) (errs field.ErrorList) {
	for k := range in.Ports {
		c := &in.Ports[k]
		errs = append(errs, Validate_ContainerPort(c, fldPath.Index(k))...)
	}
	for k := range in.VolumeMounts {
		c := &in.VolumeMounts[k]
		errs = append(errs, Validate_VolumeMount(c, fldPath.Index(k))...)
	}
	if in.LivenessProbe != nil {
		errs = append(errs, Validate_Probe(in.LivenessProbe, fldPath.Child("livenessProbe"))...)
	}
	if in.ReadinessProbe != nil {
		errs = append(errs, Validate_Probe(in.ReadinessProbe, fldPath.Child("readinessProbe"))...)
	}
	if in.StartupProbe != nil {
		errs = append(errs, Validate_Probe(in.StartupProbe, fldPath.Child("startupProbe"))...)
	}
	if in.Lifecycle != nil {
		errs = append(errs, Validate_Lifecycle(in.Lifecycle, fldPath.Child("lifecycle"))...)
	}
	errs = append(errs, validate.Enum(fldPath.Child("terminationMessagePolicy"), in.TerminationMessagePolicy, "FallbackToLogsOnError", "File")...)
	errs = append(errs, validate.Enum(fldPath.Child("imagePullPolicy"), in.ImagePullPolicy, "Always", "IfNotPresent", "Never")...)
	if in.SecurityContext != nil {
		errs = append(errs, Validate_SecurityContext(in.SecurityContext, fldPath.Child("securityContext"))...)
	}
	return errs
}

func Validate_ContainerPort(in *v1.ContainerPort, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, validate.Enum(fldPath.Child("protocol"), in.Protocol, "SCTP", "TCP", "UDP")...)
	return errs
}

func Validate_EndpointPort(in *v1.EndpointPort, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, validate.Enum(fldPath.Child("protocol"), in.Protocol, "SCTP", "TCP", "UDP")...)
	return errs
}

func Validate_EndpointSubset(in *v1.EndpointSubset, fldPath *field.Path) (errs field.ErrorList) {
	for k := range in.Ports {
		c := &in.Ports[k]
		errs = append(errs, Validate_EndpointPort(c, fldPath.Index(k))...)
	}
	return errs
}

func Validate_Endpoints(in *v1.Endpoints, fldPath *field.Path) (errs field.ErrorList) {
	for k := range in.Subsets {
		c := &in.Subsets[k]
		errs = append(errs, Validate_EndpointSubset(c, fldPath.Index(k))...)
	}
	return errs
}

func Validate_EndpointsList(in *v1.EndpointsList, fldPath *field.Path) (errs field.ErrorList) {
	for k := range in.Items {
		c := &in.Items[k]
		errs = append(errs, Validate_Endpoints(c, fldPath.Index(k))...)
	}
	return errs
}

func Validate_EphemeralContainer(in *v1.EphemeralContainer, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, Validate_EphemeralContainerCommon(&in.EphemeralContainerCommon, fldPath.Child("EphemeralContainerCommon"))...)
	return errs
}

func Validate_EphemeralContainerCommon(in *v1.EphemeralContainerCommon, fldPath *field.Path) (errs field.ErrorList) {
	for k := range in.Ports {
		c := &in.Ports[k]
		errs = append(errs, Validate_ContainerPort(c, fldPath.Index(k))...)
	}
	for k := range in.VolumeMounts {
		c := &in.VolumeMounts[k]
		errs = append(errs, Validate_VolumeMount(c, fldPath.Index(k))...)
	}
	if in.LivenessProbe != nil {
		errs = append(errs, Validate_Probe(in.LivenessProbe, fldPath.Child("livenessProbe"))...)
	}
	if in.ReadinessProbe != nil {
		errs = append(errs, Validate_Probe(in.ReadinessProbe, fldPath.Child("readinessProbe"))...)
	}
	if in.StartupProbe != nil {
		errs = append(errs, Validate_Probe(in.StartupProbe, fldPath.Child("startupProbe"))...)
	}
	if in.Lifecycle != nil {
		errs = append(errs, Validate_Lifecycle(in.Lifecycle, fldPath.Child("lifecycle"))...)
	}
	errs = append(errs, validate.Enum(fldPath.Child("terminationMessagePolicy"), in.TerminationMessagePolicy, "FallbackToLogsOnError", "File")...)
	errs = append(errs, validate.Enum(fldPath.Child("imagePullPolicy"), in.ImagePullPolicy, "Always", "IfNotPresent", "Never")...)
	if in.SecurityContext != nil {
		errs = append(errs, Validate_SecurityContext(in.SecurityContext, fldPath.Child("securityContext"))...)
	}
	return errs
}

func Validate_EphemeralVolumeSource(in *v1.EphemeralVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	if in.VolumeClaimTemplate != nil {
		errs = append(errs, Validate_PersistentVolumeClaimTemplate(in.VolumeClaimTemplate, fldPath.Child("volumeClaimTemplate"))...)
	}
	return errs
}

func Validate_HTTPGetAction(in *v1.HTTPGetAction, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, validate.Enum(fldPath.Child("scheme"), in.Scheme, "HTTP", "HTTPS")...)
	return errs
}

func Validate_HostAlias(in *v1.HostAlias, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, validate.Required(fldPath.Child("ip"), in.IP)...)
	return errs
}

func Validate_HostPathVolumeSource(in *v1.HostPathVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	if in.Type != nil {
		errs = append(errs, validate.Enum(fldPath.Child("type"), *in.Type, "", "BlockDevice", "CharDevice", "Directory", "DirectoryOrCreate", "File", "FileOrCreate", "Socket")...)
	}
	return errs
}

func Validate_Lifecycle(in *v1.Lifecycle, fldPath *field.Path) (errs field.ErrorList) {
	if in.PostStart != nil {
		errs = append(errs, Validate_LifecycleHandler(in.PostStart, fldPath.Child("postStart"))...)
	}
	if in.PreStop != nil {
		errs = append(errs, Validate_LifecycleHandler(in.PreStop, fldPath.Child("preStop"))...)
	}
	return errs
}

func Validate_LifecycleHandler(in *v1.LifecycleHandler, fldPath *field.Path) (errs field.ErrorList) {
	if in.HTTPGet != nil {
		errs = append(errs, Validate_HTTPGetAction(in.HTTPGet, fldPath.Child("httpGet"))...)
	}
	return errs
}

func Validate_LoadBalancerIngress(in *v1.LoadBalancerIngress, fldPath *field.Path) (errs field.ErrorList) {
	for k := range in.Ports {
		c := &in.Ports[k]
		errs = append(errs, Validate_PortStatus(c, fldPath.Index(k))...)
	}
	return errs
}

func Validate_LoadBalancerStatus(in *v1.LoadBalancerStatus, fldPath *field.Path) (errs field.ErrorList) {
	for k := range in.Ingress {
		c := &in.Ingress[k]
		errs = append(errs, Validate_LoadBalancerIngress(c, fldPath.Index(k))...)
	}
	return errs
}

func Validate_ModifyVolumeStatus(in *v1.ModifyVolumeStatus, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, validate.Enum(fldPath.Child("status"), in.Status, "InProgress", "Infeasible", "Pending")...)
	return errs
}

func Validate_Namespace(in *v1.Namespace, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, Validate_NamespaceStatus(&in.Status, fldPath.Child("status"))...)
	return errs
}

func Validate_NamespaceList(in *v1.NamespaceList, fldPath *field.Path) (errs field.ErrorList) {
	for k := range in.Items {
		c := &in.Items[k]
		errs = append(errs, Validate_Namespace(c, fldPath.Index(k))...)
	}
	return errs
}

func Validate_NamespaceStatus(in *v1.NamespaceStatus, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, validate.Enum(fldPath.Child("phase"), in.Phase, "Active", "Terminating")...)
	return errs
}

func Validate_Node(in *v1.Node, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, Validate_NodeSpec(&in.Spec, fldPath.Child("spec"))...)
	errs = append(errs, Validate_NodeStatus(&in.Status, fldPath.Child("status"))...)
	return errs
}

func Validate_NodeAffinity(in *v1.NodeAffinity, fldPath *field.Path) (errs field.ErrorList) {
	if in.RequiredDuringSchedulingIgnoredDuringExecution != nil {
		errs = append(errs, Validate_NodeSelector(in.RequiredDuringSchedulingIgnoredDuringExecution, fldPath.Child("requiredDuringSchedulingIgnoredDuringExecution"))...)
	}
	for k := range in.PreferredDuringSchedulingIgnoredDuringExecution {
		c := &in.PreferredDuringSchedulingIgnoredDuringExecution[k]
		errs = append(errs, Validate_PreferredSchedulingTerm(c, fldPath.Index(k))...)
	}
	return errs
}

func Validate_NodeList(in *v1.NodeList, fldPath *field.Path) (errs field.ErrorList) {
	for k := range in.Items {
		c := &in.Items[k]
		errs = append(errs, Validate_Node(c, fldPath.Index(k))...)
	}
	return errs
}

func Validate_NodeSelector(in *v1.NodeSelector, fldPath *field.Path) (errs field.ErrorList) {
	for k := range in.NodeSelectorTerms {
		c := &in.NodeSelectorTerms[k]
		errs = append(errs, Validate_NodeSelectorTerm(c, fldPath.Index(k))...)
	}
	return errs
}

func Validate_NodeSelectorRequirement(in *v1.NodeSelectorRequirement, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, validate.Enum(fldPath.Child("operator"), in.Operator, "DoesNotExist", "Exists", "Gt", "In", "Lt", "NotIn")...)
	return errs
}

func Validate_NodeSelectorTerm(in *v1.NodeSelectorTerm, fldPath *field.Path) (errs field.ErrorList) {
	for k := range in.MatchExpressions {
		c := &in.MatchExpressions[k]
		errs = append(errs, Validate_NodeSelectorRequirement(c, fldPath.Index(k))...)
	}
	for k := range in.MatchFields {
		c := &in.MatchFields[k]
		errs = append(errs, Validate_NodeSelectorRequirement(c, fldPath.Index(k))...)
	}
	return errs
}

func Validate_NodeSpec(in *v1.NodeSpec, fldPath *field.Path) (errs field.ErrorList) {
	for k := range in.Taints {
		c := &in.Taints[k]
		errs = append(errs, Validate_Taint(c, fldPath.Index(k))...)
	}
	return errs
}

func Validate_NodeStatus(in *v1.NodeStatus, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, validate.Enum(fldPath.Child("phase"), in.Phase, "Pending", "Running", "Terminated")...)
	return errs
}

func Validate_PersistentVolume(in *v1.PersistentVolume, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, Validate_PersistentVolumeSpec(&in.Spec, fldPath.Child("spec"))...)
	errs = append(errs, Validate_PersistentVolumeStatus(&in.Status, fldPath.Child("status"))...)
	return errs
}

func Validate_PersistentVolumeClaim(in *v1.PersistentVolumeClaim, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, Validate_PersistentVolumeClaimSpec(&in.Spec, fldPath.Child("spec"))...)
	errs = append(errs, Validate_PersistentVolumeClaimStatus(&in.Status, fldPath.Child("status"))...)
	return errs
}

func Validate_PersistentVolumeClaimList(in *v1.PersistentVolumeClaimList, fldPath *field.Path) (errs field.ErrorList) {
	for k := range in.Items {
		c := &in.Items[k]
		errs = append(errs, Validate_PersistentVolumeClaim(c, fldPath.Index(k))...)
	}
	return errs
}

func Validate_PersistentVolumeClaimSpec(in *v1.PersistentVolumeClaimSpec, fldPath *field.Path) (errs field.ErrorList) {
	if in.VolumeMode != nil {
		errs = append(errs, validate.Enum(fldPath.Child("volumeMode"), *in.VolumeMode, "Block", "Filesystem")...)
	}
	return errs
}

func Validate_PersistentVolumeClaimStatus(in *v1.PersistentVolumeClaimStatus, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, validate.Enum(fldPath.Child("phase"), in.Phase, "Bound", "Lost", "Pending")...)
	if in.ModifyVolumeStatus != nil {
		errs = append(errs, Validate_ModifyVolumeStatus(in.ModifyVolumeStatus, fldPath.Child("modifyVolumeStatus"))...)
	}
	return errs
}

func Validate_PersistentVolumeClaimTemplate(in *v1.PersistentVolumeClaimTemplate, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, Validate_PersistentVolumeClaimSpec(&in.Spec, fldPath.Child("spec"))...)
	return errs
}

func Validate_PersistentVolumeList(in *v1.PersistentVolumeList, fldPath *field.Path) (errs field.ErrorList) {
	for k := range in.Items {
		c := &in.Items[k]
		errs = append(errs, Validate_PersistentVolume(c, fldPath.Index(k))...)
	}
	return errs
}

func Validate_PersistentVolumeSource(in *v1.PersistentVolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	if in.HostPath != nil {
		errs = append(errs, Validate_HostPathVolumeSource(in.HostPath, fldPath.Child("hostPath"))...)
	}
	if in.AzureDisk != nil {
		errs = append(errs, Validate_AzureDiskVolumeSource(in.AzureDisk, fldPath.Child("azureDisk"))...)
	}
	return errs
}

func Validate_PersistentVolumeSpec(in *v1.PersistentVolumeSpec, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, Validate_PersistentVolumeSource(&in.PersistentVolumeSource, fldPath.Child("PersistentVolumeSource"))...)
	errs = append(errs, validate.Enum(fldPath.Child("persistentVolumeReclaimPolicy"), in.PersistentVolumeReclaimPolicy, "Delete", "Recycle", "Retain")...)
	if in.VolumeMode != nil {
		errs = append(errs, validate.Enum(fldPath.Child("volumeMode"), *in.VolumeMode, "Block", "Filesystem")...)
	}
	if in.NodeAffinity != nil {
		errs = append(errs, Validate_VolumeNodeAffinity(in.NodeAffinity, fldPath.Child("nodeAffinity"))...)
	}
	return errs
}

func Validate_PersistentVolumeStatus(in *v1.PersistentVolumeStatus, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, validate.Enum(fldPath.Child("phase"), in.Phase, "Available", "Bound", "Failed", "Pending", "Released")...)
	return errs
}

func Validate_Pod(in *v1.Pod, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, Validate_PodSpec(&in.Spec, fldPath.Child("spec"))...)
	errs = append(errs, Validate_PodStatus(&in.Status, fldPath.Child("status"))...)
	return errs
}

func Validate_PodList(in *v1.PodList, fldPath *field.Path) (errs field.ErrorList) {
	for k := range in.Items {
		c := &in.Items[k]
		errs = append(errs, Validate_Pod(c, fldPath.Index(k))...)
	}
	return errs
}

func Validate_PodSecurityContext(in *v1.PodSecurityContext, fldPath *field.Path) (errs field.ErrorList) {
	if in.SupplementalGroupsPolicy != nil {
		errs = append(errs, validate.Enum(fldPath.Child("supplementalGroupsPolicy"), *in.SupplementalGroupsPolicy, "Merge", "Strict")...)
	}
	if in.FSGroupChangePolicy != nil {
		errs = append(errs, validate.Enum(fldPath.Child("fsGroupChangePolicy"), *in.FSGroupChangePolicy, "Always", "OnRootMismatch")...)
	}
	if in.SeccompProfile != nil {
		errs = append(errs, Validate_SeccompProfile(in.SeccompProfile, fldPath.Child("seccompProfile"))...)
	}
	if in.AppArmorProfile != nil {
		errs = append(errs, Validate_AppArmorProfile(in.AppArmorProfile, fldPath.Child("appArmorProfile"))...)
	}
	return errs
}

func Validate_PodSpec(in *v1.PodSpec, fldPath *field.Path) (errs field.ErrorList) {
	for k := range in.Volumes {
		c := &in.Volumes[k]
		errs = append(errs, Validate_Volume(c, fldPath.Index(k))...)
	}
	for k := range in.InitContainers {
		c := &in.InitContainers[k]
		errs = append(errs, Validate_Container(c, fldPath.Index(k))...)
	}
	for k := range in.Containers {
		c := &in.Containers[k]
		errs = append(errs, Validate_Container(c, fldPath.Index(k))...)
	}
	for k := range in.EphemeralContainers {
		c := &in.EphemeralContainers[k]
		errs = append(errs, Validate_EphemeralContainer(c, fldPath.Index(k))...)
	}
	errs = append(errs, validate.Enum(fldPath.Child("restartPolicy"), in.RestartPolicy, "Always", "Never", "OnFailure")...)
	errs = append(errs, validate.Enum(fldPath.Child("dnsPolicy"), in.DNSPolicy, "ClusterFirst", "ClusterFirstWithHostNet", "Default", "None")...)
	if in.SecurityContext != nil {
		errs = append(errs, Validate_PodSecurityContext(in.SecurityContext, fldPath.Child("securityContext"))...)
	}
	if in.Affinity != nil {
		errs = append(errs, Validate_Affinity(in.Affinity, fldPath.Child("affinity"))...)
	}
	for k := range in.Tolerations {
		c := &in.Tolerations[k]
		errs = append(errs, Validate_Toleration(c, fldPath.Index(k))...)
	}
	for k := range in.HostAliases {
		c := &in.HostAliases[k]
		errs = append(errs, Validate_HostAlias(c, fldPath.Index(k))...)
	}
	if in.PreemptionPolicy != nil {
		errs = append(errs, validate.Enum(fldPath.Child("preemptionPolicy"), *in.PreemptionPolicy, "Never", "PreemptLowerPriority")...)
	}
	for k := range in.TopologySpreadConstraints {
		c := &in.TopologySpreadConstraints[k]
		errs = append(errs, Validate_TopologySpreadConstraint(c, fldPath.Index(k))...)
	}
	return errs
}

func Validate_PodStatus(in *v1.PodStatus, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, validate.Enum(fldPath.Child("phase"), in.Phase, "Failed", "Pending", "Running", "Succeeded", "Unknown")...)
	errs = append(errs, validate.Enum(fldPath.Child("qosClass"), in.QOSClass, "BestEffort", "Burstable", "Guaranteed")...)
	return errs
}

func Validate_PodStatusResult(in *v1.PodStatusResult, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, Validate_PodStatus(&in.Status, fldPath.Child("status"))...)
	return errs
}

func Validate_PodTemplate(in *v1.PodTemplate, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, Validate_PodTemplateSpec(&in.Template, fldPath.Child("template"))...)
	return errs
}

func Validate_PodTemplateList(in *v1.PodTemplateList, fldPath *field.Path) (errs field.ErrorList) {
	for k := range in.Items {
		c := &in.Items[k]
		errs = append(errs, Validate_PodTemplate(c, fldPath.Index(k))...)
	}
	return errs
}

func Validate_PodTemplateSpec(in *v1.PodTemplateSpec, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, Validate_PodSpec(&in.Spec, fldPath.Child("spec"))...)
	return errs
}

func Validate_PortStatus(in *v1.PortStatus, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, validate.Enum(fldPath.Child("protocol"), in.Protocol, "SCTP", "TCP", "UDP")...)
	return errs
}

func Validate_PreferredSchedulingTerm(in *v1.PreferredSchedulingTerm, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, Validate_NodeSelectorTerm(&in.Preference, fldPath.Child("preference"))...)
	return errs
}

func Validate_Probe(in *v1.Probe, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, Validate_ProbeHandler(&in.ProbeHandler, fldPath.Child("ProbeHandler"))...)
	return errs
}

func Validate_ProbeHandler(in *v1.ProbeHandler, fldPath *field.Path) (errs field.ErrorList) {
	if in.HTTPGet != nil {
		errs = append(errs, Validate_HTTPGetAction(in.HTTPGet, fldPath.Child("httpGet"))...)
	}
	return errs
}

func Validate_ReplicationController(in *v1.ReplicationController, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, Validate_ReplicationControllerSpec(&in.Spec, fldPath.Child("spec"))...)
	return errs
}

func Validate_ReplicationControllerList(in *v1.ReplicationControllerList, fldPath *field.Path) (errs field.ErrorList) {
	for k := range in.Items {
		c := &in.Items[k]
		errs = append(errs, Validate_ReplicationController(c, fldPath.Index(k))...)
	}
	return errs
}

func Validate_ReplicationControllerSpec(in *v1.ReplicationControllerSpec, fldPath *field.Path) (errs field.ErrorList) {
	if in.Template != nil {
		errs = append(errs, Validate_PodTemplateSpec(in.Template, fldPath.Child("template"))...)
	}
	return errs
}

func Validate_ResourceQuota(in *v1.ResourceQuota, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, Validate_ResourceQuotaSpec(&in.Spec, fldPath.Child("spec"))...)
	return errs
}

func Validate_ResourceQuotaList(in *v1.ResourceQuotaList, fldPath *field.Path) (errs field.ErrorList) {
	for k := range in.Items {
		c := &in.Items[k]
		errs = append(errs, Validate_ResourceQuota(c, fldPath.Index(k))...)
	}
	return errs
}

func Validate_ResourceQuotaSpec(in *v1.ResourceQuotaSpec, fldPath *field.Path) (errs field.ErrorList) {
	if in.ScopeSelector != nil {
		errs = append(errs, Validate_ScopeSelector(in.ScopeSelector, fldPath.Child("scopeSelector"))...)
	}
	return errs
}

func Validate_ScopeSelector(in *v1.ScopeSelector, fldPath *field.Path) (errs field.ErrorList) {
	for k := range in.MatchExpressions {
		c := &in.MatchExpressions[k]
		errs = append(errs, Validate_ScopedResourceSelectorRequirement(c, fldPath.Index(k))...)
	}
	return errs
}

func Validate_ScopedResourceSelectorRequirement(in *v1.ScopedResourceSelectorRequirement, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, validate.Enum(fldPath.Child("scopeName"), in.ScopeName, "BestEffort", "CrossNamespacePodAffinity", "NotBestEffort", "NotTerminating", "PriorityClass", "Terminating")...)
	errs = append(errs, validate.Enum(fldPath.Child("operator"), in.Operator, "DoesNotExist", "Exists", "In", "NotIn")...)
	return errs
}

func Validate_SeccompProfile(in *v1.SeccompProfile, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, validate.Enum(fldPath.Child("type"), in.Type, "Localhost", "RuntimeDefault", "Unconfined")...)
	return errs
}

func Validate_SecurityContext(in *v1.SecurityContext, fldPath *field.Path) (errs field.ErrorList) {
	if in.ProcMount != nil {
		errs = append(errs, validate.Enum(fldPath.Child("procMount"), *in.ProcMount, "Default", "Unmasked")...)
	}
	if in.SeccompProfile != nil {
		errs = append(errs, Validate_SeccompProfile(in.SeccompProfile, fldPath.Child("seccompProfile"))...)
	}
	if in.AppArmorProfile != nil {
		errs = append(errs, Validate_AppArmorProfile(in.AppArmorProfile, fldPath.Child("appArmorProfile"))...)
	}
	return errs
}

func Validate_Service(in *v1.Service, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, Validate_ServiceSpec(&in.Spec, fldPath.Child("spec"))...)
	errs = append(errs, Validate_ServiceStatus(&in.Status, fldPath.Child("status"))...)
	return errs
}

func Validate_ServiceList(in *v1.ServiceList, fldPath *field.Path) (errs field.ErrorList) {
	for k := range in.Items {
		c := &in.Items[k]
		errs = append(errs, Validate_Service(c, fldPath.Index(k))...)
	}
	return errs
}

func Validate_ServicePort(in *v1.ServicePort, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, validate.Enum(fldPath.Child("protocol"), in.Protocol, "SCTP", "TCP", "UDP")...)
	return errs
}

func Validate_ServiceSpec(in *v1.ServiceSpec, fldPath *field.Path) (errs field.ErrorList) {
	for k := range in.Ports {
		c := &in.Ports[k]
		errs = append(errs, Validate_ServicePort(c, fldPath.Index(k))...)
	}
	errs = append(errs, validate.Enum(fldPath.Child("type"), in.Type, "ClusterIP", "ExternalName", "LoadBalancer", "NodePort")...)
	errs = append(errs, validate.Enum(fldPath.Child("sessionAffinity"), in.SessionAffinity, "ClientIP", "None")...)
	errs = append(errs, validate.Enum(fldPath.Child("externalTrafficPolicy"), in.ExternalTrafficPolicy, "Cluster", "Local")...)
	if in.IPFamilyPolicy != nil {
		errs = append(errs, validate.Enum(fldPath.Child("ipFamilyPolicy"), *in.IPFamilyPolicy, "PreferDualStack", "RequireDualStack", "SingleStack")...)
	}
	if in.InternalTrafficPolicy != nil {
		errs = append(errs, validate.Enum(fldPath.Child("internalTrafficPolicy"), *in.InternalTrafficPolicy, "Cluster", "Local")...)
	}
	return errs
}

func Validate_ServiceStatus(in *v1.ServiceStatus, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, Validate_LoadBalancerStatus(&in.LoadBalancer, fldPath.Child("loadBalancer"))...)
	return errs
}

func Validate_Taint(in *v1.Taint, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, validate.Enum(fldPath.Child("effect"), in.Effect, "NoExecute", "NoSchedule", "PreferNoSchedule")...)
	return errs
}

func Validate_Toleration(in *v1.Toleration, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, validate.Enum(fldPath.Child("operator"), in.Operator, "Equal", "Exists")...)
	errs = append(errs, validate.Enum(fldPath.Child("effect"), in.Effect, "NoExecute", "NoSchedule", "PreferNoSchedule")...)
	return errs
}

func Validate_TopologySpreadConstraint(in *v1.TopologySpreadConstraint, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, validate.Enum(fldPath.Child("whenUnsatisfiable"), in.WhenUnsatisfiable, "DoNotSchedule", "ScheduleAnyway")...)
	if in.NodeAffinityPolicy != nil {
		errs = append(errs, validate.Enum(fldPath.Child("nodeAffinityPolicy"), *in.NodeAffinityPolicy, "Honor", "Ignore")...)
	}
	if in.NodeTaintsPolicy != nil {
		errs = append(errs, validate.Enum(fldPath.Child("nodeTaintsPolicy"), *in.NodeTaintsPolicy, "Honor", "Ignore")...)
	}
	return errs
}

func Validate_Volume(in *v1.Volume, fldPath *field.Path) (errs field.ErrorList) {
	if e := validate.Required(fldPath.Child("name"), in.Name); len(e) != 0 {
		errs = append(errs, e...)
	} else {
		errs = append(errs, validate.DNSLabel(fldPath.Child("name"), in.Name)...)
	}
	errs = append(errs, Validate_VolumeSource(&in.VolumeSource, fldPath.Child("VolumeSource"))...)
	return errs
}

func Validate_VolumeMount(in *v1.VolumeMount, fldPath *field.Path) (errs field.ErrorList) {
	if in.MountPropagation != nil {
		errs = append(errs, validate.Enum(fldPath.Child("mountPropagation"), *in.MountPropagation, "Bidirectional", "HostToContainer", "None")...)
	}
	return errs
}

func Validate_VolumeNodeAffinity(in *v1.VolumeNodeAffinity, fldPath *field.Path) (errs field.ErrorList) {
	if in.Required != nil {
		errs = append(errs, Validate_NodeSelector(in.Required, fldPath.Child("required"))...)
	}
	return errs
}

func Validate_VolumeSource(in *v1.VolumeSource, fldPath *field.Path) (errs field.ErrorList) {
	if in.HostPath != nil {
		errs = append(errs, Validate_HostPathVolumeSource(in.HostPath, fldPath.Child("hostPath"))...)
	}
	if in.AzureDisk != nil {
		errs = append(errs, Validate_AzureDiskVolumeSource(in.AzureDisk, fldPath.Child("azureDisk"))...)
	}
	if in.Ephemeral != nil {
		errs = append(errs, Validate_EphemeralVolumeSource(in.Ephemeral, fldPath.Child("ephemeral"))...)
	}
	return errs
}
