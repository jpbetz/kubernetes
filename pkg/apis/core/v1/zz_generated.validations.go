//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by validation-gen. DO NOT EDIT.

package v1

import (
	fmt "fmt"

	v1 "k8s.io/api/core/v1"
	validate "k8s.io/apimachinery/pkg/api/validate"
	runtime "k8s.io/apimachinery/pkg/runtime"
	field "k8s.io/apimachinery/pkg/util/validation/field"
)

func init() { localSchemeBuilder.Register(RegisterValidations) }

// RegisterValidations adds validation functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterValidations(scheme *runtime.Scheme) error {
	scheme.AddValidationFunc(new(v1.Binding), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Binding(obj.(*v1.Binding), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.ComponentStatus), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ComponentStatus(obj.(*v1.ComponentStatus), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.ComponentStatusList), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ComponentStatusList(obj.(*v1.ComponentStatusList), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.ConfigMap), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ConfigMap(obj.(*v1.ConfigMap), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.ConfigMapList), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ConfigMapList(obj.(*v1.ConfigMapList), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.Endpoints), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Endpoints(obj.(*v1.Endpoints), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.EndpointsList), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_EndpointsList(obj.(*v1.EndpointsList), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.Event), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Event(obj.(*v1.Event), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.EventList), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_EventList(obj.(*v1.EventList), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.LimitRange), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_LimitRange(obj.(*v1.LimitRange), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.LimitRangeList), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_LimitRangeList(obj.(*v1.LimitRangeList), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.List), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_List(obj.(*v1.List), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.Namespace), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Namespace(obj.(*v1.Namespace), nil)
		}
		if len(subresources) == 1 && subresources[0] == "status" {
			return nil // v1.NamespaceStatus has no validation
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.NamespaceList), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_NamespaceList(obj.(*v1.NamespaceList), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.Node), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Node(obj.(*v1.Node), nil)
		}
		if len(subresources) == 1 && subresources[0] == "status" {
			return nil // v1.NodeStatus has no validation
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.NodeList), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_NodeList(obj.(*v1.NodeList), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.NodeProxyOptions), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_NodeProxyOptions(obj.(*v1.NodeProxyOptions), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.PersistentVolume), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PersistentVolume(obj.(*v1.PersistentVolume), nil)
		}
		if len(subresources) == 1 && subresources[0] == "status" {
			return nil // v1.PersistentVolumeStatus has no validation
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.PersistentVolumeClaim), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PersistentVolumeClaim(obj.(*v1.PersistentVolumeClaim), nil)
		}
		if len(subresources) == 1 && subresources[0] == "status" {
			return nil // v1.PersistentVolumeClaimStatus has no validation
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.PersistentVolumeClaimList), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PersistentVolumeClaimList(obj.(*v1.PersistentVolumeClaimList), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.PersistentVolumeList), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PersistentVolumeList(obj.(*v1.PersistentVolumeList), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.Pod), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Pod(obj.(*v1.Pod), nil)
		}
		if len(subresources) == 1 && subresources[0] == "status" {
			root := obj.(*v1.Pod)
			return Validate_PodStatus(&root.Status, nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.PodAttachOptions), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodAttachOptions(obj.(*v1.PodAttachOptions), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.PodExecOptions), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodExecOptions(obj.(*v1.PodExecOptions), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.PodList), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodList(obj.(*v1.PodList), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.PodLogOptions), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodLogOptions(obj.(*v1.PodLogOptions), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.PodPortForwardOptions), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodPortForwardOptions(obj.(*v1.PodPortForwardOptions), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.PodProxyOptions), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodProxyOptions(obj.(*v1.PodProxyOptions), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.PodStatusResult), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodStatusResult(obj.(*v1.PodStatusResult), nil)
		}
		if len(subresources) == 1 && subresources[0] == "status" {
			root := obj.(*v1.PodStatusResult)
			return Validate_PodStatus(&root.Status, nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.PodTemplate), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodTemplate(obj.(*v1.PodTemplate), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.PodTemplateList), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodTemplateList(obj.(*v1.PodTemplateList), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.RangeAllocation), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_RangeAllocation(obj.(*v1.RangeAllocation), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.ReplicationController), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ReplicationController(obj.(*v1.ReplicationController), nil)
		}
		if len(subresources) == 1 && subresources[0] == "status" {
			return nil // v1.ReplicationControllerStatus has no validation
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.ReplicationControllerList), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ReplicationControllerList(obj.(*v1.ReplicationControllerList), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.ResourceQuota), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ResourceQuota(obj.(*v1.ResourceQuota), nil)
		}
		if len(subresources) == 1 && subresources[0] == "status" {
			return nil // v1.ResourceQuotaStatus has no validation
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.ResourceQuotaList), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ResourceQuotaList(obj.(*v1.ResourceQuotaList), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.Secret), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Secret(obj.(*v1.Secret), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.SecretList), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_SecretList(obj.(*v1.SecretList), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.SerializedReference), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_SerializedReference(obj.(*v1.SerializedReference), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.Service), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Service(obj.(*v1.Service), nil)
		}
		if len(subresources) == 1 && subresources[0] == "status" {
			return nil // v1.ServiceStatus has no validation
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.ServiceAccount), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ServiceAccount(obj.(*v1.ServiceAccount), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.ServiceAccountList), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ServiceAccountList(obj.(*v1.ServiceAccountList), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.ServiceList), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ServiceList(obj.(*v1.ServiceList), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(v1.ServiceProxyOptions), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ServiceProxyOptions(obj.(*v1.ServiceProxyOptions), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	return nil
}

func Validate_Binding(in *v1.Binding, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ObjectMeta

	// Target

	return errs
}

func Validate_ComponentStatus(in *v1.ComponentStatus, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ObjectMeta

	// Conditions
	for i, val := range in.Conditions {
	}

	return errs
}

func Validate_ComponentStatusList(in *v1.ComponentStatusList, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ListMeta

	// Items
	for i, val := range in.Items {
	}

	return errs
}

func Validate_ConfigMap(in *v1.ConfigMap, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ObjectMeta

	// Immutable

	// Data
	for key, val := range in.Data {
	}

	// BinaryData
	for key, val := range in.BinaryData {
	}

	return errs
}

func Validate_ConfigMapList(in *v1.ConfigMapList, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ListMeta

	// Items
	for i, val := range in.Items {
	}

	return errs
}

func Validate_ContainerStatus(in *v1.ContainerStatus, fldPath *field.Path) (errs field.ErrorList) {
	// Name

	// State

	// LastTerminationState

	// Ready

	// RestartCount

	// Image

	// ImageID

	// ContainerID

	// Started

	// AllocatedResources

	// Resources

	// VolumeMounts
	for i, val := range in.VolumeMounts {
	}

	// User

	// AllocatedResourcesStatus
	for i, val := range in.AllocatedResourcesStatus {
		errs = append(errs, Validate_ResourceStatus(&val, fldPath.Index(i))...)
	}

	return errs
}

func Validate_Endpoints(in *v1.Endpoints, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ObjectMeta

	// Subsets
	for i, val := range in.Subsets {
	}

	return errs
}

func Validate_EndpointsList(in *v1.EndpointsList, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ListMeta

	// Items
	for i, val := range in.Items {
	}

	return errs
}

func Validate_Event(in *v1.Event, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ObjectMeta

	// InvolvedObject

	// Reason

	// Message

	// Source

	// FirstTimestamp

	// LastTimestamp

	// Count

	// Type

	// EventTime

	// Series

	// Action

	// Related

	// ReportingController

	// ReportingInstance

	return errs
}

func Validate_EventList(in *v1.EventList, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ListMeta

	// Items
	for i, val := range in.Items {
	}

	return errs
}

func Validate_HostAlias(in *v1.HostAlias, fldPath *field.Path) (errs field.ErrorList) {
	// IP
	errs = append(errs, validate.Required(fldPath.Child("ip"), in.IP)...)

	// Hostnames
	for i, val := range in.Hostnames {
	}

	return errs
}

func Validate_HostIP(in *v1.HostIP, fldPath *field.Path) (errs field.ErrorList) {
	// IP
	errs = append(errs, validate.Required(fldPath.Child("ip"), in.IP)...)

	return errs
}

func Validate_LimitRange(in *v1.LimitRange, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ObjectMeta

	// Spec

	return errs
}

func Validate_LimitRangeList(in *v1.LimitRangeList, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ListMeta

	// Items
	for i, val := range in.Items {
	}

	return errs
}

func Validate_List(in *v1.List, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ListMeta

	// Items
	for i, val := range in.Items {
	}

	return errs
}

func Validate_Namespace(in *v1.Namespace, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ObjectMeta

	// Spec

	// Status

	return errs
}

func Validate_NamespaceList(in *v1.NamespaceList, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ListMeta

	// Items
	for i, val := range in.Items {
	}

	return errs
}

func Validate_Node(in *v1.Node, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ObjectMeta

	// Spec

	// Status

	return errs
}

func Validate_NodeList(in *v1.NodeList, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ListMeta

	// Items
	for i, val := range in.Items {
	}

	return errs
}

func Validate_NodeProxyOptions(in *v1.NodeProxyOptions, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// Path

	return errs
}

func Validate_PersistentVolume(in *v1.PersistentVolume, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ObjectMeta

	// Spec

	// Status

	return errs
}

func Validate_PersistentVolumeClaim(in *v1.PersistentVolumeClaim, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ObjectMeta

	// Spec

	// Status

	return errs
}

func Validate_PersistentVolumeClaimList(in *v1.PersistentVolumeClaimList, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ListMeta

	// Items
	for i, val := range in.Items {
	}

	return errs
}

func Validate_PersistentVolumeList(in *v1.PersistentVolumeList, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ListMeta

	// Items
	for i, val := range in.Items {
	}

	return errs
}

func Validate_Pod(in *v1.Pod, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ObjectMeta

	// Spec
	errs = append(errs, Validate_PodSpec(&in.Spec, fldPath.Child("spec"))...)

	// Status
	errs = append(errs, Validate_PodStatus(&in.Status, fldPath.Child("status"))...)

	return errs
}

func Validate_PodAttachOptions(in *v1.PodAttachOptions, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// Stdin

	// Stdout

	// Stderr

	// TTY

	// Container

	return errs
}

func Validate_PodExecOptions(in *v1.PodExecOptions, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// Stdin

	// Stdout

	// Stderr

	// TTY

	// Container

	// Command
	for i, val := range in.Command {
	}

	return errs
}

func Validate_PodIP(in *v1.PodIP, fldPath *field.Path) (errs field.ErrorList) {
	// IP
	errs = append(errs, validate.Required(fldPath.Child("ip"), in.IP)...)

	return errs
}

func Validate_PodList(in *v1.PodList, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ListMeta

	// Items
	for i, val := range in.Items {
		errs = append(errs, Validate_Pod(&val, fldPath.Index(i))...)
	}

	return errs
}

func Validate_PodLogOptions(in *v1.PodLogOptions, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// Container

	// Follow

	// Previous

	// SinceSeconds

	// SinceTime

	// Timestamps

	// TailLines

	// LimitBytes

	// InsecureSkipTLSVerifyBackend

	return errs
}

func Validate_PodPortForwardOptions(in *v1.PodPortForwardOptions, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// Ports
	for i, val := range in.Ports {
	}

	return errs
}

func Validate_PodProxyOptions(in *v1.PodProxyOptions, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// Path

	return errs
}

func Validate_PodSpec(in *v1.PodSpec, fldPath *field.Path) (errs field.ErrorList) {
	// Volumes
	for i, val := range in.Volumes {
		errs = append(errs, Validate_Volume(&val, fldPath.Index(i))...)
	}

	// InitContainers
	for i, val := range in.InitContainers {
	}

	// Containers
	for i, val := range in.Containers {
	}

	// EphemeralContainers
	for i, val := range in.EphemeralContainers {
	}

	// RestartPolicy

	// TerminationGracePeriodSeconds

	// ActiveDeadlineSeconds

	// DNSPolicy

	// NodeSelector
	for key, val := range in.NodeSelector {
	}

	// ServiceAccountName

	// DeprecatedServiceAccount

	// AutomountServiceAccountToken

	// NodeName

	// HostNetwork

	// HostPID

	// HostIPC

	// ShareProcessNamespace

	// SecurityContext

	// ImagePullSecrets
	for i, val := range in.ImagePullSecrets {
	}

	// Hostname

	// Subdomain

	// Affinity

	// SchedulerName

	// Tolerations
	for i, val := range in.Tolerations {
	}

	// HostAliases
	for i, val := range in.HostAliases {
		errs = append(errs, Validate_HostAlias(&val, fldPath.Index(i))...)
	}

	// PriorityClassName

	// Priority

	// DNSConfig

	// ReadinessGates
	for i, val := range in.ReadinessGates {
	}

	// RuntimeClassName

	// EnableServiceLinks

	// PreemptionPolicy

	// Overhead

	// TopologySpreadConstraints
	for i, val := range in.TopologySpreadConstraints {
	}

	// SetHostnameAsFQDN

	// OS

	// HostUsers

	// SchedulingGates
	for i, val := range in.SchedulingGates {
	}

	// ResourceClaims
	for i, val := range in.ResourceClaims {
	}

	return errs
}

func Validate_PodStatus(in *v1.PodStatus, fldPath *field.Path) (errs field.ErrorList) {
	// Phase

	// Conditions
	for i, val := range in.Conditions {
	}

	// Message

	// Reason

	// NominatedNodeName

	// HostIP

	// HostIPs
	for i, val := range in.HostIPs {
		errs = append(errs, Validate_HostIP(&val, fldPath.Index(i))...)
	}

	// PodIP

	// PodIPs
	for i, val := range in.PodIPs {
		errs = append(errs, Validate_PodIP(&val, fldPath.Index(i))...)
	}

	// StartTime

	// InitContainerStatuses
	for i, val := range in.InitContainerStatuses {
		errs = append(errs, Validate_ContainerStatus(&val, fldPath.Index(i))...)
	}

	// ContainerStatuses
	for i, val := range in.ContainerStatuses {
		errs = append(errs, Validate_ContainerStatus(&val, fldPath.Index(i))...)
	}

	// QOSClass

	// EphemeralContainerStatuses
	for i, val := range in.EphemeralContainerStatuses {
		errs = append(errs, Validate_ContainerStatus(&val, fldPath.Index(i))...)
	}

	// Resize

	// ResourceClaimStatuses
	for i, val := range in.ResourceClaimStatuses {
	}

	return errs
}

func Validate_PodStatusResult(in *v1.PodStatusResult, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ObjectMeta

	// Status
	errs = append(errs, Validate_PodStatus(&in.Status, fldPath.Child("status"))...)

	return errs
}

func Validate_PodTemplate(in *v1.PodTemplate, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ObjectMeta

	// Template
	errs = append(errs, Validate_PodTemplateSpec(&in.Template, fldPath.Child("template"))...)

	return errs
}

func Validate_PodTemplateList(in *v1.PodTemplateList, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ListMeta

	// Items
	for i, val := range in.Items {
		errs = append(errs, Validate_PodTemplate(&val, fldPath.Index(i))...)
	}

	return errs
}

func Validate_PodTemplateSpec(in *v1.PodTemplateSpec, fldPath *field.Path) (errs field.ErrorList) {
	// ObjectMeta

	// Spec
	errs = append(errs, Validate_PodSpec(&in.Spec, fldPath.Child("spec"))...)

	return errs
}

func Validate_RangeAllocation(in *v1.RangeAllocation, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ObjectMeta

	// Range

	// Data
	for i, val := range in.Data {
	}

	return errs
}

func Validate_ReplicationController(in *v1.ReplicationController, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ObjectMeta

	// Spec

	// Status

	return errs
}

func Validate_ReplicationControllerList(in *v1.ReplicationControllerList, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ListMeta

	// Items
	for i, val := range in.Items {
	}

	return errs
}

func Validate_ResourceQuota(in *v1.ResourceQuota, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ObjectMeta

	// Spec

	// Status

	return errs
}

func Validate_ResourceQuotaList(in *v1.ResourceQuotaList, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ListMeta

	// Items
	for i, val := range in.Items {
	}

	return errs
}

func Validate_ResourceStatus(in *v1.ResourceStatus, fldPath *field.Path) (errs field.ErrorList) {
	// Name
	errs = append(errs, validate.Required(fldPath.Child("name"), in.Name)...)

	// Resources
	for i, val := range in.Resources {
	}

	return errs
}

func Validate_Secret(in *v1.Secret, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ObjectMeta

	// Immutable

	// Data
	for key, val := range in.Data {
	}

	// StringData
	for key, val := range in.StringData {
	}

	// Type

	return errs
}

func Validate_SecretList(in *v1.SecretList, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ListMeta

	// Items
	for i, val := range in.Items {
	}

	return errs
}

func Validate_SerializedReference(in *v1.SerializedReference, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// Reference

	return errs
}

func Validate_Service(in *v1.Service, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ObjectMeta

	// Spec

	// Status

	return errs
}

func Validate_ServiceAccount(in *v1.ServiceAccount, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ObjectMeta

	// Secrets
	for i, val := range in.Secrets {
	}

	// ImagePullSecrets
	for i, val := range in.ImagePullSecrets {
	}

	// AutomountServiceAccountToken

	return errs
}

func Validate_ServiceAccountList(in *v1.ServiceAccountList, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ListMeta

	// Items
	for i, val := range in.Items {
	}

	return errs
}

func Validate_ServiceList(in *v1.ServiceList, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// ListMeta

	// Items
	for i, val := range in.Items {
	}

	return errs
}

func Validate_ServiceProxyOptions(in *v1.ServiceProxyOptions, fldPath *field.Path) (errs field.ErrorList) {
	// TypeMeta

	// Path

	return errs
}

func Validate_Volume(in *v1.Volume, fldPath *field.Path) (errs field.ErrorList) {
	// Name
	if e := validate.Required(fldPath.Child("name"), in.Name); len(e) != 0 {
		errs = append(errs, e...)
	} else {
		errs = append(errs, validate.DNSLabel(fldPath.Child("name"), in.Name)...)
	}

	// VolumeSource

	return errs
}
