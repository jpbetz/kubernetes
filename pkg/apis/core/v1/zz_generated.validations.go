//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by validation-gen. DO NOT EDIT.

package v1

import (
	fmt "fmt"

	v1 "k8s.io/api/core/v1"
	operation "k8s.io/apimachinery/pkg/api/operation"
	safe "k8s.io/apimachinery/pkg/api/safe"
	validate "k8s.io/apimachinery/pkg/api/validate"
	runtime "k8s.io/apimachinery/pkg/runtime"
	field "k8s.io/apimachinery/pkg/util/validation/field"
)

func init() { localSchemeBuilder.Register(RegisterValidations) }

// RegisterValidations adds validation functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterValidations(scheme *runtime.Scheme) error {
	scheme.AddValidationFunc((*v1.Binding)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Binding(opCtx, obj.(*v1.Binding), safe.Cast[v1.Binding](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.ComponentStatus)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ComponentStatus(opCtx, obj.(*v1.ComponentStatus), safe.Cast[v1.ComponentStatus](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.ComponentStatusList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ComponentStatusList(opCtx, obj.(*v1.ComponentStatusList), safe.Cast[v1.ComponentStatusList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.ConfigMap)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ConfigMap(opCtx, obj.(*v1.ConfigMap), safe.Cast[v1.ConfigMap](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.ConfigMapList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ConfigMapList(opCtx, obj.(*v1.ConfigMapList), safe.Cast[v1.ConfigMapList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.Endpoints)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Endpoints(opCtx, obj.(*v1.Endpoints), safe.Cast[v1.Endpoints](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.EndpointsList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_EndpointsList(opCtx, obj.(*v1.EndpointsList), safe.Cast[v1.EndpointsList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.Event)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Event(opCtx, obj.(*v1.Event), safe.Cast[v1.Event](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.EventList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_EventList(opCtx, obj.(*v1.EventList), safe.Cast[v1.EventList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.LimitRange)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_LimitRange(opCtx, obj.(*v1.LimitRange), safe.Cast[v1.LimitRange](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.LimitRangeList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_LimitRangeList(opCtx, obj.(*v1.LimitRangeList), safe.Cast[v1.LimitRangeList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.List)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_List(opCtx, obj.(*v1.List), safe.Cast[v1.List](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.Namespace)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Namespace(opCtx, obj.(*v1.Namespace), safe.Cast[v1.Namespace](oldObj), nil)
		}
		if len(subresources) == 1 && subresources[0] == "status" {
			return nil // v1.NamespaceStatus has no validation
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.NamespaceList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_NamespaceList(opCtx, obj.(*v1.NamespaceList), safe.Cast[v1.NamespaceList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.Node)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Node(opCtx, obj.(*v1.Node), safe.Cast[v1.Node](oldObj), nil)
		}
		if len(subresources) == 1 && subresources[0] == "status" {
			return nil // v1.NodeStatus has no validation
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.NodeList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_NodeList(opCtx, obj.(*v1.NodeList), safe.Cast[v1.NodeList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.NodeProxyOptions)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_NodeProxyOptions(opCtx, obj.(*v1.NodeProxyOptions), safe.Cast[v1.NodeProxyOptions](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.PersistentVolume)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PersistentVolume(opCtx, obj.(*v1.PersistentVolume), safe.Cast[v1.PersistentVolume](oldObj), nil)
		}
		if len(subresources) == 1 && subresources[0] == "status" {
			return nil // v1.PersistentVolumeStatus has no validation
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.PersistentVolumeClaim)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PersistentVolumeClaim(opCtx, obj.(*v1.PersistentVolumeClaim), safe.Cast[v1.PersistentVolumeClaim](oldObj), nil)
		}
		if len(subresources) == 1 && subresources[0] == "status" {
			return nil // v1.PersistentVolumeClaimStatus has no validation
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.PersistentVolumeClaimList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PersistentVolumeClaimList(opCtx, obj.(*v1.PersistentVolumeClaimList), safe.Cast[v1.PersistentVolumeClaimList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.PersistentVolumeList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PersistentVolumeList(opCtx, obj.(*v1.PersistentVolumeList), safe.Cast[v1.PersistentVolumeList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.Pod)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Pod(opCtx, obj.(*v1.Pod), safe.Cast[v1.Pod](oldObj), nil)
		}
		if len(subresources) == 1 && subresources[0] == "status" {
			root := obj.(*v1.Pod)
			return Validate_PodStatus(opCtx, &root.Status, safe.Field(safe.Cast[v1.Pod](oldObj), func(oldObj v1.Pod) v1.PodStatus { return oldObj.Status }), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.PodAttachOptions)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodAttachOptions(opCtx, obj.(*v1.PodAttachOptions), safe.Cast[v1.PodAttachOptions](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.PodExecOptions)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodExecOptions(opCtx, obj.(*v1.PodExecOptions), safe.Cast[v1.PodExecOptions](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.PodList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodList(opCtx, obj.(*v1.PodList), safe.Cast[v1.PodList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.PodLogOptions)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodLogOptions(opCtx, obj.(*v1.PodLogOptions), safe.Cast[v1.PodLogOptions](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.PodPortForwardOptions)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodPortForwardOptions(opCtx, obj.(*v1.PodPortForwardOptions), safe.Cast[v1.PodPortForwardOptions](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.PodProxyOptions)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodProxyOptions(opCtx, obj.(*v1.PodProxyOptions), safe.Cast[v1.PodProxyOptions](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.PodStatusResult)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodStatusResult(opCtx, obj.(*v1.PodStatusResult), safe.Cast[v1.PodStatusResult](oldObj), nil)
		}
		if len(subresources) == 1 && subresources[0] == "status" {
			root := obj.(*v1.PodStatusResult)
			return Validate_PodStatus(opCtx, &root.Status, safe.Field(safe.Cast[v1.PodStatusResult](oldObj), func(oldObj v1.PodStatusResult) v1.PodStatus { return oldObj.Status }), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.PodTemplate)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodTemplate(opCtx, obj.(*v1.PodTemplate), safe.Cast[v1.PodTemplate](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.PodTemplateList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodTemplateList(opCtx, obj.(*v1.PodTemplateList), safe.Cast[v1.PodTemplateList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.RangeAllocation)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_RangeAllocation(opCtx, obj.(*v1.RangeAllocation), safe.Cast[v1.RangeAllocation](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.ReplicationController)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ReplicationController(opCtx, obj.(*v1.ReplicationController), safe.Cast[v1.ReplicationController](oldObj), nil)
		}
		if len(subresources) == 1 && subresources[0] == "status" {
			return nil // v1.ReplicationControllerStatus has no validation
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.ReplicationControllerList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ReplicationControllerList(opCtx, obj.(*v1.ReplicationControllerList), safe.Cast[v1.ReplicationControllerList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.ResourceQuota)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ResourceQuota(opCtx, obj.(*v1.ResourceQuota), safe.Cast[v1.ResourceQuota](oldObj), nil)
		}
		if len(subresources) == 1 && subresources[0] == "status" {
			return nil // v1.ResourceQuotaStatus has no validation
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.ResourceQuotaList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ResourceQuotaList(opCtx, obj.(*v1.ResourceQuotaList), safe.Cast[v1.ResourceQuotaList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.Secret)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Secret(opCtx, obj.(*v1.Secret), safe.Cast[v1.Secret](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.SecretList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_SecretList(opCtx, obj.(*v1.SecretList), safe.Cast[v1.SecretList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.SerializedReference)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_SerializedReference(opCtx, obj.(*v1.SerializedReference), safe.Cast[v1.SerializedReference](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.Service)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Service(opCtx, obj.(*v1.Service), safe.Cast[v1.Service](oldObj), nil)
		}
		if len(subresources) == 1 && subresources[0] == "status" {
			return nil // v1.ServiceStatus has no validation
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.ServiceAccount)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ServiceAccount(opCtx, obj.(*v1.ServiceAccount), safe.Cast[v1.ServiceAccount](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.ServiceAccountList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ServiceAccountList(opCtx, obj.(*v1.ServiceAccountList), safe.Cast[v1.ServiceAccountList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.ServiceList)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ServiceList(opCtx, obj.(*v1.ServiceList), safe.Cast[v1.ServiceList](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*v1.ServiceProxyOptions)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ServiceProxyOptions(opCtx, obj.(*v1.ServiceProxyOptions), safe.Cast[v1.ServiceProxyOptions](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	return nil
}

var unionMembershipForAppArmorProfile = validate.NewDiscriminatedUnionMembership("type")

func Validate_AppArmorProfile(opCtx operation.Context, obj, oldObj *v1.AppArmorProfile, fldPath *field.Path) (errs field.ErrorList) {
	// type v1.AppArmorProfile
	if obj != nil {
		errs = append(errs, validate.DiscriminatedUnion(fldPath, *obj, unionMembershipForAppArmorProfile, obj.Type)...)
	}

	// field v1.AppArmorProfile.Type has no validation
	// field v1.AppArmorProfile.LocalhostProfile has no validation
	return errs
}

func Validate_Binding(opCtx operation.Context, obj, oldObj *v1.Binding, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.Binding.TypeMeta has no validation
	// field v1.Binding.ObjectMeta has no validation
	// field v1.Binding.Target has no validation
	return errs
}

func Validate_ComponentStatus(opCtx operation.Context, obj, oldObj *v1.ComponentStatus, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.ComponentStatus.TypeMeta has no validation
	// field v1.ComponentStatus.ObjectMeta has no validation
	// field v1.ComponentStatus.Conditions has no validation
	return errs
}

func Validate_ComponentStatusList(opCtx operation.Context, obj, oldObj *v1.ComponentStatusList, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.ComponentStatusList.TypeMeta has no validation
	// field v1.ComponentStatusList.ListMeta has no validation
	// field v1.ComponentStatusList.Items has no validation
	return errs
}

func Validate_ConfigMap(opCtx operation.Context, obj, oldObj *v1.ConfigMap, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.ConfigMap.TypeMeta has no validation
	// field v1.ConfigMap.ObjectMeta has no validation
	// field v1.ConfigMap.Immutable has no validation
	// field v1.ConfigMap.Data has no validation
	// field v1.ConfigMap.BinaryData has no validation
	return errs
}

func Validate_ConfigMapList(opCtx operation.Context, obj, oldObj *v1.ConfigMapList, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.ConfigMapList.TypeMeta has no validation
	// field v1.ConfigMapList.ListMeta has no validation
	// field v1.ConfigMapList.Items has no validation
	return errs
}

func Validate_Container(opCtx operation.Context, obj, oldObj *v1.Container, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.Container.Name has no validation
	// field v1.Container.Image has no validation
	// field v1.Container.Command has no validation
	// field v1.Container.Args has no validation
	// field v1.Container.WorkingDir has no validation
	// field v1.Container.Ports has no validation
	// field v1.Container.EnvFrom has no validation
	// field v1.Container.Env has no validation
	// field v1.Container.Resources has no validation
	// field v1.Container.ResizePolicy has no validation
	// field v1.Container.RestartPolicy has no validation
	// field v1.Container.VolumeMounts has no validation
	// field v1.Container.VolumeDevices has no validation
	// field v1.Container.LivenessProbe has no validation
	// field v1.Container.ReadinessProbe has no validation
	// field v1.Container.StartupProbe has no validation
	// field v1.Container.Lifecycle has no validation
	// field v1.Container.TerminationMessagePath has no validation
	// field v1.Container.TerminationMessagePolicy has no validation
	// field v1.Container.ImagePullPolicy has no validation

	// field v1.Container.SecurityContext
	errs = append(errs,
		func(obj *v1.SecurityContext, oldObj *v1.SecurityContext, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, Validate_SecurityContext(opCtx, obj, oldObj, fldPath)...)
			}
			return
		}(obj.SecurityContext, safe.Field(oldObj, func(oldObj v1.Container) *v1.SecurityContext { return oldObj.SecurityContext }), fldPath.Child("securityContext"))...)

	// field v1.Container.Stdin has no validation
	// field v1.Container.StdinOnce has no validation
	// field v1.Container.TTY has no validation
	return errs
}

func Validate_ContainerStatus(opCtx operation.Context, obj, oldObj *v1.ContainerStatus, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.ContainerStatus.Name has no validation
	// field v1.ContainerStatus.State has no validation
	// field v1.ContainerStatus.LastTerminationState has no validation
	// field v1.ContainerStatus.Ready has no validation
	// field v1.ContainerStatus.RestartCount has no validation
	// field v1.ContainerStatus.Image has no validation
	// field v1.ContainerStatus.ImageID has no validation
	// field v1.ContainerStatus.ContainerID has no validation
	// field v1.ContainerStatus.Started has no validation
	// field v1.ContainerStatus.AllocatedResources has no validation
	// field v1.ContainerStatus.Resources has no validation
	// field v1.ContainerStatus.VolumeMounts has no validation
	// field v1.ContainerStatus.User has no validation

	// field v1.ContainerStatus.AllocatedResourcesStatus
	errs = append(errs,
		func(obj []v1.ResourceStatus, oldObj []v1.ResourceStatus, fldPath *field.Path) (errs field.ErrorList) {
			oldListMap := safe.NewListMap(oldObj, func(o v1.ResourceStatus) any { return [1]any{o.Name} })
			for i, val := range obj {
				errs = append(errs,
					func(obj v1.ResourceStatus, oldObj *v1.ResourceStatus, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_ResourceStatus(opCtx, &obj, oldObj, fldPath)...)
						return
					}(val, oldListMap.WithMatchingKey(val), fldPath.Index(i))...)
			}
			return
		}(obj.AllocatedResourcesStatus, safe.Field(oldObj, func(oldObj v1.ContainerStatus) []v1.ResourceStatus { return oldObj.AllocatedResourcesStatus }), fldPath.Child("allocatedResourcesStatus"))...)

	return errs
}

func Validate_Endpoints(opCtx operation.Context, obj, oldObj *v1.Endpoints, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.Endpoints.TypeMeta has no validation
	// field v1.Endpoints.ObjectMeta has no validation
	// field v1.Endpoints.Subsets has no validation
	return errs
}

func Validate_EndpointsList(opCtx operation.Context, obj, oldObj *v1.EndpointsList, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.EndpointsList.TypeMeta has no validation
	// field v1.EndpointsList.ListMeta has no validation
	// field v1.EndpointsList.Items has no validation
	return errs
}

func Validate_EphemeralContainer(opCtx operation.Context, obj, oldObj *v1.EphemeralContainer, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.EphemeralContainer.TargetContainerName has no validation
	return errs
}

func Validate_EphemeralContainerCommon(opCtx operation.Context, obj, oldObj *v1.EphemeralContainerCommon, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.EphemeralContainerCommon.Name has no validation
	// field v1.EphemeralContainerCommon.Image has no validation
	// field v1.EphemeralContainerCommon.Command has no validation
	// field v1.EphemeralContainerCommon.Args has no validation
	// field v1.EphemeralContainerCommon.WorkingDir has no validation
	// field v1.EphemeralContainerCommon.Ports has no validation
	// field v1.EphemeralContainerCommon.EnvFrom has no validation
	// field v1.EphemeralContainerCommon.Env has no validation
	// field v1.EphemeralContainerCommon.Resources has no validation
	// field v1.EphemeralContainerCommon.ResizePolicy has no validation
	// field v1.EphemeralContainerCommon.RestartPolicy has no validation
	// field v1.EphemeralContainerCommon.VolumeMounts has no validation
	// field v1.EphemeralContainerCommon.VolumeDevices has no validation
	// field v1.EphemeralContainerCommon.LivenessProbe has no validation
	// field v1.EphemeralContainerCommon.ReadinessProbe has no validation
	// field v1.EphemeralContainerCommon.StartupProbe has no validation
	// field v1.EphemeralContainerCommon.Lifecycle has no validation
	// field v1.EphemeralContainerCommon.TerminationMessagePath has no validation
	// field v1.EphemeralContainerCommon.TerminationMessagePolicy has no validation
	// field v1.EphemeralContainerCommon.ImagePullPolicy has no validation

	// field v1.EphemeralContainerCommon.SecurityContext
	errs = append(errs,
		func(obj *v1.SecurityContext, oldObj *v1.SecurityContext, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, Validate_SecurityContext(opCtx, obj, oldObj, fldPath)...)
			}
			return
		}(obj.SecurityContext, safe.Field(oldObj, func(oldObj v1.EphemeralContainerCommon) *v1.SecurityContext { return oldObj.SecurityContext }), fldPath.Child("securityContext"))...)

	// field v1.EphemeralContainerCommon.Stdin has no validation
	// field v1.EphemeralContainerCommon.StdinOnce has no validation
	// field v1.EphemeralContainerCommon.TTY has no validation
	return errs
}

func Validate_Event(opCtx operation.Context, obj, oldObj *v1.Event, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.Event.TypeMeta has no validation
	// field v1.Event.ObjectMeta has no validation
	// field v1.Event.InvolvedObject has no validation
	// field v1.Event.Reason has no validation
	// field v1.Event.Message has no validation
	// field v1.Event.Source has no validation
	// field v1.Event.FirstTimestamp has no validation
	// field v1.Event.LastTimestamp has no validation
	// field v1.Event.Count has no validation
	// field v1.Event.Type has no validation
	// field v1.Event.EventTime has no validation
	// field v1.Event.Series has no validation
	// field v1.Event.Action has no validation
	// field v1.Event.Related has no validation
	// field v1.Event.ReportingController has no validation
	// field v1.Event.ReportingInstance has no validation
	return errs
}

func Validate_EventList(opCtx operation.Context, obj, oldObj *v1.EventList, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.EventList.TypeMeta has no validation
	// field v1.EventList.ListMeta has no validation
	// field v1.EventList.Items has no validation
	return errs
}

func Validate_HostAlias(opCtx operation.Context, obj, oldObj *v1.HostAlias, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.HostAlias.IP
	errs = append(errs,
		func(obj string, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Required(fldPath, obj); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			return
		}(obj.IP, safe.Field(oldObj, func(oldObj v1.HostAlias) *string { return &oldObj.IP }), fldPath.Child("ip"))...)

	// field v1.HostAlias.Hostnames has no validation
	return errs
}

func Validate_HostIP(opCtx operation.Context, obj, oldObj *v1.HostIP, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.HostIP.IP
	errs = append(errs,
		func(obj string, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Required(fldPath, obj); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			return
		}(obj.IP, safe.Field(oldObj, func(oldObj v1.HostIP) *string { return &oldObj.IP }), fldPath.Child("ip"))...)

	return errs
}

func Validate_LimitRange(opCtx operation.Context, obj, oldObj *v1.LimitRange, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.LimitRange.TypeMeta has no validation
	// field v1.LimitRange.ObjectMeta has no validation
	// field v1.LimitRange.Spec has no validation
	return errs
}

func Validate_LimitRangeList(opCtx operation.Context, obj, oldObj *v1.LimitRangeList, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.LimitRangeList.TypeMeta has no validation
	// field v1.LimitRangeList.ListMeta has no validation
	// field v1.LimitRangeList.Items has no validation
	return errs
}

func Validate_List(opCtx operation.Context, obj, oldObj *v1.List, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.List.TypeMeta has no validation
	// field v1.List.ListMeta has no validation
	// field v1.List.Items has no validation
	return errs
}

func Validate_Namespace(opCtx operation.Context, obj, oldObj *v1.Namespace, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.Namespace.TypeMeta has no validation
	// field v1.Namespace.ObjectMeta has no validation
	// field v1.Namespace.Spec has no validation
	// field v1.Namespace.Status has no validation
	return errs
}

func Validate_NamespaceList(opCtx operation.Context, obj, oldObj *v1.NamespaceList, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.NamespaceList.TypeMeta has no validation
	// field v1.NamespaceList.ListMeta has no validation
	// field v1.NamespaceList.Items has no validation
	return errs
}

func Validate_Node(opCtx operation.Context, obj, oldObj *v1.Node, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.Node.TypeMeta has no validation
	// field v1.Node.ObjectMeta has no validation
	// field v1.Node.Spec has no validation
	// field v1.Node.Status has no validation
	return errs
}

func Validate_NodeList(opCtx operation.Context, obj, oldObj *v1.NodeList, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.NodeList.TypeMeta has no validation
	// field v1.NodeList.ListMeta has no validation
	// field v1.NodeList.Items has no validation
	return errs
}

func Validate_NodeProxyOptions(opCtx operation.Context, obj, oldObj *v1.NodeProxyOptions, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.NodeProxyOptions.TypeMeta has no validation
	// field v1.NodeProxyOptions.Path has no validation
	return errs
}

func Validate_PersistentVolume(opCtx operation.Context, obj, oldObj *v1.PersistentVolume, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.PersistentVolume.TypeMeta has no validation
	// field v1.PersistentVolume.ObjectMeta has no validation
	// field v1.PersistentVolume.Spec has no validation
	// field v1.PersistentVolume.Status has no validation
	return errs
}

func Validate_PersistentVolumeClaim(opCtx operation.Context, obj, oldObj *v1.PersistentVolumeClaim, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.PersistentVolumeClaim.TypeMeta has no validation
	// field v1.PersistentVolumeClaim.ObjectMeta has no validation
	// field v1.PersistentVolumeClaim.Spec has no validation
	// field v1.PersistentVolumeClaim.Status has no validation
	return errs
}

func Validate_PersistentVolumeClaimList(opCtx operation.Context, obj, oldObj *v1.PersistentVolumeClaimList, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.PersistentVolumeClaimList.TypeMeta has no validation
	// field v1.PersistentVolumeClaimList.ListMeta has no validation
	// field v1.PersistentVolumeClaimList.Items has no validation
	return errs
}

func Validate_PersistentVolumeList(opCtx operation.Context, obj, oldObj *v1.PersistentVolumeList, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.PersistentVolumeList.TypeMeta has no validation
	// field v1.PersistentVolumeList.ListMeta has no validation
	// field v1.PersistentVolumeList.Items has no validation
	return errs
}

func Validate_Pod(opCtx operation.Context, obj, oldObj *v1.Pod, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.Pod.TypeMeta has no validation
	// field v1.Pod.ObjectMeta has no validation

	// field v1.Pod.Spec
	errs = append(errs,
		func(obj v1.PodSpec, oldObj *v1.PodSpec, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, Validate_PodSpec(opCtx, &obj, oldObj, fldPath)...)
			return
		}(obj.Spec, safe.Field(oldObj, func(oldObj v1.Pod) *v1.PodSpec { return &oldObj.Spec }), fldPath.Child("spec"))...)

	// field v1.Pod.Status
	errs = append(errs,
		func(obj v1.PodStatus, oldObj *v1.PodStatus, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, Validate_PodStatus(opCtx, &obj, oldObj, fldPath)...)
			return
		}(obj.Status, safe.Field(oldObj, func(oldObj v1.Pod) *v1.PodStatus { return &oldObj.Status }), fldPath.Child("status"))...)

	return errs
}

func Validate_PodAttachOptions(opCtx operation.Context, obj, oldObj *v1.PodAttachOptions, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.PodAttachOptions.TypeMeta has no validation
	// field v1.PodAttachOptions.Stdin has no validation
	// field v1.PodAttachOptions.Stdout has no validation
	// field v1.PodAttachOptions.Stderr has no validation
	// field v1.PodAttachOptions.TTY has no validation
	// field v1.PodAttachOptions.Container has no validation
	return errs
}

func Validate_PodExecOptions(opCtx operation.Context, obj, oldObj *v1.PodExecOptions, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.PodExecOptions.TypeMeta has no validation
	// field v1.PodExecOptions.Stdin has no validation
	// field v1.PodExecOptions.Stdout has no validation
	// field v1.PodExecOptions.Stderr has no validation
	// field v1.PodExecOptions.TTY has no validation
	// field v1.PodExecOptions.Container has no validation
	// field v1.PodExecOptions.Command has no validation
	return errs
}

func Validate_PodIP(opCtx operation.Context, obj, oldObj *v1.PodIP, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.PodIP.IP
	errs = append(errs,
		func(obj string, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Required(fldPath, obj); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			return
		}(obj.IP, safe.Field(oldObj, func(oldObj v1.PodIP) *string { return &oldObj.IP }), fldPath.Child("ip"))...)

	return errs
}

func Validate_PodList(opCtx operation.Context, obj, oldObj *v1.PodList, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.PodList.TypeMeta has no validation
	// field v1.PodList.ListMeta has no validation

	// field v1.PodList.Items
	errs = append(errs,
		func(obj []v1.Pod, oldObj []v1.Pod, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj v1.Pod, oldObj *v1.Pod, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_Pod(opCtx, &obj, oldObj, fldPath)...)
						return
					}(val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Items, safe.Field(oldObj, func(oldObj v1.PodList) []v1.Pod { return oldObj.Items }), fldPath.Child("items"))...)

	return errs
}

func Validate_PodLogOptions(opCtx operation.Context, obj, oldObj *v1.PodLogOptions, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.PodLogOptions.TypeMeta has no validation
	// field v1.PodLogOptions.Container has no validation
	// field v1.PodLogOptions.Follow has no validation
	// field v1.PodLogOptions.Previous has no validation
	// field v1.PodLogOptions.SinceSeconds has no validation
	// field v1.PodLogOptions.SinceTime has no validation
	// field v1.PodLogOptions.Timestamps has no validation
	// field v1.PodLogOptions.TailLines has no validation
	// field v1.PodLogOptions.LimitBytes has no validation
	// field v1.PodLogOptions.InsecureSkipTLSVerifyBackend has no validation
	return errs
}

func Validate_PodPortForwardOptions(opCtx operation.Context, obj, oldObj *v1.PodPortForwardOptions, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.PodPortForwardOptions.TypeMeta has no validation
	// field v1.PodPortForwardOptions.Ports has no validation
	return errs
}

func Validate_PodProxyOptions(opCtx operation.Context, obj, oldObj *v1.PodProxyOptions, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.PodProxyOptions.TypeMeta has no validation
	// field v1.PodProxyOptions.Path has no validation
	return errs
}

func Validate_PodSecurityContext(opCtx operation.Context, obj, oldObj *v1.PodSecurityContext, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.PodSecurityContext.SELinuxOptions has no validation
	// field v1.PodSecurityContext.WindowsOptions has no validation
	// field v1.PodSecurityContext.RunAsUser has no validation
	// field v1.PodSecurityContext.RunAsGroup has no validation
	// field v1.PodSecurityContext.RunAsNonRoot has no validation
	// field v1.PodSecurityContext.SupplementalGroups has no validation
	// field v1.PodSecurityContext.SupplementalGroupsPolicy has no validation
	// field v1.PodSecurityContext.FSGroup has no validation
	// field v1.PodSecurityContext.Sysctls has no validation
	// field v1.PodSecurityContext.FSGroupChangePolicy has no validation

	// field v1.PodSecurityContext.SeccompProfile
	errs = append(errs,
		func(obj *v1.SeccompProfile, oldObj *v1.SeccompProfile, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, Validate_SeccompProfile(opCtx, obj, oldObj, fldPath)...)
			}
			return
		}(obj.SeccompProfile, safe.Field(oldObj, func(oldObj v1.PodSecurityContext) *v1.SeccompProfile { return oldObj.SeccompProfile }), fldPath.Child("seccompProfile"))...)

	// field v1.PodSecurityContext.AppArmorProfile
	errs = append(errs,
		func(obj *v1.AppArmorProfile, oldObj *v1.AppArmorProfile, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, Validate_AppArmorProfile(opCtx, obj, oldObj, fldPath)...)
			}
			return
		}(obj.AppArmorProfile, safe.Field(oldObj, func(oldObj v1.PodSecurityContext) *v1.AppArmorProfile { return oldObj.AppArmorProfile }), fldPath.Child("appArmorProfile"))...)

	return errs
}

func Validate_PodSpec(opCtx operation.Context, obj, oldObj *v1.PodSpec, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.PodSpec.Volumes
	errs = append(errs,
		func(obj []v1.Volume, oldObj []v1.Volume, fldPath *field.Path) (errs field.ErrorList) {
			oldListMap := safe.NewListMap(oldObj, func(o v1.Volume) any { return [1]any{o.Name} })
			for i, val := range obj {
				errs = append(errs,
					func(obj v1.Volume, oldObj *v1.Volume, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_Volume(opCtx, &obj, oldObj, fldPath)...)
						return
					}(val, oldListMap.WithMatchingKey(val), fldPath.Index(i))...)
			}
			return
		}(obj.Volumes, safe.Field(oldObj, func(oldObj v1.PodSpec) []v1.Volume { return oldObj.Volumes }), fldPath.Child("volumes"))...)

	// field v1.PodSpec.InitContainers
	errs = append(errs,
		func(obj []v1.Container, oldObj []v1.Container, fldPath *field.Path) (errs field.ErrorList) {
			oldListMap := safe.NewListMap(oldObj, func(o v1.Container) any { return [1]any{o.Name} })
			for i, val := range obj {
				errs = append(errs,
					func(obj v1.Container, oldObj *v1.Container, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_Container(opCtx, &obj, oldObj, fldPath)...)
						return
					}(val, oldListMap.WithMatchingKey(val), fldPath.Index(i))...)
			}
			return
		}(obj.InitContainers, safe.Field(oldObj, func(oldObj v1.PodSpec) []v1.Container { return oldObj.InitContainers }), fldPath.Child("initContainers"))...)

	// field v1.PodSpec.Containers
	errs = append(errs,
		func(obj []v1.Container, oldObj []v1.Container, fldPath *field.Path) (errs field.ErrorList) {
			oldListMap := safe.NewListMap(oldObj, func(o v1.Container) any { return [1]any{o.Name} })
			for i, val := range obj {
				errs = append(errs,
					func(obj v1.Container, oldObj *v1.Container, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_Container(opCtx, &obj, oldObj, fldPath)...)
						return
					}(val, oldListMap.WithMatchingKey(val), fldPath.Index(i))...)
			}
			return
		}(obj.Containers, safe.Field(oldObj, func(oldObj v1.PodSpec) []v1.Container { return oldObj.Containers }), fldPath.Child("containers"))...)

	// field v1.PodSpec.EphemeralContainers
	errs = append(errs,
		func(obj []v1.EphemeralContainer, oldObj []v1.EphemeralContainer, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj v1.EphemeralContainer, oldObj *v1.EphemeralContainer, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_EphemeralContainer(opCtx, &obj, oldObj, fldPath)...)
						return
					}(val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.EphemeralContainers, safe.Field(oldObj, func(oldObj v1.PodSpec) []v1.EphemeralContainer { return oldObj.EphemeralContainers }), fldPath.Child("ephemeralContainers"))...)

	// field v1.PodSpec.RestartPolicy has no validation
	// field v1.PodSpec.TerminationGracePeriodSeconds has no validation
	// field v1.PodSpec.ActiveDeadlineSeconds has no validation
	// field v1.PodSpec.DNSPolicy has no validation
	// field v1.PodSpec.NodeSelector has no validation
	// field v1.PodSpec.ServiceAccountName has no validation
	// field v1.PodSpec.DeprecatedServiceAccount has no validation
	// field v1.PodSpec.AutomountServiceAccountToken has no validation
	// field v1.PodSpec.NodeName has no validation
	// field v1.PodSpec.HostNetwork has no validation
	// field v1.PodSpec.HostPID has no validation
	// field v1.PodSpec.HostIPC has no validation
	// field v1.PodSpec.ShareProcessNamespace has no validation

	// field v1.PodSpec.SecurityContext
	errs = append(errs,
		func(obj *v1.PodSecurityContext, oldObj *v1.PodSecurityContext, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, Validate_PodSecurityContext(opCtx, obj, oldObj, fldPath)...)
			}
			return
		}(obj.SecurityContext, safe.Field(oldObj, func(oldObj v1.PodSpec) *v1.PodSecurityContext { return oldObj.SecurityContext }), fldPath.Child("securityContext"))...)

	// field v1.PodSpec.ImagePullSecrets has no validation
	// field v1.PodSpec.Hostname has no validation
	// field v1.PodSpec.Subdomain has no validation
	// field v1.PodSpec.Affinity has no validation
	// field v1.PodSpec.SchedulerName has no validation
	// field v1.PodSpec.Tolerations has no validation

	// field v1.PodSpec.HostAliases
	errs = append(errs,
		func(obj []v1.HostAlias, oldObj []v1.HostAlias, fldPath *field.Path) (errs field.ErrorList) {
			oldListMap := safe.NewListMap(oldObj, func(o v1.HostAlias) any { return [1]any{o.IP} })
			for i, val := range obj {
				errs = append(errs,
					func(obj v1.HostAlias, oldObj *v1.HostAlias, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_HostAlias(opCtx, &obj, oldObj, fldPath)...)
						return
					}(val, oldListMap.WithMatchingKey(val), fldPath.Index(i))...)
			}
			return
		}(obj.HostAliases, safe.Field(oldObj, func(oldObj v1.PodSpec) []v1.HostAlias { return oldObj.HostAliases }), fldPath.Child("hostAliases"))...)

	// field v1.PodSpec.PriorityClassName has no validation
	// field v1.PodSpec.Priority has no validation
	// field v1.PodSpec.DNSConfig has no validation
	// field v1.PodSpec.ReadinessGates has no validation
	// field v1.PodSpec.RuntimeClassName has no validation
	// field v1.PodSpec.EnableServiceLinks has no validation
	// field v1.PodSpec.PreemptionPolicy has no validation
	// field v1.PodSpec.Overhead has no validation
	// field v1.PodSpec.TopologySpreadConstraints has no validation
	// field v1.PodSpec.SetHostnameAsFQDN has no validation
	// field v1.PodSpec.OS has no validation
	// field v1.PodSpec.HostUsers has no validation
	// field v1.PodSpec.SchedulingGates has no validation
	// field v1.PodSpec.ResourceClaims has no validation
	return errs
}

func Validate_PodStatus(opCtx operation.Context, obj, oldObj *v1.PodStatus, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.PodStatus.Phase has no validation
	// field v1.PodStatus.Conditions has no validation
	// field v1.PodStatus.Message has no validation
	// field v1.PodStatus.Reason has no validation
	// field v1.PodStatus.NominatedNodeName has no validation
	// field v1.PodStatus.HostIP has no validation

	// field v1.PodStatus.HostIPs
	errs = append(errs,
		func(obj []v1.HostIP, oldObj []v1.HostIP, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj v1.HostIP, oldObj *v1.HostIP, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_HostIP(opCtx, &obj, oldObj, fldPath)...)
						return
					}(val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.HostIPs, safe.Field(oldObj, func(oldObj v1.PodStatus) []v1.HostIP { return oldObj.HostIPs }), fldPath.Child("hostIPs"))...)

	// field v1.PodStatus.PodIP has no validation

	// field v1.PodStatus.PodIPs
	errs = append(errs,
		func(obj []v1.PodIP, oldObj []v1.PodIP, fldPath *field.Path) (errs field.ErrorList) {
			oldListMap := safe.NewListMap(oldObj, func(o v1.PodIP) any { return [1]any{o.IP} })
			for i, val := range obj {
				errs = append(errs,
					func(obj v1.PodIP, oldObj *v1.PodIP, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_PodIP(opCtx, &obj, oldObj, fldPath)...)
						return
					}(val, oldListMap.WithMatchingKey(val), fldPath.Index(i))...)
			}
			return
		}(obj.PodIPs, safe.Field(oldObj, func(oldObj v1.PodStatus) []v1.PodIP { return oldObj.PodIPs }), fldPath.Child("podIPs"))...)

	// field v1.PodStatus.StartTime has no validation

	// field v1.PodStatus.InitContainerStatuses
	errs = append(errs,
		func(obj []v1.ContainerStatus, oldObj []v1.ContainerStatus, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj v1.ContainerStatus, oldObj *v1.ContainerStatus, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_ContainerStatus(opCtx, &obj, oldObj, fldPath)...)
						return
					}(val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.InitContainerStatuses, safe.Field(oldObj, func(oldObj v1.PodStatus) []v1.ContainerStatus { return oldObj.InitContainerStatuses }), fldPath.Child("initContainerStatuses"))...)

	// field v1.PodStatus.ContainerStatuses
	errs = append(errs,
		func(obj []v1.ContainerStatus, oldObj []v1.ContainerStatus, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj v1.ContainerStatus, oldObj *v1.ContainerStatus, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_ContainerStatus(opCtx, &obj, oldObj, fldPath)...)
						return
					}(val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.ContainerStatuses, safe.Field(oldObj, func(oldObj v1.PodStatus) []v1.ContainerStatus { return oldObj.ContainerStatuses }), fldPath.Child("containerStatuses"))...)

	// field v1.PodStatus.QOSClass has no validation

	// field v1.PodStatus.EphemeralContainerStatuses
	errs = append(errs,
		func(obj []v1.ContainerStatus, oldObj []v1.ContainerStatus, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj v1.ContainerStatus, oldObj *v1.ContainerStatus, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_ContainerStatus(opCtx, &obj, oldObj, fldPath)...)
						return
					}(val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.EphemeralContainerStatuses, safe.Field(oldObj, func(oldObj v1.PodStatus) []v1.ContainerStatus { return oldObj.EphemeralContainerStatuses }), fldPath.Child("ephemeralContainerStatuses"))...)

	// field v1.PodStatus.Resize has no validation
	// field v1.PodStatus.ResourceClaimStatuses has no validation
	return errs
}

func Validate_PodStatusResult(opCtx operation.Context, obj, oldObj *v1.PodStatusResult, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.PodStatusResult.TypeMeta has no validation
	// field v1.PodStatusResult.ObjectMeta has no validation

	// field v1.PodStatusResult.Status
	errs = append(errs,
		func(obj v1.PodStatus, oldObj *v1.PodStatus, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, Validate_PodStatus(opCtx, &obj, oldObj, fldPath)...)
			return
		}(obj.Status, safe.Field(oldObj, func(oldObj v1.PodStatusResult) *v1.PodStatus { return &oldObj.Status }), fldPath.Child("status"))...)

	return errs
}

func Validate_PodTemplate(opCtx operation.Context, obj, oldObj *v1.PodTemplate, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.PodTemplate.TypeMeta has no validation
	// field v1.PodTemplate.ObjectMeta has no validation

	// field v1.PodTemplate.Template
	errs = append(errs,
		func(obj v1.PodTemplateSpec, oldObj *v1.PodTemplateSpec, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, Validate_PodTemplateSpec(opCtx, &obj, oldObj, fldPath)...)
			return
		}(obj.Template, safe.Field(oldObj, func(oldObj v1.PodTemplate) *v1.PodTemplateSpec { return &oldObj.Template }), fldPath.Child("template"))...)

	return errs
}

func Validate_PodTemplateList(opCtx operation.Context, obj, oldObj *v1.PodTemplateList, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.PodTemplateList.TypeMeta has no validation
	// field v1.PodTemplateList.ListMeta has no validation

	// field v1.PodTemplateList.Items
	errs = append(errs,
		func(obj []v1.PodTemplate, oldObj []v1.PodTemplate, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj v1.PodTemplate, oldObj *v1.PodTemplate, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_PodTemplate(opCtx, &obj, oldObj, fldPath)...)
						return
					}(val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Items, safe.Field(oldObj, func(oldObj v1.PodTemplateList) []v1.PodTemplate { return oldObj.Items }), fldPath.Child("items"))...)

	return errs
}

func Validate_PodTemplateSpec(opCtx operation.Context, obj, oldObj *v1.PodTemplateSpec, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.PodTemplateSpec.ObjectMeta has no validation

	// field v1.PodTemplateSpec.Spec
	errs = append(errs,
		func(obj v1.PodSpec, oldObj *v1.PodSpec, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, Validate_PodSpec(opCtx, &obj, oldObj, fldPath)...)
			return
		}(obj.Spec, safe.Field(oldObj, func(oldObj v1.PodTemplateSpec) *v1.PodSpec { return &oldObj.Spec }), fldPath.Child("spec"))...)

	return errs
}

func Validate_RangeAllocation(opCtx operation.Context, obj, oldObj *v1.RangeAllocation, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.RangeAllocation.TypeMeta has no validation
	// field v1.RangeAllocation.ObjectMeta has no validation
	// field v1.RangeAllocation.Range has no validation
	// field v1.RangeAllocation.Data has no validation
	return errs
}

func Validate_ReplicationController(opCtx operation.Context, obj, oldObj *v1.ReplicationController, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.ReplicationController.TypeMeta has no validation
	// field v1.ReplicationController.ObjectMeta has no validation

	// field v1.ReplicationController.Spec
	errs = append(errs,
		func(obj v1.ReplicationControllerSpec, oldObj *v1.ReplicationControllerSpec, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, Validate_ReplicationControllerSpec(opCtx, &obj, oldObj, fldPath)...)
			return
		}(obj.Spec, safe.Field(oldObj, func(oldObj v1.ReplicationController) *v1.ReplicationControllerSpec { return &oldObj.Spec }), fldPath.Child("spec"))...)

	// field v1.ReplicationController.Status has no validation
	return errs
}

func Validate_ReplicationControllerList(opCtx operation.Context, obj, oldObj *v1.ReplicationControllerList, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.ReplicationControllerList.TypeMeta has no validation
	// field v1.ReplicationControllerList.ListMeta has no validation

	// field v1.ReplicationControllerList.Items
	errs = append(errs,
		func(obj []v1.ReplicationController, oldObj []v1.ReplicationController, fldPath *field.Path) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(obj v1.ReplicationController, oldObj *v1.ReplicationController, fldPath *field.Path) (errs field.ErrorList) {
						errs = append(errs, Validate_ReplicationController(opCtx, &obj, oldObj, fldPath)...)
						return
					}(val, nil, fldPath.Index(i))...)
			}
			return
		}(obj.Items, safe.Field(oldObj, func(oldObj v1.ReplicationControllerList) []v1.ReplicationController { return oldObj.Items }), fldPath.Child("items"))...)

	return errs
}

func Validate_ReplicationControllerSpec(opCtx operation.Context, obj, oldObj *v1.ReplicationControllerSpec, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.ReplicationControllerSpec.Replicas has no validation
	// field v1.ReplicationControllerSpec.MinReadySeconds has no validation
	// field v1.ReplicationControllerSpec.Selector has no validation

	// field v1.ReplicationControllerSpec.Template
	errs = append(errs,
		func(obj *v1.PodTemplateSpec, oldObj *v1.PodTemplateSpec, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, Validate_PodTemplateSpec(opCtx, obj, oldObj, fldPath)...)
			}
			return
		}(obj.Template, safe.Field(oldObj, func(oldObj v1.ReplicationControllerSpec) *v1.PodTemplateSpec { return oldObj.Template }), fldPath.Child("template"))...)

	return errs
}

func Validate_ResourceQuota(opCtx operation.Context, obj, oldObj *v1.ResourceQuota, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.ResourceQuota.TypeMeta has no validation
	// field v1.ResourceQuota.ObjectMeta has no validation
	// field v1.ResourceQuota.Spec has no validation
	// field v1.ResourceQuota.Status has no validation
	return errs
}

func Validate_ResourceQuotaList(opCtx operation.Context, obj, oldObj *v1.ResourceQuotaList, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.ResourceQuotaList.TypeMeta has no validation
	// field v1.ResourceQuotaList.ListMeta has no validation
	// field v1.ResourceQuotaList.Items has no validation
	return errs
}

func Validate_ResourceStatus(opCtx operation.Context, obj, oldObj *v1.ResourceStatus, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.ResourceStatus.Name
	errs = append(errs,
		func(obj v1.ResourceName, oldObj *v1.ResourceName, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Required(fldPath, obj); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			return
		}(obj.Name, safe.Field(oldObj, func(oldObj v1.ResourceStatus) *v1.ResourceName { return &oldObj.Name }), fldPath.Child("name"))...)

	// field v1.ResourceStatus.Resources has no validation
	return errs
}

var unionMembershipForSeccompProfile = validate.NewDiscriminatedUnionMembership("type")

func Validate_SeccompProfile(opCtx operation.Context, obj, oldObj *v1.SeccompProfile, fldPath *field.Path) (errs field.ErrorList) {
	// type v1.SeccompProfile
	if obj != nil {
		errs = append(errs, validate.DiscriminatedUnion(fldPath, *obj, unionMembershipForSeccompProfile, obj.Type)...)
	}

	// field v1.SeccompProfile.Type has no validation
	// field v1.SeccompProfile.LocalhostProfile has no validation
	return errs
}

func Validate_Secret(opCtx operation.Context, obj, oldObj *v1.Secret, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.Secret.TypeMeta has no validation
	// field v1.Secret.ObjectMeta has no validation
	// field v1.Secret.Immutable has no validation
	// field v1.Secret.Data has no validation
	// field v1.Secret.StringData has no validation
	// field v1.Secret.Type has no validation
	return errs
}

func Validate_SecretList(opCtx operation.Context, obj, oldObj *v1.SecretList, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.SecretList.TypeMeta has no validation
	// field v1.SecretList.ListMeta has no validation
	// field v1.SecretList.Items has no validation
	return errs
}

func Validate_SecurityContext(opCtx operation.Context, obj, oldObj *v1.SecurityContext, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.SecurityContext.Capabilities has no validation
	// field v1.SecurityContext.Privileged has no validation
	// field v1.SecurityContext.SELinuxOptions has no validation
	// field v1.SecurityContext.WindowsOptions has no validation
	// field v1.SecurityContext.RunAsUser has no validation
	// field v1.SecurityContext.RunAsGroup has no validation
	// field v1.SecurityContext.RunAsNonRoot has no validation
	// field v1.SecurityContext.ReadOnlyRootFilesystem has no validation
	// field v1.SecurityContext.AllowPrivilegeEscalation has no validation
	// field v1.SecurityContext.ProcMount has no validation

	// field v1.SecurityContext.SeccompProfile
	errs = append(errs,
		func(obj *v1.SeccompProfile, oldObj *v1.SeccompProfile, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, Validate_SeccompProfile(opCtx, obj, oldObj, fldPath)...)
			}
			return
		}(obj.SeccompProfile, safe.Field(oldObj, func(oldObj v1.SecurityContext) *v1.SeccompProfile { return oldObj.SeccompProfile }), fldPath.Child("seccompProfile"))...)

	// field v1.SecurityContext.AppArmorProfile
	errs = append(errs,
		func(obj *v1.AppArmorProfile, oldObj *v1.AppArmorProfile, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, Validate_AppArmorProfile(opCtx, obj, oldObj, fldPath)...)
			}
			return
		}(obj.AppArmorProfile, safe.Field(oldObj, func(oldObj v1.SecurityContext) *v1.AppArmorProfile { return oldObj.AppArmorProfile }), fldPath.Child("appArmorProfile"))...)

	return errs
}

func Validate_SerializedReference(opCtx operation.Context, obj, oldObj *v1.SerializedReference, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.SerializedReference.TypeMeta has no validation
	// field v1.SerializedReference.Reference has no validation
	return errs
}

func Validate_Service(opCtx operation.Context, obj, oldObj *v1.Service, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.Service.TypeMeta has no validation
	// field v1.Service.ObjectMeta has no validation
	// field v1.Service.Spec has no validation
	// field v1.Service.Status has no validation
	return errs
}

func Validate_ServiceAccount(opCtx operation.Context, obj, oldObj *v1.ServiceAccount, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.ServiceAccount.TypeMeta has no validation
	// field v1.ServiceAccount.ObjectMeta has no validation
	// field v1.ServiceAccount.Secrets has no validation
	// field v1.ServiceAccount.ImagePullSecrets has no validation
	// field v1.ServiceAccount.AutomountServiceAccountToken has no validation
	return errs
}

func Validate_ServiceAccountList(opCtx operation.Context, obj, oldObj *v1.ServiceAccountList, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.ServiceAccountList.TypeMeta has no validation
	// field v1.ServiceAccountList.ListMeta has no validation
	// field v1.ServiceAccountList.Items has no validation
	return errs
}

func Validate_ServiceList(opCtx operation.Context, obj, oldObj *v1.ServiceList, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.ServiceList.TypeMeta has no validation
	// field v1.ServiceList.ListMeta has no validation
	// field v1.ServiceList.Items has no validation
	return errs
}

func Validate_ServiceProxyOptions(opCtx operation.Context, obj, oldObj *v1.ServiceProxyOptions, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.ServiceProxyOptions.TypeMeta has no validation
	// field v1.ServiceProxyOptions.Path has no validation
	return errs
}

func Validate_Volume(opCtx operation.Context, obj, oldObj *v1.Volume, fldPath *field.Path) (errs field.ErrorList) {
	// field v1.Volume.Name
	errs = append(errs,
		func(obj string, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.Required(fldPath, obj); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			errs = append(errs, validate.DNSLabel(fldPath, obj)...)
			return
		}(obj.Name, safe.Field(oldObj, func(oldObj v1.Volume) *string { return &oldObj.Name }), fldPath.Child("name"))...)

	// field v1.Volume.VolumeSource has no validation
	return errs
}
