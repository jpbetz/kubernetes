//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by validation-gen. DO NOT EDIT.

package v1

import (
	fmt "fmt"

	v1 "k8s.io/api/core/v1"
	validate "k8s.io/apimachinery/pkg/api/validate"
	runtime "k8s.io/apimachinery/pkg/runtime"
	field "k8s.io/apimachinery/pkg/util/validation/field"
)

func init() { localSchemeBuilder.Register(RegisterValidations) }

// RegisterValidations adds validation functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterValidations(scheme *runtime.Scheme) error {
	scheme.AddValidationFunc(&v1.Pod{}, func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			root := obj.(*v1.Pod)
			return Validate_PodSpec(&root.Spec, nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("No validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(&v1.PodList{}, func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodList(obj.(*v1.PodList), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("No validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(&v1.PodTemplate{}, func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodTemplate(obj.(*v1.PodTemplate), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("No validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(&v1.PodTemplateList{}, func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_PodTemplateList(obj.(*v1.PodTemplateList), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("No validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(&v1.ReplicationController{}, func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			root := obj.(*v1.ReplicationController)
			return Validate_ReplicationControllerSpec(&root.Spec, nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("No validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(&v1.ReplicationControllerList{}, func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_ReplicationControllerList(obj.(*v1.ReplicationControllerList), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("No validation found for %T, subresources: %v", obj, subresources))}
	})
	return nil
}

func Validate_HostAlias(in *v1.HostAlias, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, validate.Required(fldPath.Child("ip"), in.IP)...)
	return errs
}

func Validate_Pod(in *v1.Pod, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, Validate_PodSpec(&in.Spec, fldPath.Child("spec"))...)
	return errs
}

func Validate_PodList(in *v1.PodList, fldPath *field.Path) (errs field.ErrorList) {
	for k := range in.Items {
		c := &in.Items[k]
		errs = append(errs, Validate_Pod(c, fldPath.Index(k))...)
	}
	return errs
}

func Validate_PodSpec(in *v1.PodSpec, fldPath *field.Path) (errs field.ErrorList) {
	for k := range in.Volumes {
		c := &in.Volumes[k]
		errs = append(errs, Validate_Volume(c, fldPath.Index(k))...)
	}
	for k := range in.HostAliases {
		c := &in.HostAliases[k]
		errs = append(errs, Validate_HostAlias(c, fldPath.Index(k))...)
	}
	return errs
}

func Validate_PodTemplate(in *v1.PodTemplate, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, Validate_PodTemplateSpec(&in.Template, fldPath.Child("template"))...)
	return errs
}

func Validate_PodTemplateList(in *v1.PodTemplateList, fldPath *field.Path) (errs field.ErrorList) {
	for k := range in.Items {
		c := &in.Items[k]
		errs = append(errs, Validate_PodTemplate(c, fldPath.Index(k))...)
	}
	return errs
}

func Validate_PodTemplateSpec(in *v1.PodTemplateSpec, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, Validate_PodSpec(&in.Spec, fldPath.Child("spec"))...)
	return errs
}

func Validate_ReplicationController(in *v1.ReplicationController, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, Validate_ReplicationControllerSpec(&in.Spec, fldPath.Child("spec"))...)
	return errs
}

func Validate_ReplicationControllerList(in *v1.ReplicationControllerList, fldPath *field.Path) (errs field.ErrorList) {
	for k := range in.Items {
		c := &in.Items[k]
		errs = append(errs, Validate_ReplicationController(c, fldPath.Index(k))...)
	}
	return errs
}

func Validate_ReplicationControllerSpec(in *v1.ReplicationControllerSpec, fldPath *field.Path) (errs field.ErrorList) {
	if in.Template != nil {
		errs = append(errs, Validate_PodTemplateSpec(in.Template, fldPath.Child("template"))...)
	}
	return errs
}

func Validate_Volume(in *v1.Volume, fldPath *field.Path) (errs field.ErrorList) {
	if e := validate.Required(fldPath.Child("name"), in.Name); len(e) != 0 {
		errs = append(errs, e...)
	} else {
		errs = append(errs, validate.DNSLabel(fldPath.Child("name"), in.Name)...)
	}
	return errs
}
