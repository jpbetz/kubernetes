//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by validation-gen. DO NOT EDIT.

package v1alpha1

import (
	validation "k8s.io/apimachinery/pkg/util/validation"
	field "k8s.io/apimachinery/pkg/util/validation/field"
)

func Validate_Fischer(in *Fischer, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, validation.IsValidIP(fldPath.Child("reference"), in.Reference)...)
	errs = append(errs, Validate_Widget(&in.Primary, fldPath.Child("primary"))...)
	return errs
}

func Validate_Widget(in *Widget, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, validation.IsValidIP(fldPath.Child("name"), in.Name)...)
	return errs
}

func Validate_FischerList(in *FischerList, fldPath *field.Path) (errs field.ErrorList) {
	for k := range in.Items {
		c := &in.Items[k]
		errs = append(errs, Validate_Fischer(c, fldPath.Index(k))...)
	}
	return errs
}

func Validate_Flunder(in *Flunder, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, Validate_FlunderSpec(&in.Spec, fldPath.Child("spec"))...)
	return errs
}

func Validate_FlunderSpec(in *FlunderSpec, fldPath *field.Path) (errs field.ErrorList) {
	errs = append(errs, validation.IsValidIP(fldPath.Child("reference"), in.Reference)...)
	errs = append(errs, Validate_Widget(&in.Primary, fldPath.Child("primary"))...)
	for k := range in.Extras {
		c := &in.Extras[k]
		errs = append(errs, Validate_Widget(c, fldPath.Index(k))...)
	}
	for k_More_idx, k_More := range in.More {
		errs = append(errs, Validate_Widget(&k_More, fldPath.Key(k_More_idx))...)
	}
	return errs
}

func Validate_FlunderList(in *FlunderList, fldPath *field.Path) (errs field.ErrorList) {
	for k := range in.Items {
		c := &in.Items[k]
		errs = append(errs, Validate_Flunder(c, fldPath.Index(k))...)
	}
	return errs
}
