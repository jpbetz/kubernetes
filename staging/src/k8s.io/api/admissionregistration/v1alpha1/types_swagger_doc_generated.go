/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

// This file contains a collection of methods that can be used from go-restful to
// generate Swagger API documentation for its models. Please read this PR for more
// information on the implementation: https://github.com/emicklei/go-restful/pull/215
//
// TODOs are ignored from the parser (e.g. TODO(andronat):... || TODO:...) if and only if
// they are on one line! For multiple line or blocks that you want to ignore use ---.
// Any context after a --- is ignored.
//
// Those methods can be generated by using hack/update-generated-swagger-docs.sh

// AUTO-GENERATED FUNCTIONS START HERE. DO NOT EDIT.
var map_MatchResources = map[string]string{
	"":                      "MatchResources decides whether to run the admission control policy on an object based on whether meet the match criteria.",
	"namespaces":            "Namespaces specifies the namespaces which the admission control policy should validate on.",
	"excludeNamespaces":     "ExcludeNamespaces specifies the namespaces which the validating admission policy should not validate on.",
	"namespaceSelector":     "NamespaceSelector decides whether to run the admission control policy on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the admission control policy.\n\nSee https://kubernetes.io/docs/concepts/overview/working-with-objects/labels for examples of label selectors.\n\nDefault to the empty LabelSelector, which matches everything.",
	"labelSelector":         "LabelSelector decides the match criteria on resource based on its labels. See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels for examples of label selectors.\n\nDefault to the empty LabelSelector, which matches everything.",
	"resourceRules":         "ResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy matches.",
	"excluderResourceRules": "ExcludeResourceRules describes what operations on what resources/subresources the ValidatingAdmissionPolicy should not care about.",
	"resourceName":          "ResourceName specifies the resource name which the admission control policy should validate on.",
	"excludeResourceName":   "ExcludeResourceName specifies the resource name which the admission control policy should not validate on.",
	"matchPolicy":           "matchPolicy defines how the \"MatchResources\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\".\n\n- Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the ValidatingAdmissionPolicy.\n\n- Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included `apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the ValidatingAdmissionPolicy.\n\nDefaults to \"Equivalent\"",
}

func (MatchResources) SwaggerDoc() map[string]string {
	return map_MatchResources
}

var map_ParamSource = map[string]string{
	"":           "ParamSource is a tuple of Group Kind and Version.",
	"apiGroup":   "APIGroup is the API group the resources belong to. Required.",
	"apiVersion": "APIVersion is the API version the resources belong to. Required.",
	"apiKind":    "APIKind is the API kind the resources belong to. Required.",
}

func (ParamSource) SwaggerDoc() map[string]string {
	return map_ParamSource
}

var map_PolicyBinding = map[string]string{
	"":         "PolicyBinding binds the ValidatingAdmissionPolicy with paramerized resources. PolicyBinding and parameter CRDs together define how cluster administrators configure policies for clusters.",
	"metadata": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.",
	"spec":     "Specification of the desired behavior of the AdmissionPolicy.",
}

func (PolicyBinding) SwaggerDoc() map[string]string {
	return map_PolicyBinding
}

var map_PolicyBindingList = map[string]string{
	"":         "PolicyBindingList is a list of PolicyBinding.",
	"metadata": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
	"items":    "List of PolicyBinding.",
}

func (PolicyBindingList) SwaggerDoc() map[string]string {
	return map_PolicyBindingList
}

var map_PolicyBindingSpec = map[string]string{
	"":               "PolicyBindingSpec is the specification of the PolicyBinding.",
	"policy":         "Policy references a ValidatingAdmissionPolicy which the policyBinding binds to. Required.",
	"param":          "Param specifies the parameter resource used to configure the admission control policy. It should point to a Customer Resource which is created out of the CRD specified in ParamSource of ValidatingAdmissionPolicy it binded.",
	"matchResources": "MatchResources describe a list of match options which could be used to filter the resources.",
}

func (PolicyBindingSpec) SwaggerDoc() map[string]string {
	return map_PolicyBindingSpec
}

var map_Rule = map[string]string{
	"":            "Rule is a tuple of APIGroups, APIVersion, and Resources.It is recommended to make sure that all the tuple expansions are valid.",
	"apiGroups":   "APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.",
	"apiVersions": "APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.",
	"resources":   "Resources is a list of resources this rule applies to.\n\nFor example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.\n\nIf wildcard is present, the validation rule will ensure resources do not overlap with each other.\n\nDepending on the enclosing object, subresources might not be allowed. Required.",
	"scope":       "scope specifies the scope of this rule. Valid values are \"Cluster\", \"Namespaced\", and \"*\" \"Cluster\" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. \"Namespaced\" means that only namespaced resources will match this rule. \"*\" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is \"*\".",
}

func (Rule) SwaggerDoc() map[string]string {
	return map_Rule
}

var map_RuleWithOperations = map[string]string{
	"":           "RuleWithOperations is a tuple of Operations and Resources. It is recommended to make sure that all the tuple expansions are valid.",
	"operations": "Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.",
}

func (RuleWithOperations) SwaggerDoc() map[string]string {
	return map_RuleWithOperations
}

var map_ValidatingAdmissionPolicy = map[string]string{
	"":         "ValidatingAdmissionPolicy describes the definition of an admission validation policy that accepts or rejects and object without changing it.",
	"metadata": "Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.",
	"spec":     "Specification of the desired behavior of the AdmissionPolicy.",
}

func (ValidatingAdmissionPolicy) SwaggerDoc() map[string]string {
	return map_ValidatingAdmissionPolicy
}

var map_ValidatingAdmissionPolicyList = map[string]string{
	"":         "ValidatingAdmissionPolicyList is a list of ValidatingAdmissionPolicy.",
	"metadata": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
	"items":    "List of ValidatingAdmissionPolicy.",
}

func (ValidatingAdmissionPolicyList) SwaggerDoc() map[string]string {
	return map_ValidatingAdmissionPolicyList
}

var map_ValidatingAdmissionPolicySpec = map[string]string{
	"":                 "ValidatingAdmissionPolicySpec is the specification of the desired behavior of the AdmissionPolicy.",
	"paramSource":      "ParamSource specifies the kind of resources used to parameterize this policy which has to be a CRD.",
	"matchConstraints": "MatchConstraints specifies what resources this policy is designed to validate. The AdmissionPolicy cares about a validation if it matches _any_ Constriant. However, in order to prevent clusters from being put into a unustable state that cannot be recoverd from via the API alidatingAdmissionPolicy cannot match ValidatingAdmissionPolicy/PolicyBinding/param resources. ValidatingWebhookConfiguration cannot match MutatingWebhookConfiguration or ValidatingAdmissionPolicy/PolicyBinding/param resources.",
	"validations":      "Validations contain CEL expressions which is used to apply the validation. Required.",
	"failurePolicy":    "FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.",
}

func (ValidatingAdmissionPolicySpec) SwaggerDoc() map[string]string {
	return map_ValidatingAdmissionPolicySpec
}

var map_Validation = map[string]string{
	"":               "Validation specified the CEL expression which is used to apply the validation.",
	"name":           "The name of the validation rule. Required.",
	"expression":     "Expression represents the expression which will be evaluated by CEL. ref: https://github.com/google/cel-spec CEL expressions have access to the contents of the AdmissionReview type, organized into CEL variables as well as some other useful variables:\n\n'object' 'oldObject' 'review' 'requestResource' (GVR) 'resource' (GVR) 'name' 'namespace' 'operation' 'userInfo' 'dryRun' 'options' 'config' - configuration data of the policy configuration being validated The `object` variable in the expression is bound to the resource this policy is designed to validate.\n\nThe `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object. No other metadata properties are accessible.\n\nOnly property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Accessible property names are escaped according to the following rules when accessed in the expression: - '__' escapes to '__underscores__' - '.' escapes to '__dot__' - '-' escapes to '__dash__' - '/' escapes to '__slash__' - Property names that exactly match a CEL RESERVED keyword escape to '__{keyword}__'. The keywords are:\n\t  \"true\", \"false\", \"null\", \"in\", \"as\", \"break\", \"const\", \"continue\", \"else\", \"for\", \"function\", \"if\",\n\t  \"import\", \"let\", \"loop\", \"package\", \"namespace\", \"return\".\nExamples:\n  - Expression accessing a property named \"namespace\": {\"Expression\": \"object.__namespace__ > 0\"}\n  - Expression accessing a property named \"x-prop\": {\"Expression\": \"object.x__dash__prop > 0\"}\n  - Expression accessing a property named \"redact__d\": {\"Expression\": \"object.redact__underscores__d > 0\"}\n\nEquality on arrays with list type of 'set' or 'map' ignores element order, i.e. [1, 2] == [2, 1]. Concatenation on arrays with x-kubernetes-list-type use the semantics of the list type:\n  - 'set': `X + Y` performs a union where the array positions of all elements in `X` are preserved and\n    non-intersecting elements in `Y` are appended, retaining their partial order.\n  - 'map': `X + Y` performs a merge where the array positions of all keys in `X` are preserved but the values\n    are overwritten by values in `Y` when the key sets of `X` and `Y` intersect. Elements in `Y` with\n    non-intersecting keys are appended, retaining their partial order.\nRequired.",
	"message":        "Message represents the message displayed when validation fails. The message is required if the Expression contains line breaks. The message must not contain line breaks. If unset, the message is \"failed rule: {Rule}\". e.g. \"must be a URL with the host matching spec.host\" If ExpressMessage is specified, Message will be ignored If the Expression contains line breaks. Eith Message or ExpressMessage is required. The message must not contain line breaks. If unset, the message is \"failed Expression: {Expression}\".",
	"expressMessage": "If the MessageExpression evaluates to an error, the Message field is used to provide the message. The MessageExpression retured when failed the validation of specified. If MessageExpression is specified, Message will be ignored If the Expression contains line breaks. Either Message or MessageExpression is required. The MessageExpression must not contain line breaks.",
	"reason":         "Reason returned when failed the validation.",
	"code":           "Code returned when failed the validation.",
}

func (Validation) SwaggerDoc() map[string]string {
	return map_Validation
}

// AUTO-GENERATED FUNCTIONS END HERE
