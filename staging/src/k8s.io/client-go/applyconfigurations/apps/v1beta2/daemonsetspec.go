/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta2

import (
	corev1 "k8s.io/client-go/applyconfigurations/core/v1"
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// DaemonSetSpecApplyConfiguration represents an declarative configuration of the DaemonSetSpec type for use
// with apply.
type DaemonSetSpecApplyConfiguration struct {
	Selector             *v1.LabelSelectorApplyConfiguration        `json:"selector,omitempty"`
	Template             *corev1.PodTemplateSpecApplyConfiguration  `json:"template,omitempty"`
	UpdateStrategy       *DaemonSetUpdateStrategyApplyConfiguration `json:"updateStrategy,omitempty"`
	MinReadySeconds      *int32                                     `json:"minReadySeconds,omitempty"`
	RevisionHistoryLimit *int32                                     `json:"revisionHistoryLimit,omitempty"`
}

// DaemonSetSpecApplyConfiguration constructs an declarative configuration of the DaemonSetSpec type for use with
// apply.
func DaemonSetSpec() *DaemonSetSpecApplyConfiguration {
	return &DaemonSetSpecApplyConfiguration{}
}

// SetSelector sets the Selector field in the declarative configuration to the given value.
func (b *DaemonSetSpecApplyConfiguration) SetSelector(value *v1.LabelSelectorApplyConfiguration) *DaemonSetSpecApplyConfiguration {
	b.Selector = value
	return b
}

// RemoveSelector removes the Selector field from the declarative configuration.
func (b *DaemonSetSpecApplyConfiguration) RemoveSelector() *DaemonSetSpecApplyConfiguration {
	b.Selector = nil
	return b
}

// GetSelector gets the Selector field from the declarative configuration.
func (b *DaemonSetSpecApplyConfiguration) GetSelector() (value *v1.LabelSelectorApplyConfiguration, ok bool) {
	return b.Selector, b.Selector != nil
}

// SetTemplate sets the Template field in the declarative configuration to the given value.
func (b *DaemonSetSpecApplyConfiguration) SetTemplate(value *corev1.PodTemplateSpecApplyConfiguration) *DaemonSetSpecApplyConfiguration {
	b.Template = value
	return b
}

// RemoveTemplate removes the Template field from the declarative configuration.
func (b *DaemonSetSpecApplyConfiguration) RemoveTemplate() *DaemonSetSpecApplyConfiguration {
	b.Template = nil
	return b
}

// GetTemplate gets the Template field from the declarative configuration.
func (b *DaemonSetSpecApplyConfiguration) GetTemplate() (value *corev1.PodTemplateSpecApplyConfiguration, ok bool) {
	return b.Template, b.Template != nil
}

// SetUpdateStrategy sets the UpdateStrategy field in the declarative configuration to the given value.
func (b *DaemonSetSpecApplyConfiguration) SetUpdateStrategy(value *DaemonSetUpdateStrategyApplyConfiguration) *DaemonSetSpecApplyConfiguration {
	b.UpdateStrategy = value
	return b
}

// RemoveUpdateStrategy removes the UpdateStrategy field from the declarative configuration.
func (b *DaemonSetSpecApplyConfiguration) RemoveUpdateStrategy() *DaemonSetSpecApplyConfiguration {
	b.UpdateStrategy = nil
	return b
}

// GetUpdateStrategy gets the UpdateStrategy field from the declarative configuration.
func (b *DaemonSetSpecApplyConfiguration) GetUpdateStrategy() (value *DaemonSetUpdateStrategyApplyConfiguration, ok bool) {
	return b.UpdateStrategy, b.UpdateStrategy != nil
}

// SetMinReadySeconds sets the MinReadySeconds field in the declarative configuration to the given value.
func (b *DaemonSetSpecApplyConfiguration) SetMinReadySeconds(value int32) *DaemonSetSpecApplyConfiguration {
	b.MinReadySeconds = &value
	return b
}

// RemoveMinReadySeconds removes the MinReadySeconds field from the declarative configuration.
func (b *DaemonSetSpecApplyConfiguration) RemoveMinReadySeconds() *DaemonSetSpecApplyConfiguration {
	b.MinReadySeconds = nil
	return b
}

// GetMinReadySeconds gets the MinReadySeconds field from the declarative configuration.
func (b *DaemonSetSpecApplyConfiguration) GetMinReadySeconds() (value int32, ok bool) {
	if v := b.MinReadySeconds; v != nil {
		return *v, true
	}
	return value, false
}

// SetRevisionHistoryLimit sets the RevisionHistoryLimit field in the declarative configuration to the given value.
func (b *DaemonSetSpecApplyConfiguration) SetRevisionHistoryLimit(value int32) *DaemonSetSpecApplyConfiguration {
	b.RevisionHistoryLimit = &value
	return b
}

// RemoveRevisionHistoryLimit removes the RevisionHistoryLimit field from the declarative configuration.
func (b *DaemonSetSpecApplyConfiguration) RemoveRevisionHistoryLimit() *DaemonSetSpecApplyConfiguration {
	b.RevisionHistoryLimit = nil
	return b
}

// GetRevisionHistoryLimit gets the RevisionHistoryLimit field from the declarative configuration.
func (b *DaemonSetSpecApplyConfiguration) GetRevisionHistoryLimit() (value int32, ok bool) {
	if v := b.RevisionHistoryLimit; v != nil {
		return *v, true
	}
	return value, false
}

// DaemonSetSpecList represents a listAlias of DaemonSetSpecApplyConfiguration.
type DaemonSetSpecList []*DaemonSetSpecApplyConfiguration

// DaemonSetSpecList represents a map of DaemonSetSpecApplyConfiguration.
type DaemonSetSpecMap map[string]DaemonSetSpecApplyConfiguration
