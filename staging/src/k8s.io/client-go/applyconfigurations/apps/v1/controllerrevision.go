/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// ControllerRevisionApplyConfiguration represents an declarative configuration of the ControllerRevision type for use
// with apply.
type ControllerRevisionApplyConfiguration struct {
	v1.TypeMetaApplyConfiguration `json:",inline"`
	ObjectMeta                    *v1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Data                          *runtime.RawExtension            `json:"data,omitempty"`
	Revision                      *int64                           `json:"revision,omitempty"`
}

// ControllerRevisionApplyConfiguration constructs an declarative configuration of the ControllerRevision type for use with
// apply.
func ControllerRevision() *ControllerRevisionApplyConfiguration {
	return &ControllerRevisionApplyConfiguration{}
}

// SetTypeMeta sets the TypeMeta field in the declarative configuration to the given value.
func (b *ControllerRevisionApplyConfiguration) SetTypeMeta(value *v1.TypeMetaApplyConfiguration) *ControllerRevisionApplyConfiguration {
	if value != nil {
		b.TypeMetaApplyConfiguration = *value
	}
	return b
}

// GetTypeMeta gets the TypeMeta field from the declarative configuration.
func (b *ControllerRevisionApplyConfiguration) GetTypeMeta() (value *v1.TypeMetaApplyConfiguration, ok bool) {
	return &b.TypeMetaApplyConfiguration, true
}

// SetObjectMeta sets the ObjectMeta field in the declarative configuration to the given value.
func (b *ControllerRevisionApplyConfiguration) SetObjectMeta(value *v1.ObjectMetaApplyConfiguration) *ControllerRevisionApplyConfiguration {
	b.ObjectMeta = value
	return b
}

// RemoveObjectMeta removes the ObjectMeta field from the declarative configuration.
func (b *ControllerRevisionApplyConfiguration) RemoveObjectMeta() *ControllerRevisionApplyConfiguration {
	b.ObjectMeta = nil
	return b
}

// GetObjectMeta gets the ObjectMeta field from the declarative configuration.
func (b *ControllerRevisionApplyConfiguration) GetObjectMeta() (value *v1.ObjectMetaApplyConfiguration, ok bool) {
	return b.ObjectMeta, b.ObjectMeta != nil
}

// SetData sets the Data field in the declarative configuration to the given value.
func (b *ControllerRevisionApplyConfiguration) SetData(value runtime.RawExtension) *ControllerRevisionApplyConfiguration {
	b.Data = &value
	return b
}

// RemoveData removes the Data field from the declarative configuration.
func (b *ControllerRevisionApplyConfiguration) RemoveData() *ControllerRevisionApplyConfiguration {
	b.Data = nil
	return b
}

// GetData gets the Data field from the declarative configuration.
func (b *ControllerRevisionApplyConfiguration) GetData() (value runtime.RawExtension, ok bool) {
	if v := b.Data; v != nil {
		return *v, true
	}
	return value, false
}

// SetRevision sets the Revision field in the declarative configuration to the given value.
func (b *ControllerRevisionApplyConfiguration) SetRevision(value int64) *ControllerRevisionApplyConfiguration {
	b.Revision = &value
	return b
}

// RemoveRevision removes the Revision field from the declarative configuration.
func (b *ControllerRevisionApplyConfiguration) RemoveRevision() *ControllerRevisionApplyConfiguration {
	b.Revision = nil
	return b
}

// GetRevision gets the Revision field from the declarative configuration.
func (b *ControllerRevisionApplyConfiguration) GetRevision() (value int64, ok bool) {
	if v := b.Revision; v != nil {
		return *v, true
	}
	return value, false
}

// ControllerRevisionList represents a listAlias of ControllerRevisionApplyConfiguration.
type ControllerRevisionList []*ControllerRevisionApplyConfiguration

// ControllerRevisionList represents a map of ControllerRevisionApplyConfiguration.
type ControllerRevisionMap map[string]ControllerRevisionApplyConfiguration
