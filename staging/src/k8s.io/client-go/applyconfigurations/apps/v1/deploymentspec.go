/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	corev1 "k8s.io/client-go/applyconfigurations/core/v1"
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// DeploymentSpecApplyConfiguration represents an declarative configuration of the DeploymentSpec type for use
// with apply.
type DeploymentSpecApplyConfiguration struct {
	Replicas                *int32                                    `json:"replicas,omitempty"`
	Selector                *v1.LabelSelectorApplyConfiguration       `json:"selector,omitempty"`
	Template                *corev1.PodTemplateSpecApplyConfiguration `json:"template,omitempty"`
	Strategy                *DeploymentStrategyApplyConfiguration     `json:"strategy,omitempty"`
	MinReadySeconds         *int32                                    `json:"minReadySeconds,omitempty"`
	RevisionHistoryLimit    *int32                                    `json:"revisionHistoryLimit,omitempty"`
	Paused                  *bool                                     `json:"paused,omitempty"`
	ProgressDeadlineSeconds *int32                                    `json:"progressDeadlineSeconds,omitempty"`
}

// DeploymentSpecApplyConfiguration constructs an declarative configuration of the DeploymentSpec type for use with
// apply.
func DeploymentSpec() *DeploymentSpecApplyConfiguration {
	return &DeploymentSpecApplyConfiguration{}
}

// SetReplicas sets the Replicas field in the declarative configuration to the given value.
func (b *DeploymentSpecApplyConfiguration) SetReplicas(value int32) *DeploymentSpecApplyConfiguration {
	b.Replicas = &value
	return b
}

// RemoveReplicas removes the Replicas field from the declarative configuration.
func (b *DeploymentSpecApplyConfiguration) RemoveReplicas() *DeploymentSpecApplyConfiguration {
	b.Replicas = nil
	return b
}

// GetReplicas gets the Replicas field from the declarative configuration.
func (b *DeploymentSpecApplyConfiguration) GetReplicas() (value int32, ok bool) {
	if v := b.Replicas; v != nil {
		return *v, true
	}
	return value, false
}

// SetSelector sets the Selector field in the declarative configuration to the given value.
func (b *DeploymentSpecApplyConfiguration) SetSelector(value *v1.LabelSelectorApplyConfiguration) *DeploymentSpecApplyConfiguration {
	b.Selector = value
	return b
}

// RemoveSelector removes the Selector field from the declarative configuration.
func (b *DeploymentSpecApplyConfiguration) RemoveSelector() *DeploymentSpecApplyConfiguration {
	b.Selector = nil
	return b
}

// GetSelector gets the Selector field from the declarative configuration.
func (b *DeploymentSpecApplyConfiguration) GetSelector() (value *v1.LabelSelectorApplyConfiguration, ok bool) {
	return b.Selector, b.Selector != nil
}

// SetTemplate sets the Template field in the declarative configuration to the given value.
func (b *DeploymentSpecApplyConfiguration) SetTemplate(value *corev1.PodTemplateSpecApplyConfiguration) *DeploymentSpecApplyConfiguration {
	b.Template = value
	return b
}

// RemoveTemplate removes the Template field from the declarative configuration.
func (b *DeploymentSpecApplyConfiguration) RemoveTemplate() *DeploymentSpecApplyConfiguration {
	b.Template = nil
	return b
}

// GetTemplate gets the Template field from the declarative configuration.
func (b *DeploymentSpecApplyConfiguration) GetTemplate() (value *corev1.PodTemplateSpecApplyConfiguration, ok bool) {
	return b.Template, b.Template != nil
}

// SetStrategy sets the Strategy field in the declarative configuration to the given value.
func (b *DeploymentSpecApplyConfiguration) SetStrategy(value *DeploymentStrategyApplyConfiguration) *DeploymentSpecApplyConfiguration {
	b.Strategy = value
	return b
}

// RemoveStrategy removes the Strategy field from the declarative configuration.
func (b *DeploymentSpecApplyConfiguration) RemoveStrategy() *DeploymentSpecApplyConfiguration {
	b.Strategy = nil
	return b
}

// GetStrategy gets the Strategy field from the declarative configuration.
func (b *DeploymentSpecApplyConfiguration) GetStrategy() (value *DeploymentStrategyApplyConfiguration, ok bool) {
	return b.Strategy, b.Strategy != nil
}

// SetMinReadySeconds sets the MinReadySeconds field in the declarative configuration to the given value.
func (b *DeploymentSpecApplyConfiguration) SetMinReadySeconds(value int32) *DeploymentSpecApplyConfiguration {
	b.MinReadySeconds = &value
	return b
}

// RemoveMinReadySeconds removes the MinReadySeconds field from the declarative configuration.
func (b *DeploymentSpecApplyConfiguration) RemoveMinReadySeconds() *DeploymentSpecApplyConfiguration {
	b.MinReadySeconds = nil
	return b
}

// GetMinReadySeconds gets the MinReadySeconds field from the declarative configuration.
func (b *DeploymentSpecApplyConfiguration) GetMinReadySeconds() (value int32, ok bool) {
	if v := b.MinReadySeconds; v != nil {
		return *v, true
	}
	return value, false
}

// SetRevisionHistoryLimit sets the RevisionHistoryLimit field in the declarative configuration to the given value.
func (b *DeploymentSpecApplyConfiguration) SetRevisionHistoryLimit(value int32) *DeploymentSpecApplyConfiguration {
	b.RevisionHistoryLimit = &value
	return b
}

// RemoveRevisionHistoryLimit removes the RevisionHistoryLimit field from the declarative configuration.
func (b *DeploymentSpecApplyConfiguration) RemoveRevisionHistoryLimit() *DeploymentSpecApplyConfiguration {
	b.RevisionHistoryLimit = nil
	return b
}

// GetRevisionHistoryLimit gets the RevisionHistoryLimit field from the declarative configuration.
func (b *DeploymentSpecApplyConfiguration) GetRevisionHistoryLimit() (value int32, ok bool) {
	if v := b.RevisionHistoryLimit; v != nil {
		return *v, true
	}
	return value, false
}

// SetPaused sets the Paused field in the declarative configuration to the given value.
func (b *DeploymentSpecApplyConfiguration) SetPaused(value bool) *DeploymentSpecApplyConfiguration {
	b.Paused = &value
	return b
}

// RemovePaused removes the Paused field from the declarative configuration.
func (b *DeploymentSpecApplyConfiguration) RemovePaused() *DeploymentSpecApplyConfiguration {
	b.Paused = nil
	return b
}

// GetPaused gets the Paused field from the declarative configuration.
func (b *DeploymentSpecApplyConfiguration) GetPaused() (value bool, ok bool) {
	if v := b.Paused; v != nil {
		return *v, true
	}
	return value, false
}

// SetProgressDeadlineSeconds sets the ProgressDeadlineSeconds field in the declarative configuration to the given value.
func (b *DeploymentSpecApplyConfiguration) SetProgressDeadlineSeconds(value int32) *DeploymentSpecApplyConfiguration {
	b.ProgressDeadlineSeconds = &value
	return b
}

// RemoveProgressDeadlineSeconds removes the ProgressDeadlineSeconds field from the declarative configuration.
func (b *DeploymentSpecApplyConfiguration) RemoveProgressDeadlineSeconds() *DeploymentSpecApplyConfiguration {
	b.ProgressDeadlineSeconds = nil
	return b
}

// GetProgressDeadlineSeconds gets the ProgressDeadlineSeconds field from the declarative configuration.
func (b *DeploymentSpecApplyConfiguration) GetProgressDeadlineSeconds() (value int32, ok bool) {
	if v := b.ProgressDeadlineSeconds; v != nil {
		return *v, true
	}
	return value, false
}

// DeploymentSpecList represents a listAlias of DeploymentSpecApplyConfiguration.
type DeploymentSpecList []*DeploymentSpecApplyConfiguration

// DeploymentSpecList represents a map of DeploymentSpecApplyConfiguration.
type DeploymentSpecMap map[string]DeploymentSpecApplyConfiguration
