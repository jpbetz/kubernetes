/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ServiceBackendPortApplyConfiguration represents an declarative configuration of the ServiceBackendPort type for use
// with apply.
type ServiceBackendPortApplyConfiguration struct {
	fields serviceBackendPortFields
}

// ServiceBackendPortApplyConfiguration constructs an declarative configuration of the ServiceBackendPort type for use with
// apply.
func ServiceBackendPort() *ServiceBackendPortApplyConfiguration {
	return &ServiceBackendPortApplyConfiguration{}
}

// serviceBackendPortFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in ServiceBackendPortApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type serviceBackendPortFields struct {
	Name   *string `json:"name,omitempty"`
	Number *int32  `json:"number,omitempty"`
}

// SetName sets the Name field in the declarative configuration to the given value.
func (b *ServiceBackendPortApplyConfiguration) SetName(value string) *ServiceBackendPortApplyConfiguration {
	b.fields.Name = &value
	return b
}

// RemoveName removes the Name field from the declarative configuration.
func (b *ServiceBackendPortApplyConfiguration) RemoveName() *ServiceBackendPortApplyConfiguration {
	b.fields.Name = nil
	return b
}

// GetName gets the Name field from the declarative configuration.
func (b *ServiceBackendPortApplyConfiguration) GetName() (value string, ok bool) {
	if v := b.fields.Name; v != nil {
		return *v, true
	}
	return value, false
}

// SetNumber sets the Number field in the declarative configuration to the given value.
func (b *ServiceBackendPortApplyConfiguration) SetNumber(value int32) *ServiceBackendPortApplyConfiguration {
	b.fields.Number = &value
	return b
}

// RemoveNumber removes the Number field from the declarative configuration.
func (b *ServiceBackendPortApplyConfiguration) RemoveNumber() *ServiceBackendPortApplyConfiguration {
	b.fields.Number = nil
	return b
}

// GetNumber gets the Number field from the declarative configuration.
func (b *ServiceBackendPortApplyConfiguration) GetNumber() (value int32, ok bool) {
	if v := b.fields.Number; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ServiceBackendPortApplyConfiguration to unstructured.
func (b *ServiceBackendPortApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ServiceBackendPortApplyConfiguration, replacing the contents
// of ServiceBackendPortApplyConfiguration.
func (b *ServiceBackendPortApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &serviceBackendPortFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ServiceBackendPortApplyConfiguration to JSON.
func (b *ServiceBackendPortApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into ServiceBackendPortApplyConfiguration, replacing the contents of
// ServiceBackendPortApplyConfiguration.
func (b *ServiceBackendPortApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ServiceBackendPortList represents a listAlias of ServiceBackendPortApplyConfiguration.
type ServiceBackendPortList []*ServiceBackendPortApplyConfiguration

// ServiceBackendPortList represents a map of ServiceBackendPortApplyConfiguration.
type ServiceBackendPortMap map[string]ServiceBackendPortApplyConfiguration

func (b *ServiceBackendPortApplyConfiguration) preMarshal() {
}
func (b *ServiceBackendPortApplyConfiguration) postUnmarshal() {
}
