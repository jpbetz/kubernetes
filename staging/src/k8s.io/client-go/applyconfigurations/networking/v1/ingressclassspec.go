/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/applyconfigurations/core/v1"
)

// IngressClassSpecApplyConfiguration represents an declarative configuration of the IngressClassSpec type for use
// with apply.
type IngressClassSpecApplyConfiguration struct {
	fields ingressClassSpecFields
}

// IngressClassSpecApplyConfiguration constructs an declarative configuration of the IngressClassSpec type for use with
// apply.
func IngressClassSpec() *IngressClassSpecApplyConfiguration {
	return &IngressClassSpecApplyConfiguration{}
}

// ingressClassSpecFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in IngressClassSpecApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type ingressClassSpecFields struct {
	Controller *string                                         `json:"controller,omitempty"`
	Parameters *v1.TypedLocalObjectReferenceApplyConfiguration `json:"parameters,omitempty"`
}

// SetController sets the Controller field in the declarative configuration to the given value.
func (b *IngressClassSpecApplyConfiguration) SetController(value string) *IngressClassSpecApplyConfiguration {
	b.fields.Controller = &value
	return b
}

// RemoveController removes the Controller field from the declarative configuration.
func (b *IngressClassSpecApplyConfiguration) RemoveController() *IngressClassSpecApplyConfiguration {
	b.fields.Controller = nil
	return b
}

// GetController gets the Controller field from the declarative configuration.
func (b *IngressClassSpecApplyConfiguration) GetController() (value string, ok bool) {
	if v := b.fields.Controller; v != nil {
		return *v, true
	}
	return value, false
}

// SetParameters sets the Parameters field in the declarative configuration to the given value.
func (b *IngressClassSpecApplyConfiguration) SetParameters(value *v1.TypedLocalObjectReferenceApplyConfiguration) *IngressClassSpecApplyConfiguration {
	b.fields.Parameters = value
	return b
}

// RemoveParameters removes the Parameters field from the declarative configuration.
func (b *IngressClassSpecApplyConfiguration) RemoveParameters() *IngressClassSpecApplyConfiguration {
	b.fields.Parameters = nil
	return b
}

// GetParameters gets the Parameters field from the declarative configuration.
func (b *IngressClassSpecApplyConfiguration) GetParameters() (value *v1.TypedLocalObjectReferenceApplyConfiguration, ok bool) {
	return b.fields.Parameters, b.fields.Parameters != nil
}

// ToUnstructured converts IngressClassSpecApplyConfiguration to unstructured.
func (b *IngressClassSpecApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to IngressClassSpecApplyConfiguration, replacing the contents
// of IngressClassSpecApplyConfiguration.
func (b *IngressClassSpecApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &ingressClassSpecFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals IngressClassSpecApplyConfiguration to JSON.
func (b *IngressClassSpecApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into IngressClassSpecApplyConfiguration, replacing the contents of
// IngressClassSpecApplyConfiguration.
func (b *IngressClassSpecApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// IngressClassSpecList represents a listAlias of IngressClassSpecApplyConfiguration.
type IngressClassSpecList []*IngressClassSpecApplyConfiguration

// IngressClassSpecList represents a map of IngressClassSpecApplyConfiguration.
type IngressClassSpecMap map[string]IngressClassSpecApplyConfiguration

func (b *IngressClassSpecApplyConfiguration) preMarshal() {
}
func (b *IngressClassSpecApplyConfiguration) postUnmarshal() {
}
