/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	v1 "k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	intstr "k8s.io/apimachinery/pkg/util/intstr"
)

// NetworkPolicyPortApplyConfiguration represents an declarative configuration of the NetworkPolicyPort type for use
// with apply.
type NetworkPolicyPortApplyConfiguration struct {
	fields networkPolicyPortFields
}

// NetworkPolicyPortApplyConfiguration constructs an declarative configuration of the NetworkPolicyPort type for use with
// apply.
func NetworkPolicyPort() *NetworkPolicyPortApplyConfiguration {
	return &NetworkPolicyPortApplyConfiguration{}
}

// networkPolicyPortFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in NetworkPolicyPortApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type networkPolicyPortFields struct {
	Protocol *v1.Protocol        `json:"protocol,omitempty"`
	Port     *intstr.IntOrString `json:"port,omitempty"`
}

// SetProtocol sets the Protocol field in the declarative configuration to the given value.
func (b *NetworkPolicyPortApplyConfiguration) SetProtocol(value v1.Protocol) *NetworkPolicyPortApplyConfiguration {
	b.fields.Protocol = &value
	return b
}

// RemoveProtocol removes the Protocol field from the declarative configuration.
func (b *NetworkPolicyPortApplyConfiguration) RemoveProtocol() *NetworkPolicyPortApplyConfiguration {
	b.fields.Protocol = nil
	return b
}

// GetProtocol gets the Protocol field from the declarative configuration.
func (b *NetworkPolicyPortApplyConfiguration) GetProtocol() (value v1.Protocol, ok bool) {
	if v := b.fields.Protocol; v != nil {
		return *v, true
	}
	return value, false
}

// SetPort sets the Port field in the declarative configuration to the given value.
func (b *NetworkPolicyPortApplyConfiguration) SetPort(value intstr.IntOrString) *NetworkPolicyPortApplyConfiguration {
	b.fields.Port = &value
	return b
}

// RemovePort removes the Port field from the declarative configuration.
func (b *NetworkPolicyPortApplyConfiguration) RemovePort() *NetworkPolicyPortApplyConfiguration {
	b.fields.Port = nil
	return b
}

// GetPort gets the Port field from the declarative configuration.
func (b *NetworkPolicyPortApplyConfiguration) GetPort() (value intstr.IntOrString, ok bool) {
	if v := b.fields.Port; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts NetworkPolicyPortApplyConfiguration to unstructured.
func (b *NetworkPolicyPortApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to NetworkPolicyPortApplyConfiguration, replacing the contents
// of NetworkPolicyPortApplyConfiguration.
func (b *NetworkPolicyPortApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &networkPolicyPortFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals NetworkPolicyPortApplyConfiguration to JSON.
func (b *NetworkPolicyPortApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into NetworkPolicyPortApplyConfiguration, replacing the contents of
// NetworkPolicyPortApplyConfiguration.
func (b *NetworkPolicyPortApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// NetworkPolicyPortList represents a listAlias of NetworkPolicyPortApplyConfiguration.
type NetworkPolicyPortList []*NetworkPolicyPortApplyConfiguration

// NetworkPolicyPortList represents a map of NetworkPolicyPortApplyConfiguration.
type NetworkPolicyPortMap map[string]NetworkPolicyPortApplyConfiguration

func (b *NetworkPolicyPortApplyConfiguration) preMarshal() {
}
func (b *NetworkPolicyPortApplyConfiguration) postUnmarshal() {
}
