/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// NetworkPolicyPeerApplyConfiguration represents an declarative configuration of the NetworkPolicyPeer type for use
// with apply.
type NetworkPolicyPeerApplyConfiguration struct {
	PodSelector       *v1.LabelSelectorApplyConfiguration `json:"podSelector,omitempty"`
	NamespaceSelector *v1.LabelSelectorApplyConfiguration `json:"namespaceSelector,omitempty"`
	IPBlock           *IPBlockApplyConfiguration          `json:"ipBlock,omitempty"`
}

// NetworkPolicyPeerApplyConfiguration constructs an declarative configuration of the NetworkPolicyPeer type for use with
// apply.
func NetworkPolicyPeer() *NetworkPolicyPeerApplyConfiguration {
	return &NetworkPolicyPeerApplyConfiguration{}
}

// SetPodSelector sets the PodSelector field in the declarative configuration to the given value.
func (b *NetworkPolicyPeerApplyConfiguration) SetPodSelector(value *v1.LabelSelectorApplyConfiguration) *NetworkPolicyPeerApplyConfiguration {
	b.PodSelector = value
	return b
}

// RemovePodSelector removes the PodSelector field from the declarative configuration.
func (b *NetworkPolicyPeerApplyConfiguration) RemovePodSelector() *NetworkPolicyPeerApplyConfiguration {
	b.PodSelector = nil
	return b
}

// GetPodSelector gets the PodSelector field from the declarative configuration.
func (b *NetworkPolicyPeerApplyConfiguration) GetPodSelector() (value *v1.LabelSelectorApplyConfiguration, ok bool) {
	return b.PodSelector, b.PodSelector != nil
}

// SetNamespaceSelector sets the NamespaceSelector field in the declarative configuration to the given value.
func (b *NetworkPolicyPeerApplyConfiguration) SetNamespaceSelector(value *v1.LabelSelectorApplyConfiguration) *NetworkPolicyPeerApplyConfiguration {
	b.NamespaceSelector = value
	return b
}

// RemoveNamespaceSelector removes the NamespaceSelector field from the declarative configuration.
func (b *NetworkPolicyPeerApplyConfiguration) RemoveNamespaceSelector() *NetworkPolicyPeerApplyConfiguration {
	b.NamespaceSelector = nil
	return b
}

// GetNamespaceSelector gets the NamespaceSelector field from the declarative configuration.
func (b *NetworkPolicyPeerApplyConfiguration) GetNamespaceSelector() (value *v1.LabelSelectorApplyConfiguration, ok bool) {
	return b.NamespaceSelector, b.NamespaceSelector != nil
}

// SetIPBlock sets the IPBlock field in the declarative configuration to the given value.
func (b *NetworkPolicyPeerApplyConfiguration) SetIPBlock(value *IPBlockApplyConfiguration) *NetworkPolicyPeerApplyConfiguration {
	b.IPBlock = value
	return b
}

// RemoveIPBlock removes the IPBlock field from the declarative configuration.
func (b *NetworkPolicyPeerApplyConfiguration) RemoveIPBlock() *NetworkPolicyPeerApplyConfiguration {
	b.IPBlock = nil
	return b
}

// GetIPBlock gets the IPBlock field from the declarative configuration.
func (b *NetworkPolicyPeerApplyConfiguration) GetIPBlock() (value *IPBlockApplyConfiguration, ok bool) {
	return b.IPBlock, b.IPBlock != nil
}

// NetworkPolicyPeerList represents a listAlias of NetworkPolicyPeerApplyConfiguration.
type NetworkPolicyPeerList []*NetworkPolicyPeerApplyConfiguration

// NetworkPolicyPeerList represents a map of NetworkPolicyPeerApplyConfiguration.
type NetworkPolicyPeerMap map[string]NetworkPolicyPeerApplyConfiguration
