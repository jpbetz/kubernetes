/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	types "k8s.io/apimachinery/pkg/types"
)

// PreconditionsApplyConfiguration represents an declarative configuration of the Preconditions type for use
// with apply.
type PreconditionsApplyConfiguration struct {
	UID             *types.UID `json:"uid,omitempty"`
	ResourceVersion *string    `json:"resourceVersion,omitempty"`
}

// PreconditionsApplyConfiguration constructs an declarative configuration of the Preconditions type for use with
// apply.
func Preconditions() *PreconditionsApplyConfiguration {
	return &PreconditionsApplyConfiguration{}
}

// SetUID sets the UID field in the declarative configuration to the given value.
func (b *PreconditionsApplyConfiguration) SetUID(value types.UID) *PreconditionsApplyConfiguration {
	b.UID = &value
	return b
}

// RemoveUID removes the UID field from the declarative configuration.
func (b *PreconditionsApplyConfiguration) RemoveUID() *PreconditionsApplyConfiguration {
	b.UID = nil
	return b
}

// GetUID gets the UID field from the declarative configuration.
func (b *PreconditionsApplyConfiguration) GetUID() (value types.UID, ok bool) {
	if v := b.UID; v != nil {
		return *v, true
	}
	return value, false
}

// SetResourceVersion sets the ResourceVersion field in the declarative configuration to the given value.
func (b *PreconditionsApplyConfiguration) SetResourceVersion(value string) *PreconditionsApplyConfiguration {
	b.ResourceVersion = &value
	return b
}

// RemoveResourceVersion removes the ResourceVersion field from the declarative configuration.
func (b *PreconditionsApplyConfiguration) RemoveResourceVersion() *PreconditionsApplyConfiguration {
	b.ResourceVersion = nil
	return b
}

// GetResourceVersion gets the ResourceVersion field from the declarative configuration.
func (b *PreconditionsApplyConfiguration) GetResourceVersion() (value string, ok bool) {
	if v := b.ResourceVersion; v != nil {
		return *v, true
	}
	return value, false
}

// PreconditionsList represents a listAlias of PreconditionsApplyConfiguration.
type PreconditionsList []*PreconditionsApplyConfiguration

// PreconditionsList represents a map of PreconditionsApplyConfiguration.
type PreconditionsMap map[string]PreconditionsApplyConfiguration
