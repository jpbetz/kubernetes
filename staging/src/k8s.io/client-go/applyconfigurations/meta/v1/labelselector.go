/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// LabelSelectorApplyConfiguration represents an declarative configuration of the LabelSelector type for use
// with apply.
type LabelSelectorApplyConfiguration struct {
	fields labelSelectorFields
}

// LabelSelectorApplyConfiguration constructs an declarative configuration of the LabelSelector type for use with
// apply.
func LabelSelector() *LabelSelectorApplyConfiguration {
	return &LabelSelectorApplyConfiguration{}
}

// labelSelectorFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in LabelSelectorApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type labelSelectorFields struct {
	MatchLabels      *map[string]string            `json:"matchLabels,omitempty"`
	MatchExpressions *LabelSelectorRequirementList `json:"matchExpressions,omitempty"`
}

// SetMatchLabels sets the MatchLabels field in the declarative configuration to the given value.
func (b *LabelSelectorApplyConfiguration) SetMatchLabels(value map[string]string) *LabelSelectorApplyConfiguration {
	b.fields.MatchLabels = &value
	return b
}

// RemoveMatchLabels removes the MatchLabels field from the declarative configuration.
func (b *LabelSelectorApplyConfiguration) RemoveMatchLabels() *LabelSelectorApplyConfiguration {
	b.fields.MatchLabels = nil
	return b
}

// GetMatchLabels gets the MatchLabels field from the declarative configuration.
func (b *LabelSelectorApplyConfiguration) GetMatchLabels() (value map[string]string, ok bool) {
	if v := b.fields.MatchLabels; v != nil {
		return *v, true
	}
	return value, false
}

// SetMatchExpressions sets the MatchExpressions field in the declarative configuration to the given value.
func (b *LabelSelectorApplyConfiguration) SetMatchExpressions(value LabelSelectorRequirementList) *LabelSelectorApplyConfiguration {
	b.fields.MatchExpressions = &value
	return b
}

// RemoveMatchExpressions removes the MatchExpressions field from the declarative configuration.
func (b *LabelSelectorApplyConfiguration) RemoveMatchExpressions() *LabelSelectorApplyConfiguration {
	b.fields.MatchExpressions = nil
	return b
}

// GetMatchExpressions gets the MatchExpressions field from the declarative configuration.
func (b *LabelSelectorApplyConfiguration) GetMatchExpressions() (value LabelSelectorRequirementList, ok bool) {
	if v := b.fields.MatchExpressions; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts LabelSelectorApplyConfiguration to unstructured.
func (b *LabelSelectorApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to LabelSelectorApplyConfiguration, replacing the contents
// of LabelSelectorApplyConfiguration.
func (b *LabelSelectorApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &labelSelectorFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals LabelSelectorApplyConfiguration to JSON.
func (b *LabelSelectorApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into LabelSelectorApplyConfiguration, replacing the contents of
// LabelSelectorApplyConfiguration.
func (b *LabelSelectorApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// LabelSelectorList represents a listAlias of LabelSelectorApplyConfiguration.
type LabelSelectorList []*LabelSelectorApplyConfiguration

// LabelSelectorList represents a map of LabelSelectorApplyConfiguration.
type LabelSelectorMap map[string]LabelSelectorApplyConfiguration

func (b *LabelSelectorApplyConfiguration) preMarshal() {
}
func (b *LabelSelectorApplyConfiguration) postUnmarshal() {
}
