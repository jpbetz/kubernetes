/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	types "k8s.io/apimachinery/pkg/types"
)

// OwnerReferenceApplyConfiguration represents an declarative configuration of the OwnerReference type for use
// with apply.
type OwnerReferenceApplyConfiguration struct {
	APIVersion         *string    `json:"apiVersion,omitempty"`
	Kind               *string    `json:"kind,omitempty"`
	Name               *string    `json:"name,omitempty"`
	UID                *types.UID `json:"uid,omitempty"`
	Controller         *bool      `json:"controller,omitempty"`
	BlockOwnerDeletion *bool      `json:"blockOwnerDeletion,omitempty"`
}

// OwnerReferenceApplyConfiguration constructs an declarative configuration of the OwnerReference type for use with
// apply.
func OwnerReference() *OwnerReferenceApplyConfiguration {
	return &OwnerReferenceApplyConfiguration{}
}

// SetAPIVersion sets the APIVersion field in the declarative configuration to the given value.
func (b *OwnerReferenceApplyConfiguration) SetAPIVersion(value string) *OwnerReferenceApplyConfiguration {
	b.APIVersion = &value
	return b
}

// RemoveAPIVersion removes the APIVersion field from the declarative configuration.
func (b *OwnerReferenceApplyConfiguration) RemoveAPIVersion() *OwnerReferenceApplyConfiguration {
	b.APIVersion = nil
	return b
}

// GetAPIVersion gets the APIVersion field from the declarative configuration.
func (b *OwnerReferenceApplyConfiguration) GetAPIVersion() (value string, ok bool) {
	if v := b.APIVersion; v != nil {
		return *v, true
	}
	return value, false
}

// SetKind sets the Kind field in the declarative configuration to the given value.
func (b *OwnerReferenceApplyConfiguration) SetKind(value string) *OwnerReferenceApplyConfiguration {
	b.Kind = &value
	return b
}

// RemoveKind removes the Kind field from the declarative configuration.
func (b *OwnerReferenceApplyConfiguration) RemoveKind() *OwnerReferenceApplyConfiguration {
	b.Kind = nil
	return b
}

// GetKind gets the Kind field from the declarative configuration.
func (b *OwnerReferenceApplyConfiguration) GetKind() (value string, ok bool) {
	if v := b.Kind; v != nil {
		return *v, true
	}
	return value, false
}

// SetName sets the Name field in the declarative configuration to the given value.
func (b *OwnerReferenceApplyConfiguration) SetName(value string) *OwnerReferenceApplyConfiguration {
	b.Name = &value
	return b
}

// RemoveName removes the Name field from the declarative configuration.
func (b *OwnerReferenceApplyConfiguration) RemoveName() *OwnerReferenceApplyConfiguration {
	b.Name = nil
	return b
}

// GetName gets the Name field from the declarative configuration.
func (b *OwnerReferenceApplyConfiguration) GetName() (value string, ok bool) {
	if v := b.Name; v != nil {
		return *v, true
	}
	return value, false
}

// SetUID sets the UID field in the declarative configuration to the given value.
func (b *OwnerReferenceApplyConfiguration) SetUID(value types.UID) *OwnerReferenceApplyConfiguration {
	b.UID = &value
	return b
}

// RemoveUID removes the UID field from the declarative configuration.
func (b *OwnerReferenceApplyConfiguration) RemoveUID() *OwnerReferenceApplyConfiguration {
	b.UID = nil
	return b
}

// GetUID gets the UID field from the declarative configuration.
func (b *OwnerReferenceApplyConfiguration) GetUID() (value types.UID, ok bool) {
	if v := b.UID; v != nil {
		return *v, true
	}
	return value, false
}

// SetController sets the Controller field in the declarative configuration to the given value.
func (b *OwnerReferenceApplyConfiguration) SetController(value bool) *OwnerReferenceApplyConfiguration {
	b.Controller = &value
	return b
}

// RemoveController removes the Controller field from the declarative configuration.
func (b *OwnerReferenceApplyConfiguration) RemoveController() *OwnerReferenceApplyConfiguration {
	b.Controller = nil
	return b
}

// GetController gets the Controller field from the declarative configuration.
func (b *OwnerReferenceApplyConfiguration) GetController() (value bool, ok bool) {
	if v := b.Controller; v != nil {
		return *v, true
	}
	return value, false
}

// SetBlockOwnerDeletion sets the BlockOwnerDeletion field in the declarative configuration to the given value.
func (b *OwnerReferenceApplyConfiguration) SetBlockOwnerDeletion(value bool) *OwnerReferenceApplyConfiguration {
	b.BlockOwnerDeletion = &value
	return b
}

// RemoveBlockOwnerDeletion removes the BlockOwnerDeletion field from the declarative configuration.
func (b *OwnerReferenceApplyConfiguration) RemoveBlockOwnerDeletion() *OwnerReferenceApplyConfiguration {
	b.BlockOwnerDeletion = nil
	return b
}

// GetBlockOwnerDeletion gets the BlockOwnerDeletion field from the declarative configuration.
func (b *OwnerReferenceApplyConfiguration) GetBlockOwnerDeletion() (value bool, ok bool) {
	if v := b.BlockOwnerDeletion; v != nil {
		return *v, true
	}
	return value, false
}

// OwnerReferenceList represents a listAlias of OwnerReferenceApplyConfiguration.
type OwnerReferenceList []*OwnerReferenceApplyConfiguration

// OwnerReferenceList represents a map of OwnerReferenceApplyConfiguration.
type OwnerReferenceMap map[string]OwnerReferenceApplyConfiguration
