/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	types "k8s.io/apimachinery/pkg/types"
)

// ObjectMetaApplyConfiguration represents an declarative configuration of the ObjectMeta type for use
// with apply.
type ObjectMetaApplyConfiguration struct {
	fields objectMetaFields
}

// ObjectMetaApplyConfiguration constructs an declarative configuration of the ObjectMeta type for use with
// apply.
func ObjectMeta() *ObjectMetaApplyConfiguration {
	return &ObjectMetaApplyConfiguration{}
}

// objectMetaFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in ObjectMetaApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type objectMetaFields struct {
	Name                       *string                 `json:"name,omitempty"`
	GenerateName               *string                 `json:"generateName,omitempty"`
	Namespace                  *string                 `json:"namespace,omitempty"`
	SelfLink                   *string                 `json:"selfLink,omitempty"`
	UID                        *types.UID              `json:"uid,omitempty"`
	ResourceVersion            *string                 `json:"resourceVersion,omitempty"`
	Generation                 *int64                  `json:"generation,omitempty"`
	CreationTimestamp          *v1.Time                `json:"creationTimestamp,omitempty"`
	DeletionTimestamp          *v1.Time                `json:"deletionTimestamp,omitempty"`
	DeletionGracePeriodSeconds *int64                  `json:"deletionGracePeriodSeconds,omitempty"`
	Labels                     *map[string]string      `json:"labels,omitempty"`
	Annotations                *map[string]string      `json:"annotations,omitempty"`
	OwnerReferences            *OwnerReferenceList     `json:"ownerReferences,omitempty"`
	Finalizers                 *[]string               `json:"finalizers,omitempty"`
	ClusterName                *string                 `json:"clusterName,omitempty"`
	ManagedFields              *ManagedFieldsEntryList `json:"managedFields,omitempty"`
}

// SetName sets the Name field in the declarative configuration to the given value.
func (b *ObjectMetaApplyConfiguration) SetName(value string) *ObjectMetaApplyConfiguration {
	b.fields.Name = &value
	return b
}

// RemoveName removes the Name field from the declarative configuration.
func (b *ObjectMetaApplyConfiguration) RemoveName() *ObjectMetaApplyConfiguration {
	b.fields.Name = nil
	return b
}

// GetName gets the Name field from the declarative configuration.
func (b *ObjectMetaApplyConfiguration) GetName() (value string, ok bool) {
	if v := b.fields.Name; v != nil {
		return *v, true
	}
	return value, false
}

// SetGenerateName sets the GenerateName field in the declarative configuration to the given value.
func (b *ObjectMetaApplyConfiguration) SetGenerateName(value string) *ObjectMetaApplyConfiguration {
	b.fields.GenerateName = &value
	return b
}

// RemoveGenerateName removes the GenerateName field from the declarative configuration.
func (b *ObjectMetaApplyConfiguration) RemoveGenerateName() *ObjectMetaApplyConfiguration {
	b.fields.GenerateName = nil
	return b
}

// GetGenerateName gets the GenerateName field from the declarative configuration.
func (b *ObjectMetaApplyConfiguration) GetGenerateName() (value string, ok bool) {
	if v := b.fields.GenerateName; v != nil {
		return *v, true
	}
	return value, false
}

// SetNamespace sets the Namespace field in the declarative configuration to the given value.
func (b *ObjectMetaApplyConfiguration) SetNamespace(value string) *ObjectMetaApplyConfiguration {
	b.fields.Namespace = &value
	return b
}

// RemoveNamespace removes the Namespace field from the declarative configuration.
func (b *ObjectMetaApplyConfiguration) RemoveNamespace() *ObjectMetaApplyConfiguration {
	b.fields.Namespace = nil
	return b
}

// GetNamespace gets the Namespace field from the declarative configuration.
func (b *ObjectMetaApplyConfiguration) GetNamespace() (value string, ok bool) {
	if v := b.fields.Namespace; v != nil {
		return *v, true
	}
	return value, false
}

// SetSelfLink sets the SelfLink field in the declarative configuration to the given value.
func (b *ObjectMetaApplyConfiguration) SetSelfLink(value string) *ObjectMetaApplyConfiguration {
	b.fields.SelfLink = &value
	return b
}

// RemoveSelfLink removes the SelfLink field from the declarative configuration.
func (b *ObjectMetaApplyConfiguration) RemoveSelfLink() *ObjectMetaApplyConfiguration {
	b.fields.SelfLink = nil
	return b
}

// GetSelfLink gets the SelfLink field from the declarative configuration.
func (b *ObjectMetaApplyConfiguration) GetSelfLink() (value string, ok bool) {
	if v := b.fields.SelfLink; v != nil {
		return *v, true
	}
	return value, false
}

// SetUID sets the UID field in the declarative configuration to the given value.
func (b *ObjectMetaApplyConfiguration) SetUID(value types.UID) *ObjectMetaApplyConfiguration {
	b.fields.UID = &value
	return b
}

// RemoveUID removes the UID field from the declarative configuration.
func (b *ObjectMetaApplyConfiguration) RemoveUID() *ObjectMetaApplyConfiguration {
	b.fields.UID = nil
	return b
}

// GetUID gets the UID field from the declarative configuration.
func (b *ObjectMetaApplyConfiguration) GetUID() (value types.UID, ok bool) {
	if v := b.fields.UID; v != nil {
		return *v, true
	}
	return value, false
}

// SetResourceVersion sets the ResourceVersion field in the declarative configuration to the given value.
func (b *ObjectMetaApplyConfiguration) SetResourceVersion(value string) *ObjectMetaApplyConfiguration {
	b.fields.ResourceVersion = &value
	return b
}

// RemoveResourceVersion removes the ResourceVersion field from the declarative configuration.
func (b *ObjectMetaApplyConfiguration) RemoveResourceVersion() *ObjectMetaApplyConfiguration {
	b.fields.ResourceVersion = nil
	return b
}

// GetResourceVersion gets the ResourceVersion field from the declarative configuration.
func (b *ObjectMetaApplyConfiguration) GetResourceVersion() (value string, ok bool) {
	if v := b.fields.ResourceVersion; v != nil {
		return *v, true
	}
	return value, false
}

// SetGeneration sets the Generation field in the declarative configuration to the given value.
func (b *ObjectMetaApplyConfiguration) SetGeneration(value int64) *ObjectMetaApplyConfiguration {
	b.fields.Generation = &value
	return b
}

// RemoveGeneration removes the Generation field from the declarative configuration.
func (b *ObjectMetaApplyConfiguration) RemoveGeneration() *ObjectMetaApplyConfiguration {
	b.fields.Generation = nil
	return b
}

// GetGeneration gets the Generation field from the declarative configuration.
func (b *ObjectMetaApplyConfiguration) GetGeneration() (value int64, ok bool) {
	if v := b.fields.Generation; v != nil {
		return *v, true
	}
	return value, false
}

// SetCreationTimestamp sets the CreationTimestamp field in the declarative configuration to the given value.
func (b *ObjectMetaApplyConfiguration) SetCreationTimestamp(value v1.Time) *ObjectMetaApplyConfiguration {
	b.fields.CreationTimestamp = &value
	return b
}

// RemoveCreationTimestamp removes the CreationTimestamp field from the declarative configuration.
func (b *ObjectMetaApplyConfiguration) RemoveCreationTimestamp() *ObjectMetaApplyConfiguration {
	b.fields.CreationTimestamp = nil
	return b
}

// GetCreationTimestamp gets the CreationTimestamp field from the declarative configuration.
func (b *ObjectMetaApplyConfiguration) GetCreationTimestamp() (value v1.Time, ok bool) {
	if v := b.fields.CreationTimestamp; v != nil {
		return *v, true
	}
	return value, false
}

// SetDeletionTimestamp sets the DeletionTimestamp field in the declarative configuration to the given value.
func (b *ObjectMetaApplyConfiguration) SetDeletionTimestamp(value v1.Time) *ObjectMetaApplyConfiguration {
	b.fields.DeletionTimestamp = &value
	return b
}

// RemoveDeletionTimestamp removes the DeletionTimestamp field from the declarative configuration.
func (b *ObjectMetaApplyConfiguration) RemoveDeletionTimestamp() *ObjectMetaApplyConfiguration {
	b.fields.DeletionTimestamp = nil
	return b
}

// GetDeletionTimestamp gets the DeletionTimestamp field from the declarative configuration.
func (b *ObjectMetaApplyConfiguration) GetDeletionTimestamp() (value v1.Time, ok bool) {
	if v := b.fields.DeletionTimestamp; v != nil {
		return *v, true
	}
	return value, false
}

// SetDeletionGracePeriodSeconds sets the DeletionGracePeriodSeconds field in the declarative configuration to the given value.
func (b *ObjectMetaApplyConfiguration) SetDeletionGracePeriodSeconds(value int64) *ObjectMetaApplyConfiguration {
	b.fields.DeletionGracePeriodSeconds = &value
	return b
}

// RemoveDeletionGracePeriodSeconds removes the DeletionGracePeriodSeconds field from the declarative configuration.
func (b *ObjectMetaApplyConfiguration) RemoveDeletionGracePeriodSeconds() *ObjectMetaApplyConfiguration {
	b.fields.DeletionGracePeriodSeconds = nil
	return b
}

// GetDeletionGracePeriodSeconds gets the DeletionGracePeriodSeconds field from the declarative configuration.
func (b *ObjectMetaApplyConfiguration) GetDeletionGracePeriodSeconds() (value int64, ok bool) {
	if v := b.fields.DeletionGracePeriodSeconds; v != nil {
		return *v, true
	}
	return value, false
}

// SetLabels sets the Labels field in the declarative configuration to the given value.
func (b *ObjectMetaApplyConfiguration) SetLabels(value map[string]string) *ObjectMetaApplyConfiguration {
	b.fields.Labels = &value
	return b
}

// RemoveLabels removes the Labels field from the declarative configuration.
func (b *ObjectMetaApplyConfiguration) RemoveLabels() *ObjectMetaApplyConfiguration {
	b.fields.Labels = nil
	return b
}

// GetLabels gets the Labels field from the declarative configuration.
func (b *ObjectMetaApplyConfiguration) GetLabels() (value map[string]string, ok bool) {
	if v := b.fields.Labels; v != nil {
		return *v, true
	}
	return value, false
}

// SetAnnotations sets the Annotations field in the declarative configuration to the given value.
func (b *ObjectMetaApplyConfiguration) SetAnnotations(value map[string]string) *ObjectMetaApplyConfiguration {
	b.fields.Annotations = &value
	return b
}

// RemoveAnnotations removes the Annotations field from the declarative configuration.
func (b *ObjectMetaApplyConfiguration) RemoveAnnotations() *ObjectMetaApplyConfiguration {
	b.fields.Annotations = nil
	return b
}

// GetAnnotations gets the Annotations field from the declarative configuration.
func (b *ObjectMetaApplyConfiguration) GetAnnotations() (value map[string]string, ok bool) {
	if v := b.fields.Annotations; v != nil {
		return *v, true
	}
	return value, false
}

// SetOwnerReferences sets the OwnerReferences field in the declarative configuration to the given value.
func (b *ObjectMetaApplyConfiguration) SetOwnerReferences(value OwnerReferenceList) *ObjectMetaApplyConfiguration {
	b.fields.OwnerReferences = &value
	return b
}

// RemoveOwnerReferences removes the OwnerReferences field from the declarative configuration.
func (b *ObjectMetaApplyConfiguration) RemoveOwnerReferences() *ObjectMetaApplyConfiguration {
	b.fields.OwnerReferences = nil
	return b
}

// GetOwnerReferences gets the OwnerReferences field from the declarative configuration.
func (b *ObjectMetaApplyConfiguration) GetOwnerReferences() (value OwnerReferenceList, ok bool) {
	if v := b.fields.OwnerReferences; v != nil {
		return *v, true
	}
	return value, false
}

// SetFinalizers sets the Finalizers field in the declarative configuration to the given value.
func (b *ObjectMetaApplyConfiguration) SetFinalizers(value []string) *ObjectMetaApplyConfiguration {
	b.fields.Finalizers = &value
	return b
}

// RemoveFinalizers removes the Finalizers field from the declarative configuration.
func (b *ObjectMetaApplyConfiguration) RemoveFinalizers() *ObjectMetaApplyConfiguration {
	b.fields.Finalizers = nil
	return b
}

// GetFinalizers gets the Finalizers field from the declarative configuration.
func (b *ObjectMetaApplyConfiguration) GetFinalizers() (value []string, ok bool) {
	if v := b.fields.Finalizers; v != nil {
		return *v, true
	}
	return value, false
}

// SetClusterName sets the ClusterName field in the declarative configuration to the given value.
func (b *ObjectMetaApplyConfiguration) SetClusterName(value string) *ObjectMetaApplyConfiguration {
	b.fields.ClusterName = &value
	return b
}

// RemoveClusterName removes the ClusterName field from the declarative configuration.
func (b *ObjectMetaApplyConfiguration) RemoveClusterName() *ObjectMetaApplyConfiguration {
	b.fields.ClusterName = nil
	return b
}

// GetClusterName gets the ClusterName field from the declarative configuration.
func (b *ObjectMetaApplyConfiguration) GetClusterName() (value string, ok bool) {
	if v := b.fields.ClusterName; v != nil {
		return *v, true
	}
	return value, false
}

// SetManagedFields sets the ManagedFields field in the declarative configuration to the given value.
func (b *ObjectMetaApplyConfiguration) SetManagedFields(value ManagedFieldsEntryList) *ObjectMetaApplyConfiguration {
	b.fields.ManagedFields = &value
	return b
}

// RemoveManagedFields removes the ManagedFields field from the declarative configuration.
func (b *ObjectMetaApplyConfiguration) RemoveManagedFields() *ObjectMetaApplyConfiguration {
	b.fields.ManagedFields = nil
	return b
}

// GetManagedFields gets the ManagedFields field from the declarative configuration.
func (b *ObjectMetaApplyConfiguration) GetManagedFields() (value ManagedFieldsEntryList, ok bool) {
	if v := b.fields.ManagedFields; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ObjectMetaApplyConfiguration to unstructured.
func (b *ObjectMetaApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ObjectMetaApplyConfiguration, replacing the contents
// of ObjectMetaApplyConfiguration.
func (b *ObjectMetaApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &objectMetaFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ObjectMetaApplyConfiguration to JSON.
func (b *ObjectMetaApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into ObjectMetaApplyConfiguration, replacing the contents of
// ObjectMetaApplyConfiguration.
func (b *ObjectMetaApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ObjectMetaList represents a listAlias of ObjectMetaApplyConfiguration.
type ObjectMetaList []*ObjectMetaApplyConfiguration

// ObjectMetaList represents a map of ObjectMetaApplyConfiguration.
type ObjectMetaMap map[string]ObjectMetaApplyConfiguration

func (b *ObjectMetaApplyConfiguration) preMarshal() {
}
func (b *ObjectMetaApplyConfiguration) postUnmarshal() {
}
