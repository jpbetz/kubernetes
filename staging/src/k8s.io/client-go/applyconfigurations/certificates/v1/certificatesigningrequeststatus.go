/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// CertificateSigningRequestStatusApplyConfiguration represents an declarative configuration of the CertificateSigningRequestStatus type for use
// with apply.
type CertificateSigningRequestStatusApplyConfiguration struct {
	Conditions  *CertificateSigningRequestConditionList `json:"conditions,omitempty"`
	Certificate *[]byte                                 `json:"certificate,omitempty"`
}

// CertificateSigningRequestStatusApplyConfiguration constructs an declarative configuration of the CertificateSigningRequestStatus type for use with
// apply.
func CertificateSigningRequestStatus() *CertificateSigningRequestStatusApplyConfiguration {
	return &CertificateSigningRequestStatusApplyConfiguration{}
}

// SetConditions sets the Conditions field in the declarative configuration to the given value.
func (b *CertificateSigningRequestStatusApplyConfiguration) SetConditions(value CertificateSigningRequestConditionList) *CertificateSigningRequestStatusApplyConfiguration {
	b.Conditions = &value
	return b
}

// RemoveConditions removes the Conditions field from the declarative configuration.
func (b *CertificateSigningRequestStatusApplyConfiguration) RemoveConditions() *CertificateSigningRequestStatusApplyConfiguration {
	b.Conditions = nil
	return b
}

// GetConditions gets the Conditions field from the declarative configuration.
func (b *CertificateSigningRequestStatusApplyConfiguration) GetConditions() (value CertificateSigningRequestConditionList, ok bool) {
	if v := b.Conditions; v != nil {
		return *v, true
	}
	return value, false
}

// SetCertificate sets the Certificate field in the declarative configuration to the given value.
func (b *CertificateSigningRequestStatusApplyConfiguration) SetCertificate(value []byte) *CertificateSigningRequestStatusApplyConfiguration {
	b.Certificate = &value
	return b
}

// RemoveCertificate removes the Certificate field from the declarative configuration.
func (b *CertificateSigningRequestStatusApplyConfiguration) RemoveCertificate() *CertificateSigningRequestStatusApplyConfiguration {
	b.Certificate = nil
	return b
}

// GetCertificate gets the Certificate field from the declarative configuration.
func (b *CertificateSigningRequestStatusApplyConfiguration) GetCertificate() (value []byte, ok bool) {
	if v := b.Certificate; v != nil {
		return *v, true
	}
	return value, false
}

// CertificateSigningRequestStatusList represents a listAlias of CertificateSigningRequestStatusApplyConfiguration.
type CertificateSigningRequestStatusList []*CertificateSigningRequestStatusApplyConfiguration

// CertificateSigningRequestStatusList represents a map of CertificateSigningRequestStatusApplyConfiguration.
type CertificateSigningRequestStatusMap map[string]CertificateSigningRequestStatusApplyConfiguration
