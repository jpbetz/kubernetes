/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"

	v1beta1 "k8s.io/api/certificates/v1beta1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// CertificateSigningRequestSpecApplyConfiguration represents an declarative configuration of the CertificateSigningRequestSpec type for use
// with apply.
type CertificateSigningRequestSpecApplyConfiguration struct {
	fields certificateSigningRequestSpecFields
}

// CertificateSigningRequestSpecApplyConfiguration constructs an declarative configuration of the CertificateSigningRequestSpec type for use with
// apply.
func CertificateSigningRequestSpec() *CertificateSigningRequestSpecApplyConfiguration {
	return &CertificateSigningRequestSpecApplyConfiguration{}
}

// certificateSigningRequestSpecFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in CertificateSigningRequestSpecApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type certificateSigningRequestSpecFields struct {
	Request    *[]byte                        `json:"request,omitempty"`
	SignerName *string                        `json:"signerName,omitempty"`
	Usages     *[]v1beta1.KeyUsage            `json:"usages,omitempty"`
	Username   *string                        `json:"username,omitempty"`
	UID        *string                        `json:"uid,omitempty"`
	Groups     *[]string                      `json:"groups,omitempty"`
	Extra      *map[string]v1beta1.ExtraValue `json:"extra,omitempty"`
}

// SetRequest sets the Request field in the declarative configuration to the given value.
func (b *CertificateSigningRequestSpecApplyConfiguration) SetRequest(value []byte) *CertificateSigningRequestSpecApplyConfiguration {
	b.fields.Request = &value
	return b
}

// RemoveRequest removes the Request field from the declarative configuration.
func (b *CertificateSigningRequestSpecApplyConfiguration) RemoveRequest() *CertificateSigningRequestSpecApplyConfiguration {
	b.fields.Request = nil
	return b
}

// GetRequest gets the Request field from the declarative configuration.
func (b *CertificateSigningRequestSpecApplyConfiguration) GetRequest() (value []byte, ok bool) {
	if v := b.fields.Request; v != nil {
		return *v, true
	}
	return value, false
}

// SetSignerName sets the SignerName field in the declarative configuration to the given value.
func (b *CertificateSigningRequestSpecApplyConfiguration) SetSignerName(value string) *CertificateSigningRequestSpecApplyConfiguration {
	b.fields.SignerName = &value
	return b
}

// RemoveSignerName removes the SignerName field from the declarative configuration.
func (b *CertificateSigningRequestSpecApplyConfiguration) RemoveSignerName() *CertificateSigningRequestSpecApplyConfiguration {
	b.fields.SignerName = nil
	return b
}

// GetSignerName gets the SignerName field from the declarative configuration.
func (b *CertificateSigningRequestSpecApplyConfiguration) GetSignerName() (value string, ok bool) {
	if v := b.fields.SignerName; v != nil {
		return *v, true
	}
	return value, false
}

// SetUsages sets the Usages field in the declarative configuration to the given value.
func (b *CertificateSigningRequestSpecApplyConfiguration) SetUsages(value []v1beta1.KeyUsage) *CertificateSigningRequestSpecApplyConfiguration {
	b.fields.Usages = &value
	return b
}

// RemoveUsages removes the Usages field from the declarative configuration.
func (b *CertificateSigningRequestSpecApplyConfiguration) RemoveUsages() *CertificateSigningRequestSpecApplyConfiguration {
	b.fields.Usages = nil
	return b
}

// GetUsages gets the Usages field from the declarative configuration.
func (b *CertificateSigningRequestSpecApplyConfiguration) GetUsages() (value []v1beta1.KeyUsage, ok bool) {
	if v := b.fields.Usages; v != nil {
		return *v, true
	}
	return value, false
}

// SetUsername sets the Username field in the declarative configuration to the given value.
func (b *CertificateSigningRequestSpecApplyConfiguration) SetUsername(value string) *CertificateSigningRequestSpecApplyConfiguration {
	b.fields.Username = &value
	return b
}

// RemoveUsername removes the Username field from the declarative configuration.
func (b *CertificateSigningRequestSpecApplyConfiguration) RemoveUsername() *CertificateSigningRequestSpecApplyConfiguration {
	b.fields.Username = nil
	return b
}

// GetUsername gets the Username field from the declarative configuration.
func (b *CertificateSigningRequestSpecApplyConfiguration) GetUsername() (value string, ok bool) {
	if v := b.fields.Username; v != nil {
		return *v, true
	}
	return value, false
}

// SetUID sets the UID field in the declarative configuration to the given value.
func (b *CertificateSigningRequestSpecApplyConfiguration) SetUID(value string) *CertificateSigningRequestSpecApplyConfiguration {
	b.fields.UID = &value
	return b
}

// RemoveUID removes the UID field from the declarative configuration.
func (b *CertificateSigningRequestSpecApplyConfiguration) RemoveUID() *CertificateSigningRequestSpecApplyConfiguration {
	b.fields.UID = nil
	return b
}

// GetUID gets the UID field from the declarative configuration.
func (b *CertificateSigningRequestSpecApplyConfiguration) GetUID() (value string, ok bool) {
	if v := b.fields.UID; v != nil {
		return *v, true
	}
	return value, false
}

// SetGroups sets the Groups field in the declarative configuration to the given value.
func (b *CertificateSigningRequestSpecApplyConfiguration) SetGroups(value []string) *CertificateSigningRequestSpecApplyConfiguration {
	b.fields.Groups = &value
	return b
}

// RemoveGroups removes the Groups field from the declarative configuration.
func (b *CertificateSigningRequestSpecApplyConfiguration) RemoveGroups() *CertificateSigningRequestSpecApplyConfiguration {
	b.fields.Groups = nil
	return b
}

// GetGroups gets the Groups field from the declarative configuration.
func (b *CertificateSigningRequestSpecApplyConfiguration) GetGroups() (value []string, ok bool) {
	if v := b.fields.Groups; v != nil {
		return *v, true
	}
	return value, false
}

// SetExtra sets the Extra field in the declarative configuration to the given value.
func (b *CertificateSigningRequestSpecApplyConfiguration) SetExtra(value map[string]v1beta1.ExtraValue) *CertificateSigningRequestSpecApplyConfiguration {
	b.fields.Extra = &value
	return b
}

// RemoveExtra removes the Extra field from the declarative configuration.
func (b *CertificateSigningRequestSpecApplyConfiguration) RemoveExtra() *CertificateSigningRequestSpecApplyConfiguration {
	b.fields.Extra = nil
	return b
}

// GetExtra gets the Extra field from the declarative configuration.
func (b *CertificateSigningRequestSpecApplyConfiguration) GetExtra() (value map[string]v1beta1.ExtraValue, ok bool) {
	if v := b.fields.Extra; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts CertificateSigningRequestSpecApplyConfiguration to unstructured.
func (b *CertificateSigningRequestSpecApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to CertificateSigningRequestSpecApplyConfiguration, replacing the contents
// of CertificateSigningRequestSpecApplyConfiguration.
func (b *CertificateSigningRequestSpecApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &certificateSigningRequestSpecFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals CertificateSigningRequestSpecApplyConfiguration to JSON.
func (b *CertificateSigningRequestSpecApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into CertificateSigningRequestSpecApplyConfiguration, replacing the contents of
// CertificateSigningRequestSpecApplyConfiguration.
func (b *CertificateSigningRequestSpecApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// CertificateSigningRequestSpecList represents a listAlias of CertificateSigningRequestSpecApplyConfiguration.
type CertificateSigningRequestSpecList []*CertificateSigningRequestSpecApplyConfiguration

// CertificateSigningRequestSpecList represents a map of CertificateSigningRequestSpecApplyConfiguration.
type CertificateSigningRequestSpecMap map[string]CertificateSigningRequestSpecApplyConfiguration

func (b *CertificateSigningRequestSpecApplyConfiguration) preMarshal() {
}
func (b *CertificateSigningRequestSpecApplyConfiguration) postUnmarshal() {
}
