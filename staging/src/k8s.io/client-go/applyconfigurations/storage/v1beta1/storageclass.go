/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	corev1 "k8s.io/api/core/v1"
	v1beta1 "k8s.io/api/storage/v1beta1"
	applyconfigurationscorev1 "k8s.io/client-go/applyconfigurations/core/v1"
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// StorageClassApplyConfiguration represents an declarative configuration of the StorageClass type for use
// with apply.
type StorageClassApplyConfiguration struct {
	v1.TypeMetaApplyConfiguration   `json:",inline"`
	v1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Provisioner                     *string                                                             `json:"provisioner,omitempty"`
	Parameters                      *map[string]string                                                  `json:"parameters,omitempty"`
	ReclaimPolicy                   *corev1.PersistentVolumeReclaimPolicy                               `json:"reclaimPolicy,omitempty"`
	MountOptions                    *[]string                                                           `json:"mountOptions,omitempty"`
	AllowVolumeExpansion            *bool                                                               `json:"allowVolumeExpansion,omitempty"`
	VolumeBindingMode               *v1beta1.VolumeBindingMode                                          `json:"volumeBindingMode,omitempty"`
	AllowedTopologies               *[]applyconfigurationscorev1.TopologySelectorTermApplyConfiguration `json:"allowedTopologies,omitempty"`
}

// StorageClassApplyConfiguration constructs an declarative configuration of the StorageClass type for use with
// apply.
func StorageClass(name string) *StorageClassApplyConfiguration {
	b := &StorageClassApplyConfiguration{}
	b.SetName(name)
	b.SetKind("StorageClass")
	b.SetAPIVersion("storage/v1beta1")
	return b
}

// SetProvisioner sets the Provisioner field in the declarative configuration to the given value.
func (b *StorageClassApplyConfiguration) SetProvisioner(value string) *StorageClassApplyConfiguration {
	b.Provisioner = &value
	return b
}

// SetParameters sets the Parameters field in the declarative configuration to the given value.
func (b *StorageClassApplyConfiguration) SetParameters(value map[string]string) *StorageClassApplyConfiguration {
	b.Parameters = &value
	return b
}

// SetReclaimPolicy sets the ReclaimPolicy field in the declarative configuration to the given value.
func (b *StorageClassApplyConfiguration) SetReclaimPolicy(value corev1.PersistentVolumeReclaimPolicy) *StorageClassApplyConfiguration {
	b.ReclaimPolicy = &value
	return b
}

// SetMountOptions sets the MountOptions field in the declarative configuration to the given value.
func (b *StorageClassApplyConfiguration) SetMountOptions(value []string) *StorageClassApplyConfiguration {
	b.MountOptions = &value
	return b
}

// SetAllowVolumeExpansion sets the AllowVolumeExpansion field in the declarative configuration to the given value.
func (b *StorageClassApplyConfiguration) SetAllowVolumeExpansion(value bool) *StorageClassApplyConfiguration {
	b.AllowVolumeExpansion = &value
	return b
}

// SetVolumeBindingMode sets the VolumeBindingMode field in the declarative configuration to the given value.
func (b *StorageClassApplyConfiguration) SetVolumeBindingMode(value v1beta1.VolumeBindingMode) *StorageClassApplyConfiguration {
	b.VolumeBindingMode = &value
	return b
}

// SetAllowedTopologies sets the AllowedTopologies field in the declarative configuration to the given value.
func (b *StorageClassApplyConfiguration) SetAllowedTopologies(value []applyconfigurationscorev1.TopologySelectorTermApplyConfiguration) *StorageClassApplyConfiguration {
	b.AllowedTopologies = &value
	return b
}
