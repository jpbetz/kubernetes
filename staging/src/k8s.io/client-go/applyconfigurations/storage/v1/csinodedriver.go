/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// CSINodeDriverApplyConfiguration represents an declarative configuration of the CSINodeDriver type for use
// with apply.
type CSINodeDriverApplyConfiguration struct {
	Name         *string                                `json:"name,omitempty"`
	NodeID       *string                                `json:"nodeID,omitempty"`
	TopologyKeys *[]string                              `json:"topologyKeys,omitempty"`
	Allocatable  *VolumeNodeResourcesApplyConfiguration `json:"allocatable,omitempty"`
}

// CSINodeDriverApplyConfiguration constructs an declarative configuration of the CSINodeDriver type for use with
// apply.
func CSINodeDriver() *CSINodeDriverApplyConfiguration {
	return &CSINodeDriverApplyConfiguration{}
}

// SetName sets the Name field in the declarative configuration to the given value.
func (b *CSINodeDriverApplyConfiguration) SetName(value string) *CSINodeDriverApplyConfiguration {
	b.Name = &value
	return b
}

// RemoveName removes the Name field from the declarative configuration.
func (b *CSINodeDriverApplyConfiguration) RemoveName() *CSINodeDriverApplyConfiguration {
	b.Name = nil
	return b
}

// GetName gets the Name field from the declarative configuration.
func (b *CSINodeDriverApplyConfiguration) GetName() (value string, ok bool) {
	if v := b.Name; v != nil {
		return *v, true
	}
	return value, false
}

// SetNodeID sets the NodeID field in the declarative configuration to the given value.
func (b *CSINodeDriverApplyConfiguration) SetNodeID(value string) *CSINodeDriverApplyConfiguration {
	b.NodeID = &value
	return b
}

// RemoveNodeID removes the NodeID field from the declarative configuration.
func (b *CSINodeDriverApplyConfiguration) RemoveNodeID() *CSINodeDriverApplyConfiguration {
	b.NodeID = nil
	return b
}

// GetNodeID gets the NodeID field from the declarative configuration.
func (b *CSINodeDriverApplyConfiguration) GetNodeID() (value string, ok bool) {
	if v := b.NodeID; v != nil {
		return *v, true
	}
	return value, false
}

// SetTopologyKeys sets the TopologyKeys field in the declarative configuration to the given value.
func (b *CSINodeDriverApplyConfiguration) SetTopologyKeys(value []string) *CSINodeDriverApplyConfiguration {
	b.TopologyKeys = &value
	return b
}

// RemoveTopologyKeys removes the TopologyKeys field from the declarative configuration.
func (b *CSINodeDriverApplyConfiguration) RemoveTopologyKeys() *CSINodeDriverApplyConfiguration {
	b.TopologyKeys = nil
	return b
}

// GetTopologyKeys gets the TopologyKeys field from the declarative configuration.
func (b *CSINodeDriverApplyConfiguration) GetTopologyKeys() (value []string, ok bool) {
	if v := b.TopologyKeys; v != nil {
		return *v, true
	}
	return value, false
}

// SetAllocatable sets the Allocatable field in the declarative configuration to the given value.
func (b *CSINodeDriverApplyConfiguration) SetAllocatable(value *VolumeNodeResourcesApplyConfiguration) *CSINodeDriverApplyConfiguration {
	b.Allocatable = value
	return b
}

// RemoveAllocatable removes the Allocatable field from the declarative configuration.
func (b *CSINodeDriverApplyConfiguration) RemoveAllocatable() *CSINodeDriverApplyConfiguration {
	b.Allocatable = nil
	return b
}

// GetAllocatable gets the Allocatable field from the declarative configuration.
func (b *CSINodeDriverApplyConfiguration) GetAllocatable() (value *VolumeNodeResourcesApplyConfiguration, ok bool) {
	return b.Allocatable, b.Allocatable != nil
}

// CSINodeDriverList represents a listAlias of CSINodeDriverApplyConfiguration.
type CSINodeDriverList []*CSINodeDriverApplyConfiguration

// CSINodeDriverList represents a map of CSINodeDriverApplyConfiguration.
type CSINodeDriverMap map[string]CSINodeDriverApplyConfiguration
