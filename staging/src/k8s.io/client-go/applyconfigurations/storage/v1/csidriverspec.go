/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	v1 "k8s.io/api/storage/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// CSIDriverSpecApplyConfiguration represents an declarative configuration of the CSIDriverSpec type for use
// with apply.
type CSIDriverSpecApplyConfiguration struct {
	fields cSIDriverSpecFields
}

// CSIDriverSpecApplyConfiguration constructs an declarative configuration of the CSIDriverSpec type for use with
// apply.
func CSIDriverSpec() *CSIDriverSpecApplyConfiguration {
	return &CSIDriverSpecApplyConfiguration{}
}

// cSIDriverSpecFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in CSIDriverSpecApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type cSIDriverSpecFields struct {
	AttachRequired       *bool                     `json:"attachRequired,omitempty"`
	PodInfoOnMount       *bool                     `json:"podInfoOnMount,omitempty"`
	VolumeLifecycleModes *[]v1.VolumeLifecycleMode `json:"volumeLifecycleModes,omitempty"`
	StorageCapacity      *bool                     `json:"storageCapacity,omitempty"`
	FSGroupPolicy        *v1.FSGroupPolicy         `json:"fsGroupPolicy,omitempty"`
}

// SetAttachRequired sets the AttachRequired field in the declarative configuration to the given value.
func (b *CSIDriverSpecApplyConfiguration) SetAttachRequired(value bool) *CSIDriverSpecApplyConfiguration {
	b.fields.AttachRequired = &value
	return b
}

// RemoveAttachRequired removes the AttachRequired field from the declarative configuration.
func (b *CSIDriverSpecApplyConfiguration) RemoveAttachRequired() *CSIDriverSpecApplyConfiguration {
	b.fields.AttachRequired = nil
	return b
}

// GetAttachRequired gets the AttachRequired field from the declarative configuration.
func (b *CSIDriverSpecApplyConfiguration) GetAttachRequired() (value bool, ok bool) {
	if v := b.fields.AttachRequired; v != nil {
		return *v, true
	}
	return value, false
}

// SetPodInfoOnMount sets the PodInfoOnMount field in the declarative configuration to the given value.
func (b *CSIDriverSpecApplyConfiguration) SetPodInfoOnMount(value bool) *CSIDriverSpecApplyConfiguration {
	b.fields.PodInfoOnMount = &value
	return b
}

// RemovePodInfoOnMount removes the PodInfoOnMount field from the declarative configuration.
func (b *CSIDriverSpecApplyConfiguration) RemovePodInfoOnMount() *CSIDriverSpecApplyConfiguration {
	b.fields.PodInfoOnMount = nil
	return b
}

// GetPodInfoOnMount gets the PodInfoOnMount field from the declarative configuration.
func (b *CSIDriverSpecApplyConfiguration) GetPodInfoOnMount() (value bool, ok bool) {
	if v := b.fields.PodInfoOnMount; v != nil {
		return *v, true
	}
	return value, false
}

// SetVolumeLifecycleModes sets the VolumeLifecycleModes field in the declarative configuration to the given value.
func (b *CSIDriverSpecApplyConfiguration) SetVolumeLifecycleModes(value []v1.VolumeLifecycleMode) *CSIDriverSpecApplyConfiguration {
	b.fields.VolumeLifecycleModes = &value
	return b
}

// RemoveVolumeLifecycleModes removes the VolumeLifecycleModes field from the declarative configuration.
func (b *CSIDriverSpecApplyConfiguration) RemoveVolumeLifecycleModes() *CSIDriverSpecApplyConfiguration {
	b.fields.VolumeLifecycleModes = nil
	return b
}

// GetVolumeLifecycleModes gets the VolumeLifecycleModes field from the declarative configuration.
func (b *CSIDriverSpecApplyConfiguration) GetVolumeLifecycleModes() (value []v1.VolumeLifecycleMode, ok bool) {
	if v := b.fields.VolumeLifecycleModes; v != nil {
		return *v, true
	}
	return value, false
}

// SetStorageCapacity sets the StorageCapacity field in the declarative configuration to the given value.
func (b *CSIDriverSpecApplyConfiguration) SetStorageCapacity(value bool) *CSIDriverSpecApplyConfiguration {
	b.fields.StorageCapacity = &value
	return b
}

// RemoveStorageCapacity removes the StorageCapacity field from the declarative configuration.
func (b *CSIDriverSpecApplyConfiguration) RemoveStorageCapacity() *CSIDriverSpecApplyConfiguration {
	b.fields.StorageCapacity = nil
	return b
}

// GetStorageCapacity gets the StorageCapacity field from the declarative configuration.
func (b *CSIDriverSpecApplyConfiguration) GetStorageCapacity() (value bool, ok bool) {
	if v := b.fields.StorageCapacity; v != nil {
		return *v, true
	}
	return value, false
}

// SetFSGroupPolicy sets the FSGroupPolicy field in the declarative configuration to the given value.
func (b *CSIDriverSpecApplyConfiguration) SetFSGroupPolicy(value v1.FSGroupPolicy) *CSIDriverSpecApplyConfiguration {
	b.fields.FSGroupPolicy = &value
	return b
}

// RemoveFSGroupPolicy removes the FSGroupPolicy field from the declarative configuration.
func (b *CSIDriverSpecApplyConfiguration) RemoveFSGroupPolicy() *CSIDriverSpecApplyConfiguration {
	b.fields.FSGroupPolicy = nil
	return b
}

// GetFSGroupPolicy gets the FSGroupPolicy field from the declarative configuration.
func (b *CSIDriverSpecApplyConfiguration) GetFSGroupPolicy() (value v1.FSGroupPolicy, ok bool) {
	if v := b.fields.FSGroupPolicy; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts CSIDriverSpecApplyConfiguration to unstructured.
func (b *CSIDriverSpecApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to CSIDriverSpecApplyConfiguration, replacing the contents
// of CSIDriverSpecApplyConfiguration.
func (b *CSIDriverSpecApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &cSIDriverSpecFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals CSIDriverSpecApplyConfiguration to JSON.
func (b *CSIDriverSpecApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into CSIDriverSpecApplyConfiguration, replacing the contents of
// CSIDriverSpecApplyConfiguration.
func (b *CSIDriverSpecApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// CSIDriverSpecList represents a listAlias of CSIDriverSpecApplyConfiguration.
type CSIDriverSpecList []*CSIDriverSpecApplyConfiguration

// CSIDriverSpecList represents a map of CSIDriverSpecApplyConfiguration.
type CSIDriverSpecMap map[string]CSIDriverSpecApplyConfiguration

func (b *CSIDriverSpecApplyConfiguration) preMarshal() {
}
func (b *CSIDriverSpecApplyConfiguration) postUnmarshal() {
}
