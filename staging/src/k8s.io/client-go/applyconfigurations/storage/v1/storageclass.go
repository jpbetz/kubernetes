/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	corev1 "k8s.io/api/core/v1"
	storagev1 "k8s.io/api/storage/v1"
	applyconfigurationscorev1 "k8s.io/client-go/applyconfigurations/core/v1"
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// StorageClassApplyConfiguration represents an declarative configuration of the StorageClass type for use
// with apply.
type StorageClassApplyConfiguration struct {
	v1.TypeMetaApplyConfiguration `json:",inline"`
	ObjectMeta                    *v1.ObjectMetaApplyConfiguration                    `json:"metadata,omitempty"`
	Provisioner                   *string                                             `json:"provisioner,omitempty"`
	Parameters                    *map[string]string                                  `json:"parameters,omitempty"`
	ReclaimPolicy                 *corev1.PersistentVolumeReclaimPolicy               `json:"reclaimPolicy,omitempty"`
	MountOptions                  *[]string                                           `json:"mountOptions,omitempty"`
	AllowVolumeExpansion          *bool                                               `json:"allowVolumeExpansion,omitempty"`
	VolumeBindingMode             *storagev1.VolumeBindingMode                        `json:"volumeBindingMode,omitempty"`
	AllowedTopologies             *applyconfigurationscorev1.TopologySelectorTermList `json:"allowedTopologies,omitempty"`
}

// StorageClassApplyConfiguration constructs an declarative configuration of the StorageClass type for use with
// apply.
func StorageClass() *StorageClassApplyConfiguration {
	return &StorageClassApplyConfiguration{}
}

// SetTypeMeta sets the TypeMeta field in the declarative configuration to the given value.
func (b *StorageClassApplyConfiguration) SetTypeMeta(value *v1.TypeMetaApplyConfiguration) *StorageClassApplyConfiguration {
	if value != nil {
		b.TypeMetaApplyConfiguration = *value
	}
	return b
}

// GetTypeMeta gets the TypeMeta field from the declarative configuration.
func (b *StorageClassApplyConfiguration) GetTypeMeta() (value *v1.TypeMetaApplyConfiguration, ok bool) {
	return &b.TypeMetaApplyConfiguration, true
}

// SetObjectMeta sets the ObjectMeta field in the declarative configuration to the given value.
func (b *StorageClassApplyConfiguration) SetObjectMeta(value *v1.ObjectMetaApplyConfiguration) *StorageClassApplyConfiguration {
	b.ObjectMeta = value
	return b
}

// RemoveObjectMeta removes the ObjectMeta field from the declarative configuration.
func (b *StorageClassApplyConfiguration) RemoveObjectMeta() *StorageClassApplyConfiguration {
	b.ObjectMeta = nil
	return b
}

// GetObjectMeta gets the ObjectMeta field from the declarative configuration.
func (b *StorageClassApplyConfiguration) GetObjectMeta() (value *v1.ObjectMetaApplyConfiguration, ok bool) {
	return b.ObjectMeta, b.ObjectMeta != nil
}

// SetProvisioner sets the Provisioner field in the declarative configuration to the given value.
func (b *StorageClassApplyConfiguration) SetProvisioner(value string) *StorageClassApplyConfiguration {
	b.Provisioner = &value
	return b
}

// RemoveProvisioner removes the Provisioner field from the declarative configuration.
func (b *StorageClassApplyConfiguration) RemoveProvisioner() *StorageClassApplyConfiguration {
	b.Provisioner = nil
	return b
}

// GetProvisioner gets the Provisioner field from the declarative configuration.
func (b *StorageClassApplyConfiguration) GetProvisioner() (value string, ok bool) {
	if v := b.Provisioner; v != nil {
		return *v, true
	}
	return value, false
}

// SetParameters sets the Parameters field in the declarative configuration to the given value.
func (b *StorageClassApplyConfiguration) SetParameters(value map[string]string) *StorageClassApplyConfiguration {
	b.Parameters = &value
	return b
}

// RemoveParameters removes the Parameters field from the declarative configuration.
func (b *StorageClassApplyConfiguration) RemoveParameters() *StorageClassApplyConfiguration {
	b.Parameters = nil
	return b
}

// GetParameters gets the Parameters field from the declarative configuration.
func (b *StorageClassApplyConfiguration) GetParameters() (value map[string]string, ok bool) {
	if v := b.Parameters; v != nil {
		return *v, true
	}
	return value, false
}

// SetReclaimPolicy sets the ReclaimPolicy field in the declarative configuration to the given value.
func (b *StorageClassApplyConfiguration) SetReclaimPolicy(value corev1.PersistentVolumeReclaimPolicy) *StorageClassApplyConfiguration {
	b.ReclaimPolicy = &value
	return b
}

// RemoveReclaimPolicy removes the ReclaimPolicy field from the declarative configuration.
func (b *StorageClassApplyConfiguration) RemoveReclaimPolicy() *StorageClassApplyConfiguration {
	b.ReclaimPolicy = nil
	return b
}

// GetReclaimPolicy gets the ReclaimPolicy field from the declarative configuration.
func (b *StorageClassApplyConfiguration) GetReclaimPolicy() (value corev1.PersistentVolumeReclaimPolicy, ok bool) {
	if v := b.ReclaimPolicy; v != nil {
		return *v, true
	}
	return value, false
}

// SetMountOptions sets the MountOptions field in the declarative configuration to the given value.
func (b *StorageClassApplyConfiguration) SetMountOptions(value []string) *StorageClassApplyConfiguration {
	b.MountOptions = &value
	return b
}

// RemoveMountOptions removes the MountOptions field from the declarative configuration.
func (b *StorageClassApplyConfiguration) RemoveMountOptions() *StorageClassApplyConfiguration {
	b.MountOptions = nil
	return b
}

// GetMountOptions gets the MountOptions field from the declarative configuration.
func (b *StorageClassApplyConfiguration) GetMountOptions() (value []string, ok bool) {
	if v := b.MountOptions; v != nil {
		return *v, true
	}
	return value, false
}

// SetAllowVolumeExpansion sets the AllowVolumeExpansion field in the declarative configuration to the given value.
func (b *StorageClassApplyConfiguration) SetAllowVolumeExpansion(value bool) *StorageClassApplyConfiguration {
	b.AllowVolumeExpansion = &value
	return b
}

// RemoveAllowVolumeExpansion removes the AllowVolumeExpansion field from the declarative configuration.
func (b *StorageClassApplyConfiguration) RemoveAllowVolumeExpansion() *StorageClassApplyConfiguration {
	b.AllowVolumeExpansion = nil
	return b
}

// GetAllowVolumeExpansion gets the AllowVolumeExpansion field from the declarative configuration.
func (b *StorageClassApplyConfiguration) GetAllowVolumeExpansion() (value bool, ok bool) {
	if v := b.AllowVolumeExpansion; v != nil {
		return *v, true
	}
	return value, false
}

// SetVolumeBindingMode sets the VolumeBindingMode field in the declarative configuration to the given value.
func (b *StorageClassApplyConfiguration) SetVolumeBindingMode(value storagev1.VolumeBindingMode) *StorageClassApplyConfiguration {
	b.VolumeBindingMode = &value
	return b
}

// RemoveVolumeBindingMode removes the VolumeBindingMode field from the declarative configuration.
func (b *StorageClassApplyConfiguration) RemoveVolumeBindingMode() *StorageClassApplyConfiguration {
	b.VolumeBindingMode = nil
	return b
}

// GetVolumeBindingMode gets the VolumeBindingMode field from the declarative configuration.
func (b *StorageClassApplyConfiguration) GetVolumeBindingMode() (value storagev1.VolumeBindingMode, ok bool) {
	if v := b.VolumeBindingMode; v != nil {
		return *v, true
	}
	return value, false
}

// SetAllowedTopologies sets the AllowedTopologies field in the declarative configuration to the given value.
func (b *StorageClassApplyConfiguration) SetAllowedTopologies(value applyconfigurationscorev1.TopologySelectorTermList) *StorageClassApplyConfiguration {
	b.AllowedTopologies = &value
	return b
}

// RemoveAllowedTopologies removes the AllowedTopologies field from the declarative configuration.
func (b *StorageClassApplyConfiguration) RemoveAllowedTopologies() *StorageClassApplyConfiguration {
	b.AllowedTopologies = nil
	return b
}

// GetAllowedTopologies gets the AllowedTopologies field from the declarative configuration.
func (b *StorageClassApplyConfiguration) GetAllowedTopologies() (value applyconfigurationscorev1.TopologySelectorTermList, ok bool) {
	if v := b.AllowedTopologies; v != nil {
		return *v, true
	}
	return value, false
}

// StorageClassList represents a listAlias of StorageClassApplyConfiguration.
type StorageClassList []*StorageClassApplyConfiguration

// StorageClassList represents a map of StorageClassApplyConfiguration.
type StorageClassMap map[string]StorageClassApplyConfiguration
