/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "k8s.io/api/discovery/v1alpha1"
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// EndpointSliceApplyConfiguration represents an declarative configuration of the EndpointSlice type for use
// with apply.
type EndpointSliceApplyConfiguration struct {
	v1.TypeMetaApplyConfiguration `json:",inline"`
	ObjectMeta                    *v1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	AddressType                   *v1alpha1.AddressType            `json:"addressType,omitempty"`
	Endpoints                     *EndpointList                    `json:"endpoints,omitempty"`
	Ports                         *EndpointPortList                `json:"ports,omitempty"`
}

// EndpointSliceApplyConfiguration constructs an declarative configuration of the EndpointSlice type for use with
// apply.
func EndpointSlice() *EndpointSliceApplyConfiguration {
	return &EndpointSliceApplyConfiguration{}
}

// SetTypeMeta sets the TypeMeta field in the declarative configuration to the given value.
func (b *EndpointSliceApplyConfiguration) SetTypeMeta(value *v1.TypeMetaApplyConfiguration) *EndpointSliceApplyConfiguration {
	if value != nil {
		b.TypeMetaApplyConfiguration = *value
	}
	return b
}

// GetTypeMeta gets the TypeMeta field from the declarative configuration.
func (b *EndpointSliceApplyConfiguration) GetTypeMeta() (value *v1.TypeMetaApplyConfiguration, ok bool) {
	return &b.TypeMetaApplyConfiguration, true
}

// SetObjectMeta sets the ObjectMeta field in the declarative configuration to the given value.
func (b *EndpointSliceApplyConfiguration) SetObjectMeta(value *v1.ObjectMetaApplyConfiguration) *EndpointSliceApplyConfiguration {
	b.ObjectMeta = value
	return b
}

// RemoveObjectMeta removes the ObjectMeta field from the declarative configuration.
func (b *EndpointSliceApplyConfiguration) RemoveObjectMeta() *EndpointSliceApplyConfiguration {
	b.ObjectMeta = nil
	return b
}

// GetObjectMeta gets the ObjectMeta field from the declarative configuration.
func (b *EndpointSliceApplyConfiguration) GetObjectMeta() (value *v1.ObjectMetaApplyConfiguration, ok bool) {
	return b.ObjectMeta, b.ObjectMeta != nil
}

// SetAddressType sets the AddressType field in the declarative configuration to the given value.
func (b *EndpointSliceApplyConfiguration) SetAddressType(value v1alpha1.AddressType) *EndpointSliceApplyConfiguration {
	b.AddressType = &value
	return b
}

// RemoveAddressType removes the AddressType field from the declarative configuration.
func (b *EndpointSliceApplyConfiguration) RemoveAddressType() *EndpointSliceApplyConfiguration {
	b.AddressType = nil
	return b
}

// GetAddressType gets the AddressType field from the declarative configuration.
func (b *EndpointSliceApplyConfiguration) GetAddressType() (value v1alpha1.AddressType, ok bool) {
	if v := b.AddressType; v != nil {
		return *v, true
	}
	return value, false
}

// SetEndpoints sets the Endpoints field in the declarative configuration to the given value.
func (b *EndpointSliceApplyConfiguration) SetEndpoints(value EndpointList) *EndpointSliceApplyConfiguration {
	b.Endpoints = &value
	return b
}

// RemoveEndpoints removes the Endpoints field from the declarative configuration.
func (b *EndpointSliceApplyConfiguration) RemoveEndpoints() *EndpointSliceApplyConfiguration {
	b.Endpoints = nil
	return b
}

// GetEndpoints gets the Endpoints field from the declarative configuration.
func (b *EndpointSliceApplyConfiguration) GetEndpoints() (value EndpointList, ok bool) {
	if v := b.Endpoints; v != nil {
		return *v, true
	}
	return value, false
}

// SetPorts sets the Ports field in the declarative configuration to the given value.
func (b *EndpointSliceApplyConfiguration) SetPorts(value EndpointPortList) *EndpointSliceApplyConfiguration {
	b.Ports = &value
	return b
}

// RemovePorts removes the Ports field from the declarative configuration.
func (b *EndpointSliceApplyConfiguration) RemovePorts() *EndpointSliceApplyConfiguration {
	b.Ports = nil
	return b
}

// GetPorts gets the Ports field from the declarative configuration.
func (b *EndpointSliceApplyConfiguration) GetPorts() (value EndpointPortList, ok bool) {
	if v := b.Ports; v != nil {
		return *v, true
	}
	return value, false
}

// EndpointSliceList represents a listAlias of EndpointSliceApplyConfiguration.
type EndpointSliceList []*EndpointSliceApplyConfiguration

// EndpointSliceList represents a map of EndpointSliceApplyConfiguration.
type EndpointSliceMap map[string]EndpointSliceApplyConfiguration
