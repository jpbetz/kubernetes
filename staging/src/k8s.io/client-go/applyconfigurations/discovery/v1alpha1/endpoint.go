/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/client-go/applyconfigurations/core/v1"
)

// EndpointApplyConfiguration represents an declarative configuration of the Endpoint type for use
// with apply.
type EndpointApplyConfiguration struct {
	Addresses  *[]string                             `json:"addresses,omitempty"`
	Conditions *EndpointConditionsApplyConfiguration `json:"conditions,omitempty"`
	Hostname   *string                               `json:"hostname,omitempty"`
	TargetRef  *v1.ObjectReferenceApplyConfiguration `json:"targetRef,omitempty"`
	Topology   *map[string]string                    `json:"topology,omitempty"`
}

// EndpointApplyConfiguration constructs an declarative configuration of the Endpoint type for use with
// apply.
func Endpoint() *EndpointApplyConfiguration {
	return &EndpointApplyConfiguration{}
}

// SetAddresses sets the Addresses field in the declarative configuration to the given value.
func (b *EndpointApplyConfiguration) SetAddresses(value []string) *EndpointApplyConfiguration {
	b.Addresses = &value
	return b
}

// RemoveAddresses removes the Addresses field from the declarative configuration.
func (b *EndpointApplyConfiguration) RemoveAddresses() *EndpointApplyConfiguration {
	b.Addresses = nil
	return b
}

// GetAddresses gets the Addresses field from the declarative configuration.
func (b *EndpointApplyConfiguration) GetAddresses() (value []string, ok bool) {
	if v := b.Addresses; v != nil {
		return *v, true
	}
	return value, false
}

// SetConditions sets the Conditions field in the declarative configuration to the given value.
func (b *EndpointApplyConfiguration) SetConditions(value *EndpointConditionsApplyConfiguration) *EndpointApplyConfiguration {
	b.Conditions = value
	return b
}

// RemoveConditions removes the Conditions field from the declarative configuration.
func (b *EndpointApplyConfiguration) RemoveConditions() *EndpointApplyConfiguration {
	b.Conditions = nil
	return b
}

// GetConditions gets the Conditions field from the declarative configuration.
func (b *EndpointApplyConfiguration) GetConditions() (value *EndpointConditionsApplyConfiguration, ok bool) {
	return b.Conditions, b.Conditions != nil
}

// SetHostname sets the Hostname field in the declarative configuration to the given value.
func (b *EndpointApplyConfiguration) SetHostname(value string) *EndpointApplyConfiguration {
	b.Hostname = &value
	return b
}

// RemoveHostname removes the Hostname field from the declarative configuration.
func (b *EndpointApplyConfiguration) RemoveHostname() *EndpointApplyConfiguration {
	b.Hostname = nil
	return b
}

// GetHostname gets the Hostname field from the declarative configuration.
func (b *EndpointApplyConfiguration) GetHostname() (value string, ok bool) {
	if v := b.Hostname; v != nil {
		return *v, true
	}
	return value, false
}

// SetTargetRef sets the TargetRef field in the declarative configuration to the given value.
func (b *EndpointApplyConfiguration) SetTargetRef(value *v1.ObjectReferenceApplyConfiguration) *EndpointApplyConfiguration {
	b.TargetRef = value
	return b
}

// RemoveTargetRef removes the TargetRef field from the declarative configuration.
func (b *EndpointApplyConfiguration) RemoveTargetRef() *EndpointApplyConfiguration {
	b.TargetRef = nil
	return b
}

// GetTargetRef gets the TargetRef field from the declarative configuration.
func (b *EndpointApplyConfiguration) GetTargetRef() (value *v1.ObjectReferenceApplyConfiguration, ok bool) {
	return b.TargetRef, b.TargetRef != nil
}

// SetTopology sets the Topology field in the declarative configuration to the given value.
func (b *EndpointApplyConfiguration) SetTopology(value map[string]string) *EndpointApplyConfiguration {
	b.Topology = &value
	return b
}

// RemoveTopology removes the Topology field from the declarative configuration.
func (b *EndpointApplyConfiguration) RemoveTopology() *EndpointApplyConfiguration {
	b.Topology = nil
	return b
}

// GetTopology gets the Topology field from the declarative configuration.
func (b *EndpointApplyConfiguration) GetTopology() (value map[string]string, ok bool) {
	if v := b.Topology; v != nil {
		return *v, true
	}
	return value, false
}

// EndpointList represents a listAlias of EndpointApplyConfiguration.
type EndpointList []*EndpointApplyConfiguration

// EndpointList represents a map of EndpointApplyConfiguration.
type EndpointMap map[string]EndpointApplyConfiguration
