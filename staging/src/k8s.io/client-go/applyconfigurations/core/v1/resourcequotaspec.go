/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s.io/api/core/v1"
)

// ResourceQuotaSpecApplyConfiguration represents an declarative configuration of the ResourceQuotaSpec type for use
// with apply.
type ResourceQuotaSpecApplyConfiguration struct {
	Hard          *v1.ResourceList                 `json:"hard,omitempty"`
	Scopes        *[]v1.ResourceQuotaScope         `json:"scopes,omitempty"`
	ScopeSelector *ScopeSelectorApplyConfiguration `json:"scopeSelector,omitempty"`
}

// ResourceQuotaSpecApplyConfiguration constructs an declarative configuration of the ResourceQuotaSpec type for use with
// apply.
func ResourceQuotaSpec() *ResourceQuotaSpecApplyConfiguration {
	return &ResourceQuotaSpecApplyConfiguration{}
}

// SetHard sets the Hard field in the declarative configuration to the given value.
func (b *ResourceQuotaSpecApplyConfiguration) SetHard(value v1.ResourceList) *ResourceQuotaSpecApplyConfiguration {
	b.Hard = &value
	return b
}

// RemoveHard removes the Hard field from the declarative configuration.
func (b *ResourceQuotaSpecApplyConfiguration) RemoveHard() *ResourceQuotaSpecApplyConfiguration {
	b.Hard = nil
	return b
}

// GetHard gets the Hard field from the declarative configuration.
func (b *ResourceQuotaSpecApplyConfiguration) GetHard() (value v1.ResourceList, ok bool) {
	if v := b.Hard; v != nil {
		return *v, true
	}
	return value, false
}

// SetScopes sets the Scopes field in the declarative configuration to the given value.
func (b *ResourceQuotaSpecApplyConfiguration) SetScopes(value []v1.ResourceQuotaScope) *ResourceQuotaSpecApplyConfiguration {
	b.Scopes = &value
	return b
}

// RemoveScopes removes the Scopes field from the declarative configuration.
func (b *ResourceQuotaSpecApplyConfiguration) RemoveScopes() *ResourceQuotaSpecApplyConfiguration {
	b.Scopes = nil
	return b
}

// GetScopes gets the Scopes field from the declarative configuration.
func (b *ResourceQuotaSpecApplyConfiguration) GetScopes() (value []v1.ResourceQuotaScope, ok bool) {
	if v := b.Scopes; v != nil {
		return *v, true
	}
	return value, false
}

// SetScopeSelector sets the ScopeSelector field in the declarative configuration to the given value.
func (b *ResourceQuotaSpecApplyConfiguration) SetScopeSelector(value *ScopeSelectorApplyConfiguration) *ResourceQuotaSpecApplyConfiguration {
	b.ScopeSelector = value
	return b
}

// RemoveScopeSelector removes the ScopeSelector field from the declarative configuration.
func (b *ResourceQuotaSpecApplyConfiguration) RemoveScopeSelector() *ResourceQuotaSpecApplyConfiguration {
	b.ScopeSelector = nil
	return b
}

// GetScopeSelector gets the ScopeSelector field from the declarative configuration.
func (b *ResourceQuotaSpecApplyConfiguration) GetScopeSelector() (value *ScopeSelectorApplyConfiguration, ok bool) {
	return b.ScopeSelector, b.ScopeSelector != nil
}

// ResourceQuotaSpecList represents a listAlias of ResourceQuotaSpecApplyConfiguration.
type ResourceQuotaSpecList []*ResourceQuotaSpecApplyConfiguration

// ResourceQuotaSpecList represents a map of ResourceQuotaSpecApplyConfiguration.
type ResourceQuotaSpecMap map[string]ResourceQuotaSpecApplyConfiguration
