/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	v1 "k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// CapabilitiesApplyConfiguration represents an declarative configuration of the Capabilities type for use
// with apply.
type CapabilitiesApplyConfiguration struct {
	fields capabilitiesFields
}

// CapabilitiesApplyConfiguration constructs an declarative configuration of the Capabilities type for use with
// apply.
func Capabilities() *CapabilitiesApplyConfiguration {
	return &CapabilitiesApplyConfiguration{}
}

// capabilitiesFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in CapabilitiesApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type capabilitiesFields struct {
	Add  *[]v1.Capability `json:"add,omitempty"`
	Drop *[]v1.Capability `json:"drop,omitempty"`
}

// SetAdd sets the Add field in the declarative configuration to the given value.
func (b *CapabilitiesApplyConfiguration) SetAdd(value []v1.Capability) *CapabilitiesApplyConfiguration {
	b.fields.Add = &value
	return b
}

// RemoveAdd removes the Add field from the declarative configuration.
func (b *CapabilitiesApplyConfiguration) RemoveAdd() *CapabilitiesApplyConfiguration {
	b.fields.Add = nil
	return b
}

// GetAdd gets the Add field from the declarative configuration.
func (b *CapabilitiesApplyConfiguration) GetAdd() (value []v1.Capability, ok bool) {
	if v := b.fields.Add; v != nil {
		return *v, true
	}
	return value, false
}

// SetDrop sets the Drop field in the declarative configuration to the given value.
func (b *CapabilitiesApplyConfiguration) SetDrop(value []v1.Capability) *CapabilitiesApplyConfiguration {
	b.fields.Drop = &value
	return b
}

// RemoveDrop removes the Drop field from the declarative configuration.
func (b *CapabilitiesApplyConfiguration) RemoveDrop() *CapabilitiesApplyConfiguration {
	b.fields.Drop = nil
	return b
}

// GetDrop gets the Drop field from the declarative configuration.
func (b *CapabilitiesApplyConfiguration) GetDrop() (value []v1.Capability, ok bool) {
	if v := b.fields.Drop; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts CapabilitiesApplyConfiguration to unstructured.
func (b *CapabilitiesApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to CapabilitiesApplyConfiguration, replacing the contents
// of CapabilitiesApplyConfiguration.
func (b *CapabilitiesApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &capabilitiesFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals CapabilitiesApplyConfiguration to JSON.
func (b *CapabilitiesApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into CapabilitiesApplyConfiguration, replacing the contents of
// CapabilitiesApplyConfiguration.
func (b *CapabilitiesApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// CapabilitiesList represents a listAlias of CapabilitiesApplyConfiguration.
type CapabilitiesList []*CapabilitiesApplyConfiguration

// CapabilitiesList represents a map of CapabilitiesApplyConfiguration.
type CapabilitiesMap map[string]CapabilitiesApplyConfiguration

func (b *CapabilitiesApplyConfiguration) preMarshal() {
}
func (b *CapabilitiesApplyConfiguration) postUnmarshal() {
}
