/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// CinderVolumeSourceApplyConfiguration represents an declarative configuration of the CinderVolumeSource type for use
// with apply.
type CinderVolumeSourceApplyConfiguration struct {
	VolumeID  *string                                 `json:"volumeID,omitempty"`
	FSType    *string                                 `json:"fsType,omitempty"`
	ReadOnly  *bool                                   `json:"readOnly,omitempty"`
	SecretRef *LocalObjectReferenceApplyConfiguration `json:"secretRef,omitempty"`
}

// CinderVolumeSourceApplyConfiguration constructs an declarative configuration of the CinderVolumeSource type for use with
// apply.
func CinderVolumeSource() *CinderVolumeSourceApplyConfiguration {
	return &CinderVolumeSourceApplyConfiguration{}
}

// SetVolumeID sets the VolumeID field in the declarative configuration to the given value.
func (b *CinderVolumeSourceApplyConfiguration) SetVolumeID(value string) *CinderVolumeSourceApplyConfiguration {
	b.VolumeID = &value
	return b
}

// RemoveVolumeID removes the VolumeID field from the declarative configuration.
func (b *CinderVolumeSourceApplyConfiguration) RemoveVolumeID() *CinderVolumeSourceApplyConfiguration {
	b.VolumeID = nil
	return b
}

// GetVolumeID gets the VolumeID field from the declarative configuration.
func (b *CinderVolumeSourceApplyConfiguration) GetVolumeID() (value string, ok bool) {
	if v := b.VolumeID; v != nil {
		return *v, true
	}
	return value, false
}

// SetFSType sets the FSType field in the declarative configuration to the given value.
func (b *CinderVolumeSourceApplyConfiguration) SetFSType(value string) *CinderVolumeSourceApplyConfiguration {
	b.FSType = &value
	return b
}

// RemoveFSType removes the FSType field from the declarative configuration.
func (b *CinderVolumeSourceApplyConfiguration) RemoveFSType() *CinderVolumeSourceApplyConfiguration {
	b.FSType = nil
	return b
}

// GetFSType gets the FSType field from the declarative configuration.
func (b *CinderVolumeSourceApplyConfiguration) GetFSType() (value string, ok bool) {
	if v := b.FSType; v != nil {
		return *v, true
	}
	return value, false
}

// SetReadOnly sets the ReadOnly field in the declarative configuration to the given value.
func (b *CinderVolumeSourceApplyConfiguration) SetReadOnly(value bool) *CinderVolumeSourceApplyConfiguration {
	b.ReadOnly = &value
	return b
}

// RemoveReadOnly removes the ReadOnly field from the declarative configuration.
func (b *CinderVolumeSourceApplyConfiguration) RemoveReadOnly() *CinderVolumeSourceApplyConfiguration {
	b.ReadOnly = nil
	return b
}

// GetReadOnly gets the ReadOnly field from the declarative configuration.
func (b *CinderVolumeSourceApplyConfiguration) GetReadOnly() (value bool, ok bool) {
	if v := b.ReadOnly; v != nil {
		return *v, true
	}
	return value, false
}

// SetSecretRef sets the SecretRef field in the declarative configuration to the given value.
func (b *CinderVolumeSourceApplyConfiguration) SetSecretRef(value *LocalObjectReferenceApplyConfiguration) *CinderVolumeSourceApplyConfiguration {
	b.SecretRef = value
	return b
}

// RemoveSecretRef removes the SecretRef field from the declarative configuration.
func (b *CinderVolumeSourceApplyConfiguration) RemoveSecretRef() *CinderVolumeSourceApplyConfiguration {
	b.SecretRef = nil
	return b
}

// GetSecretRef gets the SecretRef field from the declarative configuration.
func (b *CinderVolumeSourceApplyConfiguration) GetSecretRef() (value *LocalObjectReferenceApplyConfiguration, ok bool) {
	return b.SecretRef, b.SecretRef != nil
}

// CinderVolumeSourceList represents a listAlias of CinderVolumeSourceApplyConfiguration.
type CinderVolumeSourceList []*CinderVolumeSourceApplyConfiguration

// CinderVolumeSourceList represents a map of CinderVolumeSourceApplyConfiguration.
type CinderVolumeSourceMap map[string]CinderVolumeSourceApplyConfiguration
