/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	corev1 "k8s.io/api/core/v1"
)

// ServiceSpecApplyConfiguration represents an declarative configuration of the ServiceSpec type for use
// with apply.
type ServiceSpecApplyConfiguration struct {
	Ports                    *ServicePortList                         `json:"ports,omitempty"`
	Selector                 *map[string]string                       `json:"selector,omitempty"`
	ClusterIP                *string                                  `json:"clusterIP,omitempty"`
	ClusterIPs               *[]string                                `json:"clusterIPs,omitempty"`
	Type                     *corev1.ServiceType                      `json:"type,omitempty"`
	ExternalIPs              *[]string                                `json:"externalIPs,omitempty"`
	SessionAffinity          *corev1.ServiceAffinity                  `json:"sessionAffinity,omitempty"`
	LoadBalancerIP           *string                                  `json:"loadBalancerIP,omitempty"`
	LoadBalancerSourceRanges *[]string                                `json:"loadBalancerSourceRanges,omitempty"`
	ExternalName             *string                                  `json:"externalName,omitempty"`
	ExternalTrafficPolicy    *corev1.ServiceExternalTrafficPolicyType `json:"externalTrafficPolicy,omitempty"`
	HealthCheckNodePort      *int32                                   `json:"healthCheckNodePort,omitempty"`
	PublishNotReadyAddresses *bool                                    `json:"publishNotReadyAddresses,omitempty"`
	SessionAffinityConfig    *SessionAffinityConfigApplyConfiguration `json:"sessionAffinityConfig,omitempty"`
	IPFamilies               *[]corev1.IPFamily                       `json:"ipFamilies,omitempty"`
	TopologyKeys             *[]string                                `json:"topologyKeys,omitempty"`
	IPFamilyPolicy           *corev1.IPFamilyPolicyType               `json:"ipFamilyPolicy,omitempty"`
}

// ServiceSpecApplyConfiguration constructs an declarative configuration of the ServiceSpec type for use with
// apply.
func ServiceSpec() *ServiceSpecApplyConfiguration {
	return &ServiceSpecApplyConfiguration{}
}

// SetPorts sets the Ports field in the declarative configuration to the given value.
func (b *ServiceSpecApplyConfiguration) SetPorts(value ServicePortList) *ServiceSpecApplyConfiguration {
	b.Ports = &value
	return b
}

// RemovePorts removes the Ports field from the declarative configuration.
func (b *ServiceSpecApplyConfiguration) RemovePorts() *ServiceSpecApplyConfiguration {
	b.Ports = nil
	return b
}

// GetPorts gets the Ports field from the declarative configuration.
func (b *ServiceSpecApplyConfiguration) GetPorts() (value ServicePortList, ok bool) {
	if v := b.Ports; v != nil {
		return *v, true
	}
	return value, false
}

// SetSelector sets the Selector field in the declarative configuration to the given value.
func (b *ServiceSpecApplyConfiguration) SetSelector(value map[string]string) *ServiceSpecApplyConfiguration {
	b.Selector = &value
	return b
}

// RemoveSelector removes the Selector field from the declarative configuration.
func (b *ServiceSpecApplyConfiguration) RemoveSelector() *ServiceSpecApplyConfiguration {
	b.Selector = nil
	return b
}

// GetSelector gets the Selector field from the declarative configuration.
func (b *ServiceSpecApplyConfiguration) GetSelector() (value map[string]string, ok bool) {
	if v := b.Selector; v != nil {
		return *v, true
	}
	return value, false
}

// SetClusterIP sets the ClusterIP field in the declarative configuration to the given value.
func (b *ServiceSpecApplyConfiguration) SetClusterIP(value string) *ServiceSpecApplyConfiguration {
	b.ClusterIP = &value
	return b
}

// RemoveClusterIP removes the ClusterIP field from the declarative configuration.
func (b *ServiceSpecApplyConfiguration) RemoveClusterIP() *ServiceSpecApplyConfiguration {
	b.ClusterIP = nil
	return b
}

// GetClusterIP gets the ClusterIP field from the declarative configuration.
func (b *ServiceSpecApplyConfiguration) GetClusterIP() (value string, ok bool) {
	if v := b.ClusterIP; v != nil {
		return *v, true
	}
	return value, false
}

// SetClusterIPs sets the ClusterIPs field in the declarative configuration to the given value.
func (b *ServiceSpecApplyConfiguration) SetClusterIPs(value []string) *ServiceSpecApplyConfiguration {
	b.ClusterIPs = &value
	return b
}

// RemoveClusterIPs removes the ClusterIPs field from the declarative configuration.
func (b *ServiceSpecApplyConfiguration) RemoveClusterIPs() *ServiceSpecApplyConfiguration {
	b.ClusterIPs = nil
	return b
}

// GetClusterIPs gets the ClusterIPs field from the declarative configuration.
func (b *ServiceSpecApplyConfiguration) GetClusterIPs() (value []string, ok bool) {
	if v := b.ClusterIPs; v != nil {
		return *v, true
	}
	return value, false
}

// SetType sets the Type field in the declarative configuration to the given value.
func (b *ServiceSpecApplyConfiguration) SetType(value corev1.ServiceType) *ServiceSpecApplyConfiguration {
	b.Type = &value
	return b
}

// RemoveType removes the Type field from the declarative configuration.
func (b *ServiceSpecApplyConfiguration) RemoveType() *ServiceSpecApplyConfiguration {
	b.Type = nil
	return b
}

// GetType gets the Type field from the declarative configuration.
func (b *ServiceSpecApplyConfiguration) GetType() (value corev1.ServiceType, ok bool) {
	if v := b.Type; v != nil {
		return *v, true
	}
	return value, false
}

// SetExternalIPs sets the ExternalIPs field in the declarative configuration to the given value.
func (b *ServiceSpecApplyConfiguration) SetExternalIPs(value []string) *ServiceSpecApplyConfiguration {
	b.ExternalIPs = &value
	return b
}

// RemoveExternalIPs removes the ExternalIPs field from the declarative configuration.
func (b *ServiceSpecApplyConfiguration) RemoveExternalIPs() *ServiceSpecApplyConfiguration {
	b.ExternalIPs = nil
	return b
}

// GetExternalIPs gets the ExternalIPs field from the declarative configuration.
func (b *ServiceSpecApplyConfiguration) GetExternalIPs() (value []string, ok bool) {
	if v := b.ExternalIPs; v != nil {
		return *v, true
	}
	return value, false
}

// SetSessionAffinity sets the SessionAffinity field in the declarative configuration to the given value.
func (b *ServiceSpecApplyConfiguration) SetSessionAffinity(value corev1.ServiceAffinity) *ServiceSpecApplyConfiguration {
	b.SessionAffinity = &value
	return b
}

// RemoveSessionAffinity removes the SessionAffinity field from the declarative configuration.
func (b *ServiceSpecApplyConfiguration) RemoveSessionAffinity() *ServiceSpecApplyConfiguration {
	b.SessionAffinity = nil
	return b
}

// GetSessionAffinity gets the SessionAffinity field from the declarative configuration.
func (b *ServiceSpecApplyConfiguration) GetSessionAffinity() (value corev1.ServiceAffinity, ok bool) {
	if v := b.SessionAffinity; v != nil {
		return *v, true
	}
	return value, false
}

// SetLoadBalancerIP sets the LoadBalancerIP field in the declarative configuration to the given value.
func (b *ServiceSpecApplyConfiguration) SetLoadBalancerIP(value string) *ServiceSpecApplyConfiguration {
	b.LoadBalancerIP = &value
	return b
}

// RemoveLoadBalancerIP removes the LoadBalancerIP field from the declarative configuration.
func (b *ServiceSpecApplyConfiguration) RemoveLoadBalancerIP() *ServiceSpecApplyConfiguration {
	b.LoadBalancerIP = nil
	return b
}

// GetLoadBalancerIP gets the LoadBalancerIP field from the declarative configuration.
func (b *ServiceSpecApplyConfiguration) GetLoadBalancerIP() (value string, ok bool) {
	if v := b.LoadBalancerIP; v != nil {
		return *v, true
	}
	return value, false
}

// SetLoadBalancerSourceRanges sets the LoadBalancerSourceRanges field in the declarative configuration to the given value.
func (b *ServiceSpecApplyConfiguration) SetLoadBalancerSourceRanges(value []string) *ServiceSpecApplyConfiguration {
	b.LoadBalancerSourceRanges = &value
	return b
}

// RemoveLoadBalancerSourceRanges removes the LoadBalancerSourceRanges field from the declarative configuration.
func (b *ServiceSpecApplyConfiguration) RemoveLoadBalancerSourceRanges() *ServiceSpecApplyConfiguration {
	b.LoadBalancerSourceRanges = nil
	return b
}

// GetLoadBalancerSourceRanges gets the LoadBalancerSourceRanges field from the declarative configuration.
func (b *ServiceSpecApplyConfiguration) GetLoadBalancerSourceRanges() (value []string, ok bool) {
	if v := b.LoadBalancerSourceRanges; v != nil {
		return *v, true
	}
	return value, false
}

// SetExternalName sets the ExternalName field in the declarative configuration to the given value.
func (b *ServiceSpecApplyConfiguration) SetExternalName(value string) *ServiceSpecApplyConfiguration {
	b.ExternalName = &value
	return b
}

// RemoveExternalName removes the ExternalName field from the declarative configuration.
func (b *ServiceSpecApplyConfiguration) RemoveExternalName() *ServiceSpecApplyConfiguration {
	b.ExternalName = nil
	return b
}

// GetExternalName gets the ExternalName field from the declarative configuration.
func (b *ServiceSpecApplyConfiguration) GetExternalName() (value string, ok bool) {
	if v := b.ExternalName; v != nil {
		return *v, true
	}
	return value, false
}

// SetExternalTrafficPolicy sets the ExternalTrafficPolicy field in the declarative configuration to the given value.
func (b *ServiceSpecApplyConfiguration) SetExternalTrafficPolicy(value corev1.ServiceExternalTrafficPolicyType) *ServiceSpecApplyConfiguration {
	b.ExternalTrafficPolicy = &value
	return b
}

// RemoveExternalTrafficPolicy removes the ExternalTrafficPolicy field from the declarative configuration.
func (b *ServiceSpecApplyConfiguration) RemoveExternalTrafficPolicy() *ServiceSpecApplyConfiguration {
	b.ExternalTrafficPolicy = nil
	return b
}

// GetExternalTrafficPolicy gets the ExternalTrafficPolicy field from the declarative configuration.
func (b *ServiceSpecApplyConfiguration) GetExternalTrafficPolicy() (value corev1.ServiceExternalTrafficPolicyType, ok bool) {
	if v := b.ExternalTrafficPolicy; v != nil {
		return *v, true
	}
	return value, false
}

// SetHealthCheckNodePort sets the HealthCheckNodePort field in the declarative configuration to the given value.
func (b *ServiceSpecApplyConfiguration) SetHealthCheckNodePort(value int32) *ServiceSpecApplyConfiguration {
	b.HealthCheckNodePort = &value
	return b
}

// RemoveHealthCheckNodePort removes the HealthCheckNodePort field from the declarative configuration.
func (b *ServiceSpecApplyConfiguration) RemoveHealthCheckNodePort() *ServiceSpecApplyConfiguration {
	b.HealthCheckNodePort = nil
	return b
}

// GetHealthCheckNodePort gets the HealthCheckNodePort field from the declarative configuration.
func (b *ServiceSpecApplyConfiguration) GetHealthCheckNodePort() (value int32, ok bool) {
	if v := b.HealthCheckNodePort; v != nil {
		return *v, true
	}
	return value, false
}

// SetPublishNotReadyAddresses sets the PublishNotReadyAddresses field in the declarative configuration to the given value.
func (b *ServiceSpecApplyConfiguration) SetPublishNotReadyAddresses(value bool) *ServiceSpecApplyConfiguration {
	b.PublishNotReadyAddresses = &value
	return b
}

// RemovePublishNotReadyAddresses removes the PublishNotReadyAddresses field from the declarative configuration.
func (b *ServiceSpecApplyConfiguration) RemovePublishNotReadyAddresses() *ServiceSpecApplyConfiguration {
	b.PublishNotReadyAddresses = nil
	return b
}

// GetPublishNotReadyAddresses gets the PublishNotReadyAddresses field from the declarative configuration.
func (b *ServiceSpecApplyConfiguration) GetPublishNotReadyAddresses() (value bool, ok bool) {
	if v := b.PublishNotReadyAddresses; v != nil {
		return *v, true
	}
	return value, false
}

// SetSessionAffinityConfig sets the SessionAffinityConfig field in the declarative configuration to the given value.
func (b *ServiceSpecApplyConfiguration) SetSessionAffinityConfig(value *SessionAffinityConfigApplyConfiguration) *ServiceSpecApplyConfiguration {
	b.SessionAffinityConfig = value
	return b
}

// RemoveSessionAffinityConfig removes the SessionAffinityConfig field from the declarative configuration.
func (b *ServiceSpecApplyConfiguration) RemoveSessionAffinityConfig() *ServiceSpecApplyConfiguration {
	b.SessionAffinityConfig = nil
	return b
}

// GetSessionAffinityConfig gets the SessionAffinityConfig field from the declarative configuration.
func (b *ServiceSpecApplyConfiguration) GetSessionAffinityConfig() (value *SessionAffinityConfigApplyConfiguration, ok bool) {
	return b.SessionAffinityConfig, b.SessionAffinityConfig != nil
}

// SetIPFamilies sets the IPFamilies field in the declarative configuration to the given value.
func (b *ServiceSpecApplyConfiguration) SetIPFamilies(value []corev1.IPFamily) *ServiceSpecApplyConfiguration {
	b.IPFamilies = &value
	return b
}

// RemoveIPFamilies removes the IPFamilies field from the declarative configuration.
func (b *ServiceSpecApplyConfiguration) RemoveIPFamilies() *ServiceSpecApplyConfiguration {
	b.IPFamilies = nil
	return b
}

// GetIPFamilies gets the IPFamilies field from the declarative configuration.
func (b *ServiceSpecApplyConfiguration) GetIPFamilies() (value []corev1.IPFamily, ok bool) {
	if v := b.IPFamilies; v != nil {
		return *v, true
	}
	return value, false
}

// SetTopologyKeys sets the TopologyKeys field in the declarative configuration to the given value.
func (b *ServiceSpecApplyConfiguration) SetTopologyKeys(value []string) *ServiceSpecApplyConfiguration {
	b.TopologyKeys = &value
	return b
}

// RemoveTopologyKeys removes the TopologyKeys field from the declarative configuration.
func (b *ServiceSpecApplyConfiguration) RemoveTopologyKeys() *ServiceSpecApplyConfiguration {
	b.TopologyKeys = nil
	return b
}

// GetTopologyKeys gets the TopologyKeys field from the declarative configuration.
func (b *ServiceSpecApplyConfiguration) GetTopologyKeys() (value []string, ok bool) {
	if v := b.TopologyKeys; v != nil {
		return *v, true
	}
	return value, false
}

// SetIPFamilyPolicy sets the IPFamilyPolicy field in the declarative configuration to the given value.
func (b *ServiceSpecApplyConfiguration) SetIPFamilyPolicy(value corev1.IPFamilyPolicyType) *ServiceSpecApplyConfiguration {
	b.IPFamilyPolicy = &value
	return b
}

// RemoveIPFamilyPolicy removes the IPFamilyPolicy field from the declarative configuration.
func (b *ServiceSpecApplyConfiguration) RemoveIPFamilyPolicy() *ServiceSpecApplyConfiguration {
	b.IPFamilyPolicy = nil
	return b
}

// GetIPFamilyPolicy gets the IPFamilyPolicy field from the declarative configuration.
func (b *ServiceSpecApplyConfiguration) GetIPFamilyPolicy() (value corev1.IPFamilyPolicyType, ok bool) {
	if v := b.IPFamilyPolicy; v != nil {
		return *v, true
	}
	return value, false
}

// ServiceSpecList represents a listAlias of ServiceSpecApplyConfiguration.
type ServiceSpecList []*ServiceSpecApplyConfiguration

// ServiceSpecList represents a map of ServiceSpecApplyConfiguration.
type ServiceSpecMap map[string]ServiceSpecApplyConfiguration
