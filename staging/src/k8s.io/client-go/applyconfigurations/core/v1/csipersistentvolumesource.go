/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// CSIPersistentVolumeSourceApplyConfiguration represents an declarative configuration of the CSIPersistentVolumeSource type for use
// with apply.
type CSIPersistentVolumeSourceApplyConfiguration struct {
	Driver                     *string                            `json:"driver,omitempty"`
	VolumeHandle               *string                            `json:"volumeHandle,omitempty"`
	ReadOnly                   *bool                              `json:"readOnly,omitempty"`
	FSType                     *string                            `json:"fsType,omitempty"`
	VolumeAttributes           *map[string]string                 `json:"volumeAttributes,omitempty"`
	ControllerPublishSecretRef *SecretReferenceApplyConfiguration `json:"controllerPublishSecretRef,omitempty"`
	NodeStageSecretRef         *SecretReferenceApplyConfiguration `json:"nodeStageSecretRef,omitempty"`
	NodePublishSecretRef       *SecretReferenceApplyConfiguration `json:"nodePublishSecretRef,omitempty"`
	ControllerExpandSecretRef  *SecretReferenceApplyConfiguration `json:"controllerExpandSecretRef,omitempty"`
}

// CSIPersistentVolumeSourceApplyConfiguration constructs an declarative configuration of the CSIPersistentVolumeSource type for use with
// apply.
func CSIPersistentVolumeSource() *CSIPersistentVolumeSourceApplyConfiguration {
	return &CSIPersistentVolumeSourceApplyConfiguration{}
}

// SetDriver sets the Driver field in the declarative configuration to the given value.
func (b *CSIPersistentVolumeSourceApplyConfiguration) SetDriver(value string) *CSIPersistentVolumeSourceApplyConfiguration {
	b.Driver = &value
	return b
}

// RemoveDriver removes the Driver field from the declarative configuration.
func (b *CSIPersistentVolumeSourceApplyConfiguration) RemoveDriver() *CSIPersistentVolumeSourceApplyConfiguration {
	b.Driver = nil
	return b
}

// GetDriver gets the Driver field from the declarative configuration.
func (b *CSIPersistentVolumeSourceApplyConfiguration) GetDriver() (value string, ok bool) {
	if v := b.Driver; v != nil {
		return *v, true
	}
	return value, false
}

// SetVolumeHandle sets the VolumeHandle field in the declarative configuration to the given value.
func (b *CSIPersistentVolumeSourceApplyConfiguration) SetVolumeHandle(value string) *CSIPersistentVolumeSourceApplyConfiguration {
	b.VolumeHandle = &value
	return b
}

// RemoveVolumeHandle removes the VolumeHandle field from the declarative configuration.
func (b *CSIPersistentVolumeSourceApplyConfiguration) RemoveVolumeHandle() *CSIPersistentVolumeSourceApplyConfiguration {
	b.VolumeHandle = nil
	return b
}

// GetVolumeHandle gets the VolumeHandle field from the declarative configuration.
func (b *CSIPersistentVolumeSourceApplyConfiguration) GetVolumeHandle() (value string, ok bool) {
	if v := b.VolumeHandle; v != nil {
		return *v, true
	}
	return value, false
}

// SetReadOnly sets the ReadOnly field in the declarative configuration to the given value.
func (b *CSIPersistentVolumeSourceApplyConfiguration) SetReadOnly(value bool) *CSIPersistentVolumeSourceApplyConfiguration {
	b.ReadOnly = &value
	return b
}

// RemoveReadOnly removes the ReadOnly field from the declarative configuration.
func (b *CSIPersistentVolumeSourceApplyConfiguration) RemoveReadOnly() *CSIPersistentVolumeSourceApplyConfiguration {
	b.ReadOnly = nil
	return b
}

// GetReadOnly gets the ReadOnly field from the declarative configuration.
func (b *CSIPersistentVolumeSourceApplyConfiguration) GetReadOnly() (value bool, ok bool) {
	if v := b.ReadOnly; v != nil {
		return *v, true
	}
	return value, false
}

// SetFSType sets the FSType field in the declarative configuration to the given value.
func (b *CSIPersistentVolumeSourceApplyConfiguration) SetFSType(value string) *CSIPersistentVolumeSourceApplyConfiguration {
	b.FSType = &value
	return b
}

// RemoveFSType removes the FSType field from the declarative configuration.
func (b *CSIPersistentVolumeSourceApplyConfiguration) RemoveFSType() *CSIPersistentVolumeSourceApplyConfiguration {
	b.FSType = nil
	return b
}

// GetFSType gets the FSType field from the declarative configuration.
func (b *CSIPersistentVolumeSourceApplyConfiguration) GetFSType() (value string, ok bool) {
	if v := b.FSType; v != nil {
		return *v, true
	}
	return value, false
}

// SetVolumeAttributes sets the VolumeAttributes field in the declarative configuration to the given value.
func (b *CSIPersistentVolumeSourceApplyConfiguration) SetVolumeAttributes(value map[string]string) *CSIPersistentVolumeSourceApplyConfiguration {
	b.VolumeAttributes = &value
	return b
}

// RemoveVolumeAttributes removes the VolumeAttributes field from the declarative configuration.
func (b *CSIPersistentVolumeSourceApplyConfiguration) RemoveVolumeAttributes() *CSIPersistentVolumeSourceApplyConfiguration {
	b.VolumeAttributes = nil
	return b
}

// GetVolumeAttributes gets the VolumeAttributes field from the declarative configuration.
func (b *CSIPersistentVolumeSourceApplyConfiguration) GetVolumeAttributes() (value map[string]string, ok bool) {
	if v := b.VolumeAttributes; v != nil {
		return *v, true
	}
	return value, false
}

// SetControllerPublishSecretRef sets the ControllerPublishSecretRef field in the declarative configuration to the given value.
func (b *CSIPersistentVolumeSourceApplyConfiguration) SetControllerPublishSecretRef(value *SecretReferenceApplyConfiguration) *CSIPersistentVolumeSourceApplyConfiguration {
	b.ControllerPublishSecretRef = value
	return b
}

// RemoveControllerPublishSecretRef removes the ControllerPublishSecretRef field from the declarative configuration.
func (b *CSIPersistentVolumeSourceApplyConfiguration) RemoveControllerPublishSecretRef() *CSIPersistentVolumeSourceApplyConfiguration {
	b.ControllerPublishSecretRef = nil
	return b
}

// GetControllerPublishSecretRef gets the ControllerPublishSecretRef field from the declarative configuration.
func (b *CSIPersistentVolumeSourceApplyConfiguration) GetControllerPublishSecretRef() (value *SecretReferenceApplyConfiguration, ok bool) {
	return b.ControllerPublishSecretRef, b.ControllerPublishSecretRef != nil
}

// SetNodeStageSecretRef sets the NodeStageSecretRef field in the declarative configuration to the given value.
func (b *CSIPersistentVolumeSourceApplyConfiguration) SetNodeStageSecretRef(value *SecretReferenceApplyConfiguration) *CSIPersistentVolumeSourceApplyConfiguration {
	b.NodeStageSecretRef = value
	return b
}

// RemoveNodeStageSecretRef removes the NodeStageSecretRef field from the declarative configuration.
func (b *CSIPersistentVolumeSourceApplyConfiguration) RemoveNodeStageSecretRef() *CSIPersistentVolumeSourceApplyConfiguration {
	b.NodeStageSecretRef = nil
	return b
}

// GetNodeStageSecretRef gets the NodeStageSecretRef field from the declarative configuration.
func (b *CSIPersistentVolumeSourceApplyConfiguration) GetNodeStageSecretRef() (value *SecretReferenceApplyConfiguration, ok bool) {
	return b.NodeStageSecretRef, b.NodeStageSecretRef != nil
}

// SetNodePublishSecretRef sets the NodePublishSecretRef field in the declarative configuration to the given value.
func (b *CSIPersistentVolumeSourceApplyConfiguration) SetNodePublishSecretRef(value *SecretReferenceApplyConfiguration) *CSIPersistentVolumeSourceApplyConfiguration {
	b.NodePublishSecretRef = value
	return b
}

// RemoveNodePublishSecretRef removes the NodePublishSecretRef field from the declarative configuration.
func (b *CSIPersistentVolumeSourceApplyConfiguration) RemoveNodePublishSecretRef() *CSIPersistentVolumeSourceApplyConfiguration {
	b.NodePublishSecretRef = nil
	return b
}

// GetNodePublishSecretRef gets the NodePublishSecretRef field from the declarative configuration.
func (b *CSIPersistentVolumeSourceApplyConfiguration) GetNodePublishSecretRef() (value *SecretReferenceApplyConfiguration, ok bool) {
	return b.NodePublishSecretRef, b.NodePublishSecretRef != nil
}

// SetControllerExpandSecretRef sets the ControllerExpandSecretRef field in the declarative configuration to the given value.
func (b *CSIPersistentVolumeSourceApplyConfiguration) SetControllerExpandSecretRef(value *SecretReferenceApplyConfiguration) *CSIPersistentVolumeSourceApplyConfiguration {
	b.ControllerExpandSecretRef = value
	return b
}

// RemoveControllerExpandSecretRef removes the ControllerExpandSecretRef field from the declarative configuration.
func (b *CSIPersistentVolumeSourceApplyConfiguration) RemoveControllerExpandSecretRef() *CSIPersistentVolumeSourceApplyConfiguration {
	b.ControllerExpandSecretRef = nil
	return b
}

// GetControllerExpandSecretRef gets the ControllerExpandSecretRef field from the declarative configuration.
func (b *CSIPersistentVolumeSourceApplyConfiguration) GetControllerExpandSecretRef() (value *SecretReferenceApplyConfiguration, ok bool) {
	return b.ControllerExpandSecretRef, b.ControllerExpandSecretRef != nil
}

// CSIPersistentVolumeSourceList represents a listAlias of CSIPersistentVolumeSourceApplyConfiguration.
type CSIPersistentVolumeSourceList []*CSIPersistentVolumeSourceApplyConfiguration

// CSIPersistentVolumeSourceList represents a map of CSIPersistentVolumeSourceApplyConfiguration.
type CSIPersistentVolumeSourceMap map[string]CSIPersistentVolumeSourceApplyConfiguration
