/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	v1 "k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// NodeStatusApplyConfiguration represents an declarative configuration of the NodeStatus type for use
// with apply.
type NodeStatusApplyConfiguration struct {
	fields nodeStatusFields
}

// NodeStatusApplyConfiguration constructs an declarative configuration of the NodeStatus type for use with
// apply.
func NodeStatus() *NodeStatusApplyConfiguration {
	return &NodeStatusApplyConfiguration{}
}

// nodeStatusFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in NodeStatusApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type nodeStatusFields struct {
	Capacity        *v1.ResourceList                       `json:"capacity,omitempty"`
	Allocatable     *v1.ResourceList                       `json:"allocatable,omitempty"`
	Phase           *v1.NodePhase                          `json:"phase,omitempty"`
	Conditions      *NodeConditionList                     `json:"conditions,omitempty"`
	Addresses       *NodeAddressList                       `json:"addresses,omitempty"`
	DaemonEndpoints *NodeDaemonEndpointsApplyConfiguration `json:"daemonEndpoints,omitempty"`
	NodeInfo        *NodeSystemInfoApplyConfiguration      `json:"nodeInfo,omitempty"`
	Images          *ContainerImageList                    `json:"images,omitempty"`
	VolumesInUse    *[]v1.UniqueVolumeName                 `json:"volumesInUse,omitempty"`
	VolumesAttached *AttachedVolumeList                    `json:"volumesAttached,omitempty"`
	Config          *NodeConfigStatusApplyConfiguration    `json:"config,omitempty"`
}

// SetCapacity sets the Capacity field in the declarative configuration to the given value.
func (b *NodeStatusApplyConfiguration) SetCapacity(value v1.ResourceList) *NodeStatusApplyConfiguration {
	b.fields.Capacity = &value
	return b
}

// RemoveCapacity removes the Capacity field from the declarative configuration.
func (b *NodeStatusApplyConfiguration) RemoveCapacity() *NodeStatusApplyConfiguration {
	b.fields.Capacity = nil
	return b
}

// GetCapacity gets the Capacity field from the declarative configuration.
func (b *NodeStatusApplyConfiguration) GetCapacity() (value v1.ResourceList, ok bool) {
	if v := b.fields.Capacity; v != nil {
		return *v, true
	}
	return value, false
}

// SetAllocatable sets the Allocatable field in the declarative configuration to the given value.
func (b *NodeStatusApplyConfiguration) SetAllocatable(value v1.ResourceList) *NodeStatusApplyConfiguration {
	b.fields.Allocatable = &value
	return b
}

// RemoveAllocatable removes the Allocatable field from the declarative configuration.
func (b *NodeStatusApplyConfiguration) RemoveAllocatable() *NodeStatusApplyConfiguration {
	b.fields.Allocatable = nil
	return b
}

// GetAllocatable gets the Allocatable field from the declarative configuration.
func (b *NodeStatusApplyConfiguration) GetAllocatable() (value v1.ResourceList, ok bool) {
	if v := b.fields.Allocatable; v != nil {
		return *v, true
	}
	return value, false
}

// SetPhase sets the Phase field in the declarative configuration to the given value.
func (b *NodeStatusApplyConfiguration) SetPhase(value v1.NodePhase) *NodeStatusApplyConfiguration {
	b.fields.Phase = &value
	return b
}

// RemovePhase removes the Phase field from the declarative configuration.
func (b *NodeStatusApplyConfiguration) RemovePhase() *NodeStatusApplyConfiguration {
	b.fields.Phase = nil
	return b
}

// GetPhase gets the Phase field from the declarative configuration.
func (b *NodeStatusApplyConfiguration) GetPhase() (value v1.NodePhase, ok bool) {
	if v := b.fields.Phase; v != nil {
		return *v, true
	}
	return value, false
}

// SetConditions sets the Conditions field in the declarative configuration to the given value.
func (b *NodeStatusApplyConfiguration) SetConditions(value NodeConditionList) *NodeStatusApplyConfiguration {
	b.fields.Conditions = &value
	return b
}

// RemoveConditions removes the Conditions field from the declarative configuration.
func (b *NodeStatusApplyConfiguration) RemoveConditions() *NodeStatusApplyConfiguration {
	b.fields.Conditions = nil
	return b
}

// GetConditions gets the Conditions field from the declarative configuration.
func (b *NodeStatusApplyConfiguration) GetConditions() (value NodeConditionList, ok bool) {
	if v := b.fields.Conditions; v != nil {
		return *v, true
	}
	return value, false
}

// SetAddresses sets the Addresses field in the declarative configuration to the given value.
func (b *NodeStatusApplyConfiguration) SetAddresses(value NodeAddressList) *NodeStatusApplyConfiguration {
	b.fields.Addresses = &value
	return b
}

// RemoveAddresses removes the Addresses field from the declarative configuration.
func (b *NodeStatusApplyConfiguration) RemoveAddresses() *NodeStatusApplyConfiguration {
	b.fields.Addresses = nil
	return b
}

// GetAddresses gets the Addresses field from the declarative configuration.
func (b *NodeStatusApplyConfiguration) GetAddresses() (value NodeAddressList, ok bool) {
	if v := b.fields.Addresses; v != nil {
		return *v, true
	}
	return value, false
}

// SetDaemonEndpoints sets the DaemonEndpoints field in the declarative configuration to the given value.
func (b *NodeStatusApplyConfiguration) SetDaemonEndpoints(value *NodeDaemonEndpointsApplyConfiguration) *NodeStatusApplyConfiguration {
	b.fields.DaemonEndpoints = value
	return b
}

// RemoveDaemonEndpoints removes the DaemonEndpoints field from the declarative configuration.
func (b *NodeStatusApplyConfiguration) RemoveDaemonEndpoints() *NodeStatusApplyConfiguration {
	b.fields.DaemonEndpoints = nil
	return b
}

// GetDaemonEndpoints gets the DaemonEndpoints field from the declarative configuration.
func (b *NodeStatusApplyConfiguration) GetDaemonEndpoints() (value *NodeDaemonEndpointsApplyConfiguration, ok bool) {
	return b.fields.DaemonEndpoints, b.fields.DaemonEndpoints != nil
}

// SetNodeInfo sets the NodeInfo field in the declarative configuration to the given value.
func (b *NodeStatusApplyConfiguration) SetNodeInfo(value *NodeSystemInfoApplyConfiguration) *NodeStatusApplyConfiguration {
	b.fields.NodeInfo = value
	return b
}

// RemoveNodeInfo removes the NodeInfo field from the declarative configuration.
func (b *NodeStatusApplyConfiguration) RemoveNodeInfo() *NodeStatusApplyConfiguration {
	b.fields.NodeInfo = nil
	return b
}

// GetNodeInfo gets the NodeInfo field from the declarative configuration.
func (b *NodeStatusApplyConfiguration) GetNodeInfo() (value *NodeSystemInfoApplyConfiguration, ok bool) {
	return b.fields.NodeInfo, b.fields.NodeInfo != nil
}

// SetImages sets the Images field in the declarative configuration to the given value.
func (b *NodeStatusApplyConfiguration) SetImages(value ContainerImageList) *NodeStatusApplyConfiguration {
	b.fields.Images = &value
	return b
}

// RemoveImages removes the Images field from the declarative configuration.
func (b *NodeStatusApplyConfiguration) RemoveImages() *NodeStatusApplyConfiguration {
	b.fields.Images = nil
	return b
}

// GetImages gets the Images field from the declarative configuration.
func (b *NodeStatusApplyConfiguration) GetImages() (value ContainerImageList, ok bool) {
	if v := b.fields.Images; v != nil {
		return *v, true
	}
	return value, false
}

// SetVolumesInUse sets the VolumesInUse field in the declarative configuration to the given value.
func (b *NodeStatusApplyConfiguration) SetVolumesInUse(value []v1.UniqueVolumeName) *NodeStatusApplyConfiguration {
	b.fields.VolumesInUse = &value
	return b
}

// RemoveVolumesInUse removes the VolumesInUse field from the declarative configuration.
func (b *NodeStatusApplyConfiguration) RemoveVolumesInUse() *NodeStatusApplyConfiguration {
	b.fields.VolumesInUse = nil
	return b
}

// GetVolumesInUse gets the VolumesInUse field from the declarative configuration.
func (b *NodeStatusApplyConfiguration) GetVolumesInUse() (value []v1.UniqueVolumeName, ok bool) {
	if v := b.fields.VolumesInUse; v != nil {
		return *v, true
	}
	return value, false
}

// SetVolumesAttached sets the VolumesAttached field in the declarative configuration to the given value.
func (b *NodeStatusApplyConfiguration) SetVolumesAttached(value AttachedVolumeList) *NodeStatusApplyConfiguration {
	b.fields.VolumesAttached = &value
	return b
}

// RemoveVolumesAttached removes the VolumesAttached field from the declarative configuration.
func (b *NodeStatusApplyConfiguration) RemoveVolumesAttached() *NodeStatusApplyConfiguration {
	b.fields.VolumesAttached = nil
	return b
}

// GetVolumesAttached gets the VolumesAttached field from the declarative configuration.
func (b *NodeStatusApplyConfiguration) GetVolumesAttached() (value AttachedVolumeList, ok bool) {
	if v := b.fields.VolumesAttached; v != nil {
		return *v, true
	}
	return value, false
}

// SetConfig sets the Config field in the declarative configuration to the given value.
func (b *NodeStatusApplyConfiguration) SetConfig(value *NodeConfigStatusApplyConfiguration) *NodeStatusApplyConfiguration {
	b.fields.Config = value
	return b
}

// RemoveConfig removes the Config field from the declarative configuration.
func (b *NodeStatusApplyConfiguration) RemoveConfig() *NodeStatusApplyConfiguration {
	b.fields.Config = nil
	return b
}

// GetConfig gets the Config field from the declarative configuration.
func (b *NodeStatusApplyConfiguration) GetConfig() (value *NodeConfigStatusApplyConfiguration, ok bool) {
	return b.fields.Config, b.fields.Config != nil
}

// ToUnstructured converts NodeStatusApplyConfiguration to unstructured.
func (b *NodeStatusApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to NodeStatusApplyConfiguration, replacing the contents
// of NodeStatusApplyConfiguration.
func (b *NodeStatusApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &nodeStatusFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals NodeStatusApplyConfiguration to JSON.
func (b *NodeStatusApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into NodeStatusApplyConfiguration, replacing the contents of
// NodeStatusApplyConfiguration.
func (b *NodeStatusApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// NodeStatusList represents a listAlias of NodeStatusApplyConfiguration.
type NodeStatusList []*NodeStatusApplyConfiguration

// NodeStatusList represents a map of NodeStatusApplyConfiguration.
type NodeStatusMap map[string]NodeStatusApplyConfiguration

func (b *NodeStatusApplyConfiguration) preMarshal() {
}
func (b *NodeStatusApplyConfiguration) postUnmarshal() {
}
