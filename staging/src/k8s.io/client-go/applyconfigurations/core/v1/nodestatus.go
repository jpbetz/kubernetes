/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s.io/api/core/v1"
)

// NodeStatusApplyConfiguration represents an declarative configuration of the NodeStatus type for use
// with apply.
type NodeStatusApplyConfiguration struct {
	Capacity        *v1.ResourceList                       `json:"capacity,omitempty"`
	Allocatable     *v1.ResourceList                       `json:"allocatable,omitempty"`
	Phase           *v1.NodePhase                          `json:"phase,omitempty"`
	Conditions      *[]NodeConditionApplyConfiguration     `json:"conditions,omitempty"`
	Addresses       *[]NodeAddressApplyConfiguration       `json:"addresses,omitempty"`
	DaemonEndpoints *NodeDaemonEndpointsApplyConfiguration `json:"daemonEndpoints,omitempty"`
	NodeInfo        *NodeSystemInfoApplyConfiguration      `json:"nodeInfo,omitempty"`
	Images          *[]ContainerImageApplyConfiguration    `json:"images,omitempty"`
	VolumesInUse    *[]v1.UniqueVolumeName                 `json:"volumesInUse,omitempty"`
	VolumesAttached *[]AttachedVolumeApplyConfiguration    `json:"volumesAttached,omitempty"`
	Config          *NodeConfigStatusApplyConfiguration    `json:"config,omitempty"`
}

// NodeStatusApplyConfiguration constructs an declarative configuration of the NodeStatus type for use with
// apply.
func NodeStatus() *NodeStatusApplyConfiguration {
	return &NodeStatusApplyConfiguration{}
}

// SetCapacity sets the Capacity field in the declarative configuration to the given value.
func (b *NodeStatusApplyConfiguration) SetCapacity(value v1.ResourceList) *NodeStatusApplyConfiguration {
	b.Capacity = &value
	return b
}

// SetAllocatable sets the Allocatable field in the declarative configuration to the given value.
func (b *NodeStatusApplyConfiguration) SetAllocatable(value v1.ResourceList) *NodeStatusApplyConfiguration {
	b.Allocatable = &value
	return b
}

// SetPhase sets the Phase field in the declarative configuration to the given value.
func (b *NodeStatusApplyConfiguration) SetPhase(value v1.NodePhase) *NodeStatusApplyConfiguration {
	b.Phase = &value
	return b
}

// SetConditions sets the Conditions field in the declarative configuration to the given value.
func (b *NodeStatusApplyConfiguration) SetConditions(value []NodeConditionApplyConfiguration) *NodeStatusApplyConfiguration {
	b.Conditions = &value
	return b
}

// SetAddresses sets the Addresses field in the declarative configuration to the given value.
func (b *NodeStatusApplyConfiguration) SetAddresses(value []NodeAddressApplyConfiguration) *NodeStatusApplyConfiguration {
	b.Addresses = &value
	return b
}

// SetDaemonEndpoints sets the DaemonEndpoints field in the declarative configuration to the given value.
func (b *NodeStatusApplyConfiguration) SetDaemonEndpoints(value *NodeDaemonEndpointsApplyConfiguration) *NodeStatusApplyConfiguration {
	b.DaemonEndpoints = value
	return b
}

// SetNodeInfo sets the NodeInfo field in the declarative configuration to the given value.
func (b *NodeStatusApplyConfiguration) SetNodeInfo(value *NodeSystemInfoApplyConfiguration) *NodeStatusApplyConfiguration {
	b.NodeInfo = value
	return b
}

// SetImages sets the Images field in the declarative configuration to the given value.
func (b *NodeStatusApplyConfiguration) SetImages(value []ContainerImageApplyConfiguration) *NodeStatusApplyConfiguration {
	b.Images = &value
	return b
}

// SetVolumesInUse sets the VolumesInUse field in the declarative configuration to the given value.
func (b *NodeStatusApplyConfiguration) SetVolumesInUse(value []v1.UniqueVolumeName) *NodeStatusApplyConfiguration {
	b.VolumesInUse = &value
	return b
}

// SetVolumesAttached sets the VolumesAttached field in the declarative configuration to the given value.
func (b *NodeStatusApplyConfiguration) SetVolumesAttached(value []AttachedVolumeApplyConfiguration) *NodeStatusApplyConfiguration {
	b.VolumesAttached = &value
	return b
}

// SetConfig sets the Config field in the declarative configuration to the given value.
func (b *NodeStatusApplyConfiguration) SetConfig(value *NodeConfigStatusApplyConfiguration) *NodeStatusApplyConfiguration {
	b.Config = value
	return b
}
