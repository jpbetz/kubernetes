/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// CSIVolumeSourceApplyConfiguration represents an declarative configuration of the CSIVolumeSource type for use
// with apply.
type CSIVolumeSourceApplyConfiguration struct {
	Driver               *string                                 `json:"driver,omitempty"`
	ReadOnly             *bool                                   `json:"readOnly,omitempty"`
	FSType               *string                                 `json:"fsType,omitempty"`
	VolumeAttributes     *map[string]string                      `json:"volumeAttributes,omitempty"`
	NodePublishSecretRef *LocalObjectReferenceApplyConfiguration `json:"nodePublishSecretRef,omitempty"`
}

// CSIVolumeSourceApplyConfiguration constructs an declarative configuration of the CSIVolumeSource type for use with
// apply.
func CSIVolumeSource() *CSIVolumeSourceApplyConfiguration {
	return &CSIVolumeSourceApplyConfiguration{}
}

// SetDriver sets the Driver field in the declarative configuration to the given value.
func (b *CSIVolumeSourceApplyConfiguration) SetDriver(value string) *CSIVolumeSourceApplyConfiguration {
	b.Driver = &value
	return b
}

// RemoveDriver removes the Driver field from the declarative configuration.
func (b *CSIVolumeSourceApplyConfiguration) RemoveDriver() *CSIVolumeSourceApplyConfiguration {
	b.Driver = nil
	return b
}

// GetDriver gets the Driver field from the declarative configuration.
func (b *CSIVolumeSourceApplyConfiguration) GetDriver() (value string, ok bool) {
	if v := b.Driver; v != nil {
		return *v, true
	}
	return value, false
}

// SetReadOnly sets the ReadOnly field in the declarative configuration to the given value.
func (b *CSIVolumeSourceApplyConfiguration) SetReadOnly(value bool) *CSIVolumeSourceApplyConfiguration {
	b.ReadOnly = &value
	return b
}

// RemoveReadOnly removes the ReadOnly field from the declarative configuration.
func (b *CSIVolumeSourceApplyConfiguration) RemoveReadOnly() *CSIVolumeSourceApplyConfiguration {
	b.ReadOnly = nil
	return b
}

// GetReadOnly gets the ReadOnly field from the declarative configuration.
func (b *CSIVolumeSourceApplyConfiguration) GetReadOnly() (value bool, ok bool) {
	if v := b.ReadOnly; v != nil {
		return *v, true
	}
	return value, false
}

// SetFSType sets the FSType field in the declarative configuration to the given value.
func (b *CSIVolumeSourceApplyConfiguration) SetFSType(value string) *CSIVolumeSourceApplyConfiguration {
	b.FSType = &value
	return b
}

// RemoveFSType removes the FSType field from the declarative configuration.
func (b *CSIVolumeSourceApplyConfiguration) RemoveFSType() *CSIVolumeSourceApplyConfiguration {
	b.FSType = nil
	return b
}

// GetFSType gets the FSType field from the declarative configuration.
func (b *CSIVolumeSourceApplyConfiguration) GetFSType() (value string, ok bool) {
	if v := b.FSType; v != nil {
		return *v, true
	}
	return value, false
}

// SetVolumeAttributes sets the VolumeAttributes field in the declarative configuration to the given value.
func (b *CSIVolumeSourceApplyConfiguration) SetVolumeAttributes(value map[string]string) *CSIVolumeSourceApplyConfiguration {
	b.VolumeAttributes = &value
	return b
}

// RemoveVolumeAttributes removes the VolumeAttributes field from the declarative configuration.
func (b *CSIVolumeSourceApplyConfiguration) RemoveVolumeAttributes() *CSIVolumeSourceApplyConfiguration {
	b.VolumeAttributes = nil
	return b
}

// GetVolumeAttributes gets the VolumeAttributes field from the declarative configuration.
func (b *CSIVolumeSourceApplyConfiguration) GetVolumeAttributes() (value map[string]string, ok bool) {
	if v := b.VolumeAttributes; v != nil {
		return *v, true
	}
	return value, false
}

// SetNodePublishSecretRef sets the NodePublishSecretRef field in the declarative configuration to the given value.
func (b *CSIVolumeSourceApplyConfiguration) SetNodePublishSecretRef(value *LocalObjectReferenceApplyConfiguration) *CSIVolumeSourceApplyConfiguration {
	b.NodePublishSecretRef = value
	return b
}

// RemoveNodePublishSecretRef removes the NodePublishSecretRef field from the declarative configuration.
func (b *CSIVolumeSourceApplyConfiguration) RemoveNodePublishSecretRef() *CSIVolumeSourceApplyConfiguration {
	b.NodePublishSecretRef = nil
	return b
}

// GetNodePublishSecretRef gets the NodePublishSecretRef field from the declarative configuration.
func (b *CSIVolumeSourceApplyConfiguration) GetNodePublishSecretRef() (value *LocalObjectReferenceApplyConfiguration, ok bool) {
	return b.NodePublishSecretRef, b.NodePublishSecretRef != nil
}

// CSIVolumeSourceList represents a listAlias of CSIVolumeSourceApplyConfiguration.
type CSIVolumeSourceList []*CSIVolumeSourceApplyConfiguration

// CSIVolumeSourceList represents a map of CSIVolumeSourceApplyConfiguration.
type CSIVolumeSourceMap map[string]CSIVolumeSourceApplyConfiguration
