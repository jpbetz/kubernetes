/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// PortworxVolumeSourceApplyConfiguration represents an declarative configuration of the PortworxVolumeSource type for use
// with apply.
type PortworxVolumeSourceApplyConfiguration struct {
	fields portworxVolumeSourceFields
}

// PortworxVolumeSourceApplyConfiguration constructs an declarative configuration of the PortworxVolumeSource type for use with
// apply.
func PortworxVolumeSource() *PortworxVolumeSourceApplyConfiguration {
	return &PortworxVolumeSourceApplyConfiguration{}
}

// portworxVolumeSourceFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in PortworxVolumeSourceApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type portworxVolumeSourceFields struct {
	VolumeID *string `json:"volumeID,omitempty"`
	FSType   *string `json:"fsType,omitempty"`
	ReadOnly *bool   `json:"readOnly,omitempty"`
}

// SetVolumeID sets the VolumeID field in the declarative configuration to the given value.
func (b *PortworxVolumeSourceApplyConfiguration) SetVolumeID(value string) *PortworxVolumeSourceApplyConfiguration {
	b.fields.VolumeID = &value
	return b
}

// RemoveVolumeID removes the VolumeID field from the declarative configuration.
func (b *PortworxVolumeSourceApplyConfiguration) RemoveVolumeID() *PortworxVolumeSourceApplyConfiguration {
	b.fields.VolumeID = nil
	return b
}

// GetVolumeID gets the VolumeID field from the declarative configuration.
func (b *PortworxVolumeSourceApplyConfiguration) GetVolumeID() (value string, ok bool) {
	if v := b.fields.VolumeID; v != nil {
		return *v, true
	}
	return value, false
}

// SetFSType sets the FSType field in the declarative configuration to the given value.
func (b *PortworxVolumeSourceApplyConfiguration) SetFSType(value string) *PortworxVolumeSourceApplyConfiguration {
	b.fields.FSType = &value
	return b
}

// RemoveFSType removes the FSType field from the declarative configuration.
func (b *PortworxVolumeSourceApplyConfiguration) RemoveFSType() *PortworxVolumeSourceApplyConfiguration {
	b.fields.FSType = nil
	return b
}

// GetFSType gets the FSType field from the declarative configuration.
func (b *PortworxVolumeSourceApplyConfiguration) GetFSType() (value string, ok bool) {
	if v := b.fields.FSType; v != nil {
		return *v, true
	}
	return value, false
}

// SetReadOnly sets the ReadOnly field in the declarative configuration to the given value.
func (b *PortworxVolumeSourceApplyConfiguration) SetReadOnly(value bool) *PortworxVolumeSourceApplyConfiguration {
	b.fields.ReadOnly = &value
	return b
}

// RemoveReadOnly removes the ReadOnly field from the declarative configuration.
func (b *PortworxVolumeSourceApplyConfiguration) RemoveReadOnly() *PortworxVolumeSourceApplyConfiguration {
	b.fields.ReadOnly = nil
	return b
}

// GetReadOnly gets the ReadOnly field from the declarative configuration.
func (b *PortworxVolumeSourceApplyConfiguration) GetReadOnly() (value bool, ok bool) {
	if v := b.fields.ReadOnly; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts PortworxVolumeSourceApplyConfiguration to unstructured.
func (b *PortworxVolumeSourceApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to PortworxVolumeSourceApplyConfiguration, replacing the contents
// of PortworxVolumeSourceApplyConfiguration.
func (b *PortworxVolumeSourceApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &portworxVolumeSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals PortworxVolumeSourceApplyConfiguration to JSON.
func (b *PortworxVolumeSourceApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into PortworxVolumeSourceApplyConfiguration, replacing the contents of
// PortworxVolumeSourceApplyConfiguration.
func (b *PortworxVolumeSourceApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// PortworxVolumeSourceList represents a listAlias of PortworxVolumeSourceApplyConfiguration.
type PortworxVolumeSourceList []*PortworxVolumeSourceApplyConfiguration

// PortworxVolumeSourceList represents a map of PortworxVolumeSourceApplyConfiguration.
type PortworxVolumeSourceMap map[string]PortworxVolumeSourceApplyConfiguration

func (b *PortworxVolumeSourceApplyConfiguration) preMarshal() {
}
func (b *PortworxVolumeSourceApplyConfiguration) postUnmarshal() {
}
