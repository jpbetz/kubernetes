/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	corev1 "k8s.io/api/core/v1"
)

// PodSpecApplyConfiguration represents an declarative configuration of the PodSpec type for use
// with apply.
type PodSpecApplyConfiguration struct {
	Volumes                       *[]VolumeApplyConfiguration                   `json:"volumes,omitempty"`
	InitContainers                *[]ContainerApplyConfiguration                `json:"initContainers,omitempty"`
	Containers                    *[]ContainerApplyConfiguration                `json:"containers,omitempty"`
	EphemeralContainers           *[]EphemeralContainerApplyConfiguration       `json:"ephemeralContainers,omitempty"`
	RestartPolicy                 *corev1.RestartPolicy                         `json:"restartPolicy,omitempty"`
	TerminationGracePeriodSeconds *int64                                        `json:"terminationGracePeriodSeconds,omitempty"`
	ActiveDeadlineSeconds         *int64                                        `json:"activeDeadlineSeconds,omitempty"`
	DNSPolicy                     *corev1.DNSPolicy                             `json:"dnsPolicy,omitempty"`
	NodeSelector                  *map[string]string                            `json:"nodeSelector,omitempty"`
	ServiceAccountName            *string                                       `json:"serviceAccountName,omitempty"`
	DeprecatedServiceAccount      *string                                       `json:"serviceAccount,omitempty"`
	AutomountServiceAccountToken  *bool                                         `json:"automountServiceAccountToken,omitempty"`
	NodeName                      *string                                       `json:"nodeName,omitempty"`
	HostNetwork                   *bool                                         `json:"hostNetwork,omitempty"`
	HostPID                       *bool                                         `json:"hostPID,omitempty"`
	HostIPC                       *bool                                         `json:"hostIPC,omitempty"`
	ShareProcessNamespace         *bool                                         `json:"shareProcessNamespace,omitempty"`
	SecurityContext               *PodSecurityContextApplyConfiguration         `json:"securityContext,omitempty"`
	ImagePullSecrets              *[]LocalObjectReferenceApplyConfiguration     `json:"imagePullSecrets,omitempty"`
	Hostname                      *string                                       `json:"hostname,omitempty"`
	Subdomain                     *string                                       `json:"subdomain,omitempty"`
	Affinity                      *AffinityApplyConfiguration                   `json:"affinity,omitempty"`
	SchedulerName                 *string                                       `json:"schedulerName,omitempty"`
	Tolerations                   *[]TolerationApplyConfiguration               `json:"tolerations,omitempty"`
	HostAliases                   *[]HostAliasApplyConfiguration                `json:"hostAliases,omitempty"`
	PriorityClassName             *string                                       `json:"priorityClassName,omitempty"`
	Priority                      *int32                                        `json:"priority,omitempty"`
	DNSConfig                     *PodDNSConfigApplyConfiguration               `json:"dnsConfig,omitempty"`
	ReadinessGates                *[]PodReadinessGateApplyConfiguration         `json:"readinessGates,omitempty"`
	RuntimeClassName              *string                                       `json:"runtimeClassName,omitempty"`
	EnableServiceLinks            *bool                                         `json:"enableServiceLinks,omitempty"`
	PreemptionPolicy              *corev1.PreemptionPolicy                      `json:"preemptionPolicy,omitempty"`
	Overhead                      *corev1.ResourceList                          `json:"overhead,omitempty"`
	TopologySpreadConstraints     *[]TopologySpreadConstraintApplyConfiguration `json:"topologySpreadConstraints,omitempty"`
	SetHostnameAsFQDN             *bool                                         `json:"setHostnameAsFQDN,omitempty"`
}

// PodSpecApplyConfiguration constructs an declarative configuration of the PodSpec type for use with
// apply.
func PodSpec() *PodSpecApplyConfiguration {
	return &PodSpecApplyConfiguration{}
}

// SetVolumes sets the Volumes field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetVolumes(value []VolumeApplyConfiguration) *PodSpecApplyConfiguration {
	b.Volumes = &value
	return b
}

// SetInitContainers sets the InitContainers field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetInitContainers(value []ContainerApplyConfiguration) *PodSpecApplyConfiguration {
	b.InitContainers = &value
	return b
}

// SetContainers sets the Containers field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetContainers(value []ContainerApplyConfiguration) *PodSpecApplyConfiguration {
	b.Containers = &value
	return b
}

// SetEphemeralContainers sets the EphemeralContainers field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetEphemeralContainers(value []EphemeralContainerApplyConfiguration) *PodSpecApplyConfiguration {
	b.EphemeralContainers = &value
	return b
}

// SetRestartPolicy sets the RestartPolicy field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetRestartPolicy(value corev1.RestartPolicy) *PodSpecApplyConfiguration {
	b.RestartPolicy = &value
	return b
}

// SetTerminationGracePeriodSeconds sets the TerminationGracePeriodSeconds field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetTerminationGracePeriodSeconds(value int64) *PodSpecApplyConfiguration {
	b.TerminationGracePeriodSeconds = &value
	return b
}

// SetActiveDeadlineSeconds sets the ActiveDeadlineSeconds field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetActiveDeadlineSeconds(value int64) *PodSpecApplyConfiguration {
	b.ActiveDeadlineSeconds = &value
	return b
}

// SetDNSPolicy sets the DNSPolicy field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetDNSPolicy(value corev1.DNSPolicy) *PodSpecApplyConfiguration {
	b.DNSPolicy = &value
	return b
}

// SetNodeSelector sets the NodeSelector field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetNodeSelector(value map[string]string) *PodSpecApplyConfiguration {
	b.NodeSelector = &value
	return b
}

// SetServiceAccountName sets the ServiceAccountName field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetServiceAccountName(value string) *PodSpecApplyConfiguration {
	b.ServiceAccountName = &value
	return b
}

// SetDeprecatedServiceAccount sets the DeprecatedServiceAccount field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetDeprecatedServiceAccount(value string) *PodSpecApplyConfiguration {
	b.DeprecatedServiceAccount = &value
	return b
}

// SetAutomountServiceAccountToken sets the AutomountServiceAccountToken field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetAutomountServiceAccountToken(value bool) *PodSpecApplyConfiguration {
	b.AutomountServiceAccountToken = &value
	return b
}

// SetNodeName sets the NodeName field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetNodeName(value string) *PodSpecApplyConfiguration {
	b.NodeName = &value
	return b
}

// SetHostNetwork sets the HostNetwork field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetHostNetwork(value bool) *PodSpecApplyConfiguration {
	b.HostNetwork = &value
	return b
}

// SetHostPID sets the HostPID field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetHostPID(value bool) *PodSpecApplyConfiguration {
	b.HostPID = &value
	return b
}

// SetHostIPC sets the HostIPC field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetHostIPC(value bool) *PodSpecApplyConfiguration {
	b.HostIPC = &value
	return b
}

// SetShareProcessNamespace sets the ShareProcessNamespace field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetShareProcessNamespace(value bool) *PodSpecApplyConfiguration {
	b.ShareProcessNamespace = &value
	return b
}

// SetSecurityContext sets the SecurityContext field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetSecurityContext(value *PodSecurityContextApplyConfiguration) *PodSpecApplyConfiguration {
	b.SecurityContext = value
	return b
}

// SetImagePullSecrets sets the ImagePullSecrets field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetImagePullSecrets(value []LocalObjectReferenceApplyConfiguration) *PodSpecApplyConfiguration {
	b.ImagePullSecrets = &value
	return b
}

// SetHostname sets the Hostname field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetHostname(value string) *PodSpecApplyConfiguration {
	b.Hostname = &value
	return b
}

// SetSubdomain sets the Subdomain field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetSubdomain(value string) *PodSpecApplyConfiguration {
	b.Subdomain = &value
	return b
}

// SetAffinity sets the Affinity field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetAffinity(value *AffinityApplyConfiguration) *PodSpecApplyConfiguration {
	b.Affinity = value
	return b
}

// SetSchedulerName sets the SchedulerName field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetSchedulerName(value string) *PodSpecApplyConfiguration {
	b.SchedulerName = &value
	return b
}

// SetTolerations sets the Tolerations field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetTolerations(value []TolerationApplyConfiguration) *PodSpecApplyConfiguration {
	b.Tolerations = &value
	return b
}

// SetHostAliases sets the HostAliases field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetHostAliases(value []HostAliasApplyConfiguration) *PodSpecApplyConfiguration {
	b.HostAliases = &value
	return b
}

// SetPriorityClassName sets the PriorityClassName field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetPriorityClassName(value string) *PodSpecApplyConfiguration {
	b.PriorityClassName = &value
	return b
}

// SetPriority sets the Priority field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetPriority(value int32) *PodSpecApplyConfiguration {
	b.Priority = &value
	return b
}

// SetDNSConfig sets the DNSConfig field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetDNSConfig(value *PodDNSConfigApplyConfiguration) *PodSpecApplyConfiguration {
	b.DNSConfig = value
	return b
}

// SetReadinessGates sets the ReadinessGates field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetReadinessGates(value []PodReadinessGateApplyConfiguration) *PodSpecApplyConfiguration {
	b.ReadinessGates = &value
	return b
}

// SetRuntimeClassName sets the RuntimeClassName field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetRuntimeClassName(value string) *PodSpecApplyConfiguration {
	b.RuntimeClassName = &value
	return b
}

// SetEnableServiceLinks sets the EnableServiceLinks field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetEnableServiceLinks(value bool) *PodSpecApplyConfiguration {
	b.EnableServiceLinks = &value
	return b
}

// SetPreemptionPolicy sets the PreemptionPolicy field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetPreemptionPolicy(value corev1.PreemptionPolicy) *PodSpecApplyConfiguration {
	b.PreemptionPolicy = &value
	return b
}

// SetOverhead sets the Overhead field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetOverhead(value corev1.ResourceList) *PodSpecApplyConfiguration {
	b.Overhead = &value
	return b
}

// SetTopologySpreadConstraints sets the TopologySpreadConstraints field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetTopologySpreadConstraints(value []TopologySpreadConstraintApplyConfiguration) *PodSpecApplyConfiguration {
	b.TopologySpreadConstraints = &value
	return b
}

// SetSetHostnameAsFQDN sets the SetHostnameAsFQDN field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetSetHostnameAsFQDN(value bool) *PodSpecApplyConfiguration {
	b.SetHostnameAsFQDN = &value
	return b
}
