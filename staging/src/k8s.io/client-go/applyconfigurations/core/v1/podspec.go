/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	corev1 "k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// PodSpecApplyConfiguration represents an declarative configuration of the PodSpec type for use
// with apply.
type PodSpecApplyConfiguration struct {
	fields podSpecFields
}

// PodSpecApplyConfiguration constructs an declarative configuration of the PodSpec type for use with
// apply.
func PodSpec() *PodSpecApplyConfiguration {
	return &PodSpecApplyConfiguration{}
}

// podSpecFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in PodSpecApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type podSpecFields struct {
	Volumes                       *VolumeList                           `json:"volumes,omitempty"`
	InitContainers                *ContainerList                        `json:"initContainers,omitempty"`
	Containers                    *ContainerList                        `json:"containers,omitempty"`
	EphemeralContainers           *EphemeralContainerList               `json:"ephemeralContainers,omitempty"`
	RestartPolicy                 *corev1.RestartPolicy                 `json:"restartPolicy,omitempty"`
	TerminationGracePeriodSeconds *int64                                `json:"terminationGracePeriodSeconds,omitempty"`
	ActiveDeadlineSeconds         *int64                                `json:"activeDeadlineSeconds,omitempty"`
	DNSPolicy                     *corev1.DNSPolicy                     `json:"dnsPolicy,omitempty"`
	NodeSelector                  *map[string]string                    `json:"nodeSelector,omitempty"`
	ServiceAccountName            *string                               `json:"serviceAccountName,omitempty"`
	DeprecatedServiceAccount      *string                               `json:"serviceAccount,omitempty"`
	AutomountServiceAccountToken  *bool                                 `json:"automountServiceAccountToken,omitempty"`
	NodeName                      *string                               `json:"nodeName,omitempty"`
	HostNetwork                   *bool                                 `json:"hostNetwork,omitempty"`
	HostPID                       *bool                                 `json:"hostPID,omitempty"`
	HostIPC                       *bool                                 `json:"hostIPC,omitempty"`
	ShareProcessNamespace         *bool                                 `json:"shareProcessNamespace,omitempty"`
	SecurityContext               *PodSecurityContextApplyConfiguration `json:"securityContext,omitempty"`
	ImagePullSecrets              *LocalObjectReferenceList             `json:"imagePullSecrets,omitempty"`
	Hostname                      *string                               `json:"hostname,omitempty"`
	Subdomain                     *string                               `json:"subdomain,omitempty"`
	Affinity                      *AffinityApplyConfiguration           `json:"affinity,omitempty"`
	SchedulerName                 *string                               `json:"schedulerName,omitempty"`
	Tolerations                   *TolerationList                       `json:"tolerations,omitempty"`
	HostAliases                   *HostAliasList                        `json:"hostAliases,omitempty"`
	PriorityClassName             *string                               `json:"priorityClassName,omitempty"`
	Priority                      *int32                                `json:"priority,omitempty"`
	DNSConfig                     *PodDNSConfigApplyConfiguration       `json:"dnsConfig,omitempty"`
	ReadinessGates                *PodReadinessGateList                 `json:"readinessGates,omitempty"`
	RuntimeClassName              *string                               `json:"runtimeClassName,omitempty"`
	EnableServiceLinks            *bool                                 `json:"enableServiceLinks,omitempty"`
	PreemptionPolicy              *corev1.PreemptionPolicy              `json:"preemptionPolicy,omitempty"`
	Overhead                      *corev1.ResourceList                  `json:"overhead,omitempty"`
	TopologySpreadConstraints     *TopologySpreadConstraintList         `json:"topologySpreadConstraints,omitempty"`
	SetHostnameAsFQDN             *bool                                 `json:"setHostnameAsFQDN,omitempty"`
}

// SetVolumes sets the Volumes field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetVolumes(value VolumeList) *PodSpecApplyConfiguration {
	b.fields.Volumes = &value
	return b
}

// RemoveVolumes removes the Volumes field from the declarative configuration.
func (b *PodSpecApplyConfiguration) RemoveVolumes() *PodSpecApplyConfiguration {
	b.fields.Volumes = nil
	return b
}

// GetVolumes gets the Volumes field from the declarative configuration.
func (b *PodSpecApplyConfiguration) GetVolumes() (value VolumeList, ok bool) {
	if v := b.fields.Volumes; v != nil {
		return *v, true
	}
	return value, false
}

// SetInitContainers sets the InitContainers field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetInitContainers(value ContainerList) *PodSpecApplyConfiguration {
	b.fields.InitContainers = &value
	return b
}

// RemoveInitContainers removes the InitContainers field from the declarative configuration.
func (b *PodSpecApplyConfiguration) RemoveInitContainers() *PodSpecApplyConfiguration {
	b.fields.InitContainers = nil
	return b
}

// GetInitContainers gets the InitContainers field from the declarative configuration.
func (b *PodSpecApplyConfiguration) GetInitContainers() (value ContainerList, ok bool) {
	if v := b.fields.InitContainers; v != nil {
		return *v, true
	}
	return value, false
}

// SetContainers sets the Containers field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetContainers(value ContainerList) *PodSpecApplyConfiguration {
	b.fields.Containers = &value
	return b
}

// RemoveContainers removes the Containers field from the declarative configuration.
func (b *PodSpecApplyConfiguration) RemoveContainers() *PodSpecApplyConfiguration {
	b.fields.Containers = nil
	return b
}

// GetContainers gets the Containers field from the declarative configuration.
func (b *PodSpecApplyConfiguration) GetContainers() (value ContainerList, ok bool) {
	if v := b.fields.Containers; v != nil {
		return *v, true
	}
	return value, false
}

// SetEphemeralContainers sets the EphemeralContainers field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetEphemeralContainers(value EphemeralContainerList) *PodSpecApplyConfiguration {
	b.fields.EphemeralContainers = &value
	return b
}

// RemoveEphemeralContainers removes the EphemeralContainers field from the declarative configuration.
func (b *PodSpecApplyConfiguration) RemoveEphemeralContainers() *PodSpecApplyConfiguration {
	b.fields.EphemeralContainers = nil
	return b
}

// GetEphemeralContainers gets the EphemeralContainers field from the declarative configuration.
func (b *PodSpecApplyConfiguration) GetEphemeralContainers() (value EphemeralContainerList, ok bool) {
	if v := b.fields.EphemeralContainers; v != nil {
		return *v, true
	}
	return value, false
}

// SetRestartPolicy sets the RestartPolicy field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetRestartPolicy(value corev1.RestartPolicy) *PodSpecApplyConfiguration {
	b.fields.RestartPolicy = &value
	return b
}

// RemoveRestartPolicy removes the RestartPolicy field from the declarative configuration.
func (b *PodSpecApplyConfiguration) RemoveRestartPolicy() *PodSpecApplyConfiguration {
	b.fields.RestartPolicy = nil
	return b
}

// GetRestartPolicy gets the RestartPolicy field from the declarative configuration.
func (b *PodSpecApplyConfiguration) GetRestartPolicy() (value corev1.RestartPolicy, ok bool) {
	if v := b.fields.RestartPolicy; v != nil {
		return *v, true
	}
	return value, false
}

// SetTerminationGracePeriodSeconds sets the TerminationGracePeriodSeconds field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetTerminationGracePeriodSeconds(value int64) *PodSpecApplyConfiguration {
	b.fields.TerminationGracePeriodSeconds = &value
	return b
}

// RemoveTerminationGracePeriodSeconds removes the TerminationGracePeriodSeconds field from the declarative configuration.
func (b *PodSpecApplyConfiguration) RemoveTerminationGracePeriodSeconds() *PodSpecApplyConfiguration {
	b.fields.TerminationGracePeriodSeconds = nil
	return b
}

// GetTerminationGracePeriodSeconds gets the TerminationGracePeriodSeconds field from the declarative configuration.
func (b *PodSpecApplyConfiguration) GetTerminationGracePeriodSeconds() (value int64, ok bool) {
	if v := b.fields.TerminationGracePeriodSeconds; v != nil {
		return *v, true
	}
	return value, false
}

// SetActiveDeadlineSeconds sets the ActiveDeadlineSeconds field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetActiveDeadlineSeconds(value int64) *PodSpecApplyConfiguration {
	b.fields.ActiveDeadlineSeconds = &value
	return b
}

// RemoveActiveDeadlineSeconds removes the ActiveDeadlineSeconds field from the declarative configuration.
func (b *PodSpecApplyConfiguration) RemoveActiveDeadlineSeconds() *PodSpecApplyConfiguration {
	b.fields.ActiveDeadlineSeconds = nil
	return b
}

// GetActiveDeadlineSeconds gets the ActiveDeadlineSeconds field from the declarative configuration.
func (b *PodSpecApplyConfiguration) GetActiveDeadlineSeconds() (value int64, ok bool) {
	if v := b.fields.ActiveDeadlineSeconds; v != nil {
		return *v, true
	}
	return value, false
}

// SetDNSPolicy sets the DNSPolicy field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetDNSPolicy(value corev1.DNSPolicy) *PodSpecApplyConfiguration {
	b.fields.DNSPolicy = &value
	return b
}

// RemoveDNSPolicy removes the DNSPolicy field from the declarative configuration.
func (b *PodSpecApplyConfiguration) RemoveDNSPolicy() *PodSpecApplyConfiguration {
	b.fields.DNSPolicy = nil
	return b
}

// GetDNSPolicy gets the DNSPolicy field from the declarative configuration.
func (b *PodSpecApplyConfiguration) GetDNSPolicy() (value corev1.DNSPolicy, ok bool) {
	if v := b.fields.DNSPolicy; v != nil {
		return *v, true
	}
	return value, false
}

// SetNodeSelector sets the NodeSelector field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetNodeSelector(value map[string]string) *PodSpecApplyConfiguration {
	b.fields.NodeSelector = &value
	return b
}

// RemoveNodeSelector removes the NodeSelector field from the declarative configuration.
func (b *PodSpecApplyConfiguration) RemoveNodeSelector() *PodSpecApplyConfiguration {
	b.fields.NodeSelector = nil
	return b
}

// GetNodeSelector gets the NodeSelector field from the declarative configuration.
func (b *PodSpecApplyConfiguration) GetNodeSelector() (value map[string]string, ok bool) {
	if v := b.fields.NodeSelector; v != nil {
		return *v, true
	}
	return value, false
}

// SetServiceAccountName sets the ServiceAccountName field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetServiceAccountName(value string) *PodSpecApplyConfiguration {
	b.fields.ServiceAccountName = &value
	return b
}

// RemoveServiceAccountName removes the ServiceAccountName field from the declarative configuration.
func (b *PodSpecApplyConfiguration) RemoveServiceAccountName() *PodSpecApplyConfiguration {
	b.fields.ServiceAccountName = nil
	return b
}

// GetServiceAccountName gets the ServiceAccountName field from the declarative configuration.
func (b *PodSpecApplyConfiguration) GetServiceAccountName() (value string, ok bool) {
	if v := b.fields.ServiceAccountName; v != nil {
		return *v, true
	}
	return value, false
}

// SetDeprecatedServiceAccount sets the DeprecatedServiceAccount field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetDeprecatedServiceAccount(value string) *PodSpecApplyConfiguration {
	b.fields.DeprecatedServiceAccount = &value
	return b
}

// RemoveDeprecatedServiceAccount removes the DeprecatedServiceAccount field from the declarative configuration.
func (b *PodSpecApplyConfiguration) RemoveDeprecatedServiceAccount() *PodSpecApplyConfiguration {
	b.fields.DeprecatedServiceAccount = nil
	return b
}

// GetDeprecatedServiceAccount gets the DeprecatedServiceAccount field from the declarative configuration.
func (b *PodSpecApplyConfiguration) GetDeprecatedServiceAccount() (value string, ok bool) {
	if v := b.fields.DeprecatedServiceAccount; v != nil {
		return *v, true
	}
	return value, false
}

// SetAutomountServiceAccountToken sets the AutomountServiceAccountToken field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetAutomountServiceAccountToken(value bool) *PodSpecApplyConfiguration {
	b.fields.AutomountServiceAccountToken = &value
	return b
}

// RemoveAutomountServiceAccountToken removes the AutomountServiceAccountToken field from the declarative configuration.
func (b *PodSpecApplyConfiguration) RemoveAutomountServiceAccountToken() *PodSpecApplyConfiguration {
	b.fields.AutomountServiceAccountToken = nil
	return b
}

// GetAutomountServiceAccountToken gets the AutomountServiceAccountToken field from the declarative configuration.
func (b *PodSpecApplyConfiguration) GetAutomountServiceAccountToken() (value bool, ok bool) {
	if v := b.fields.AutomountServiceAccountToken; v != nil {
		return *v, true
	}
	return value, false
}

// SetNodeName sets the NodeName field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetNodeName(value string) *PodSpecApplyConfiguration {
	b.fields.NodeName = &value
	return b
}

// RemoveNodeName removes the NodeName field from the declarative configuration.
func (b *PodSpecApplyConfiguration) RemoveNodeName() *PodSpecApplyConfiguration {
	b.fields.NodeName = nil
	return b
}

// GetNodeName gets the NodeName field from the declarative configuration.
func (b *PodSpecApplyConfiguration) GetNodeName() (value string, ok bool) {
	if v := b.fields.NodeName; v != nil {
		return *v, true
	}
	return value, false
}

// SetHostNetwork sets the HostNetwork field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetHostNetwork(value bool) *PodSpecApplyConfiguration {
	b.fields.HostNetwork = &value
	return b
}

// RemoveHostNetwork removes the HostNetwork field from the declarative configuration.
func (b *PodSpecApplyConfiguration) RemoveHostNetwork() *PodSpecApplyConfiguration {
	b.fields.HostNetwork = nil
	return b
}

// GetHostNetwork gets the HostNetwork field from the declarative configuration.
func (b *PodSpecApplyConfiguration) GetHostNetwork() (value bool, ok bool) {
	if v := b.fields.HostNetwork; v != nil {
		return *v, true
	}
	return value, false
}

// SetHostPID sets the HostPID field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetHostPID(value bool) *PodSpecApplyConfiguration {
	b.fields.HostPID = &value
	return b
}

// RemoveHostPID removes the HostPID field from the declarative configuration.
func (b *PodSpecApplyConfiguration) RemoveHostPID() *PodSpecApplyConfiguration {
	b.fields.HostPID = nil
	return b
}

// GetHostPID gets the HostPID field from the declarative configuration.
func (b *PodSpecApplyConfiguration) GetHostPID() (value bool, ok bool) {
	if v := b.fields.HostPID; v != nil {
		return *v, true
	}
	return value, false
}

// SetHostIPC sets the HostIPC field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetHostIPC(value bool) *PodSpecApplyConfiguration {
	b.fields.HostIPC = &value
	return b
}

// RemoveHostIPC removes the HostIPC field from the declarative configuration.
func (b *PodSpecApplyConfiguration) RemoveHostIPC() *PodSpecApplyConfiguration {
	b.fields.HostIPC = nil
	return b
}

// GetHostIPC gets the HostIPC field from the declarative configuration.
func (b *PodSpecApplyConfiguration) GetHostIPC() (value bool, ok bool) {
	if v := b.fields.HostIPC; v != nil {
		return *v, true
	}
	return value, false
}

// SetShareProcessNamespace sets the ShareProcessNamespace field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetShareProcessNamespace(value bool) *PodSpecApplyConfiguration {
	b.fields.ShareProcessNamespace = &value
	return b
}

// RemoveShareProcessNamespace removes the ShareProcessNamespace field from the declarative configuration.
func (b *PodSpecApplyConfiguration) RemoveShareProcessNamespace() *PodSpecApplyConfiguration {
	b.fields.ShareProcessNamespace = nil
	return b
}

// GetShareProcessNamespace gets the ShareProcessNamespace field from the declarative configuration.
func (b *PodSpecApplyConfiguration) GetShareProcessNamespace() (value bool, ok bool) {
	if v := b.fields.ShareProcessNamespace; v != nil {
		return *v, true
	}
	return value, false
}

// SetSecurityContext sets the SecurityContext field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetSecurityContext(value *PodSecurityContextApplyConfiguration) *PodSpecApplyConfiguration {
	b.fields.SecurityContext = value
	return b
}

// RemoveSecurityContext removes the SecurityContext field from the declarative configuration.
func (b *PodSpecApplyConfiguration) RemoveSecurityContext() *PodSpecApplyConfiguration {
	b.fields.SecurityContext = nil
	return b
}

// GetSecurityContext gets the SecurityContext field from the declarative configuration.
func (b *PodSpecApplyConfiguration) GetSecurityContext() (value *PodSecurityContextApplyConfiguration, ok bool) {
	return b.fields.SecurityContext, b.fields.SecurityContext != nil
}

// SetImagePullSecrets sets the ImagePullSecrets field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetImagePullSecrets(value LocalObjectReferenceList) *PodSpecApplyConfiguration {
	b.fields.ImagePullSecrets = &value
	return b
}

// RemoveImagePullSecrets removes the ImagePullSecrets field from the declarative configuration.
func (b *PodSpecApplyConfiguration) RemoveImagePullSecrets() *PodSpecApplyConfiguration {
	b.fields.ImagePullSecrets = nil
	return b
}

// GetImagePullSecrets gets the ImagePullSecrets field from the declarative configuration.
func (b *PodSpecApplyConfiguration) GetImagePullSecrets() (value LocalObjectReferenceList, ok bool) {
	if v := b.fields.ImagePullSecrets; v != nil {
		return *v, true
	}
	return value, false
}

// SetHostname sets the Hostname field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetHostname(value string) *PodSpecApplyConfiguration {
	b.fields.Hostname = &value
	return b
}

// RemoveHostname removes the Hostname field from the declarative configuration.
func (b *PodSpecApplyConfiguration) RemoveHostname() *PodSpecApplyConfiguration {
	b.fields.Hostname = nil
	return b
}

// GetHostname gets the Hostname field from the declarative configuration.
func (b *PodSpecApplyConfiguration) GetHostname() (value string, ok bool) {
	if v := b.fields.Hostname; v != nil {
		return *v, true
	}
	return value, false
}

// SetSubdomain sets the Subdomain field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetSubdomain(value string) *PodSpecApplyConfiguration {
	b.fields.Subdomain = &value
	return b
}

// RemoveSubdomain removes the Subdomain field from the declarative configuration.
func (b *PodSpecApplyConfiguration) RemoveSubdomain() *PodSpecApplyConfiguration {
	b.fields.Subdomain = nil
	return b
}

// GetSubdomain gets the Subdomain field from the declarative configuration.
func (b *PodSpecApplyConfiguration) GetSubdomain() (value string, ok bool) {
	if v := b.fields.Subdomain; v != nil {
		return *v, true
	}
	return value, false
}

// SetAffinity sets the Affinity field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetAffinity(value *AffinityApplyConfiguration) *PodSpecApplyConfiguration {
	b.fields.Affinity = value
	return b
}

// RemoveAffinity removes the Affinity field from the declarative configuration.
func (b *PodSpecApplyConfiguration) RemoveAffinity() *PodSpecApplyConfiguration {
	b.fields.Affinity = nil
	return b
}

// GetAffinity gets the Affinity field from the declarative configuration.
func (b *PodSpecApplyConfiguration) GetAffinity() (value *AffinityApplyConfiguration, ok bool) {
	return b.fields.Affinity, b.fields.Affinity != nil
}

// SetSchedulerName sets the SchedulerName field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetSchedulerName(value string) *PodSpecApplyConfiguration {
	b.fields.SchedulerName = &value
	return b
}

// RemoveSchedulerName removes the SchedulerName field from the declarative configuration.
func (b *PodSpecApplyConfiguration) RemoveSchedulerName() *PodSpecApplyConfiguration {
	b.fields.SchedulerName = nil
	return b
}

// GetSchedulerName gets the SchedulerName field from the declarative configuration.
func (b *PodSpecApplyConfiguration) GetSchedulerName() (value string, ok bool) {
	if v := b.fields.SchedulerName; v != nil {
		return *v, true
	}
	return value, false
}

// SetTolerations sets the Tolerations field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetTolerations(value TolerationList) *PodSpecApplyConfiguration {
	b.fields.Tolerations = &value
	return b
}

// RemoveTolerations removes the Tolerations field from the declarative configuration.
func (b *PodSpecApplyConfiguration) RemoveTolerations() *PodSpecApplyConfiguration {
	b.fields.Tolerations = nil
	return b
}

// GetTolerations gets the Tolerations field from the declarative configuration.
func (b *PodSpecApplyConfiguration) GetTolerations() (value TolerationList, ok bool) {
	if v := b.fields.Tolerations; v != nil {
		return *v, true
	}
	return value, false
}

// SetHostAliases sets the HostAliases field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetHostAliases(value HostAliasList) *PodSpecApplyConfiguration {
	b.fields.HostAliases = &value
	return b
}

// RemoveHostAliases removes the HostAliases field from the declarative configuration.
func (b *PodSpecApplyConfiguration) RemoveHostAliases() *PodSpecApplyConfiguration {
	b.fields.HostAliases = nil
	return b
}

// GetHostAliases gets the HostAliases field from the declarative configuration.
func (b *PodSpecApplyConfiguration) GetHostAliases() (value HostAliasList, ok bool) {
	if v := b.fields.HostAliases; v != nil {
		return *v, true
	}
	return value, false
}

// SetPriorityClassName sets the PriorityClassName field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetPriorityClassName(value string) *PodSpecApplyConfiguration {
	b.fields.PriorityClassName = &value
	return b
}

// RemovePriorityClassName removes the PriorityClassName field from the declarative configuration.
func (b *PodSpecApplyConfiguration) RemovePriorityClassName() *PodSpecApplyConfiguration {
	b.fields.PriorityClassName = nil
	return b
}

// GetPriorityClassName gets the PriorityClassName field from the declarative configuration.
func (b *PodSpecApplyConfiguration) GetPriorityClassName() (value string, ok bool) {
	if v := b.fields.PriorityClassName; v != nil {
		return *v, true
	}
	return value, false
}

// SetPriority sets the Priority field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetPriority(value int32) *PodSpecApplyConfiguration {
	b.fields.Priority = &value
	return b
}

// RemovePriority removes the Priority field from the declarative configuration.
func (b *PodSpecApplyConfiguration) RemovePriority() *PodSpecApplyConfiguration {
	b.fields.Priority = nil
	return b
}

// GetPriority gets the Priority field from the declarative configuration.
func (b *PodSpecApplyConfiguration) GetPriority() (value int32, ok bool) {
	if v := b.fields.Priority; v != nil {
		return *v, true
	}
	return value, false
}

// SetDNSConfig sets the DNSConfig field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetDNSConfig(value *PodDNSConfigApplyConfiguration) *PodSpecApplyConfiguration {
	b.fields.DNSConfig = value
	return b
}

// RemoveDNSConfig removes the DNSConfig field from the declarative configuration.
func (b *PodSpecApplyConfiguration) RemoveDNSConfig() *PodSpecApplyConfiguration {
	b.fields.DNSConfig = nil
	return b
}

// GetDNSConfig gets the DNSConfig field from the declarative configuration.
func (b *PodSpecApplyConfiguration) GetDNSConfig() (value *PodDNSConfigApplyConfiguration, ok bool) {
	return b.fields.DNSConfig, b.fields.DNSConfig != nil
}

// SetReadinessGates sets the ReadinessGates field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetReadinessGates(value PodReadinessGateList) *PodSpecApplyConfiguration {
	b.fields.ReadinessGates = &value
	return b
}

// RemoveReadinessGates removes the ReadinessGates field from the declarative configuration.
func (b *PodSpecApplyConfiguration) RemoveReadinessGates() *PodSpecApplyConfiguration {
	b.fields.ReadinessGates = nil
	return b
}

// GetReadinessGates gets the ReadinessGates field from the declarative configuration.
func (b *PodSpecApplyConfiguration) GetReadinessGates() (value PodReadinessGateList, ok bool) {
	if v := b.fields.ReadinessGates; v != nil {
		return *v, true
	}
	return value, false
}

// SetRuntimeClassName sets the RuntimeClassName field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetRuntimeClassName(value string) *PodSpecApplyConfiguration {
	b.fields.RuntimeClassName = &value
	return b
}

// RemoveRuntimeClassName removes the RuntimeClassName field from the declarative configuration.
func (b *PodSpecApplyConfiguration) RemoveRuntimeClassName() *PodSpecApplyConfiguration {
	b.fields.RuntimeClassName = nil
	return b
}

// GetRuntimeClassName gets the RuntimeClassName field from the declarative configuration.
func (b *PodSpecApplyConfiguration) GetRuntimeClassName() (value string, ok bool) {
	if v := b.fields.RuntimeClassName; v != nil {
		return *v, true
	}
	return value, false
}

// SetEnableServiceLinks sets the EnableServiceLinks field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetEnableServiceLinks(value bool) *PodSpecApplyConfiguration {
	b.fields.EnableServiceLinks = &value
	return b
}

// RemoveEnableServiceLinks removes the EnableServiceLinks field from the declarative configuration.
func (b *PodSpecApplyConfiguration) RemoveEnableServiceLinks() *PodSpecApplyConfiguration {
	b.fields.EnableServiceLinks = nil
	return b
}

// GetEnableServiceLinks gets the EnableServiceLinks field from the declarative configuration.
func (b *PodSpecApplyConfiguration) GetEnableServiceLinks() (value bool, ok bool) {
	if v := b.fields.EnableServiceLinks; v != nil {
		return *v, true
	}
	return value, false
}

// SetPreemptionPolicy sets the PreemptionPolicy field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetPreemptionPolicy(value corev1.PreemptionPolicy) *PodSpecApplyConfiguration {
	b.fields.PreemptionPolicy = &value
	return b
}

// RemovePreemptionPolicy removes the PreemptionPolicy field from the declarative configuration.
func (b *PodSpecApplyConfiguration) RemovePreemptionPolicy() *PodSpecApplyConfiguration {
	b.fields.PreemptionPolicy = nil
	return b
}

// GetPreemptionPolicy gets the PreemptionPolicy field from the declarative configuration.
func (b *PodSpecApplyConfiguration) GetPreemptionPolicy() (value corev1.PreemptionPolicy, ok bool) {
	if v := b.fields.PreemptionPolicy; v != nil {
		return *v, true
	}
	return value, false
}

// SetOverhead sets the Overhead field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetOverhead(value corev1.ResourceList) *PodSpecApplyConfiguration {
	b.fields.Overhead = &value
	return b
}

// RemoveOverhead removes the Overhead field from the declarative configuration.
func (b *PodSpecApplyConfiguration) RemoveOverhead() *PodSpecApplyConfiguration {
	b.fields.Overhead = nil
	return b
}

// GetOverhead gets the Overhead field from the declarative configuration.
func (b *PodSpecApplyConfiguration) GetOverhead() (value corev1.ResourceList, ok bool) {
	if v := b.fields.Overhead; v != nil {
		return *v, true
	}
	return value, false
}

// SetTopologySpreadConstraints sets the TopologySpreadConstraints field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetTopologySpreadConstraints(value TopologySpreadConstraintList) *PodSpecApplyConfiguration {
	b.fields.TopologySpreadConstraints = &value
	return b
}

// RemoveTopologySpreadConstraints removes the TopologySpreadConstraints field from the declarative configuration.
func (b *PodSpecApplyConfiguration) RemoveTopologySpreadConstraints() *PodSpecApplyConfiguration {
	b.fields.TopologySpreadConstraints = nil
	return b
}

// GetTopologySpreadConstraints gets the TopologySpreadConstraints field from the declarative configuration.
func (b *PodSpecApplyConfiguration) GetTopologySpreadConstraints() (value TopologySpreadConstraintList, ok bool) {
	if v := b.fields.TopologySpreadConstraints; v != nil {
		return *v, true
	}
	return value, false
}

// SetSetHostnameAsFQDN sets the SetHostnameAsFQDN field in the declarative configuration to the given value.
func (b *PodSpecApplyConfiguration) SetSetHostnameAsFQDN(value bool) *PodSpecApplyConfiguration {
	b.fields.SetHostnameAsFQDN = &value
	return b
}

// RemoveSetHostnameAsFQDN removes the SetHostnameAsFQDN field from the declarative configuration.
func (b *PodSpecApplyConfiguration) RemoveSetHostnameAsFQDN() *PodSpecApplyConfiguration {
	b.fields.SetHostnameAsFQDN = nil
	return b
}

// GetSetHostnameAsFQDN gets the SetHostnameAsFQDN field from the declarative configuration.
func (b *PodSpecApplyConfiguration) GetSetHostnameAsFQDN() (value bool, ok bool) {
	if v := b.fields.SetHostnameAsFQDN; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts PodSpecApplyConfiguration to unstructured.
func (b *PodSpecApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to PodSpecApplyConfiguration, replacing the contents
// of PodSpecApplyConfiguration.
func (b *PodSpecApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &podSpecFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals PodSpecApplyConfiguration to JSON.
func (b *PodSpecApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into PodSpecApplyConfiguration, replacing the contents of
// PodSpecApplyConfiguration.
func (b *PodSpecApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// PodSpecList represents a listAlias of PodSpecApplyConfiguration.
type PodSpecList []*PodSpecApplyConfiguration

// PodSpecList represents a map of PodSpecApplyConfiguration.
type PodSpecMap map[string]PodSpecApplyConfiguration

func (b *PodSpecApplyConfiguration) preMarshal() {
}
func (b *PodSpecApplyConfiguration) postUnmarshal() {
}
