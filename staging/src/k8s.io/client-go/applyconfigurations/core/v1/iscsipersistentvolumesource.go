/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// ISCSIPersistentVolumeSourceApplyConfiguration represents an declarative configuration of the ISCSIPersistentVolumeSource type for use
// with apply.
type ISCSIPersistentVolumeSourceApplyConfiguration struct {
	TargetPortal      *string                            `json:"targetPortal,omitempty"`
	IQN               *string                            `json:"iqn,omitempty"`
	Lun               *int32                             `json:"lun,omitempty"`
	ISCSIInterface    *string                            `json:"iscsiInterface,omitempty"`
	FSType            *string                            `json:"fsType,omitempty"`
	ReadOnly          *bool                              `json:"readOnly,omitempty"`
	Portals           *[]string                          `json:"portals,omitempty"`
	DiscoveryCHAPAuth *bool                              `json:"chapAuthDiscovery,omitempty"`
	SessionCHAPAuth   *bool                              `json:"chapAuthSession,omitempty"`
	SecretRef         *SecretReferenceApplyConfiguration `json:"secretRef,omitempty"`
	InitiatorName     *string                            `json:"initiatorName,omitempty"`
}

// ISCSIPersistentVolumeSourceApplyConfiguration constructs an declarative configuration of the ISCSIPersistentVolumeSource type for use with
// apply.
func ISCSIPersistentVolumeSource() *ISCSIPersistentVolumeSourceApplyConfiguration {
	return &ISCSIPersistentVolumeSourceApplyConfiguration{}
}

// SetTargetPortal sets the TargetPortal field in the declarative configuration to the given value.
func (b *ISCSIPersistentVolumeSourceApplyConfiguration) SetTargetPortal(value string) *ISCSIPersistentVolumeSourceApplyConfiguration {
	b.TargetPortal = &value
	return b
}

// RemoveTargetPortal removes the TargetPortal field from the declarative configuration.
func (b *ISCSIPersistentVolumeSourceApplyConfiguration) RemoveTargetPortal() *ISCSIPersistentVolumeSourceApplyConfiguration {
	b.TargetPortal = nil
	return b
}

// GetTargetPortal gets the TargetPortal field from the declarative configuration.
func (b *ISCSIPersistentVolumeSourceApplyConfiguration) GetTargetPortal() (value string, ok bool) {
	if v := b.TargetPortal; v != nil {
		return *v, true
	}
	return value, false
}

// SetIQN sets the IQN field in the declarative configuration to the given value.
func (b *ISCSIPersistentVolumeSourceApplyConfiguration) SetIQN(value string) *ISCSIPersistentVolumeSourceApplyConfiguration {
	b.IQN = &value
	return b
}

// RemoveIQN removes the IQN field from the declarative configuration.
func (b *ISCSIPersistentVolumeSourceApplyConfiguration) RemoveIQN() *ISCSIPersistentVolumeSourceApplyConfiguration {
	b.IQN = nil
	return b
}

// GetIQN gets the IQN field from the declarative configuration.
func (b *ISCSIPersistentVolumeSourceApplyConfiguration) GetIQN() (value string, ok bool) {
	if v := b.IQN; v != nil {
		return *v, true
	}
	return value, false
}

// SetLun sets the Lun field in the declarative configuration to the given value.
func (b *ISCSIPersistentVolumeSourceApplyConfiguration) SetLun(value int32) *ISCSIPersistentVolumeSourceApplyConfiguration {
	b.Lun = &value
	return b
}

// RemoveLun removes the Lun field from the declarative configuration.
func (b *ISCSIPersistentVolumeSourceApplyConfiguration) RemoveLun() *ISCSIPersistentVolumeSourceApplyConfiguration {
	b.Lun = nil
	return b
}

// GetLun gets the Lun field from the declarative configuration.
func (b *ISCSIPersistentVolumeSourceApplyConfiguration) GetLun() (value int32, ok bool) {
	if v := b.Lun; v != nil {
		return *v, true
	}
	return value, false
}

// SetISCSIInterface sets the ISCSIInterface field in the declarative configuration to the given value.
func (b *ISCSIPersistentVolumeSourceApplyConfiguration) SetISCSIInterface(value string) *ISCSIPersistentVolumeSourceApplyConfiguration {
	b.ISCSIInterface = &value
	return b
}

// RemoveISCSIInterface removes the ISCSIInterface field from the declarative configuration.
func (b *ISCSIPersistentVolumeSourceApplyConfiguration) RemoveISCSIInterface() *ISCSIPersistentVolumeSourceApplyConfiguration {
	b.ISCSIInterface = nil
	return b
}

// GetISCSIInterface gets the ISCSIInterface field from the declarative configuration.
func (b *ISCSIPersistentVolumeSourceApplyConfiguration) GetISCSIInterface() (value string, ok bool) {
	if v := b.ISCSIInterface; v != nil {
		return *v, true
	}
	return value, false
}

// SetFSType sets the FSType field in the declarative configuration to the given value.
func (b *ISCSIPersistentVolumeSourceApplyConfiguration) SetFSType(value string) *ISCSIPersistentVolumeSourceApplyConfiguration {
	b.FSType = &value
	return b
}

// RemoveFSType removes the FSType field from the declarative configuration.
func (b *ISCSIPersistentVolumeSourceApplyConfiguration) RemoveFSType() *ISCSIPersistentVolumeSourceApplyConfiguration {
	b.FSType = nil
	return b
}

// GetFSType gets the FSType field from the declarative configuration.
func (b *ISCSIPersistentVolumeSourceApplyConfiguration) GetFSType() (value string, ok bool) {
	if v := b.FSType; v != nil {
		return *v, true
	}
	return value, false
}

// SetReadOnly sets the ReadOnly field in the declarative configuration to the given value.
func (b *ISCSIPersistentVolumeSourceApplyConfiguration) SetReadOnly(value bool) *ISCSIPersistentVolumeSourceApplyConfiguration {
	b.ReadOnly = &value
	return b
}

// RemoveReadOnly removes the ReadOnly field from the declarative configuration.
func (b *ISCSIPersistentVolumeSourceApplyConfiguration) RemoveReadOnly() *ISCSIPersistentVolumeSourceApplyConfiguration {
	b.ReadOnly = nil
	return b
}

// GetReadOnly gets the ReadOnly field from the declarative configuration.
func (b *ISCSIPersistentVolumeSourceApplyConfiguration) GetReadOnly() (value bool, ok bool) {
	if v := b.ReadOnly; v != nil {
		return *v, true
	}
	return value, false
}

// SetPortals sets the Portals field in the declarative configuration to the given value.
func (b *ISCSIPersistentVolumeSourceApplyConfiguration) SetPortals(value []string) *ISCSIPersistentVolumeSourceApplyConfiguration {
	b.Portals = &value
	return b
}

// RemovePortals removes the Portals field from the declarative configuration.
func (b *ISCSIPersistentVolumeSourceApplyConfiguration) RemovePortals() *ISCSIPersistentVolumeSourceApplyConfiguration {
	b.Portals = nil
	return b
}

// GetPortals gets the Portals field from the declarative configuration.
func (b *ISCSIPersistentVolumeSourceApplyConfiguration) GetPortals() (value []string, ok bool) {
	if v := b.Portals; v != nil {
		return *v, true
	}
	return value, false
}

// SetDiscoveryCHAPAuth sets the DiscoveryCHAPAuth field in the declarative configuration to the given value.
func (b *ISCSIPersistentVolumeSourceApplyConfiguration) SetDiscoveryCHAPAuth(value bool) *ISCSIPersistentVolumeSourceApplyConfiguration {
	b.DiscoveryCHAPAuth = &value
	return b
}

// RemoveDiscoveryCHAPAuth removes the DiscoveryCHAPAuth field from the declarative configuration.
func (b *ISCSIPersistentVolumeSourceApplyConfiguration) RemoveDiscoveryCHAPAuth() *ISCSIPersistentVolumeSourceApplyConfiguration {
	b.DiscoveryCHAPAuth = nil
	return b
}

// GetDiscoveryCHAPAuth gets the DiscoveryCHAPAuth field from the declarative configuration.
func (b *ISCSIPersistentVolumeSourceApplyConfiguration) GetDiscoveryCHAPAuth() (value bool, ok bool) {
	if v := b.DiscoveryCHAPAuth; v != nil {
		return *v, true
	}
	return value, false
}

// SetSessionCHAPAuth sets the SessionCHAPAuth field in the declarative configuration to the given value.
func (b *ISCSIPersistentVolumeSourceApplyConfiguration) SetSessionCHAPAuth(value bool) *ISCSIPersistentVolumeSourceApplyConfiguration {
	b.SessionCHAPAuth = &value
	return b
}

// RemoveSessionCHAPAuth removes the SessionCHAPAuth field from the declarative configuration.
func (b *ISCSIPersistentVolumeSourceApplyConfiguration) RemoveSessionCHAPAuth() *ISCSIPersistentVolumeSourceApplyConfiguration {
	b.SessionCHAPAuth = nil
	return b
}

// GetSessionCHAPAuth gets the SessionCHAPAuth field from the declarative configuration.
func (b *ISCSIPersistentVolumeSourceApplyConfiguration) GetSessionCHAPAuth() (value bool, ok bool) {
	if v := b.SessionCHAPAuth; v != nil {
		return *v, true
	}
	return value, false
}

// SetSecretRef sets the SecretRef field in the declarative configuration to the given value.
func (b *ISCSIPersistentVolumeSourceApplyConfiguration) SetSecretRef(value *SecretReferenceApplyConfiguration) *ISCSIPersistentVolumeSourceApplyConfiguration {
	b.SecretRef = value
	return b
}

// RemoveSecretRef removes the SecretRef field from the declarative configuration.
func (b *ISCSIPersistentVolumeSourceApplyConfiguration) RemoveSecretRef() *ISCSIPersistentVolumeSourceApplyConfiguration {
	b.SecretRef = nil
	return b
}

// GetSecretRef gets the SecretRef field from the declarative configuration.
func (b *ISCSIPersistentVolumeSourceApplyConfiguration) GetSecretRef() (value *SecretReferenceApplyConfiguration, ok bool) {
	return b.SecretRef, b.SecretRef != nil
}

// SetInitiatorName sets the InitiatorName field in the declarative configuration to the given value.
func (b *ISCSIPersistentVolumeSourceApplyConfiguration) SetInitiatorName(value string) *ISCSIPersistentVolumeSourceApplyConfiguration {
	b.InitiatorName = &value
	return b
}

// RemoveInitiatorName removes the InitiatorName field from the declarative configuration.
func (b *ISCSIPersistentVolumeSourceApplyConfiguration) RemoveInitiatorName() *ISCSIPersistentVolumeSourceApplyConfiguration {
	b.InitiatorName = nil
	return b
}

// GetInitiatorName gets the InitiatorName field from the declarative configuration.
func (b *ISCSIPersistentVolumeSourceApplyConfiguration) GetInitiatorName() (value string, ok bool) {
	if v := b.InitiatorName; v != nil {
		return *v, true
	}
	return value, false
}

// ISCSIPersistentVolumeSourceList represents a listAlias of ISCSIPersistentVolumeSourceApplyConfiguration.
type ISCSIPersistentVolumeSourceList []*ISCSIPersistentVolumeSourceApplyConfiguration

// ISCSIPersistentVolumeSourceList represents a map of ISCSIPersistentVolumeSourceApplyConfiguration.
type ISCSIPersistentVolumeSourceMap map[string]ISCSIPersistentVolumeSourceApplyConfiguration
