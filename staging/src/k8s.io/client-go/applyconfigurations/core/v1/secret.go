/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	corev1 "k8s.io/api/core/v1"
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// SecretApplyConfiguration represents an declarative configuration of the Secret type for use
// with apply.
type SecretApplyConfiguration struct {
	v1.TypeMetaApplyConfiguration   `json:",inline"`
	v1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Immutable                       *bool              `json:"immutable,omitempty"`
	Data                            *map[string][]byte `json:"data,omitempty"`
	StringData                      *map[string]string `json:"stringData,omitempty"`
	Type                            *corev1.SecretType `json:"type,omitempty"`
}

// SecretApplyConfiguration constructs an declarative configuration of the Secret type for use with
// apply.
func Secret(name, namespace string) *SecretApplyConfiguration {
	b := &SecretApplyConfiguration{}
	b.SetName(name)
	b.SetNamespace(namespace)
	b.SetKind("Secret")
	b.SetAPIVersion("v1")
	return b
}

// SetImmutable sets the Immutable field in the declarative configuration to the given value.
func (b *SecretApplyConfiguration) SetImmutable(value bool) *SecretApplyConfiguration {
	b.Immutable = &value
	return b
}

// SetData sets the Data field in the declarative configuration to the given value.
func (b *SecretApplyConfiguration) SetData(value map[string][]byte) *SecretApplyConfiguration {
	b.Data = &value
	return b
}

// SetStringData sets the StringData field in the declarative configuration to the given value.
func (b *SecretApplyConfiguration) SetStringData(value map[string]string) *SecretApplyConfiguration {
	b.StringData = &value
	return b
}

// SetType sets the Type field in the declarative configuration to the given value.
func (b *SecretApplyConfiguration) SetType(value corev1.SecretType) *SecretApplyConfiguration {
	b.Type = &value
	return b
}
