/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	corev1 "k8s.io/api/core/v1"
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// SecretApplyConfiguration represents an declarative configuration of the Secret type for use
// with apply.
type SecretApplyConfiguration struct {
	v1.TypeMetaApplyConfiguration `json:",inline"`
	ObjectMeta                    *v1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Immutable                     *bool                            `json:"immutable,omitempty"`
	Data                          *map[string][]byte               `json:"data,omitempty"`
	StringData                    *map[string]string               `json:"stringData,omitempty"`
	Type                          *corev1.SecretType               `json:"type,omitempty"`
}

// SecretApplyConfiguration constructs an declarative configuration of the Secret type for use with
// apply.
func Secret() *SecretApplyConfiguration {
	return &SecretApplyConfiguration{}
}

// SetTypeMeta sets the TypeMeta field in the declarative configuration to the given value.
func (b *SecretApplyConfiguration) SetTypeMeta(value *v1.TypeMetaApplyConfiguration) *SecretApplyConfiguration {
	if value != nil {
		b.TypeMetaApplyConfiguration = *value
	}
	return b
}

// GetTypeMeta gets the TypeMeta field from the declarative configuration.
func (b *SecretApplyConfiguration) GetTypeMeta() (value *v1.TypeMetaApplyConfiguration, ok bool) {
	return &b.TypeMetaApplyConfiguration, true
}

// SetObjectMeta sets the ObjectMeta field in the declarative configuration to the given value.
func (b *SecretApplyConfiguration) SetObjectMeta(value *v1.ObjectMetaApplyConfiguration) *SecretApplyConfiguration {
	b.ObjectMeta = value
	return b
}

// RemoveObjectMeta removes the ObjectMeta field from the declarative configuration.
func (b *SecretApplyConfiguration) RemoveObjectMeta() *SecretApplyConfiguration {
	b.ObjectMeta = nil
	return b
}

// GetObjectMeta gets the ObjectMeta field from the declarative configuration.
func (b *SecretApplyConfiguration) GetObjectMeta() (value *v1.ObjectMetaApplyConfiguration, ok bool) {
	return b.ObjectMeta, b.ObjectMeta != nil
}

// SetImmutable sets the Immutable field in the declarative configuration to the given value.
func (b *SecretApplyConfiguration) SetImmutable(value bool) *SecretApplyConfiguration {
	b.Immutable = &value
	return b
}

// RemoveImmutable removes the Immutable field from the declarative configuration.
func (b *SecretApplyConfiguration) RemoveImmutable() *SecretApplyConfiguration {
	b.Immutable = nil
	return b
}

// GetImmutable gets the Immutable field from the declarative configuration.
func (b *SecretApplyConfiguration) GetImmutable() (value bool, ok bool) {
	if v := b.Immutable; v != nil {
		return *v, true
	}
	return value, false
}

// SetData sets the Data field in the declarative configuration to the given value.
func (b *SecretApplyConfiguration) SetData(value map[string][]byte) *SecretApplyConfiguration {
	b.Data = &value
	return b
}

// RemoveData removes the Data field from the declarative configuration.
func (b *SecretApplyConfiguration) RemoveData() *SecretApplyConfiguration {
	b.Data = nil
	return b
}

// GetData gets the Data field from the declarative configuration.
func (b *SecretApplyConfiguration) GetData() (value map[string][]byte, ok bool) {
	if v := b.Data; v != nil {
		return *v, true
	}
	return value, false
}

// SetStringData sets the StringData field in the declarative configuration to the given value.
func (b *SecretApplyConfiguration) SetStringData(value map[string]string) *SecretApplyConfiguration {
	b.StringData = &value
	return b
}

// RemoveStringData removes the StringData field from the declarative configuration.
func (b *SecretApplyConfiguration) RemoveStringData() *SecretApplyConfiguration {
	b.StringData = nil
	return b
}

// GetStringData gets the StringData field from the declarative configuration.
func (b *SecretApplyConfiguration) GetStringData() (value map[string]string, ok bool) {
	if v := b.StringData; v != nil {
		return *v, true
	}
	return value, false
}

// SetType sets the Type field in the declarative configuration to the given value.
func (b *SecretApplyConfiguration) SetType(value corev1.SecretType) *SecretApplyConfiguration {
	b.Type = &value
	return b
}

// RemoveType removes the Type field from the declarative configuration.
func (b *SecretApplyConfiguration) RemoveType() *SecretApplyConfiguration {
	b.Type = nil
	return b
}

// GetType gets the Type field from the declarative configuration.
func (b *SecretApplyConfiguration) GetType() (value corev1.SecretType, ok bool) {
	if v := b.Type; v != nil {
		return *v, true
	}
	return value, false
}

// SecretList represents a listAlias of SecretApplyConfiguration.
type SecretList []*SecretApplyConfiguration

// SecretList represents a map of SecretApplyConfiguration.
type SecretMap map[string]SecretApplyConfiguration
