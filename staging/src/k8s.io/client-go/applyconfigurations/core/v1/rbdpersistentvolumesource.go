/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// RBDPersistentVolumeSourceApplyConfiguration represents an declarative configuration of the RBDPersistentVolumeSource type for use
// with apply.
type RBDPersistentVolumeSourceApplyConfiguration struct {
	CephMonitors *[]string                          `json:"monitors,omitempty"`
	RBDImage     *string                            `json:"image,omitempty"`
	FSType       *string                            `json:"fsType,omitempty"`
	RBDPool      *string                            `json:"pool,omitempty"`
	RadosUser    *string                            `json:"user,omitempty"`
	Keyring      *string                            `json:"keyring,omitempty"`
	SecretRef    *SecretReferenceApplyConfiguration `json:"secretRef,omitempty"`
	ReadOnly     *bool                              `json:"readOnly,omitempty"`
}

// RBDPersistentVolumeSourceApplyConfiguration constructs an declarative configuration of the RBDPersistentVolumeSource type for use with
// apply.
func RBDPersistentVolumeSource() *RBDPersistentVolumeSourceApplyConfiguration {
	return &RBDPersistentVolumeSourceApplyConfiguration{}
}

// SetCephMonitors sets the CephMonitors field in the declarative configuration to the given value.
func (b *RBDPersistentVolumeSourceApplyConfiguration) SetCephMonitors(value []string) *RBDPersistentVolumeSourceApplyConfiguration {
	b.CephMonitors = &value
	return b
}

// RemoveCephMonitors removes the CephMonitors field from the declarative configuration.
func (b *RBDPersistentVolumeSourceApplyConfiguration) RemoveCephMonitors() *RBDPersistentVolumeSourceApplyConfiguration {
	b.CephMonitors = nil
	return b
}

// GetCephMonitors gets the CephMonitors field from the declarative configuration.
func (b *RBDPersistentVolumeSourceApplyConfiguration) GetCephMonitors() (value []string, ok bool) {
	if v := b.CephMonitors; v != nil {
		return *v, true
	}
	return value, false
}

// SetRBDImage sets the RBDImage field in the declarative configuration to the given value.
func (b *RBDPersistentVolumeSourceApplyConfiguration) SetRBDImage(value string) *RBDPersistentVolumeSourceApplyConfiguration {
	b.RBDImage = &value
	return b
}

// RemoveRBDImage removes the RBDImage field from the declarative configuration.
func (b *RBDPersistentVolumeSourceApplyConfiguration) RemoveRBDImage() *RBDPersistentVolumeSourceApplyConfiguration {
	b.RBDImage = nil
	return b
}

// GetRBDImage gets the RBDImage field from the declarative configuration.
func (b *RBDPersistentVolumeSourceApplyConfiguration) GetRBDImage() (value string, ok bool) {
	if v := b.RBDImage; v != nil {
		return *v, true
	}
	return value, false
}

// SetFSType sets the FSType field in the declarative configuration to the given value.
func (b *RBDPersistentVolumeSourceApplyConfiguration) SetFSType(value string) *RBDPersistentVolumeSourceApplyConfiguration {
	b.FSType = &value
	return b
}

// RemoveFSType removes the FSType field from the declarative configuration.
func (b *RBDPersistentVolumeSourceApplyConfiguration) RemoveFSType() *RBDPersistentVolumeSourceApplyConfiguration {
	b.FSType = nil
	return b
}

// GetFSType gets the FSType field from the declarative configuration.
func (b *RBDPersistentVolumeSourceApplyConfiguration) GetFSType() (value string, ok bool) {
	if v := b.FSType; v != nil {
		return *v, true
	}
	return value, false
}

// SetRBDPool sets the RBDPool field in the declarative configuration to the given value.
func (b *RBDPersistentVolumeSourceApplyConfiguration) SetRBDPool(value string) *RBDPersistentVolumeSourceApplyConfiguration {
	b.RBDPool = &value
	return b
}

// RemoveRBDPool removes the RBDPool field from the declarative configuration.
func (b *RBDPersistentVolumeSourceApplyConfiguration) RemoveRBDPool() *RBDPersistentVolumeSourceApplyConfiguration {
	b.RBDPool = nil
	return b
}

// GetRBDPool gets the RBDPool field from the declarative configuration.
func (b *RBDPersistentVolumeSourceApplyConfiguration) GetRBDPool() (value string, ok bool) {
	if v := b.RBDPool; v != nil {
		return *v, true
	}
	return value, false
}

// SetRadosUser sets the RadosUser field in the declarative configuration to the given value.
func (b *RBDPersistentVolumeSourceApplyConfiguration) SetRadosUser(value string) *RBDPersistentVolumeSourceApplyConfiguration {
	b.RadosUser = &value
	return b
}

// RemoveRadosUser removes the RadosUser field from the declarative configuration.
func (b *RBDPersistentVolumeSourceApplyConfiguration) RemoveRadosUser() *RBDPersistentVolumeSourceApplyConfiguration {
	b.RadosUser = nil
	return b
}

// GetRadosUser gets the RadosUser field from the declarative configuration.
func (b *RBDPersistentVolumeSourceApplyConfiguration) GetRadosUser() (value string, ok bool) {
	if v := b.RadosUser; v != nil {
		return *v, true
	}
	return value, false
}

// SetKeyring sets the Keyring field in the declarative configuration to the given value.
func (b *RBDPersistentVolumeSourceApplyConfiguration) SetKeyring(value string) *RBDPersistentVolumeSourceApplyConfiguration {
	b.Keyring = &value
	return b
}

// RemoveKeyring removes the Keyring field from the declarative configuration.
func (b *RBDPersistentVolumeSourceApplyConfiguration) RemoveKeyring() *RBDPersistentVolumeSourceApplyConfiguration {
	b.Keyring = nil
	return b
}

// GetKeyring gets the Keyring field from the declarative configuration.
func (b *RBDPersistentVolumeSourceApplyConfiguration) GetKeyring() (value string, ok bool) {
	if v := b.Keyring; v != nil {
		return *v, true
	}
	return value, false
}

// SetSecretRef sets the SecretRef field in the declarative configuration to the given value.
func (b *RBDPersistentVolumeSourceApplyConfiguration) SetSecretRef(value *SecretReferenceApplyConfiguration) *RBDPersistentVolumeSourceApplyConfiguration {
	b.SecretRef = value
	return b
}

// RemoveSecretRef removes the SecretRef field from the declarative configuration.
func (b *RBDPersistentVolumeSourceApplyConfiguration) RemoveSecretRef() *RBDPersistentVolumeSourceApplyConfiguration {
	b.SecretRef = nil
	return b
}

// GetSecretRef gets the SecretRef field from the declarative configuration.
func (b *RBDPersistentVolumeSourceApplyConfiguration) GetSecretRef() (value *SecretReferenceApplyConfiguration, ok bool) {
	return b.SecretRef, b.SecretRef != nil
}

// SetReadOnly sets the ReadOnly field in the declarative configuration to the given value.
func (b *RBDPersistentVolumeSourceApplyConfiguration) SetReadOnly(value bool) *RBDPersistentVolumeSourceApplyConfiguration {
	b.ReadOnly = &value
	return b
}

// RemoveReadOnly removes the ReadOnly field from the declarative configuration.
func (b *RBDPersistentVolumeSourceApplyConfiguration) RemoveReadOnly() *RBDPersistentVolumeSourceApplyConfiguration {
	b.ReadOnly = nil
	return b
}

// GetReadOnly gets the ReadOnly field from the declarative configuration.
func (b *RBDPersistentVolumeSourceApplyConfiguration) GetReadOnly() (value bool, ok bool) {
	if v := b.ReadOnly; v != nil {
		return *v, true
	}
	return value, false
}

// RBDPersistentVolumeSourceList represents a listAlias of RBDPersistentVolumeSourceApplyConfiguration.
type RBDPersistentVolumeSourceList []*RBDPersistentVolumeSourceApplyConfiguration

// RBDPersistentVolumeSourceList represents a map of RBDPersistentVolumeSourceApplyConfiguration.
type RBDPersistentVolumeSourceMap map[string]RBDPersistentVolumeSourceApplyConfiguration
