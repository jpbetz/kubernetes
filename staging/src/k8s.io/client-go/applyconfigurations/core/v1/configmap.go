/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// ConfigMapApplyConfiguration represents an declarative configuration of the ConfigMap type for use
// with apply.
type ConfigMapApplyConfiguration struct {
	v1.TypeMetaApplyConfiguration `json:",inline"`
	ObjectMeta                    *v1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Immutable                     *bool                            `json:"immutable,omitempty"`
	Data                          *map[string]string               `json:"data,omitempty"`
	BinaryData                    *map[string][]byte               `json:"binaryData,omitempty"`
}

// ConfigMapApplyConfiguration constructs an declarative configuration of the ConfigMap type for use with
// apply.
func ConfigMap() *ConfigMapApplyConfiguration {
	return &ConfigMapApplyConfiguration{}
}

// SetTypeMeta sets the TypeMeta field in the declarative configuration to the given value.
func (b *ConfigMapApplyConfiguration) SetTypeMeta(value *v1.TypeMetaApplyConfiguration) *ConfigMapApplyConfiguration {
	if value != nil {
		b.TypeMetaApplyConfiguration = *value
	}
	return b
}

// GetTypeMeta gets the TypeMeta field from the declarative configuration.
func (b *ConfigMapApplyConfiguration) GetTypeMeta() (value *v1.TypeMetaApplyConfiguration, ok bool) {
	return &b.TypeMetaApplyConfiguration, true
}

// SetObjectMeta sets the ObjectMeta field in the declarative configuration to the given value.
func (b *ConfigMapApplyConfiguration) SetObjectMeta(value *v1.ObjectMetaApplyConfiguration) *ConfigMapApplyConfiguration {
	b.ObjectMeta = value
	return b
}

// RemoveObjectMeta removes the ObjectMeta field from the declarative configuration.
func (b *ConfigMapApplyConfiguration) RemoveObjectMeta() *ConfigMapApplyConfiguration {
	b.ObjectMeta = nil
	return b
}

// GetObjectMeta gets the ObjectMeta field from the declarative configuration.
func (b *ConfigMapApplyConfiguration) GetObjectMeta() (value *v1.ObjectMetaApplyConfiguration, ok bool) {
	return b.ObjectMeta, b.ObjectMeta != nil
}

// SetImmutable sets the Immutable field in the declarative configuration to the given value.
func (b *ConfigMapApplyConfiguration) SetImmutable(value bool) *ConfigMapApplyConfiguration {
	b.Immutable = &value
	return b
}

// RemoveImmutable removes the Immutable field from the declarative configuration.
func (b *ConfigMapApplyConfiguration) RemoveImmutable() *ConfigMapApplyConfiguration {
	b.Immutable = nil
	return b
}

// GetImmutable gets the Immutable field from the declarative configuration.
func (b *ConfigMapApplyConfiguration) GetImmutable() (value bool, ok bool) {
	if v := b.Immutable; v != nil {
		return *v, true
	}
	return value, false
}

// SetData sets the Data field in the declarative configuration to the given value.
func (b *ConfigMapApplyConfiguration) SetData(value map[string]string) *ConfigMapApplyConfiguration {
	b.Data = &value
	return b
}

// RemoveData removes the Data field from the declarative configuration.
func (b *ConfigMapApplyConfiguration) RemoveData() *ConfigMapApplyConfiguration {
	b.Data = nil
	return b
}

// GetData gets the Data field from the declarative configuration.
func (b *ConfigMapApplyConfiguration) GetData() (value map[string]string, ok bool) {
	if v := b.Data; v != nil {
		return *v, true
	}
	return value, false
}

// SetBinaryData sets the BinaryData field in the declarative configuration to the given value.
func (b *ConfigMapApplyConfiguration) SetBinaryData(value map[string][]byte) *ConfigMapApplyConfiguration {
	b.BinaryData = &value
	return b
}

// RemoveBinaryData removes the BinaryData field from the declarative configuration.
func (b *ConfigMapApplyConfiguration) RemoveBinaryData() *ConfigMapApplyConfiguration {
	b.BinaryData = nil
	return b
}

// GetBinaryData gets the BinaryData field from the declarative configuration.
func (b *ConfigMapApplyConfiguration) GetBinaryData() (value map[string][]byte, ok bool) {
	if v := b.BinaryData; v != nil {
		return *v, true
	}
	return value, false
}

// ConfigMapList represents a listAlias of ConfigMapApplyConfiguration.
type ConfigMapList []*ConfigMapApplyConfiguration

// ConfigMapList represents a map of ConfigMapApplyConfiguration.
type ConfigMapMap map[string]ConfigMapApplyConfiguration
