/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s.io/api/core/v1"
	intstr "k8s.io/apimachinery/pkg/util/intstr"
)

// ServicePortApplyConfiguration represents an declarative configuration of the ServicePort type for use
// with apply.
type ServicePortApplyConfiguration struct {
	Name        *string             `json:"name,omitempty"`
	Protocol    *v1.Protocol        `json:"protocol,omitempty"`
	AppProtocol *string             `json:"appProtocol,omitempty"`
	Port        *int32              `json:"port,omitempty"`
	TargetPort  *intstr.IntOrString `json:"targetPort,omitempty"`
	NodePort    *int32              `json:"nodePort,omitempty"`
}

// ServicePortApplyConfiguration constructs an declarative configuration of the ServicePort type for use with
// apply.
func ServicePort() *ServicePortApplyConfiguration {
	return &ServicePortApplyConfiguration{}
}

// SetName sets the Name field in the declarative configuration to the given value.
func (b *ServicePortApplyConfiguration) SetName(value string) *ServicePortApplyConfiguration {
	b.Name = &value
	return b
}

// RemoveName removes the Name field from the declarative configuration.
func (b *ServicePortApplyConfiguration) RemoveName() *ServicePortApplyConfiguration {
	b.Name = nil
	return b
}

// GetName gets the Name field from the declarative configuration.
func (b *ServicePortApplyConfiguration) GetName() (value string, ok bool) {
	if v := b.Name; v != nil {
		return *v, true
	}
	return value, false
}

// SetProtocol sets the Protocol field in the declarative configuration to the given value.
func (b *ServicePortApplyConfiguration) SetProtocol(value v1.Protocol) *ServicePortApplyConfiguration {
	b.Protocol = &value
	return b
}

// RemoveProtocol removes the Protocol field from the declarative configuration.
func (b *ServicePortApplyConfiguration) RemoveProtocol() *ServicePortApplyConfiguration {
	b.Protocol = nil
	return b
}

// GetProtocol gets the Protocol field from the declarative configuration.
func (b *ServicePortApplyConfiguration) GetProtocol() (value v1.Protocol, ok bool) {
	if v := b.Protocol; v != nil {
		return *v, true
	}
	return value, false
}

// SetAppProtocol sets the AppProtocol field in the declarative configuration to the given value.
func (b *ServicePortApplyConfiguration) SetAppProtocol(value string) *ServicePortApplyConfiguration {
	b.AppProtocol = &value
	return b
}

// RemoveAppProtocol removes the AppProtocol field from the declarative configuration.
func (b *ServicePortApplyConfiguration) RemoveAppProtocol() *ServicePortApplyConfiguration {
	b.AppProtocol = nil
	return b
}

// GetAppProtocol gets the AppProtocol field from the declarative configuration.
func (b *ServicePortApplyConfiguration) GetAppProtocol() (value string, ok bool) {
	if v := b.AppProtocol; v != nil {
		return *v, true
	}
	return value, false
}

// SetPort sets the Port field in the declarative configuration to the given value.
func (b *ServicePortApplyConfiguration) SetPort(value int32) *ServicePortApplyConfiguration {
	b.Port = &value
	return b
}

// RemovePort removes the Port field from the declarative configuration.
func (b *ServicePortApplyConfiguration) RemovePort() *ServicePortApplyConfiguration {
	b.Port = nil
	return b
}

// GetPort gets the Port field from the declarative configuration.
func (b *ServicePortApplyConfiguration) GetPort() (value int32, ok bool) {
	if v := b.Port; v != nil {
		return *v, true
	}
	return value, false
}

// SetTargetPort sets the TargetPort field in the declarative configuration to the given value.
func (b *ServicePortApplyConfiguration) SetTargetPort(value intstr.IntOrString) *ServicePortApplyConfiguration {
	b.TargetPort = &value
	return b
}

// RemoveTargetPort removes the TargetPort field from the declarative configuration.
func (b *ServicePortApplyConfiguration) RemoveTargetPort() *ServicePortApplyConfiguration {
	b.TargetPort = nil
	return b
}

// GetTargetPort gets the TargetPort field from the declarative configuration.
func (b *ServicePortApplyConfiguration) GetTargetPort() (value intstr.IntOrString, ok bool) {
	if v := b.TargetPort; v != nil {
		return *v, true
	}
	return value, false
}

// SetNodePort sets the NodePort field in the declarative configuration to the given value.
func (b *ServicePortApplyConfiguration) SetNodePort(value int32) *ServicePortApplyConfiguration {
	b.NodePort = &value
	return b
}

// RemoveNodePort removes the NodePort field from the declarative configuration.
func (b *ServicePortApplyConfiguration) RemoveNodePort() *ServicePortApplyConfiguration {
	b.NodePort = nil
	return b
}

// GetNodePort gets the NodePort field from the declarative configuration.
func (b *ServicePortApplyConfiguration) GetNodePort() (value int32, ok bool) {
	if v := b.NodePort; v != nil {
		return *v, true
	}
	return value, false
}

// ServicePortList represents a listAlias of ServicePortApplyConfiguration.
type ServicePortList []*ServicePortApplyConfiguration

// ServicePortList represents a map of ServicePortApplyConfiguration.
type ServicePortMap map[string]ServicePortApplyConfiguration
