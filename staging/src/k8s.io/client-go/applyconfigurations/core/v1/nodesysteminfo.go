/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// NodeSystemInfoApplyConfiguration represents an declarative configuration of the NodeSystemInfo type for use
// with apply.
type NodeSystemInfoApplyConfiguration struct {
	MachineID               *string `json:"machineID,omitempty"`
	SystemUUID              *string `json:"systemUUID,omitempty"`
	BootID                  *string `json:"bootID,omitempty"`
	KernelVersion           *string `json:"kernelVersion,omitempty"`
	OSImage                 *string `json:"osImage,omitempty"`
	ContainerRuntimeVersion *string `json:"containerRuntimeVersion,omitempty"`
	KubeletVersion          *string `json:"kubeletVersion,omitempty"`
	KubeProxyVersion        *string `json:"kubeProxyVersion,omitempty"`
	OperatingSystem         *string `json:"operatingSystem,omitempty"`
	Architecture            *string `json:"architecture,omitempty"`
}

// NodeSystemInfoApplyConfiguration constructs an declarative configuration of the NodeSystemInfo type for use with
// apply.
func NodeSystemInfo() *NodeSystemInfoApplyConfiguration {
	return &NodeSystemInfoApplyConfiguration{}
}

// SetMachineID sets the MachineID field in the declarative configuration to the given value.
func (b *NodeSystemInfoApplyConfiguration) SetMachineID(value string) *NodeSystemInfoApplyConfiguration {
	b.MachineID = &value
	return b
}

// SetSystemUUID sets the SystemUUID field in the declarative configuration to the given value.
func (b *NodeSystemInfoApplyConfiguration) SetSystemUUID(value string) *NodeSystemInfoApplyConfiguration {
	b.SystemUUID = &value
	return b
}

// SetBootID sets the BootID field in the declarative configuration to the given value.
func (b *NodeSystemInfoApplyConfiguration) SetBootID(value string) *NodeSystemInfoApplyConfiguration {
	b.BootID = &value
	return b
}

// SetKernelVersion sets the KernelVersion field in the declarative configuration to the given value.
func (b *NodeSystemInfoApplyConfiguration) SetKernelVersion(value string) *NodeSystemInfoApplyConfiguration {
	b.KernelVersion = &value
	return b
}

// SetOSImage sets the OSImage field in the declarative configuration to the given value.
func (b *NodeSystemInfoApplyConfiguration) SetOSImage(value string) *NodeSystemInfoApplyConfiguration {
	b.OSImage = &value
	return b
}

// SetContainerRuntimeVersion sets the ContainerRuntimeVersion field in the declarative configuration to the given value.
func (b *NodeSystemInfoApplyConfiguration) SetContainerRuntimeVersion(value string) *NodeSystemInfoApplyConfiguration {
	b.ContainerRuntimeVersion = &value
	return b
}

// SetKubeletVersion sets the KubeletVersion field in the declarative configuration to the given value.
func (b *NodeSystemInfoApplyConfiguration) SetKubeletVersion(value string) *NodeSystemInfoApplyConfiguration {
	b.KubeletVersion = &value
	return b
}

// SetKubeProxyVersion sets the KubeProxyVersion field in the declarative configuration to the given value.
func (b *NodeSystemInfoApplyConfiguration) SetKubeProxyVersion(value string) *NodeSystemInfoApplyConfiguration {
	b.KubeProxyVersion = &value
	return b
}

// SetOperatingSystem sets the OperatingSystem field in the declarative configuration to the given value.
func (b *NodeSystemInfoApplyConfiguration) SetOperatingSystem(value string) *NodeSystemInfoApplyConfiguration {
	b.OperatingSystem = &value
	return b
}

// SetArchitecture sets the Architecture field in the declarative configuration to the given value.
func (b *NodeSystemInfoApplyConfiguration) SetArchitecture(value string) *NodeSystemInfoApplyConfiguration {
	b.Architecture = &value
	return b
}
