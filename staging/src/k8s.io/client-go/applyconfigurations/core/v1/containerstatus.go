/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// ContainerStatusApplyConfiguration represents an declarative configuration of the ContainerStatus type for use
// with apply.
type ContainerStatusApplyConfiguration struct {
	Name                 *string                           `json:"name,omitempty"`
	State                *ContainerStateApplyConfiguration `json:"state,omitempty"`
	LastTerminationState *ContainerStateApplyConfiguration `json:"lastState,omitempty"`
	Ready                *bool                             `json:"ready,omitempty"`
	RestartCount         *int32                            `json:"restartCount,omitempty"`
	Image                *string                           `json:"image,omitempty"`
	ImageID              *string                           `json:"imageID,omitempty"`
	ContainerID          *string                           `json:"containerID,omitempty"`
	Started              *bool                             `json:"started,omitempty"`
}

// ContainerStatusApplyConfiguration constructs an declarative configuration of the ContainerStatus type for use with
// apply.
func ContainerStatus() *ContainerStatusApplyConfiguration {
	return &ContainerStatusApplyConfiguration{}
}

// SetName sets the Name field in the declarative configuration to the given value.
func (b *ContainerStatusApplyConfiguration) SetName(value string) *ContainerStatusApplyConfiguration {
	b.Name = &value
	return b
}

// RemoveName removes the Name field from the declarative configuration.
func (b *ContainerStatusApplyConfiguration) RemoveName() *ContainerStatusApplyConfiguration {
	b.Name = nil
	return b
}

// GetName gets the Name field from the declarative configuration.
func (b *ContainerStatusApplyConfiguration) GetName() (value string, ok bool) {
	if v := b.Name; v != nil {
		return *v, true
	}
	return value, false
}

// SetState sets the State field in the declarative configuration to the given value.
func (b *ContainerStatusApplyConfiguration) SetState(value *ContainerStateApplyConfiguration) *ContainerStatusApplyConfiguration {
	b.State = value
	return b
}

// RemoveState removes the State field from the declarative configuration.
func (b *ContainerStatusApplyConfiguration) RemoveState() *ContainerStatusApplyConfiguration {
	b.State = nil
	return b
}

// GetState gets the State field from the declarative configuration.
func (b *ContainerStatusApplyConfiguration) GetState() (value *ContainerStateApplyConfiguration, ok bool) {
	return b.State, b.State != nil
}

// SetLastTerminationState sets the LastTerminationState field in the declarative configuration to the given value.
func (b *ContainerStatusApplyConfiguration) SetLastTerminationState(value *ContainerStateApplyConfiguration) *ContainerStatusApplyConfiguration {
	b.LastTerminationState = value
	return b
}

// RemoveLastTerminationState removes the LastTerminationState field from the declarative configuration.
func (b *ContainerStatusApplyConfiguration) RemoveLastTerminationState() *ContainerStatusApplyConfiguration {
	b.LastTerminationState = nil
	return b
}

// GetLastTerminationState gets the LastTerminationState field from the declarative configuration.
func (b *ContainerStatusApplyConfiguration) GetLastTerminationState() (value *ContainerStateApplyConfiguration, ok bool) {
	return b.LastTerminationState, b.LastTerminationState != nil
}

// SetReady sets the Ready field in the declarative configuration to the given value.
func (b *ContainerStatusApplyConfiguration) SetReady(value bool) *ContainerStatusApplyConfiguration {
	b.Ready = &value
	return b
}

// RemoveReady removes the Ready field from the declarative configuration.
func (b *ContainerStatusApplyConfiguration) RemoveReady() *ContainerStatusApplyConfiguration {
	b.Ready = nil
	return b
}

// GetReady gets the Ready field from the declarative configuration.
func (b *ContainerStatusApplyConfiguration) GetReady() (value bool, ok bool) {
	if v := b.Ready; v != nil {
		return *v, true
	}
	return value, false
}

// SetRestartCount sets the RestartCount field in the declarative configuration to the given value.
func (b *ContainerStatusApplyConfiguration) SetRestartCount(value int32) *ContainerStatusApplyConfiguration {
	b.RestartCount = &value
	return b
}

// RemoveRestartCount removes the RestartCount field from the declarative configuration.
func (b *ContainerStatusApplyConfiguration) RemoveRestartCount() *ContainerStatusApplyConfiguration {
	b.RestartCount = nil
	return b
}

// GetRestartCount gets the RestartCount field from the declarative configuration.
func (b *ContainerStatusApplyConfiguration) GetRestartCount() (value int32, ok bool) {
	if v := b.RestartCount; v != nil {
		return *v, true
	}
	return value, false
}

// SetImage sets the Image field in the declarative configuration to the given value.
func (b *ContainerStatusApplyConfiguration) SetImage(value string) *ContainerStatusApplyConfiguration {
	b.Image = &value
	return b
}

// RemoveImage removes the Image field from the declarative configuration.
func (b *ContainerStatusApplyConfiguration) RemoveImage() *ContainerStatusApplyConfiguration {
	b.Image = nil
	return b
}

// GetImage gets the Image field from the declarative configuration.
func (b *ContainerStatusApplyConfiguration) GetImage() (value string, ok bool) {
	if v := b.Image; v != nil {
		return *v, true
	}
	return value, false
}

// SetImageID sets the ImageID field in the declarative configuration to the given value.
func (b *ContainerStatusApplyConfiguration) SetImageID(value string) *ContainerStatusApplyConfiguration {
	b.ImageID = &value
	return b
}

// RemoveImageID removes the ImageID field from the declarative configuration.
func (b *ContainerStatusApplyConfiguration) RemoveImageID() *ContainerStatusApplyConfiguration {
	b.ImageID = nil
	return b
}

// GetImageID gets the ImageID field from the declarative configuration.
func (b *ContainerStatusApplyConfiguration) GetImageID() (value string, ok bool) {
	if v := b.ImageID; v != nil {
		return *v, true
	}
	return value, false
}

// SetContainerID sets the ContainerID field in the declarative configuration to the given value.
func (b *ContainerStatusApplyConfiguration) SetContainerID(value string) *ContainerStatusApplyConfiguration {
	b.ContainerID = &value
	return b
}

// RemoveContainerID removes the ContainerID field from the declarative configuration.
func (b *ContainerStatusApplyConfiguration) RemoveContainerID() *ContainerStatusApplyConfiguration {
	b.ContainerID = nil
	return b
}

// GetContainerID gets the ContainerID field from the declarative configuration.
func (b *ContainerStatusApplyConfiguration) GetContainerID() (value string, ok bool) {
	if v := b.ContainerID; v != nil {
		return *v, true
	}
	return value, false
}

// SetStarted sets the Started field in the declarative configuration to the given value.
func (b *ContainerStatusApplyConfiguration) SetStarted(value bool) *ContainerStatusApplyConfiguration {
	b.Started = &value
	return b
}

// RemoveStarted removes the Started field from the declarative configuration.
func (b *ContainerStatusApplyConfiguration) RemoveStarted() *ContainerStatusApplyConfiguration {
	b.Started = nil
	return b
}

// GetStarted gets the Started field from the declarative configuration.
func (b *ContainerStatusApplyConfiguration) GetStarted() (value bool, ok bool) {
	if v := b.Started; v != nil {
		return *v, true
	}
	return value, false
}

// ContainerStatusList represents a listAlias of ContainerStatusApplyConfiguration.
type ContainerStatusList []*ContainerStatusApplyConfiguration

// ContainerStatusList represents a map of ContainerStatusApplyConfiguration.
type ContainerStatusMap map[string]ContainerStatusApplyConfiguration
