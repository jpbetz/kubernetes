/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// ContainerStatusApplyConfiguration represents an declarative configuration of the ContainerStatus type for use
// with apply.
type ContainerStatusApplyConfiguration struct {
	Name                 *string                           `json:"name,omitempty"`
	State                *ContainerStateApplyConfiguration `json:"state,omitempty"`
	LastTerminationState *ContainerStateApplyConfiguration `json:"lastState,omitempty"`
	Ready                *bool                             `json:"ready,omitempty"`
	RestartCount         *int32                            `json:"restartCount,omitempty"`
	Image                *string                           `json:"image,omitempty"`
	ImageID              *string                           `json:"imageID,omitempty"`
	ContainerID          *string                           `json:"containerID,omitempty"`
	Started              *bool                             `json:"started,omitempty"`
}

// ContainerStatusApplyConfiguration constructs an declarative configuration of the ContainerStatus type for use with
// apply.
func ContainerStatus() *ContainerStatusApplyConfiguration {
	return &ContainerStatusApplyConfiguration{}
}

// SetName sets the Name field in the declarative configuration to the given value.
func (b *ContainerStatusApplyConfiguration) SetName(value string) *ContainerStatusApplyConfiguration {
	b.Name = &value
	return b
}

// SetState sets the State field in the declarative configuration to the given value.
func (b *ContainerStatusApplyConfiguration) SetState(value *ContainerStateApplyConfiguration) *ContainerStatusApplyConfiguration {
	b.State = value
	return b
}

// SetLastTerminationState sets the LastTerminationState field in the declarative configuration to the given value.
func (b *ContainerStatusApplyConfiguration) SetLastTerminationState(value *ContainerStateApplyConfiguration) *ContainerStatusApplyConfiguration {
	b.LastTerminationState = value
	return b
}

// SetReady sets the Ready field in the declarative configuration to the given value.
func (b *ContainerStatusApplyConfiguration) SetReady(value bool) *ContainerStatusApplyConfiguration {
	b.Ready = &value
	return b
}

// SetRestartCount sets the RestartCount field in the declarative configuration to the given value.
func (b *ContainerStatusApplyConfiguration) SetRestartCount(value int32) *ContainerStatusApplyConfiguration {
	b.RestartCount = &value
	return b
}

// SetImage sets the Image field in the declarative configuration to the given value.
func (b *ContainerStatusApplyConfiguration) SetImage(value string) *ContainerStatusApplyConfiguration {
	b.Image = &value
	return b
}

// SetImageID sets the ImageID field in the declarative configuration to the given value.
func (b *ContainerStatusApplyConfiguration) SetImageID(value string) *ContainerStatusApplyConfiguration {
	b.ImageID = &value
	return b
}

// SetContainerID sets the ContainerID field in the declarative configuration to the given value.
func (b *ContainerStatusApplyConfiguration) SetContainerID(value string) *ContainerStatusApplyConfiguration {
	b.ContainerID = &value
	return b
}

// SetStarted sets the Started field in the declarative configuration to the given value.
func (b *ContainerStatusApplyConfiguration) SetStarted(value bool) *ContainerStatusApplyConfiguration {
	b.Started = &value
	return b
}
