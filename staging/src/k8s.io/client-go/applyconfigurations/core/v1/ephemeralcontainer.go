/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	corev1 "k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// EphemeralContainerApplyConfiguration represents an declarative configuration of the EphemeralContainer type for use
// with apply.
type EphemeralContainerApplyConfiguration struct {
	ephemeralContainerCommon *EphemeralContainerCommonApplyConfiguration // inlined type
	fields                   ephemeralContainerFields
}

// EphemeralContainerApplyConfiguration constructs an declarative configuration of the EphemeralContainer type for use with
// apply.
func EphemeralContainer() *EphemeralContainerApplyConfiguration {
	return &EphemeralContainerApplyConfiguration{}
}

// ephemeralContainerFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in EphemeralContainerApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type ephemeralContainerFields struct {
	Name                     *string                                 `json:"name,omitempty"`                     // inlined EphemeralContainerApplyConfiguration.ephemeralContainerCommon.Name field
	Image                    *string                                 `json:"image,omitempty"`                    // inlined EphemeralContainerApplyConfiguration.ephemeralContainerCommon.Image field
	Command                  *[]string                               `json:"command,omitempty"`                  // inlined EphemeralContainerApplyConfiguration.ephemeralContainerCommon.Command field
	Args                     *[]string                               `json:"args,omitempty"`                     // inlined EphemeralContainerApplyConfiguration.ephemeralContainerCommon.Args field
	WorkingDir               *string                                 `json:"workingDir,omitempty"`               // inlined EphemeralContainerApplyConfiguration.ephemeralContainerCommon.WorkingDir field
	Ports                    *ContainerPortList                      `json:"ports,omitempty"`                    // inlined EphemeralContainerApplyConfiguration.ephemeralContainerCommon.Ports field
	EnvFrom                  *EnvFromSourceList                      `json:"envFrom,omitempty"`                  // inlined EphemeralContainerApplyConfiguration.ephemeralContainerCommon.EnvFrom field
	Env                      *EnvVarList                             `json:"env,omitempty"`                      // inlined EphemeralContainerApplyConfiguration.ephemeralContainerCommon.Env field
	Resources                *ResourceRequirementsApplyConfiguration `json:"resources,omitempty"`                // inlined EphemeralContainerApplyConfiguration.ephemeralContainerCommon.Resources field
	VolumeMounts             *VolumeMountList                        `json:"volumeMounts,omitempty"`             // inlined EphemeralContainerApplyConfiguration.ephemeralContainerCommon.VolumeMounts field
	VolumeDevices            *VolumeDeviceList                       `json:"volumeDevices,omitempty"`            // inlined EphemeralContainerApplyConfiguration.ephemeralContainerCommon.VolumeDevices field
	LivenessProbe            *ProbeApplyConfiguration                `json:"livenessProbe,omitempty"`            // inlined EphemeralContainerApplyConfiguration.ephemeralContainerCommon.LivenessProbe field
	ReadinessProbe           *ProbeApplyConfiguration                `json:"readinessProbe,omitempty"`           // inlined EphemeralContainerApplyConfiguration.ephemeralContainerCommon.ReadinessProbe field
	StartupProbe             *ProbeApplyConfiguration                `json:"startupProbe,omitempty"`             // inlined EphemeralContainerApplyConfiguration.ephemeralContainerCommon.StartupProbe field
	Lifecycle                *LifecycleApplyConfiguration            `json:"lifecycle,omitempty"`                // inlined EphemeralContainerApplyConfiguration.ephemeralContainerCommon.Lifecycle field
	TerminationMessagePath   *string                                 `json:"terminationMessagePath,omitempty"`   // inlined EphemeralContainerApplyConfiguration.ephemeralContainerCommon.TerminationMessagePath field
	TerminationMessagePolicy *corev1.TerminationMessagePolicy        `json:"terminationMessagePolicy,omitempty"` // inlined EphemeralContainerApplyConfiguration.ephemeralContainerCommon.TerminationMessagePolicy field
	ImagePullPolicy          *corev1.PullPolicy                      `json:"imagePullPolicy,omitempty"`          // inlined EphemeralContainerApplyConfiguration.ephemeralContainerCommon.ImagePullPolicy field
	SecurityContext          *SecurityContextApplyConfiguration      `json:"securityContext,omitempty"`          // inlined EphemeralContainerApplyConfiguration.ephemeralContainerCommon.SecurityContext field
	Stdin                    *bool                                   `json:"stdin,omitempty"`                    // inlined EphemeralContainerApplyConfiguration.ephemeralContainerCommon.Stdin field
	StdinOnce                *bool                                   `json:"stdinOnce,omitempty"`                // inlined EphemeralContainerApplyConfiguration.ephemeralContainerCommon.StdinOnce field
	TTY                      *bool                                   `json:"tty,omitempty"`                      // inlined EphemeralContainerApplyConfiguration.ephemeralContainerCommon.TTY field
	TargetContainerName      *string                                 `json:"targetContainerName,omitempty"`
}

// SetEphemeralContainerCommon sets the EphemeralContainerCommon field in the declarative configuration to the given value.
func (b *EphemeralContainerApplyConfiguration) SetEphemeralContainerCommon(value *EphemeralContainerCommonApplyConfiguration) *EphemeralContainerApplyConfiguration {
	b.ephemeralContainerCommon = value
	return b
}

// RemoveEphemeralContainerCommon removes the EphemeralContainerCommon field from the declarative configuration.
func (b *EphemeralContainerApplyConfiguration) RemoveEphemeralContainerCommon() *EphemeralContainerApplyConfiguration {
	b.ephemeralContainerCommon = nil
	return b
}

// GetEphemeralContainerCommon gets the EphemeralContainerCommon field from the declarative configuration.
func (b *EphemeralContainerApplyConfiguration) GetEphemeralContainerCommon() (value *EphemeralContainerCommonApplyConfiguration, ok bool) {
	return b.ephemeralContainerCommon, true
}

// SetTargetContainerName sets the TargetContainerName field in the declarative configuration to the given value.
func (b *EphemeralContainerApplyConfiguration) SetTargetContainerName(value string) *EphemeralContainerApplyConfiguration {
	b.fields.TargetContainerName = &value
	return b
}

// RemoveTargetContainerName removes the TargetContainerName field from the declarative configuration.
func (b *EphemeralContainerApplyConfiguration) RemoveTargetContainerName() *EphemeralContainerApplyConfiguration {
	b.fields.TargetContainerName = nil
	return b
}

// GetTargetContainerName gets the TargetContainerName field from the declarative configuration.
func (b *EphemeralContainerApplyConfiguration) GetTargetContainerName() (value string, ok bool) {
	if v := b.fields.TargetContainerName; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts EphemeralContainerApplyConfiguration to unstructured.
func (b *EphemeralContainerApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to EphemeralContainerApplyConfiguration, replacing the contents
// of EphemeralContainerApplyConfiguration.
func (b *EphemeralContainerApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &ephemeralContainerFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals EphemeralContainerApplyConfiguration to JSON.
func (b *EphemeralContainerApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into EphemeralContainerApplyConfiguration, replacing the contents of
// EphemeralContainerApplyConfiguration.
func (b *EphemeralContainerApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// EphemeralContainerList represents a listAlias of EphemeralContainerApplyConfiguration.
type EphemeralContainerList []*EphemeralContainerApplyConfiguration

// EphemeralContainerList represents a map of EphemeralContainerApplyConfiguration.
type EphemeralContainerMap map[string]EphemeralContainerApplyConfiguration

func (b *EphemeralContainerApplyConfiguration) preMarshal() {
	if b.ephemeralContainerCommon != nil {
		if v, ok := b.ephemeralContainerCommon.GetName(); ok {
			b.fields.Name = &v
		}
		if v, ok := b.ephemeralContainerCommon.GetImage(); ok {
			b.fields.Image = &v
		}
		if v, ok := b.ephemeralContainerCommon.GetCommand(); ok {
			b.fields.Command = &v
		}
		if v, ok := b.ephemeralContainerCommon.GetArgs(); ok {
			b.fields.Args = &v
		}
		if v, ok := b.ephemeralContainerCommon.GetWorkingDir(); ok {
			b.fields.WorkingDir = &v
		}
		if v, ok := b.ephemeralContainerCommon.GetPorts(); ok {
			b.fields.Ports = &v
		}
		if v, ok := b.ephemeralContainerCommon.GetEnvFrom(); ok {
			b.fields.EnvFrom = &v
		}
		if v, ok := b.ephemeralContainerCommon.GetEnv(); ok {
			b.fields.Env = &v
		}
		if v, ok := b.ephemeralContainerCommon.GetResources(); ok {
			b.fields.Resources = v
		}
		if v, ok := b.ephemeralContainerCommon.GetVolumeMounts(); ok {
			b.fields.VolumeMounts = &v
		}
		if v, ok := b.ephemeralContainerCommon.GetVolumeDevices(); ok {
			b.fields.VolumeDevices = &v
		}
		if v, ok := b.ephemeralContainerCommon.GetLivenessProbe(); ok {
			b.fields.LivenessProbe = v
		}
		if v, ok := b.ephemeralContainerCommon.GetReadinessProbe(); ok {
			b.fields.ReadinessProbe = v
		}
		if v, ok := b.ephemeralContainerCommon.GetStartupProbe(); ok {
			b.fields.StartupProbe = v
		}
		if v, ok := b.ephemeralContainerCommon.GetLifecycle(); ok {
			b.fields.Lifecycle = v
		}
		if v, ok := b.ephemeralContainerCommon.GetTerminationMessagePath(); ok {
			b.fields.TerminationMessagePath = &v
		}
		if v, ok := b.ephemeralContainerCommon.GetTerminationMessagePolicy(); ok {
			b.fields.TerminationMessagePolicy = &v
		}
		if v, ok := b.ephemeralContainerCommon.GetImagePullPolicy(); ok {
			b.fields.ImagePullPolicy = &v
		}
		if v, ok := b.ephemeralContainerCommon.GetSecurityContext(); ok {
			b.fields.SecurityContext = v
		}
		if v, ok := b.ephemeralContainerCommon.GetStdin(); ok {
			b.fields.Stdin = &v
		}
		if v, ok := b.ephemeralContainerCommon.GetStdinOnce(); ok {
			b.fields.StdinOnce = &v
		}
		if v, ok := b.ephemeralContainerCommon.GetTTY(); ok {
			b.fields.TTY = &v
		}
	}
}
func (b *EphemeralContainerApplyConfiguration) postUnmarshal() {
	if b.ephemeralContainerCommon == nil {
		b.ephemeralContainerCommon = &EphemeralContainerCommonApplyConfiguration{}
	}
	if b.fields.Name != nil {
		b.ephemeralContainerCommon.SetName(*b.fields.Name)
	}
	if b.fields.Image != nil {
		b.ephemeralContainerCommon.SetImage(*b.fields.Image)
	}
	if b.fields.Command != nil {
		b.ephemeralContainerCommon.SetCommand(*b.fields.Command)
	}
	if b.fields.Args != nil {
		b.ephemeralContainerCommon.SetArgs(*b.fields.Args)
	}
	if b.fields.WorkingDir != nil {
		b.ephemeralContainerCommon.SetWorkingDir(*b.fields.WorkingDir)
	}
	if b.fields.Ports != nil {
		b.ephemeralContainerCommon.SetPorts(*b.fields.Ports)
	}
	if b.fields.EnvFrom != nil {
		b.ephemeralContainerCommon.SetEnvFrom(*b.fields.EnvFrom)
	}
	if b.fields.Env != nil {
		b.ephemeralContainerCommon.SetEnv(*b.fields.Env)
	}
	if b.fields.Resources != nil {
		b.ephemeralContainerCommon.SetResources(b.fields.Resources)
	}
	if b.fields.VolumeMounts != nil {
		b.ephemeralContainerCommon.SetVolumeMounts(*b.fields.VolumeMounts)
	}
	if b.fields.VolumeDevices != nil {
		b.ephemeralContainerCommon.SetVolumeDevices(*b.fields.VolumeDevices)
	}
	if b.fields.LivenessProbe != nil {
		b.ephemeralContainerCommon.SetLivenessProbe(b.fields.LivenessProbe)
	}
	if b.fields.ReadinessProbe != nil {
		b.ephemeralContainerCommon.SetReadinessProbe(b.fields.ReadinessProbe)
	}
	if b.fields.StartupProbe != nil {
		b.ephemeralContainerCommon.SetStartupProbe(b.fields.StartupProbe)
	}
	if b.fields.Lifecycle != nil {
		b.ephemeralContainerCommon.SetLifecycle(b.fields.Lifecycle)
	}
	if b.fields.TerminationMessagePath != nil {
		b.ephemeralContainerCommon.SetTerminationMessagePath(*b.fields.TerminationMessagePath)
	}
	if b.fields.TerminationMessagePolicy != nil {
		b.ephemeralContainerCommon.SetTerminationMessagePolicy(*b.fields.TerminationMessagePolicy)
	}
	if b.fields.ImagePullPolicy != nil {
		b.ephemeralContainerCommon.SetImagePullPolicy(*b.fields.ImagePullPolicy)
	}
	if b.fields.SecurityContext != nil {
		b.ephemeralContainerCommon.SetSecurityContext(b.fields.SecurityContext)
	}
	if b.fields.Stdin != nil {
		b.ephemeralContainerCommon.SetStdin(*b.fields.Stdin)
	}
	if b.fields.StdinOnce != nil {
		b.ephemeralContainerCommon.SetStdinOnce(*b.fields.StdinOnce)
	}
	if b.fields.TTY != nil {
		b.ephemeralContainerCommon.SetTTY(*b.fields.TTY)
	}
}
