/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// PodIPApplyConfiguration represents an declarative configuration of the PodIP type for use
// with apply.
type PodIPApplyConfiguration struct {
	fields podIPFields
}

// PodIPApplyConfiguration constructs an declarative configuration of the PodIP type for use with
// apply.
func PodIP() *PodIPApplyConfiguration {
	return &PodIPApplyConfiguration{}
}

// podIPFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in PodIPApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type podIPFields struct {
	IP *string `json:"ip,omitempty"`
}

// SetIP sets the IP field in the declarative configuration to the given value.
func (b *PodIPApplyConfiguration) SetIP(value string) *PodIPApplyConfiguration {
	b.fields.IP = &value
	return b
}

// RemoveIP removes the IP field from the declarative configuration.
func (b *PodIPApplyConfiguration) RemoveIP() *PodIPApplyConfiguration {
	b.fields.IP = nil
	return b
}

// GetIP gets the IP field from the declarative configuration.
func (b *PodIPApplyConfiguration) GetIP() (value string, ok bool) {
	if v := b.fields.IP; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts PodIPApplyConfiguration to unstructured.
func (b *PodIPApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to PodIPApplyConfiguration, replacing the contents
// of PodIPApplyConfiguration.
func (b *PodIPApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &podIPFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals PodIPApplyConfiguration to JSON.
func (b *PodIPApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into PodIPApplyConfiguration, replacing the contents of
// PodIPApplyConfiguration.
func (b *PodIPApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// PodIPList represents a listAlias of PodIPApplyConfiguration.
type PodIPList []*PodIPApplyConfiguration

// PodIPList represents a map of PodIPApplyConfiguration.
type PodIPMap map[string]PodIPApplyConfiguration

func (b *PodIPApplyConfiguration) preMarshal() {
}
func (b *PodIPApplyConfiguration) postUnmarshal() {
}
