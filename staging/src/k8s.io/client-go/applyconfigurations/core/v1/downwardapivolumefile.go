/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DownwardAPIVolumeFileApplyConfiguration represents an declarative configuration of the DownwardAPIVolumeFile type for use
// with apply.
type DownwardAPIVolumeFileApplyConfiguration struct {
	fields downwardAPIVolumeFileFields
}

// DownwardAPIVolumeFileApplyConfiguration constructs an declarative configuration of the DownwardAPIVolumeFile type for use with
// apply.
func DownwardAPIVolumeFile() *DownwardAPIVolumeFileApplyConfiguration {
	return &DownwardAPIVolumeFileApplyConfiguration{}
}

// downwardAPIVolumeFileFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in DownwardAPIVolumeFileApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type downwardAPIVolumeFileFields struct {
	Path             *string                                  `json:"path,omitempty"`
	FieldRef         *ObjectFieldSelectorApplyConfiguration   `json:"fieldRef,omitempty"`
	ResourceFieldRef *ResourceFieldSelectorApplyConfiguration `json:"resourceFieldRef,omitempty"`
	Mode             *int32                                   `json:"mode,omitempty"`
}

// SetPath sets the Path field in the declarative configuration to the given value.
func (b *DownwardAPIVolumeFileApplyConfiguration) SetPath(value string) *DownwardAPIVolumeFileApplyConfiguration {
	b.fields.Path = &value
	return b
}

// RemovePath removes the Path field from the declarative configuration.
func (b *DownwardAPIVolumeFileApplyConfiguration) RemovePath() *DownwardAPIVolumeFileApplyConfiguration {
	b.fields.Path = nil
	return b
}

// GetPath gets the Path field from the declarative configuration.
func (b *DownwardAPIVolumeFileApplyConfiguration) GetPath() (value string, ok bool) {
	if v := b.fields.Path; v != nil {
		return *v, true
	}
	return value, false
}

// SetFieldRef sets the FieldRef field in the declarative configuration to the given value.
func (b *DownwardAPIVolumeFileApplyConfiguration) SetFieldRef(value *ObjectFieldSelectorApplyConfiguration) *DownwardAPIVolumeFileApplyConfiguration {
	b.fields.FieldRef = value
	return b
}

// RemoveFieldRef removes the FieldRef field from the declarative configuration.
func (b *DownwardAPIVolumeFileApplyConfiguration) RemoveFieldRef() *DownwardAPIVolumeFileApplyConfiguration {
	b.fields.FieldRef = nil
	return b
}

// GetFieldRef gets the FieldRef field from the declarative configuration.
func (b *DownwardAPIVolumeFileApplyConfiguration) GetFieldRef() (value *ObjectFieldSelectorApplyConfiguration, ok bool) {
	return b.fields.FieldRef, b.fields.FieldRef != nil
}

// SetResourceFieldRef sets the ResourceFieldRef field in the declarative configuration to the given value.
func (b *DownwardAPIVolumeFileApplyConfiguration) SetResourceFieldRef(value *ResourceFieldSelectorApplyConfiguration) *DownwardAPIVolumeFileApplyConfiguration {
	b.fields.ResourceFieldRef = value
	return b
}

// RemoveResourceFieldRef removes the ResourceFieldRef field from the declarative configuration.
func (b *DownwardAPIVolumeFileApplyConfiguration) RemoveResourceFieldRef() *DownwardAPIVolumeFileApplyConfiguration {
	b.fields.ResourceFieldRef = nil
	return b
}

// GetResourceFieldRef gets the ResourceFieldRef field from the declarative configuration.
func (b *DownwardAPIVolumeFileApplyConfiguration) GetResourceFieldRef() (value *ResourceFieldSelectorApplyConfiguration, ok bool) {
	return b.fields.ResourceFieldRef, b.fields.ResourceFieldRef != nil
}

// SetMode sets the Mode field in the declarative configuration to the given value.
func (b *DownwardAPIVolumeFileApplyConfiguration) SetMode(value int32) *DownwardAPIVolumeFileApplyConfiguration {
	b.fields.Mode = &value
	return b
}

// RemoveMode removes the Mode field from the declarative configuration.
func (b *DownwardAPIVolumeFileApplyConfiguration) RemoveMode() *DownwardAPIVolumeFileApplyConfiguration {
	b.fields.Mode = nil
	return b
}

// GetMode gets the Mode field from the declarative configuration.
func (b *DownwardAPIVolumeFileApplyConfiguration) GetMode() (value int32, ok bool) {
	if v := b.fields.Mode; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts DownwardAPIVolumeFileApplyConfiguration to unstructured.
func (b *DownwardAPIVolumeFileApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to DownwardAPIVolumeFileApplyConfiguration, replacing the contents
// of DownwardAPIVolumeFileApplyConfiguration.
func (b *DownwardAPIVolumeFileApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &downwardAPIVolumeFileFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals DownwardAPIVolumeFileApplyConfiguration to JSON.
func (b *DownwardAPIVolumeFileApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into DownwardAPIVolumeFileApplyConfiguration, replacing the contents of
// DownwardAPIVolumeFileApplyConfiguration.
func (b *DownwardAPIVolumeFileApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// DownwardAPIVolumeFileList represents a listAlias of DownwardAPIVolumeFileApplyConfiguration.
type DownwardAPIVolumeFileList []*DownwardAPIVolumeFileApplyConfiguration

// DownwardAPIVolumeFileList represents a map of DownwardAPIVolumeFileApplyConfiguration.
type DownwardAPIVolumeFileMap map[string]DownwardAPIVolumeFileApplyConfiguration

func (b *DownwardAPIVolumeFileApplyConfiguration) preMarshal() {
}
func (b *DownwardAPIVolumeFileApplyConfiguration) postUnmarshal() {
}
