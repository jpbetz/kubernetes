/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s.io/api/core/v1"
)

// PersistentVolumeSpecApplyConfiguration represents an declarative configuration of the PersistentVolumeSpec type for use
// with apply.
type PersistentVolumeSpecApplyConfiguration struct {
	Capacity                                 *v1.ResourceList `json:"capacity,omitempty"`
	PersistentVolumeSourceApplyConfiguration `json:",inline"`
	AccessModes                              *[]v1.PersistentVolumeAccessMode      `json:"accessModes,omitempty"`
	ClaimRef                                 *ObjectReferenceApplyConfiguration    `json:"claimRef,omitempty"`
	PersistentVolumeReclaimPolicy            *v1.PersistentVolumeReclaimPolicy     `json:"persistentVolumeReclaimPolicy,omitempty"`
	StorageClassName                         *string                               `json:"storageClassName,omitempty"`
	MountOptions                             *[]string                             `json:"mountOptions,omitempty"`
	VolumeMode                               *v1.PersistentVolumeMode              `json:"volumeMode,omitempty"`
	NodeAffinity                             *VolumeNodeAffinityApplyConfiguration `json:"nodeAffinity,omitempty"`
}

// PersistentVolumeSpecApplyConfiguration constructs an declarative configuration of the PersistentVolumeSpec type for use with
// apply.
func PersistentVolumeSpec() *PersistentVolumeSpecApplyConfiguration {
	return &PersistentVolumeSpecApplyConfiguration{}
}

// SetCapacity sets the Capacity field in the declarative configuration to the given value.
func (b *PersistentVolumeSpecApplyConfiguration) SetCapacity(value v1.ResourceList) *PersistentVolumeSpecApplyConfiguration {
	b.Capacity = &value
	return b
}

// RemoveCapacity removes the Capacity field from the declarative configuration.
func (b *PersistentVolumeSpecApplyConfiguration) RemoveCapacity() *PersistentVolumeSpecApplyConfiguration {
	b.Capacity = nil
	return b
}

// GetCapacity gets the Capacity field from the declarative configuration.
func (b *PersistentVolumeSpecApplyConfiguration) GetCapacity() (value v1.ResourceList, ok bool) {
	if v := b.Capacity; v != nil {
		return *v, true
	}
	return value, false
}

// SetPersistentVolumeSource sets the PersistentVolumeSource field in the declarative configuration to the given value.
func (b *PersistentVolumeSpecApplyConfiguration) SetPersistentVolumeSource(value *PersistentVolumeSourceApplyConfiguration) *PersistentVolumeSpecApplyConfiguration {
	if value != nil {
		b.PersistentVolumeSourceApplyConfiguration = *value
	}
	return b
}

// GetPersistentVolumeSource gets the PersistentVolumeSource field from the declarative configuration.
func (b *PersistentVolumeSpecApplyConfiguration) GetPersistentVolumeSource() (value *PersistentVolumeSourceApplyConfiguration, ok bool) {
	return &b.PersistentVolumeSourceApplyConfiguration, true
}

// SetAccessModes sets the AccessModes field in the declarative configuration to the given value.
func (b *PersistentVolumeSpecApplyConfiguration) SetAccessModes(value []v1.PersistentVolumeAccessMode) *PersistentVolumeSpecApplyConfiguration {
	b.AccessModes = &value
	return b
}

// RemoveAccessModes removes the AccessModes field from the declarative configuration.
func (b *PersistentVolumeSpecApplyConfiguration) RemoveAccessModes() *PersistentVolumeSpecApplyConfiguration {
	b.AccessModes = nil
	return b
}

// GetAccessModes gets the AccessModes field from the declarative configuration.
func (b *PersistentVolumeSpecApplyConfiguration) GetAccessModes() (value []v1.PersistentVolumeAccessMode, ok bool) {
	if v := b.AccessModes; v != nil {
		return *v, true
	}
	return value, false
}

// SetClaimRef sets the ClaimRef field in the declarative configuration to the given value.
func (b *PersistentVolumeSpecApplyConfiguration) SetClaimRef(value *ObjectReferenceApplyConfiguration) *PersistentVolumeSpecApplyConfiguration {
	b.ClaimRef = value
	return b
}

// RemoveClaimRef removes the ClaimRef field from the declarative configuration.
func (b *PersistentVolumeSpecApplyConfiguration) RemoveClaimRef() *PersistentVolumeSpecApplyConfiguration {
	b.ClaimRef = nil
	return b
}

// GetClaimRef gets the ClaimRef field from the declarative configuration.
func (b *PersistentVolumeSpecApplyConfiguration) GetClaimRef() (value *ObjectReferenceApplyConfiguration, ok bool) {
	return b.ClaimRef, b.ClaimRef != nil
}

// SetPersistentVolumeReclaimPolicy sets the PersistentVolumeReclaimPolicy field in the declarative configuration to the given value.
func (b *PersistentVolumeSpecApplyConfiguration) SetPersistentVolumeReclaimPolicy(value v1.PersistentVolumeReclaimPolicy) *PersistentVolumeSpecApplyConfiguration {
	b.PersistentVolumeReclaimPolicy = &value
	return b
}

// RemovePersistentVolumeReclaimPolicy removes the PersistentVolumeReclaimPolicy field from the declarative configuration.
func (b *PersistentVolumeSpecApplyConfiguration) RemovePersistentVolumeReclaimPolicy() *PersistentVolumeSpecApplyConfiguration {
	b.PersistentVolumeReclaimPolicy = nil
	return b
}

// GetPersistentVolumeReclaimPolicy gets the PersistentVolumeReclaimPolicy field from the declarative configuration.
func (b *PersistentVolumeSpecApplyConfiguration) GetPersistentVolumeReclaimPolicy() (value v1.PersistentVolumeReclaimPolicy, ok bool) {
	if v := b.PersistentVolumeReclaimPolicy; v != nil {
		return *v, true
	}
	return value, false
}

// SetStorageClassName sets the StorageClassName field in the declarative configuration to the given value.
func (b *PersistentVolumeSpecApplyConfiguration) SetStorageClassName(value string) *PersistentVolumeSpecApplyConfiguration {
	b.StorageClassName = &value
	return b
}

// RemoveStorageClassName removes the StorageClassName field from the declarative configuration.
func (b *PersistentVolumeSpecApplyConfiguration) RemoveStorageClassName() *PersistentVolumeSpecApplyConfiguration {
	b.StorageClassName = nil
	return b
}

// GetStorageClassName gets the StorageClassName field from the declarative configuration.
func (b *PersistentVolumeSpecApplyConfiguration) GetStorageClassName() (value string, ok bool) {
	if v := b.StorageClassName; v != nil {
		return *v, true
	}
	return value, false
}

// SetMountOptions sets the MountOptions field in the declarative configuration to the given value.
func (b *PersistentVolumeSpecApplyConfiguration) SetMountOptions(value []string) *PersistentVolumeSpecApplyConfiguration {
	b.MountOptions = &value
	return b
}

// RemoveMountOptions removes the MountOptions field from the declarative configuration.
func (b *PersistentVolumeSpecApplyConfiguration) RemoveMountOptions() *PersistentVolumeSpecApplyConfiguration {
	b.MountOptions = nil
	return b
}

// GetMountOptions gets the MountOptions field from the declarative configuration.
func (b *PersistentVolumeSpecApplyConfiguration) GetMountOptions() (value []string, ok bool) {
	if v := b.MountOptions; v != nil {
		return *v, true
	}
	return value, false
}

// SetVolumeMode sets the VolumeMode field in the declarative configuration to the given value.
func (b *PersistentVolumeSpecApplyConfiguration) SetVolumeMode(value v1.PersistentVolumeMode) *PersistentVolumeSpecApplyConfiguration {
	b.VolumeMode = &value
	return b
}

// RemoveVolumeMode removes the VolumeMode field from the declarative configuration.
func (b *PersistentVolumeSpecApplyConfiguration) RemoveVolumeMode() *PersistentVolumeSpecApplyConfiguration {
	b.VolumeMode = nil
	return b
}

// GetVolumeMode gets the VolumeMode field from the declarative configuration.
func (b *PersistentVolumeSpecApplyConfiguration) GetVolumeMode() (value v1.PersistentVolumeMode, ok bool) {
	if v := b.VolumeMode; v != nil {
		return *v, true
	}
	return value, false
}

// SetNodeAffinity sets the NodeAffinity field in the declarative configuration to the given value.
func (b *PersistentVolumeSpecApplyConfiguration) SetNodeAffinity(value *VolumeNodeAffinityApplyConfiguration) *PersistentVolumeSpecApplyConfiguration {
	b.NodeAffinity = value
	return b
}

// RemoveNodeAffinity removes the NodeAffinity field from the declarative configuration.
func (b *PersistentVolumeSpecApplyConfiguration) RemoveNodeAffinity() *PersistentVolumeSpecApplyConfiguration {
	b.NodeAffinity = nil
	return b
}

// GetNodeAffinity gets the NodeAffinity field from the declarative configuration.
func (b *PersistentVolumeSpecApplyConfiguration) GetNodeAffinity() (value *VolumeNodeAffinityApplyConfiguration, ok bool) {
	return b.NodeAffinity, b.NodeAffinity != nil
}

// PersistentVolumeSpecList represents a listAlias of PersistentVolumeSpecApplyConfiguration.
type PersistentVolumeSpecList []*PersistentVolumeSpecApplyConfiguration

// PersistentVolumeSpecList represents a map of PersistentVolumeSpecApplyConfiguration.
type PersistentVolumeSpecMap map[string]PersistentVolumeSpecApplyConfiguration
