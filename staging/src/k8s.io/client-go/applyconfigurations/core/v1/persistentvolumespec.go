/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s.io/api/core/v1"
)

// PersistentVolumeSpecApplyConfiguration represents an declarative configuration of the PersistentVolumeSpec type for use
// with apply.
type PersistentVolumeSpecApplyConfiguration struct {
	Capacity                                 *v1.ResourceList `json:"capacity,omitempty"`
	PersistentVolumeSourceApplyConfiguration `json:",inline"`
	AccessModes                              *[]v1.PersistentVolumeAccessMode      `json:"accessModes,omitempty"`
	ClaimRef                                 *ObjectReferenceApplyConfiguration    `json:"claimRef,omitempty"`
	PersistentVolumeReclaimPolicy            *v1.PersistentVolumeReclaimPolicy     `json:"persistentVolumeReclaimPolicy,omitempty"`
	StorageClassName                         *string                               `json:"storageClassName,omitempty"`
	MountOptions                             *[]string                             `json:"mountOptions,omitempty"`
	VolumeMode                               *v1.PersistentVolumeMode              `json:"volumeMode,omitempty"`
	NodeAffinity                             *VolumeNodeAffinityApplyConfiguration `json:"nodeAffinity,omitempty"`
}

// PersistentVolumeSpecApplyConfiguration constructs an declarative configuration of the PersistentVolumeSpec type for use with
// apply.
func PersistentVolumeSpec() *PersistentVolumeSpecApplyConfiguration {
	return &PersistentVolumeSpecApplyConfiguration{}
}

// SetCapacity sets the Capacity field in the declarative configuration to the given value.
func (b *PersistentVolumeSpecApplyConfiguration) SetCapacity(value v1.ResourceList) *PersistentVolumeSpecApplyConfiguration {
	b.Capacity = &value
	return b
}

// SetAccessModes sets the AccessModes field in the declarative configuration to the given value.
func (b *PersistentVolumeSpecApplyConfiguration) SetAccessModes(value []v1.PersistentVolumeAccessMode) *PersistentVolumeSpecApplyConfiguration {
	b.AccessModes = &value
	return b
}

// SetClaimRef sets the ClaimRef field in the declarative configuration to the given value.
func (b *PersistentVolumeSpecApplyConfiguration) SetClaimRef(value *ObjectReferenceApplyConfiguration) *PersistentVolumeSpecApplyConfiguration {
	b.ClaimRef = value
	return b
}

// SetPersistentVolumeReclaimPolicy sets the PersistentVolumeReclaimPolicy field in the declarative configuration to the given value.
func (b *PersistentVolumeSpecApplyConfiguration) SetPersistentVolumeReclaimPolicy(value v1.PersistentVolumeReclaimPolicy) *PersistentVolumeSpecApplyConfiguration {
	b.PersistentVolumeReclaimPolicy = &value
	return b
}

// SetStorageClassName sets the StorageClassName field in the declarative configuration to the given value.
func (b *PersistentVolumeSpecApplyConfiguration) SetStorageClassName(value string) *PersistentVolumeSpecApplyConfiguration {
	b.StorageClassName = &value
	return b
}

// SetMountOptions sets the MountOptions field in the declarative configuration to the given value.
func (b *PersistentVolumeSpecApplyConfiguration) SetMountOptions(value []string) *PersistentVolumeSpecApplyConfiguration {
	b.MountOptions = &value
	return b
}

// SetVolumeMode sets the VolumeMode field in the declarative configuration to the given value.
func (b *PersistentVolumeSpecApplyConfiguration) SetVolumeMode(value v1.PersistentVolumeMode) *PersistentVolumeSpecApplyConfiguration {
	b.VolumeMode = &value
	return b
}

// SetNodeAffinity sets the NodeAffinity field in the declarative configuration to the given value.
func (b *PersistentVolumeSpecApplyConfiguration) SetNodeAffinity(value *VolumeNodeAffinityApplyConfiguration) *PersistentVolumeSpecApplyConfiguration {
	b.NodeAffinity = value
	return b
}
