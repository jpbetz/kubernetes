/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// ScopeSelectorApplyConfiguration represents an declarative configuration of the ScopeSelector type for use
// with apply.
type ScopeSelectorApplyConfiguration struct {
	MatchExpressions *ScopedResourceSelectorRequirementList `json:"matchExpressions,omitempty"`
}

// ScopeSelectorApplyConfiguration constructs an declarative configuration of the ScopeSelector type for use with
// apply.
func ScopeSelector() *ScopeSelectorApplyConfiguration {
	return &ScopeSelectorApplyConfiguration{}
}

// SetMatchExpressions sets the MatchExpressions field in the declarative configuration to the given value.
func (b *ScopeSelectorApplyConfiguration) SetMatchExpressions(value ScopedResourceSelectorRequirementList) *ScopeSelectorApplyConfiguration {
	b.MatchExpressions = &value
	return b
}

// RemoveMatchExpressions removes the MatchExpressions field from the declarative configuration.
func (b *ScopeSelectorApplyConfiguration) RemoveMatchExpressions() *ScopeSelectorApplyConfiguration {
	b.MatchExpressions = nil
	return b
}

// GetMatchExpressions gets the MatchExpressions field from the declarative configuration.
func (b *ScopeSelectorApplyConfiguration) GetMatchExpressions() (value ScopedResourceSelectorRequirementList, ok bool) {
	if v := b.MatchExpressions; v != nil {
		return *v, true
	}
	return value, false
}

// ScopeSelectorList represents a listAlias of ScopeSelectorApplyConfiguration.
type ScopeSelectorList []*ScopeSelectorApplyConfiguration

// ScopeSelectorList represents a map of ScopeSelectorApplyConfiguration.
type ScopeSelectorMap map[string]ScopeSelectorApplyConfiguration
