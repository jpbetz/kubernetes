/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ContainerStateRunningApplyConfiguration represents an declarative configuration of the ContainerStateRunning type for use
// with apply.
type ContainerStateRunningApplyConfiguration struct {
	fields containerStateRunningFields
}

// ContainerStateRunningApplyConfiguration constructs an declarative configuration of the ContainerStateRunning type for use with
// apply.
func ContainerStateRunning() *ContainerStateRunningApplyConfiguration {
	return &ContainerStateRunningApplyConfiguration{}
}

// containerStateRunningFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in ContainerStateRunningApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type containerStateRunningFields struct {
	StartedAt *v1.Time `json:"startedAt,omitempty"`
}

// SetStartedAt sets the StartedAt field in the declarative configuration to the given value.
func (b *ContainerStateRunningApplyConfiguration) SetStartedAt(value v1.Time) *ContainerStateRunningApplyConfiguration {
	b.fields.StartedAt = &value
	return b
}

// RemoveStartedAt removes the StartedAt field from the declarative configuration.
func (b *ContainerStateRunningApplyConfiguration) RemoveStartedAt() *ContainerStateRunningApplyConfiguration {
	b.fields.StartedAt = nil
	return b
}

// GetStartedAt gets the StartedAt field from the declarative configuration.
func (b *ContainerStateRunningApplyConfiguration) GetStartedAt() (value v1.Time, ok bool) {
	if v := b.fields.StartedAt; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ContainerStateRunningApplyConfiguration to unstructured.
func (b *ContainerStateRunningApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ContainerStateRunningApplyConfiguration, replacing the contents
// of ContainerStateRunningApplyConfiguration.
func (b *ContainerStateRunningApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &containerStateRunningFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ContainerStateRunningApplyConfiguration to JSON.
func (b *ContainerStateRunningApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into ContainerStateRunningApplyConfiguration, replacing the contents of
// ContainerStateRunningApplyConfiguration.
func (b *ContainerStateRunningApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ContainerStateRunningList represents a listAlias of ContainerStateRunningApplyConfiguration.
type ContainerStateRunningList []*ContainerStateRunningApplyConfiguration

// ContainerStateRunningList represents a map of ContainerStateRunningApplyConfiguration.
type ContainerStateRunningMap map[string]ContainerStateRunningApplyConfiguration

func (b *ContainerStateRunningApplyConfiguration) preMarshal() {
}
func (b *ContainerStateRunningApplyConfiguration) postUnmarshal() {
}
