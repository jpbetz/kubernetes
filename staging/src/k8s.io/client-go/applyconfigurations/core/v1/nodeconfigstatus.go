/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// NodeConfigStatusApplyConfiguration represents an declarative configuration of the NodeConfigStatus type for use
// with apply.
type NodeConfigStatusApplyConfiguration struct {
	Assigned      *NodeConfigSourceApplyConfiguration `json:"assigned,omitempty"`
	Active        *NodeConfigSourceApplyConfiguration `json:"active,omitempty"`
	LastKnownGood *NodeConfigSourceApplyConfiguration `json:"lastKnownGood,omitempty"`
	Error         *string                             `json:"error,omitempty"`
}

// NodeConfigStatusApplyConfiguration constructs an declarative configuration of the NodeConfigStatus type for use with
// apply.
func NodeConfigStatus() *NodeConfigStatusApplyConfiguration {
	return &NodeConfigStatusApplyConfiguration{}
}

// SetAssigned sets the Assigned field in the declarative configuration to the given value.
func (b *NodeConfigStatusApplyConfiguration) SetAssigned(value *NodeConfigSourceApplyConfiguration) *NodeConfigStatusApplyConfiguration {
	b.Assigned = value
	return b
}

// RemoveAssigned removes the Assigned field from the declarative configuration.
func (b *NodeConfigStatusApplyConfiguration) RemoveAssigned() *NodeConfigStatusApplyConfiguration {
	b.Assigned = nil
	return b
}

// GetAssigned gets the Assigned field from the declarative configuration.
func (b *NodeConfigStatusApplyConfiguration) GetAssigned() (value *NodeConfigSourceApplyConfiguration, ok bool) {
	return b.Assigned, b.Assigned != nil
}

// SetActive sets the Active field in the declarative configuration to the given value.
func (b *NodeConfigStatusApplyConfiguration) SetActive(value *NodeConfigSourceApplyConfiguration) *NodeConfigStatusApplyConfiguration {
	b.Active = value
	return b
}

// RemoveActive removes the Active field from the declarative configuration.
func (b *NodeConfigStatusApplyConfiguration) RemoveActive() *NodeConfigStatusApplyConfiguration {
	b.Active = nil
	return b
}

// GetActive gets the Active field from the declarative configuration.
func (b *NodeConfigStatusApplyConfiguration) GetActive() (value *NodeConfigSourceApplyConfiguration, ok bool) {
	return b.Active, b.Active != nil
}

// SetLastKnownGood sets the LastKnownGood field in the declarative configuration to the given value.
func (b *NodeConfigStatusApplyConfiguration) SetLastKnownGood(value *NodeConfigSourceApplyConfiguration) *NodeConfigStatusApplyConfiguration {
	b.LastKnownGood = value
	return b
}

// RemoveLastKnownGood removes the LastKnownGood field from the declarative configuration.
func (b *NodeConfigStatusApplyConfiguration) RemoveLastKnownGood() *NodeConfigStatusApplyConfiguration {
	b.LastKnownGood = nil
	return b
}

// GetLastKnownGood gets the LastKnownGood field from the declarative configuration.
func (b *NodeConfigStatusApplyConfiguration) GetLastKnownGood() (value *NodeConfigSourceApplyConfiguration, ok bool) {
	return b.LastKnownGood, b.LastKnownGood != nil
}

// SetError sets the Error field in the declarative configuration to the given value.
func (b *NodeConfigStatusApplyConfiguration) SetError(value string) *NodeConfigStatusApplyConfiguration {
	b.Error = &value
	return b
}

// RemoveError removes the Error field from the declarative configuration.
func (b *NodeConfigStatusApplyConfiguration) RemoveError() *NodeConfigStatusApplyConfiguration {
	b.Error = nil
	return b
}

// GetError gets the Error field from the declarative configuration.
func (b *NodeConfigStatusApplyConfiguration) GetError() (value string, ok bool) {
	if v := b.Error; v != nil {
		return *v, true
	}
	return value, false
}

// NodeConfigStatusList represents a listAlias of NodeConfigStatusApplyConfiguration.
type NodeConfigStatusList []*NodeConfigStatusApplyConfiguration

// NodeConfigStatusList represents a map of NodeConfigStatusApplyConfiguration.
type NodeConfigStatusMap map[string]NodeConfigStatusApplyConfiguration
