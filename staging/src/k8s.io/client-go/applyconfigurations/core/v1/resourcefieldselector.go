/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	resource "k8s.io/apimachinery/pkg/api/resource"
)

// ResourceFieldSelectorApplyConfiguration represents an declarative configuration of the ResourceFieldSelector type for use
// with apply.
type ResourceFieldSelectorApplyConfiguration struct {
	ContainerName *string            `json:"containerName,omitempty"`
	Resource      *string            `json:"resource,omitempty"`
	Divisor       *resource.Quantity `json:"divisor,omitempty"`
}

// ResourceFieldSelectorApplyConfiguration constructs an declarative configuration of the ResourceFieldSelector type for use with
// apply.
func ResourceFieldSelector() *ResourceFieldSelectorApplyConfiguration {
	return &ResourceFieldSelectorApplyConfiguration{}
}

// SetContainerName sets the ContainerName field in the declarative configuration to the given value.
func (b *ResourceFieldSelectorApplyConfiguration) SetContainerName(value string) *ResourceFieldSelectorApplyConfiguration {
	b.ContainerName = &value
	return b
}

// RemoveContainerName removes the ContainerName field from the declarative configuration.
func (b *ResourceFieldSelectorApplyConfiguration) RemoveContainerName() *ResourceFieldSelectorApplyConfiguration {
	b.ContainerName = nil
	return b
}

// GetContainerName gets the ContainerName field from the declarative configuration.
func (b *ResourceFieldSelectorApplyConfiguration) GetContainerName() (value string, ok bool) {
	if v := b.ContainerName; v != nil {
		return *v, true
	}
	return value, false
}

// SetResource sets the Resource field in the declarative configuration to the given value.
func (b *ResourceFieldSelectorApplyConfiguration) SetResource(value string) *ResourceFieldSelectorApplyConfiguration {
	b.Resource = &value
	return b
}

// RemoveResource removes the Resource field from the declarative configuration.
func (b *ResourceFieldSelectorApplyConfiguration) RemoveResource() *ResourceFieldSelectorApplyConfiguration {
	b.Resource = nil
	return b
}

// GetResource gets the Resource field from the declarative configuration.
func (b *ResourceFieldSelectorApplyConfiguration) GetResource() (value string, ok bool) {
	if v := b.Resource; v != nil {
		return *v, true
	}
	return value, false
}

// SetDivisor sets the Divisor field in the declarative configuration to the given value.
func (b *ResourceFieldSelectorApplyConfiguration) SetDivisor(value resource.Quantity) *ResourceFieldSelectorApplyConfiguration {
	b.Divisor = &value
	return b
}

// RemoveDivisor removes the Divisor field from the declarative configuration.
func (b *ResourceFieldSelectorApplyConfiguration) RemoveDivisor() *ResourceFieldSelectorApplyConfiguration {
	b.Divisor = nil
	return b
}

// GetDivisor gets the Divisor field from the declarative configuration.
func (b *ResourceFieldSelectorApplyConfiguration) GetDivisor() (value resource.Quantity, ok bool) {
	if v := b.Divisor; v != nil {
		return *v, true
	}
	return value, false
}

// ResourceFieldSelectorList represents a listAlias of ResourceFieldSelectorApplyConfiguration.
type ResourceFieldSelectorList []*ResourceFieldSelectorApplyConfiguration

// ResourceFieldSelectorList represents a map of ResourceFieldSelectorApplyConfiguration.
type ResourceFieldSelectorMap map[string]ResourceFieldSelectorApplyConfiguration
