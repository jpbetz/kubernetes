/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s.io/api/core/v1"
)

// TolerationApplyConfiguration represents an declarative configuration of the Toleration type for use
// with apply.
type TolerationApplyConfiguration struct {
	Key               *string                `json:"key,omitempty"`
	Operator          *v1.TolerationOperator `json:"operator,omitempty"`
	Value             *string                `json:"value,omitempty"`
	Effect            *v1.TaintEffect        `json:"effect,omitempty"`
	TolerationSeconds *int64                 `json:"tolerationSeconds,omitempty"`
}

// TolerationApplyConfiguration constructs an declarative configuration of the Toleration type for use with
// apply.
func Toleration() *TolerationApplyConfiguration {
	return &TolerationApplyConfiguration{}
}

// SetKey sets the Key field in the declarative configuration to the given value.
func (b *TolerationApplyConfiguration) SetKey(value string) *TolerationApplyConfiguration {
	b.Key = &value
	return b
}

// RemoveKey removes the Key field from the declarative configuration.
func (b *TolerationApplyConfiguration) RemoveKey() *TolerationApplyConfiguration {
	b.Key = nil
	return b
}

// GetKey gets the Key field from the declarative configuration.
func (b *TolerationApplyConfiguration) GetKey() (value string, ok bool) {
	if v := b.Key; v != nil {
		return *v, true
	}
	return value, false
}

// SetOperator sets the Operator field in the declarative configuration to the given value.
func (b *TolerationApplyConfiguration) SetOperator(value v1.TolerationOperator) *TolerationApplyConfiguration {
	b.Operator = &value
	return b
}

// RemoveOperator removes the Operator field from the declarative configuration.
func (b *TolerationApplyConfiguration) RemoveOperator() *TolerationApplyConfiguration {
	b.Operator = nil
	return b
}

// GetOperator gets the Operator field from the declarative configuration.
func (b *TolerationApplyConfiguration) GetOperator() (value v1.TolerationOperator, ok bool) {
	if v := b.Operator; v != nil {
		return *v, true
	}
	return value, false
}

// SetValue sets the Value field in the declarative configuration to the given value.
func (b *TolerationApplyConfiguration) SetValue(value string) *TolerationApplyConfiguration {
	b.Value = &value
	return b
}

// RemoveValue removes the Value field from the declarative configuration.
func (b *TolerationApplyConfiguration) RemoveValue() *TolerationApplyConfiguration {
	b.Value = nil
	return b
}

// GetValue gets the Value field from the declarative configuration.
func (b *TolerationApplyConfiguration) GetValue() (value string, ok bool) {
	if v := b.Value; v != nil {
		return *v, true
	}
	return value, false
}

// SetEffect sets the Effect field in the declarative configuration to the given value.
func (b *TolerationApplyConfiguration) SetEffect(value v1.TaintEffect) *TolerationApplyConfiguration {
	b.Effect = &value
	return b
}

// RemoveEffect removes the Effect field from the declarative configuration.
func (b *TolerationApplyConfiguration) RemoveEffect() *TolerationApplyConfiguration {
	b.Effect = nil
	return b
}

// GetEffect gets the Effect field from the declarative configuration.
func (b *TolerationApplyConfiguration) GetEffect() (value v1.TaintEffect, ok bool) {
	if v := b.Effect; v != nil {
		return *v, true
	}
	return value, false
}

// SetTolerationSeconds sets the TolerationSeconds field in the declarative configuration to the given value.
func (b *TolerationApplyConfiguration) SetTolerationSeconds(value int64) *TolerationApplyConfiguration {
	b.TolerationSeconds = &value
	return b
}

// RemoveTolerationSeconds removes the TolerationSeconds field from the declarative configuration.
func (b *TolerationApplyConfiguration) RemoveTolerationSeconds() *TolerationApplyConfiguration {
	b.TolerationSeconds = nil
	return b
}

// GetTolerationSeconds gets the TolerationSeconds field from the declarative configuration.
func (b *TolerationApplyConfiguration) GetTolerationSeconds() (value int64, ok bool) {
	if v := b.TolerationSeconds; v != nil {
		return *v, true
	}
	return value, false
}

// TolerationList represents a listAlias of TolerationApplyConfiguration.
type TolerationList []*TolerationApplyConfiguration

// TolerationList represents a map of TolerationApplyConfiguration.
type TolerationMap map[string]TolerationApplyConfiguration
