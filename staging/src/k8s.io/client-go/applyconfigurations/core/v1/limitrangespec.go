/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// LimitRangeSpecApplyConfiguration represents an declarative configuration of the LimitRangeSpec type for use
// with apply.
type LimitRangeSpecApplyConfiguration struct {
	Limits *LimitRangeItemList `json:"limits,omitempty"`
}

// LimitRangeSpecApplyConfiguration constructs an declarative configuration of the LimitRangeSpec type for use with
// apply.
func LimitRangeSpec() *LimitRangeSpecApplyConfiguration {
	return &LimitRangeSpecApplyConfiguration{}
}

// SetLimits sets the Limits field in the declarative configuration to the given value.
func (b *LimitRangeSpecApplyConfiguration) SetLimits(value LimitRangeItemList) *LimitRangeSpecApplyConfiguration {
	b.Limits = &value
	return b
}

// RemoveLimits removes the Limits field from the declarative configuration.
func (b *LimitRangeSpecApplyConfiguration) RemoveLimits() *LimitRangeSpecApplyConfiguration {
	b.Limits = nil
	return b
}

// GetLimits gets the Limits field from the declarative configuration.
func (b *LimitRangeSpecApplyConfiguration) GetLimits() (value LimitRangeItemList, ok bool) {
	if v := b.Limits; v != nil {
		return *v, true
	}
	return value, false
}

// LimitRangeSpecList represents a listAlias of LimitRangeSpecApplyConfiguration.
type LimitRangeSpecList []*LimitRangeSpecApplyConfiguration

// LimitRangeSpecList represents a map of LimitRangeSpecApplyConfiguration.
type LimitRangeSpecMap map[string]LimitRangeSpecApplyConfiguration
