/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// EnvFromSourceApplyConfiguration represents an declarative configuration of the EnvFromSource type for use
// with apply.
type EnvFromSourceApplyConfiguration struct {
	fields envFromSourceFields
}

// EnvFromSourceApplyConfiguration constructs an declarative configuration of the EnvFromSource type for use with
// apply.
func EnvFromSource() *EnvFromSourceApplyConfiguration {
	return &EnvFromSourceApplyConfiguration{}
}

// envFromSourceFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in EnvFromSourceApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type envFromSourceFields struct {
	Prefix       *string                               `json:"prefix,omitempty"`
	ConfigMapRef *ConfigMapEnvSourceApplyConfiguration `json:"configMapRef,omitempty"`
	SecretRef    *SecretEnvSourceApplyConfiguration    `json:"secretRef,omitempty"`
}

// SetPrefix sets the Prefix field in the declarative configuration to the given value.
func (b *EnvFromSourceApplyConfiguration) SetPrefix(value string) *EnvFromSourceApplyConfiguration {
	b.fields.Prefix = &value
	return b
}

// RemovePrefix removes the Prefix field from the declarative configuration.
func (b *EnvFromSourceApplyConfiguration) RemovePrefix() *EnvFromSourceApplyConfiguration {
	b.fields.Prefix = nil
	return b
}

// GetPrefix gets the Prefix field from the declarative configuration.
func (b *EnvFromSourceApplyConfiguration) GetPrefix() (value string, ok bool) {
	if v := b.fields.Prefix; v != nil {
		return *v, true
	}
	return value, false
}

// SetConfigMapRef sets the ConfigMapRef field in the declarative configuration to the given value.
func (b *EnvFromSourceApplyConfiguration) SetConfigMapRef(value *ConfigMapEnvSourceApplyConfiguration) *EnvFromSourceApplyConfiguration {
	b.fields.ConfigMapRef = value
	return b
}

// RemoveConfigMapRef removes the ConfigMapRef field from the declarative configuration.
func (b *EnvFromSourceApplyConfiguration) RemoveConfigMapRef() *EnvFromSourceApplyConfiguration {
	b.fields.ConfigMapRef = nil
	return b
}

// GetConfigMapRef gets the ConfigMapRef field from the declarative configuration.
func (b *EnvFromSourceApplyConfiguration) GetConfigMapRef() (value *ConfigMapEnvSourceApplyConfiguration, ok bool) {
	return b.fields.ConfigMapRef, b.fields.ConfigMapRef != nil
}

// SetSecretRef sets the SecretRef field in the declarative configuration to the given value.
func (b *EnvFromSourceApplyConfiguration) SetSecretRef(value *SecretEnvSourceApplyConfiguration) *EnvFromSourceApplyConfiguration {
	b.fields.SecretRef = value
	return b
}

// RemoveSecretRef removes the SecretRef field from the declarative configuration.
func (b *EnvFromSourceApplyConfiguration) RemoveSecretRef() *EnvFromSourceApplyConfiguration {
	b.fields.SecretRef = nil
	return b
}

// GetSecretRef gets the SecretRef field from the declarative configuration.
func (b *EnvFromSourceApplyConfiguration) GetSecretRef() (value *SecretEnvSourceApplyConfiguration, ok bool) {
	return b.fields.SecretRef, b.fields.SecretRef != nil
}

// ToUnstructured converts EnvFromSourceApplyConfiguration to unstructured.
func (b *EnvFromSourceApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to EnvFromSourceApplyConfiguration, replacing the contents
// of EnvFromSourceApplyConfiguration.
func (b *EnvFromSourceApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &envFromSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals EnvFromSourceApplyConfiguration to JSON.
func (b *EnvFromSourceApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into EnvFromSourceApplyConfiguration, replacing the contents of
// EnvFromSourceApplyConfiguration.
func (b *EnvFromSourceApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// EnvFromSourceList represents a listAlias of EnvFromSourceApplyConfiguration.
type EnvFromSourceList []*EnvFromSourceApplyConfiguration

// EnvFromSourceList represents a map of EnvFromSourceApplyConfiguration.
type EnvFromSourceMap map[string]EnvFromSourceApplyConfiguration

func (b *EnvFromSourceApplyConfiguration) preMarshal() {
}
func (b *EnvFromSourceApplyConfiguration) postUnmarshal() {
}
