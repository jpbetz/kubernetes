/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// ProbeApplyConfiguration represents an declarative configuration of the Probe type for use
// with apply.
type ProbeApplyConfiguration struct {
	HandlerApplyConfiguration `json:",inline"`
	InitialDelaySeconds       *int32 `json:"initialDelaySeconds,omitempty"`
	TimeoutSeconds            *int32 `json:"timeoutSeconds,omitempty"`
	PeriodSeconds             *int32 `json:"periodSeconds,omitempty"`
	SuccessThreshold          *int32 `json:"successThreshold,omitempty"`
	FailureThreshold          *int32 `json:"failureThreshold,omitempty"`
}

// ProbeApplyConfiguration constructs an declarative configuration of the Probe type for use with
// apply.
func Probe() *ProbeApplyConfiguration {
	return &ProbeApplyConfiguration{}
}

// SetHandler sets the Handler field in the declarative configuration to the given value.
func (b *ProbeApplyConfiguration) SetHandler(value *HandlerApplyConfiguration) *ProbeApplyConfiguration {
	if value != nil {
		b.HandlerApplyConfiguration = *value
	}
	return b
}

// GetHandler gets the Handler field from the declarative configuration.
func (b *ProbeApplyConfiguration) GetHandler() (value *HandlerApplyConfiguration, ok bool) {
	return &b.HandlerApplyConfiguration, true
}

// SetInitialDelaySeconds sets the InitialDelaySeconds field in the declarative configuration to the given value.
func (b *ProbeApplyConfiguration) SetInitialDelaySeconds(value int32) *ProbeApplyConfiguration {
	b.InitialDelaySeconds = &value
	return b
}

// RemoveInitialDelaySeconds removes the InitialDelaySeconds field from the declarative configuration.
func (b *ProbeApplyConfiguration) RemoveInitialDelaySeconds() *ProbeApplyConfiguration {
	b.InitialDelaySeconds = nil
	return b
}

// GetInitialDelaySeconds gets the InitialDelaySeconds field from the declarative configuration.
func (b *ProbeApplyConfiguration) GetInitialDelaySeconds() (value int32, ok bool) {
	if v := b.InitialDelaySeconds; v != nil {
		return *v, true
	}
	return value, false
}

// SetTimeoutSeconds sets the TimeoutSeconds field in the declarative configuration to the given value.
func (b *ProbeApplyConfiguration) SetTimeoutSeconds(value int32) *ProbeApplyConfiguration {
	b.TimeoutSeconds = &value
	return b
}

// RemoveTimeoutSeconds removes the TimeoutSeconds field from the declarative configuration.
func (b *ProbeApplyConfiguration) RemoveTimeoutSeconds() *ProbeApplyConfiguration {
	b.TimeoutSeconds = nil
	return b
}

// GetTimeoutSeconds gets the TimeoutSeconds field from the declarative configuration.
func (b *ProbeApplyConfiguration) GetTimeoutSeconds() (value int32, ok bool) {
	if v := b.TimeoutSeconds; v != nil {
		return *v, true
	}
	return value, false
}

// SetPeriodSeconds sets the PeriodSeconds field in the declarative configuration to the given value.
func (b *ProbeApplyConfiguration) SetPeriodSeconds(value int32) *ProbeApplyConfiguration {
	b.PeriodSeconds = &value
	return b
}

// RemovePeriodSeconds removes the PeriodSeconds field from the declarative configuration.
func (b *ProbeApplyConfiguration) RemovePeriodSeconds() *ProbeApplyConfiguration {
	b.PeriodSeconds = nil
	return b
}

// GetPeriodSeconds gets the PeriodSeconds field from the declarative configuration.
func (b *ProbeApplyConfiguration) GetPeriodSeconds() (value int32, ok bool) {
	if v := b.PeriodSeconds; v != nil {
		return *v, true
	}
	return value, false
}

// SetSuccessThreshold sets the SuccessThreshold field in the declarative configuration to the given value.
func (b *ProbeApplyConfiguration) SetSuccessThreshold(value int32) *ProbeApplyConfiguration {
	b.SuccessThreshold = &value
	return b
}

// RemoveSuccessThreshold removes the SuccessThreshold field from the declarative configuration.
func (b *ProbeApplyConfiguration) RemoveSuccessThreshold() *ProbeApplyConfiguration {
	b.SuccessThreshold = nil
	return b
}

// GetSuccessThreshold gets the SuccessThreshold field from the declarative configuration.
func (b *ProbeApplyConfiguration) GetSuccessThreshold() (value int32, ok bool) {
	if v := b.SuccessThreshold; v != nil {
		return *v, true
	}
	return value, false
}

// SetFailureThreshold sets the FailureThreshold field in the declarative configuration to the given value.
func (b *ProbeApplyConfiguration) SetFailureThreshold(value int32) *ProbeApplyConfiguration {
	b.FailureThreshold = &value
	return b
}

// RemoveFailureThreshold removes the FailureThreshold field from the declarative configuration.
func (b *ProbeApplyConfiguration) RemoveFailureThreshold() *ProbeApplyConfiguration {
	b.FailureThreshold = nil
	return b
}

// GetFailureThreshold gets the FailureThreshold field from the declarative configuration.
func (b *ProbeApplyConfiguration) GetFailureThreshold() (value int32, ok bool) {
	if v := b.FailureThreshold; v != nil {
		return *v, true
	}
	return value, false
}

// ProbeList represents a listAlias of ProbeApplyConfiguration.
type ProbeList []*ProbeApplyConfiguration

// ProbeList represents a map of ProbeApplyConfiguration.
type ProbeMap map[string]ProbeApplyConfiguration
