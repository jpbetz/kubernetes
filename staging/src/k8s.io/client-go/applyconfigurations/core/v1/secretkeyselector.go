/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// SecretKeySelectorApplyConfiguration represents an declarative configuration of the SecretKeySelector type for use
// with apply.
type SecretKeySelectorApplyConfiguration struct {
	LocalObjectReferenceApplyConfiguration `json:",inline"`
	Key                                    *string `json:"key,omitempty"`
	Optional                               *bool   `json:"optional,omitempty"`
}

// SecretKeySelectorApplyConfiguration constructs an declarative configuration of the SecretKeySelector type for use with
// apply.
func SecretKeySelector() *SecretKeySelectorApplyConfiguration {
	return &SecretKeySelectorApplyConfiguration{}
}

// SetLocalObjectReference sets the LocalObjectReference field in the declarative configuration to the given value.
func (b *SecretKeySelectorApplyConfiguration) SetLocalObjectReference(value *LocalObjectReferenceApplyConfiguration) *SecretKeySelectorApplyConfiguration {
	if value != nil {
		b.LocalObjectReferenceApplyConfiguration = *value
	}
	return b
}

// GetLocalObjectReference gets the LocalObjectReference field from the declarative configuration.
func (b *SecretKeySelectorApplyConfiguration) GetLocalObjectReference() (value *LocalObjectReferenceApplyConfiguration, ok bool) {
	return &b.LocalObjectReferenceApplyConfiguration, true
}

// SetKey sets the Key field in the declarative configuration to the given value.
func (b *SecretKeySelectorApplyConfiguration) SetKey(value string) *SecretKeySelectorApplyConfiguration {
	b.Key = &value
	return b
}

// RemoveKey removes the Key field from the declarative configuration.
func (b *SecretKeySelectorApplyConfiguration) RemoveKey() *SecretKeySelectorApplyConfiguration {
	b.Key = nil
	return b
}

// GetKey gets the Key field from the declarative configuration.
func (b *SecretKeySelectorApplyConfiguration) GetKey() (value string, ok bool) {
	if v := b.Key; v != nil {
		return *v, true
	}
	return value, false
}

// SetOptional sets the Optional field in the declarative configuration to the given value.
func (b *SecretKeySelectorApplyConfiguration) SetOptional(value bool) *SecretKeySelectorApplyConfiguration {
	b.Optional = &value
	return b
}

// RemoveOptional removes the Optional field from the declarative configuration.
func (b *SecretKeySelectorApplyConfiguration) RemoveOptional() *SecretKeySelectorApplyConfiguration {
	b.Optional = nil
	return b
}

// GetOptional gets the Optional field from the declarative configuration.
func (b *SecretKeySelectorApplyConfiguration) GetOptional() (value bool, ok bool) {
	if v := b.Optional; v != nil {
		return *v, true
	}
	return value, false
}

// SecretKeySelectorList represents a listAlias of SecretKeySelectorApplyConfiguration.
type SecretKeySelectorList []*SecretKeySelectorApplyConfiguration

// SecretKeySelectorList represents a map of SecretKeySelectorApplyConfiguration.
type SecretKeySelectorMap map[string]SecretKeySelectorApplyConfiguration
