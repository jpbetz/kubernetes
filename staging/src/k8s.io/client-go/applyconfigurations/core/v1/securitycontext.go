/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	corev1 "k8s.io/api/core/v1"
)

// SecurityContextApplyConfiguration represents an declarative configuration of the SecurityContext type for use
// with apply.
type SecurityContextApplyConfiguration struct {
	Capabilities             *CapabilitiesApplyConfiguration                  `json:"capabilities,omitempty"`
	Privileged               *bool                                            `json:"privileged,omitempty"`
	SELinuxOptions           *SELinuxOptionsApplyConfiguration                `json:"seLinuxOptions,omitempty"`
	WindowsOptions           *WindowsSecurityContextOptionsApplyConfiguration `json:"windowsOptions,omitempty"`
	RunAsUser                *int64                                           `json:"runAsUser,omitempty"`
	RunAsGroup               *int64                                           `json:"runAsGroup,omitempty"`
	RunAsNonRoot             *bool                                            `json:"runAsNonRoot,omitempty"`
	ReadOnlyRootFilesystem   *bool                                            `json:"readOnlyRootFilesystem,omitempty"`
	AllowPrivilegeEscalation *bool                                            `json:"allowPrivilegeEscalation,omitempty"`
	ProcMount                *corev1.ProcMountType                            `json:"procMount,omitempty"`
	SeccompProfile           *SeccompProfileApplyConfiguration                `json:"seccompProfile,omitempty"`
}

// SecurityContextApplyConfiguration constructs an declarative configuration of the SecurityContext type for use with
// apply.
func SecurityContext() *SecurityContextApplyConfiguration {
	return &SecurityContextApplyConfiguration{}
}

// SetCapabilities sets the Capabilities field in the declarative configuration to the given value.
func (b *SecurityContextApplyConfiguration) SetCapabilities(value *CapabilitiesApplyConfiguration) *SecurityContextApplyConfiguration {
	b.Capabilities = value
	return b
}

// SetPrivileged sets the Privileged field in the declarative configuration to the given value.
func (b *SecurityContextApplyConfiguration) SetPrivileged(value bool) *SecurityContextApplyConfiguration {
	b.Privileged = &value
	return b
}

// SetSELinuxOptions sets the SELinuxOptions field in the declarative configuration to the given value.
func (b *SecurityContextApplyConfiguration) SetSELinuxOptions(value *SELinuxOptionsApplyConfiguration) *SecurityContextApplyConfiguration {
	b.SELinuxOptions = value
	return b
}

// SetWindowsOptions sets the WindowsOptions field in the declarative configuration to the given value.
func (b *SecurityContextApplyConfiguration) SetWindowsOptions(value *WindowsSecurityContextOptionsApplyConfiguration) *SecurityContextApplyConfiguration {
	b.WindowsOptions = value
	return b
}

// SetRunAsUser sets the RunAsUser field in the declarative configuration to the given value.
func (b *SecurityContextApplyConfiguration) SetRunAsUser(value int64) *SecurityContextApplyConfiguration {
	b.RunAsUser = &value
	return b
}

// SetRunAsGroup sets the RunAsGroup field in the declarative configuration to the given value.
func (b *SecurityContextApplyConfiguration) SetRunAsGroup(value int64) *SecurityContextApplyConfiguration {
	b.RunAsGroup = &value
	return b
}

// SetRunAsNonRoot sets the RunAsNonRoot field in the declarative configuration to the given value.
func (b *SecurityContextApplyConfiguration) SetRunAsNonRoot(value bool) *SecurityContextApplyConfiguration {
	b.RunAsNonRoot = &value
	return b
}

// SetReadOnlyRootFilesystem sets the ReadOnlyRootFilesystem field in the declarative configuration to the given value.
func (b *SecurityContextApplyConfiguration) SetReadOnlyRootFilesystem(value bool) *SecurityContextApplyConfiguration {
	b.ReadOnlyRootFilesystem = &value
	return b
}

// SetAllowPrivilegeEscalation sets the AllowPrivilegeEscalation field in the declarative configuration to the given value.
func (b *SecurityContextApplyConfiguration) SetAllowPrivilegeEscalation(value bool) *SecurityContextApplyConfiguration {
	b.AllowPrivilegeEscalation = &value
	return b
}

// SetProcMount sets the ProcMount field in the declarative configuration to the given value.
func (b *SecurityContextApplyConfiguration) SetProcMount(value corev1.ProcMountType) *SecurityContextApplyConfiguration {
	b.ProcMount = &value
	return b
}

// SetSeccompProfile sets the SeccompProfile field in the declarative configuration to the given value.
func (b *SecurityContextApplyConfiguration) SetSeccompProfile(value *SeccompProfileApplyConfiguration) *SecurityContextApplyConfiguration {
	b.SeccompProfile = value
	return b
}
