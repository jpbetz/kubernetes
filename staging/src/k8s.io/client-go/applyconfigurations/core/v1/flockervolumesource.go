/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// FlockerVolumeSourceApplyConfiguration represents an declarative configuration of the FlockerVolumeSource type for use
// with apply.
type FlockerVolumeSourceApplyConfiguration struct {
	DatasetName *string `json:"datasetName,omitempty"`
	DatasetUUID *string `json:"datasetUUID,omitempty"`
}

// FlockerVolumeSourceApplyConfiguration constructs an declarative configuration of the FlockerVolumeSource type for use with
// apply.
func FlockerVolumeSource() *FlockerVolumeSourceApplyConfiguration {
	return &FlockerVolumeSourceApplyConfiguration{}
}

// SetDatasetName sets the DatasetName field in the declarative configuration to the given value.
func (b *FlockerVolumeSourceApplyConfiguration) SetDatasetName(value string) *FlockerVolumeSourceApplyConfiguration {
	b.DatasetName = &value
	return b
}

// RemoveDatasetName removes the DatasetName field from the declarative configuration.
func (b *FlockerVolumeSourceApplyConfiguration) RemoveDatasetName() *FlockerVolumeSourceApplyConfiguration {
	b.DatasetName = nil
	return b
}

// GetDatasetName gets the DatasetName field from the declarative configuration.
func (b *FlockerVolumeSourceApplyConfiguration) GetDatasetName() (value string, ok bool) {
	if v := b.DatasetName; v != nil {
		return *v, true
	}
	return value, false
}

// SetDatasetUUID sets the DatasetUUID field in the declarative configuration to the given value.
func (b *FlockerVolumeSourceApplyConfiguration) SetDatasetUUID(value string) *FlockerVolumeSourceApplyConfiguration {
	b.DatasetUUID = &value
	return b
}

// RemoveDatasetUUID removes the DatasetUUID field from the declarative configuration.
func (b *FlockerVolumeSourceApplyConfiguration) RemoveDatasetUUID() *FlockerVolumeSourceApplyConfiguration {
	b.DatasetUUID = nil
	return b
}

// GetDatasetUUID gets the DatasetUUID field from the declarative configuration.
func (b *FlockerVolumeSourceApplyConfiguration) GetDatasetUUID() (value string, ok bool) {
	if v := b.DatasetUUID; v != nil {
		return *v, true
	}
	return value, false
}

// FlockerVolumeSourceList represents a listAlias of FlockerVolumeSourceApplyConfiguration.
type FlockerVolumeSourceList []*FlockerVolumeSourceApplyConfiguration

// FlockerVolumeSourceList represents a map of FlockerVolumeSourceApplyConfiguration.
type FlockerVolumeSourceMap map[string]FlockerVolumeSourceApplyConfiguration
