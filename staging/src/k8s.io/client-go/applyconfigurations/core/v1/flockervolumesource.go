/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// FlockerVolumeSourceApplyConfiguration represents an declarative configuration of the FlockerVolumeSource type for use
// with apply.
type FlockerVolumeSourceApplyConfiguration struct {
	fields flockerVolumeSourceFields
}

// FlockerVolumeSourceApplyConfiguration constructs an declarative configuration of the FlockerVolumeSource type for use with
// apply.
func FlockerVolumeSource() *FlockerVolumeSourceApplyConfiguration {
	return &FlockerVolumeSourceApplyConfiguration{}
}

// flockerVolumeSourceFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in FlockerVolumeSourceApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type flockerVolumeSourceFields struct {
	DatasetName *string `json:"datasetName,omitempty"`
	DatasetUUID *string `json:"datasetUUID,omitempty"`
}

// SetDatasetName sets the DatasetName field in the declarative configuration to the given value.
func (b *FlockerVolumeSourceApplyConfiguration) SetDatasetName(value string) *FlockerVolumeSourceApplyConfiguration {
	b.fields.DatasetName = &value
	return b
}

// RemoveDatasetName removes the DatasetName field from the declarative configuration.
func (b *FlockerVolumeSourceApplyConfiguration) RemoveDatasetName() *FlockerVolumeSourceApplyConfiguration {
	b.fields.DatasetName = nil
	return b
}

// GetDatasetName gets the DatasetName field from the declarative configuration.
func (b *FlockerVolumeSourceApplyConfiguration) GetDatasetName() (value string, ok bool) {
	if v := b.fields.DatasetName; v != nil {
		return *v, true
	}
	return value, false
}

// SetDatasetUUID sets the DatasetUUID field in the declarative configuration to the given value.
func (b *FlockerVolumeSourceApplyConfiguration) SetDatasetUUID(value string) *FlockerVolumeSourceApplyConfiguration {
	b.fields.DatasetUUID = &value
	return b
}

// RemoveDatasetUUID removes the DatasetUUID field from the declarative configuration.
func (b *FlockerVolumeSourceApplyConfiguration) RemoveDatasetUUID() *FlockerVolumeSourceApplyConfiguration {
	b.fields.DatasetUUID = nil
	return b
}

// GetDatasetUUID gets the DatasetUUID field from the declarative configuration.
func (b *FlockerVolumeSourceApplyConfiguration) GetDatasetUUID() (value string, ok bool) {
	if v := b.fields.DatasetUUID; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts FlockerVolumeSourceApplyConfiguration to unstructured.
func (b *FlockerVolumeSourceApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to FlockerVolumeSourceApplyConfiguration, replacing the contents
// of FlockerVolumeSourceApplyConfiguration.
func (b *FlockerVolumeSourceApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &flockerVolumeSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals FlockerVolumeSourceApplyConfiguration to JSON.
func (b *FlockerVolumeSourceApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into FlockerVolumeSourceApplyConfiguration, replacing the contents of
// FlockerVolumeSourceApplyConfiguration.
func (b *FlockerVolumeSourceApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// FlockerVolumeSourceList represents a listAlias of FlockerVolumeSourceApplyConfiguration.
type FlockerVolumeSourceList []*FlockerVolumeSourceApplyConfiguration

// FlockerVolumeSourceList represents a map of FlockerVolumeSourceApplyConfiguration.
type FlockerVolumeSourceMap map[string]FlockerVolumeSourceApplyConfiguration

func (b *FlockerVolumeSourceApplyConfiguration) preMarshal() {
}
func (b *FlockerVolumeSourceApplyConfiguration) postUnmarshal() {
}
