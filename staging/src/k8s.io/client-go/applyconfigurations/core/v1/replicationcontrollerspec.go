/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ReplicationControllerSpecApplyConfiguration represents an declarative configuration of the ReplicationControllerSpec type for use
// with apply.
type ReplicationControllerSpecApplyConfiguration struct {
	fields replicationControllerSpecFields
}

// ReplicationControllerSpecApplyConfiguration constructs an declarative configuration of the ReplicationControllerSpec type for use with
// apply.
func ReplicationControllerSpec() *ReplicationControllerSpecApplyConfiguration {
	return &ReplicationControllerSpecApplyConfiguration{}
}

// replicationControllerSpecFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in ReplicationControllerSpecApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type replicationControllerSpecFields struct {
	Replicas        *int32                             `json:"replicas,omitempty"`
	MinReadySeconds *int32                             `json:"minReadySeconds,omitempty"`
	Selector        *map[string]string                 `json:"selector,omitempty"`
	Template        *PodTemplateSpecApplyConfiguration `json:"template,omitempty"`
}

// SetReplicas sets the Replicas field in the declarative configuration to the given value.
func (b *ReplicationControllerSpecApplyConfiguration) SetReplicas(value int32) *ReplicationControllerSpecApplyConfiguration {
	b.fields.Replicas = &value
	return b
}

// RemoveReplicas removes the Replicas field from the declarative configuration.
func (b *ReplicationControllerSpecApplyConfiguration) RemoveReplicas() *ReplicationControllerSpecApplyConfiguration {
	b.fields.Replicas = nil
	return b
}

// GetReplicas gets the Replicas field from the declarative configuration.
func (b *ReplicationControllerSpecApplyConfiguration) GetReplicas() (value int32, ok bool) {
	if v := b.fields.Replicas; v != nil {
		return *v, true
	}
	return value, false
}

// SetMinReadySeconds sets the MinReadySeconds field in the declarative configuration to the given value.
func (b *ReplicationControllerSpecApplyConfiguration) SetMinReadySeconds(value int32) *ReplicationControllerSpecApplyConfiguration {
	b.fields.MinReadySeconds = &value
	return b
}

// RemoveMinReadySeconds removes the MinReadySeconds field from the declarative configuration.
func (b *ReplicationControllerSpecApplyConfiguration) RemoveMinReadySeconds() *ReplicationControllerSpecApplyConfiguration {
	b.fields.MinReadySeconds = nil
	return b
}

// GetMinReadySeconds gets the MinReadySeconds field from the declarative configuration.
func (b *ReplicationControllerSpecApplyConfiguration) GetMinReadySeconds() (value int32, ok bool) {
	if v := b.fields.MinReadySeconds; v != nil {
		return *v, true
	}
	return value, false
}

// SetSelector sets the Selector field in the declarative configuration to the given value.
func (b *ReplicationControllerSpecApplyConfiguration) SetSelector(value map[string]string) *ReplicationControllerSpecApplyConfiguration {
	b.fields.Selector = &value
	return b
}

// RemoveSelector removes the Selector field from the declarative configuration.
func (b *ReplicationControllerSpecApplyConfiguration) RemoveSelector() *ReplicationControllerSpecApplyConfiguration {
	b.fields.Selector = nil
	return b
}

// GetSelector gets the Selector field from the declarative configuration.
func (b *ReplicationControllerSpecApplyConfiguration) GetSelector() (value map[string]string, ok bool) {
	if v := b.fields.Selector; v != nil {
		return *v, true
	}
	return value, false
}

// SetTemplate sets the Template field in the declarative configuration to the given value.
func (b *ReplicationControllerSpecApplyConfiguration) SetTemplate(value *PodTemplateSpecApplyConfiguration) *ReplicationControllerSpecApplyConfiguration {
	b.fields.Template = value
	return b
}

// RemoveTemplate removes the Template field from the declarative configuration.
func (b *ReplicationControllerSpecApplyConfiguration) RemoveTemplate() *ReplicationControllerSpecApplyConfiguration {
	b.fields.Template = nil
	return b
}

// GetTemplate gets the Template field from the declarative configuration.
func (b *ReplicationControllerSpecApplyConfiguration) GetTemplate() (value *PodTemplateSpecApplyConfiguration, ok bool) {
	return b.fields.Template, b.fields.Template != nil
}

// ToUnstructured converts ReplicationControllerSpecApplyConfiguration to unstructured.
func (b *ReplicationControllerSpecApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ReplicationControllerSpecApplyConfiguration, replacing the contents
// of ReplicationControllerSpecApplyConfiguration.
func (b *ReplicationControllerSpecApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &replicationControllerSpecFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ReplicationControllerSpecApplyConfiguration to JSON.
func (b *ReplicationControllerSpecApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into ReplicationControllerSpecApplyConfiguration, replacing the contents of
// ReplicationControllerSpecApplyConfiguration.
func (b *ReplicationControllerSpecApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ReplicationControllerSpecList represents a listAlias of ReplicationControllerSpecApplyConfiguration.
type ReplicationControllerSpecList []*ReplicationControllerSpecApplyConfiguration

// ReplicationControllerSpecList represents a map of ReplicationControllerSpecApplyConfiguration.
type ReplicationControllerSpecMap map[string]ReplicationControllerSpecApplyConfiguration

func (b *ReplicationControllerSpecApplyConfiguration) preMarshal() {
}
func (b *ReplicationControllerSpecApplyConfiguration) postUnmarshal() {
}
