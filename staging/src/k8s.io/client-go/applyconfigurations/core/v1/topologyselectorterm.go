/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// TopologySelectorTermApplyConfiguration represents an declarative configuration of the TopologySelectorTerm type for use
// with apply.
type TopologySelectorTermApplyConfiguration struct {
	MatchLabelExpressions *TopologySelectorLabelRequirementList `json:"matchLabelExpressions,omitempty"`
}

// TopologySelectorTermApplyConfiguration constructs an declarative configuration of the TopologySelectorTerm type for use with
// apply.
func TopologySelectorTerm() *TopologySelectorTermApplyConfiguration {
	return &TopologySelectorTermApplyConfiguration{}
}

// SetMatchLabelExpressions sets the MatchLabelExpressions field in the declarative configuration to the given value.
func (b *TopologySelectorTermApplyConfiguration) SetMatchLabelExpressions(value TopologySelectorLabelRequirementList) *TopologySelectorTermApplyConfiguration {
	b.MatchLabelExpressions = &value
	return b
}

// RemoveMatchLabelExpressions removes the MatchLabelExpressions field from the declarative configuration.
func (b *TopologySelectorTermApplyConfiguration) RemoveMatchLabelExpressions() *TopologySelectorTermApplyConfiguration {
	b.MatchLabelExpressions = nil
	return b
}

// GetMatchLabelExpressions gets the MatchLabelExpressions field from the declarative configuration.
func (b *TopologySelectorTermApplyConfiguration) GetMatchLabelExpressions() (value TopologySelectorLabelRequirementList, ok bool) {
	if v := b.MatchLabelExpressions; v != nil {
		return *v, true
	}
	return value, false
}

// TopologySelectorTermList represents a listAlias of TopologySelectorTermApplyConfiguration.
type TopologySelectorTermList []*TopologySelectorTermApplyConfiguration

// TopologySelectorTermList represents a map of TopologySelectorTermApplyConfiguration.
type TopologySelectorTermMap map[string]TopologySelectorTermApplyConfiguration
