/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// NodeSelectorTermApplyConfiguration represents an declarative configuration of the NodeSelectorTerm type for use
// with apply.
type NodeSelectorTermApplyConfiguration struct {
	MatchExpressions *NodeSelectorRequirementList `json:"matchExpressions,omitempty"`
	MatchFields      *NodeSelectorRequirementList `json:"matchFields,omitempty"`
}

// NodeSelectorTermApplyConfiguration constructs an declarative configuration of the NodeSelectorTerm type for use with
// apply.
func NodeSelectorTerm() *NodeSelectorTermApplyConfiguration {
	return &NodeSelectorTermApplyConfiguration{}
}

// SetMatchExpressions sets the MatchExpressions field in the declarative configuration to the given value.
func (b *NodeSelectorTermApplyConfiguration) SetMatchExpressions(value NodeSelectorRequirementList) *NodeSelectorTermApplyConfiguration {
	b.MatchExpressions = &value
	return b
}

// RemoveMatchExpressions removes the MatchExpressions field from the declarative configuration.
func (b *NodeSelectorTermApplyConfiguration) RemoveMatchExpressions() *NodeSelectorTermApplyConfiguration {
	b.MatchExpressions = nil
	return b
}

// GetMatchExpressions gets the MatchExpressions field from the declarative configuration.
func (b *NodeSelectorTermApplyConfiguration) GetMatchExpressions() (value NodeSelectorRequirementList, ok bool) {
	if v := b.MatchExpressions; v != nil {
		return *v, true
	}
	return value, false
}

// SetMatchFields sets the MatchFields field in the declarative configuration to the given value.
func (b *NodeSelectorTermApplyConfiguration) SetMatchFields(value NodeSelectorRequirementList) *NodeSelectorTermApplyConfiguration {
	b.MatchFields = &value
	return b
}

// RemoveMatchFields removes the MatchFields field from the declarative configuration.
func (b *NodeSelectorTermApplyConfiguration) RemoveMatchFields() *NodeSelectorTermApplyConfiguration {
	b.MatchFields = nil
	return b
}

// GetMatchFields gets the MatchFields field from the declarative configuration.
func (b *NodeSelectorTermApplyConfiguration) GetMatchFields() (value NodeSelectorRequirementList, ok bool) {
	if v := b.MatchFields; v != nil {
		return *v, true
	}
	return value, false
}

// NodeSelectorTermList represents a listAlias of NodeSelectorTermApplyConfiguration.
type NodeSelectorTermList []*NodeSelectorTermApplyConfiguration

// NodeSelectorTermList represents a map of NodeSelectorTermApplyConfiguration.
type NodeSelectorTermMap map[string]NodeSelectorTermApplyConfiguration
