/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// GlusterfsVolumeSourceApplyConfiguration represents an declarative configuration of the GlusterfsVolumeSource type for use
// with apply.
type GlusterfsVolumeSourceApplyConfiguration struct {
	fields glusterfsVolumeSourceFields
}

// GlusterfsVolumeSourceApplyConfiguration constructs an declarative configuration of the GlusterfsVolumeSource type for use with
// apply.
func GlusterfsVolumeSource() *GlusterfsVolumeSourceApplyConfiguration {
	return &GlusterfsVolumeSourceApplyConfiguration{}
}

// glusterfsVolumeSourceFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in GlusterfsVolumeSourceApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type glusterfsVolumeSourceFields struct {
	EndpointsName *string `json:"endpoints,omitempty"`
	Path          *string `json:"path,omitempty"`
	ReadOnly      *bool   `json:"readOnly,omitempty"`
}

// SetEndpointsName sets the EndpointsName field in the declarative configuration to the given value.
func (b *GlusterfsVolumeSourceApplyConfiguration) SetEndpointsName(value string) *GlusterfsVolumeSourceApplyConfiguration {
	b.fields.EndpointsName = &value
	return b
}

// RemoveEndpointsName removes the EndpointsName field from the declarative configuration.
func (b *GlusterfsVolumeSourceApplyConfiguration) RemoveEndpointsName() *GlusterfsVolumeSourceApplyConfiguration {
	b.fields.EndpointsName = nil
	return b
}

// GetEndpointsName gets the EndpointsName field from the declarative configuration.
func (b *GlusterfsVolumeSourceApplyConfiguration) GetEndpointsName() (value string, ok bool) {
	if v := b.fields.EndpointsName; v != nil {
		return *v, true
	}
	return value, false
}

// SetPath sets the Path field in the declarative configuration to the given value.
func (b *GlusterfsVolumeSourceApplyConfiguration) SetPath(value string) *GlusterfsVolumeSourceApplyConfiguration {
	b.fields.Path = &value
	return b
}

// RemovePath removes the Path field from the declarative configuration.
func (b *GlusterfsVolumeSourceApplyConfiguration) RemovePath() *GlusterfsVolumeSourceApplyConfiguration {
	b.fields.Path = nil
	return b
}

// GetPath gets the Path field from the declarative configuration.
func (b *GlusterfsVolumeSourceApplyConfiguration) GetPath() (value string, ok bool) {
	if v := b.fields.Path; v != nil {
		return *v, true
	}
	return value, false
}

// SetReadOnly sets the ReadOnly field in the declarative configuration to the given value.
func (b *GlusterfsVolumeSourceApplyConfiguration) SetReadOnly(value bool) *GlusterfsVolumeSourceApplyConfiguration {
	b.fields.ReadOnly = &value
	return b
}

// RemoveReadOnly removes the ReadOnly field from the declarative configuration.
func (b *GlusterfsVolumeSourceApplyConfiguration) RemoveReadOnly() *GlusterfsVolumeSourceApplyConfiguration {
	b.fields.ReadOnly = nil
	return b
}

// GetReadOnly gets the ReadOnly field from the declarative configuration.
func (b *GlusterfsVolumeSourceApplyConfiguration) GetReadOnly() (value bool, ok bool) {
	if v := b.fields.ReadOnly; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts GlusterfsVolumeSourceApplyConfiguration to unstructured.
func (b *GlusterfsVolumeSourceApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to GlusterfsVolumeSourceApplyConfiguration, replacing the contents
// of GlusterfsVolumeSourceApplyConfiguration.
func (b *GlusterfsVolumeSourceApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &glusterfsVolumeSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals GlusterfsVolumeSourceApplyConfiguration to JSON.
func (b *GlusterfsVolumeSourceApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into GlusterfsVolumeSourceApplyConfiguration, replacing the contents of
// GlusterfsVolumeSourceApplyConfiguration.
func (b *GlusterfsVolumeSourceApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// GlusterfsVolumeSourceList represents a listAlias of GlusterfsVolumeSourceApplyConfiguration.
type GlusterfsVolumeSourceList []*GlusterfsVolumeSourceApplyConfiguration

// GlusterfsVolumeSourceList represents a map of GlusterfsVolumeSourceApplyConfiguration.
type GlusterfsVolumeSourceMap map[string]GlusterfsVolumeSourceApplyConfiguration

func (b *GlusterfsVolumeSourceApplyConfiguration) preMarshal() {
}
func (b *GlusterfsVolumeSourceApplyConfiguration) postUnmarshal() {
}
