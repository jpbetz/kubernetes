/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// NodeConfigSourceApplyConfiguration represents an declarative configuration of the NodeConfigSource type for use
// with apply.
type NodeConfigSourceApplyConfiguration struct {
	fields nodeConfigSourceFields
}

// NodeConfigSourceApplyConfiguration constructs an declarative configuration of the NodeConfigSource type for use with
// apply.
func NodeConfigSource() *NodeConfigSourceApplyConfiguration {
	return &NodeConfigSourceApplyConfiguration{}
}

// nodeConfigSourceFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in NodeConfigSourceApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type nodeConfigSourceFields struct {
	ConfigMap *ConfigMapNodeConfigSourceApplyConfiguration `json:"configMap,omitempty"`
}

// SetConfigMap sets the ConfigMap field in the declarative configuration to the given value.
func (b *NodeConfigSourceApplyConfiguration) SetConfigMap(value *ConfigMapNodeConfigSourceApplyConfiguration) *NodeConfigSourceApplyConfiguration {
	b.fields.ConfigMap = value
	return b
}

// RemoveConfigMap removes the ConfigMap field from the declarative configuration.
func (b *NodeConfigSourceApplyConfiguration) RemoveConfigMap() *NodeConfigSourceApplyConfiguration {
	b.fields.ConfigMap = nil
	return b
}

// GetConfigMap gets the ConfigMap field from the declarative configuration.
func (b *NodeConfigSourceApplyConfiguration) GetConfigMap() (value *ConfigMapNodeConfigSourceApplyConfiguration, ok bool) {
	return b.fields.ConfigMap, b.fields.ConfigMap != nil
}

// ToUnstructured converts NodeConfigSourceApplyConfiguration to unstructured.
func (b *NodeConfigSourceApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to NodeConfigSourceApplyConfiguration, replacing the contents
// of NodeConfigSourceApplyConfiguration.
func (b *NodeConfigSourceApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &nodeConfigSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals NodeConfigSourceApplyConfiguration to JSON.
func (b *NodeConfigSourceApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into NodeConfigSourceApplyConfiguration, replacing the contents of
// NodeConfigSourceApplyConfiguration.
func (b *NodeConfigSourceApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// NodeConfigSourceList represents a listAlias of NodeConfigSourceApplyConfiguration.
type NodeConfigSourceList []*NodeConfigSourceApplyConfiguration

// NodeConfigSourceList represents a map of NodeConfigSourceApplyConfiguration.
type NodeConfigSourceMap map[string]NodeConfigSourceApplyConfiguration

func (b *NodeConfigSourceApplyConfiguration) preMarshal() {
}
func (b *NodeConfigSourceApplyConfiguration) postUnmarshal() {
}
