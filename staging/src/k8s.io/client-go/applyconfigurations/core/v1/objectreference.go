/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
	types "k8s.io/apimachinery/pkg/types"
)

// ObjectReferenceApplyConfiguration represents an declarative configuration of the ObjectReference type for use
// with apply.
type ObjectReferenceApplyConfiguration struct {
	fields objectReferenceFields
}

// ObjectReferenceApplyConfiguration constructs an declarative configuration of the ObjectReference type for use with
// apply.
func ObjectReference() *ObjectReferenceApplyConfiguration {
	return &ObjectReferenceApplyConfiguration{}
}

// objectReferenceFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in ObjectReferenceApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type objectReferenceFields struct {
	Kind            *string    `json:"kind,omitempty"`
	Namespace       *string    `json:"namespace,omitempty"`
	Name            *string    `json:"name,omitempty"`
	UID             *types.UID `json:"uid,omitempty"`
	APIVersion      *string    `json:"apiVersion,omitempty"`
	ResourceVersion *string    `json:"resourceVersion,omitempty"`
	FieldPath       *string    `json:"fieldPath,omitempty"`
}

// SetKind sets the Kind field in the declarative configuration to the given value.
func (b *ObjectReferenceApplyConfiguration) SetKind(value string) *ObjectReferenceApplyConfiguration {
	b.fields.Kind = &value
	return b
}

// RemoveKind removes the Kind field from the declarative configuration.
func (b *ObjectReferenceApplyConfiguration) RemoveKind() *ObjectReferenceApplyConfiguration {
	b.fields.Kind = nil
	return b
}

// GetKind gets the Kind field from the declarative configuration.
func (b *ObjectReferenceApplyConfiguration) GetKind() (value string, ok bool) {
	if v := b.fields.Kind; v != nil {
		return *v, true
	}
	return value, false
}

// SetNamespace sets the Namespace field in the declarative configuration to the given value.
func (b *ObjectReferenceApplyConfiguration) SetNamespace(value string) *ObjectReferenceApplyConfiguration {
	b.fields.Namespace = &value
	return b
}

// RemoveNamespace removes the Namespace field from the declarative configuration.
func (b *ObjectReferenceApplyConfiguration) RemoveNamespace() *ObjectReferenceApplyConfiguration {
	b.fields.Namespace = nil
	return b
}

// GetNamespace gets the Namespace field from the declarative configuration.
func (b *ObjectReferenceApplyConfiguration) GetNamespace() (value string, ok bool) {
	if v := b.fields.Namespace; v != nil {
		return *v, true
	}
	return value, false
}

// SetName sets the Name field in the declarative configuration to the given value.
func (b *ObjectReferenceApplyConfiguration) SetName(value string) *ObjectReferenceApplyConfiguration {
	b.fields.Name = &value
	return b
}

// RemoveName removes the Name field from the declarative configuration.
func (b *ObjectReferenceApplyConfiguration) RemoveName() *ObjectReferenceApplyConfiguration {
	b.fields.Name = nil
	return b
}

// GetName gets the Name field from the declarative configuration.
func (b *ObjectReferenceApplyConfiguration) GetName() (value string, ok bool) {
	if v := b.fields.Name; v != nil {
		return *v, true
	}
	return value, false
}

// SetUID sets the UID field in the declarative configuration to the given value.
func (b *ObjectReferenceApplyConfiguration) SetUID(value types.UID) *ObjectReferenceApplyConfiguration {
	b.fields.UID = &value
	return b
}

// RemoveUID removes the UID field from the declarative configuration.
func (b *ObjectReferenceApplyConfiguration) RemoveUID() *ObjectReferenceApplyConfiguration {
	b.fields.UID = nil
	return b
}

// GetUID gets the UID field from the declarative configuration.
func (b *ObjectReferenceApplyConfiguration) GetUID() (value types.UID, ok bool) {
	if v := b.fields.UID; v != nil {
		return *v, true
	}
	return value, false
}

// SetAPIVersion sets the APIVersion field in the declarative configuration to the given value.
func (b *ObjectReferenceApplyConfiguration) SetAPIVersion(value string) *ObjectReferenceApplyConfiguration {
	b.fields.APIVersion = &value
	return b
}

// RemoveAPIVersion removes the APIVersion field from the declarative configuration.
func (b *ObjectReferenceApplyConfiguration) RemoveAPIVersion() *ObjectReferenceApplyConfiguration {
	b.fields.APIVersion = nil
	return b
}

// GetAPIVersion gets the APIVersion field from the declarative configuration.
func (b *ObjectReferenceApplyConfiguration) GetAPIVersion() (value string, ok bool) {
	if v := b.fields.APIVersion; v != nil {
		return *v, true
	}
	return value, false
}

// SetResourceVersion sets the ResourceVersion field in the declarative configuration to the given value.
func (b *ObjectReferenceApplyConfiguration) SetResourceVersion(value string) *ObjectReferenceApplyConfiguration {
	b.fields.ResourceVersion = &value
	return b
}

// RemoveResourceVersion removes the ResourceVersion field from the declarative configuration.
func (b *ObjectReferenceApplyConfiguration) RemoveResourceVersion() *ObjectReferenceApplyConfiguration {
	b.fields.ResourceVersion = nil
	return b
}

// GetResourceVersion gets the ResourceVersion field from the declarative configuration.
func (b *ObjectReferenceApplyConfiguration) GetResourceVersion() (value string, ok bool) {
	if v := b.fields.ResourceVersion; v != nil {
		return *v, true
	}
	return value, false
}

// SetFieldPath sets the FieldPath field in the declarative configuration to the given value.
func (b *ObjectReferenceApplyConfiguration) SetFieldPath(value string) *ObjectReferenceApplyConfiguration {
	b.fields.FieldPath = &value
	return b
}

// RemoveFieldPath removes the FieldPath field from the declarative configuration.
func (b *ObjectReferenceApplyConfiguration) RemoveFieldPath() *ObjectReferenceApplyConfiguration {
	b.fields.FieldPath = nil
	return b
}

// GetFieldPath gets the FieldPath field from the declarative configuration.
func (b *ObjectReferenceApplyConfiguration) GetFieldPath() (value string, ok bool) {
	if v := b.fields.FieldPath; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ObjectReferenceApplyConfiguration to unstructured.
func (b *ObjectReferenceApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ObjectReferenceApplyConfiguration, replacing the contents
// of ObjectReferenceApplyConfiguration.
func (b *ObjectReferenceApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &objectReferenceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ObjectReferenceApplyConfiguration to JSON.
func (b *ObjectReferenceApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into ObjectReferenceApplyConfiguration, replacing the contents of
// ObjectReferenceApplyConfiguration.
func (b *ObjectReferenceApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ObjectReferenceList represents a listAlias of ObjectReferenceApplyConfiguration.
type ObjectReferenceList []*ObjectReferenceApplyConfiguration

// ObjectReferenceList represents a map of ObjectReferenceApplyConfiguration.
type ObjectReferenceMap map[string]ObjectReferenceApplyConfiguration

func (b *ObjectReferenceApplyConfiguration) preMarshal() {
}
func (b *ObjectReferenceApplyConfiguration) postUnmarshal() {
}
