/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// FlowSchemaSpecApplyConfiguration represents an declarative configuration of the FlowSchemaSpec type for use
// with apply.
type FlowSchemaSpecApplyConfiguration struct {
	fields flowSchemaSpecFields
}

// FlowSchemaSpecApplyConfiguration constructs an declarative configuration of the FlowSchemaSpec type for use with
// apply.
func FlowSchemaSpec() *FlowSchemaSpecApplyConfiguration {
	return &FlowSchemaSpecApplyConfiguration{}
}

// flowSchemaSpecFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in FlowSchemaSpecApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type flowSchemaSpecFields struct {
	PriorityLevelConfiguration *PriorityLevelConfigurationReferenceApplyConfiguration `json:"priorityLevelConfiguration,omitempty"`
	MatchingPrecedence         *int32                                                 `json:"matchingPrecedence,omitempty"`
	DistinguisherMethod        *FlowDistinguisherMethodApplyConfiguration             `json:"distinguisherMethod,omitempty"`
	Rules                      *PolicyRulesWithSubjectsList                           `json:"rules,omitempty"`
}

// SetPriorityLevelConfiguration sets the PriorityLevelConfiguration field in the declarative configuration to the given value.
func (b *FlowSchemaSpecApplyConfiguration) SetPriorityLevelConfiguration(value *PriorityLevelConfigurationReferenceApplyConfiguration) *FlowSchemaSpecApplyConfiguration {
	b.fields.PriorityLevelConfiguration = value
	return b
}

// RemovePriorityLevelConfiguration removes the PriorityLevelConfiguration field from the declarative configuration.
func (b *FlowSchemaSpecApplyConfiguration) RemovePriorityLevelConfiguration() *FlowSchemaSpecApplyConfiguration {
	b.fields.PriorityLevelConfiguration = nil
	return b
}

// GetPriorityLevelConfiguration gets the PriorityLevelConfiguration field from the declarative configuration.
func (b *FlowSchemaSpecApplyConfiguration) GetPriorityLevelConfiguration() (value *PriorityLevelConfigurationReferenceApplyConfiguration, ok bool) {
	return b.fields.PriorityLevelConfiguration, b.fields.PriorityLevelConfiguration != nil
}

// SetMatchingPrecedence sets the MatchingPrecedence field in the declarative configuration to the given value.
func (b *FlowSchemaSpecApplyConfiguration) SetMatchingPrecedence(value int32) *FlowSchemaSpecApplyConfiguration {
	b.fields.MatchingPrecedence = &value
	return b
}

// RemoveMatchingPrecedence removes the MatchingPrecedence field from the declarative configuration.
func (b *FlowSchemaSpecApplyConfiguration) RemoveMatchingPrecedence() *FlowSchemaSpecApplyConfiguration {
	b.fields.MatchingPrecedence = nil
	return b
}

// GetMatchingPrecedence gets the MatchingPrecedence field from the declarative configuration.
func (b *FlowSchemaSpecApplyConfiguration) GetMatchingPrecedence() (value int32, ok bool) {
	if v := b.fields.MatchingPrecedence; v != nil {
		return *v, true
	}
	return value, false
}

// SetDistinguisherMethod sets the DistinguisherMethod field in the declarative configuration to the given value.
func (b *FlowSchemaSpecApplyConfiguration) SetDistinguisherMethod(value *FlowDistinguisherMethodApplyConfiguration) *FlowSchemaSpecApplyConfiguration {
	b.fields.DistinguisherMethod = value
	return b
}

// RemoveDistinguisherMethod removes the DistinguisherMethod field from the declarative configuration.
func (b *FlowSchemaSpecApplyConfiguration) RemoveDistinguisherMethod() *FlowSchemaSpecApplyConfiguration {
	b.fields.DistinguisherMethod = nil
	return b
}

// GetDistinguisherMethod gets the DistinguisherMethod field from the declarative configuration.
func (b *FlowSchemaSpecApplyConfiguration) GetDistinguisherMethod() (value *FlowDistinguisherMethodApplyConfiguration, ok bool) {
	return b.fields.DistinguisherMethod, b.fields.DistinguisherMethod != nil
}

// SetRules sets the Rules field in the declarative configuration to the given value.
func (b *FlowSchemaSpecApplyConfiguration) SetRules(value PolicyRulesWithSubjectsList) *FlowSchemaSpecApplyConfiguration {
	b.fields.Rules = &value
	return b
}

// RemoveRules removes the Rules field from the declarative configuration.
func (b *FlowSchemaSpecApplyConfiguration) RemoveRules() *FlowSchemaSpecApplyConfiguration {
	b.fields.Rules = nil
	return b
}

// GetRules gets the Rules field from the declarative configuration.
func (b *FlowSchemaSpecApplyConfiguration) GetRules() (value PolicyRulesWithSubjectsList, ok bool) {
	if v := b.fields.Rules; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts FlowSchemaSpecApplyConfiguration to unstructured.
func (b *FlowSchemaSpecApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to FlowSchemaSpecApplyConfiguration, replacing the contents
// of FlowSchemaSpecApplyConfiguration.
func (b *FlowSchemaSpecApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &flowSchemaSpecFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals FlowSchemaSpecApplyConfiguration to JSON.
func (b *FlowSchemaSpecApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into FlowSchemaSpecApplyConfiguration, replacing the contents of
// FlowSchemaSpecApplyConfiguration.
func (b *FlowSchemaSpecApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// FlowSchemaSpecList represents a listAlias of FlowSchemaSpecApplyConfiguration.
type FlowSchemaSpecList []*FlowSchemaSpecApplyConfiguration

// FlowSchemaSpecList represents a map of FlowSchemaSpecApplyConfiguration.
type FlowSchemaSpecMap map[string]FlowSchemaSpecApplyConfiguration

func (b *FlowSchemaSpecApplyConfiguration) preMarshal() {
}
func (b *FlowSchemaSpecApplyConfiguration) postUnmarshal() {
}
