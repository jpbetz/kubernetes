/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ServiceAccountSubjectApplyConfiguration represents an declarative configuration of the ServiceAccountSubject type for use
// with apply.
type ServiceAccountSubjectApplyConfiguration struct {
	fields serviceAccountSubjectFields
}

// ServiceAccountSubjectApplyConfiguration constructs an declarative configuration of the ServiceAccountSubject type for use with
// apply.
func ServiceAccountSubject() *ServiceAccountSubjectApplyConfiguration {
	return &ServiceAccountSubjectApplyConfiguration{}
}

// serviceAccountSubjectFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in ServiceAccountSubjectApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type serviceAccountSubjectFields struct {
	Namespace *string `json:"namespace,omitempty"`
	Name      *string `json:"name,omitempty"`
}

// SetNamespace sets the Namespace field in the declarative configuration to the given value.
func (b *ServiceAccountSubjectApplyConfiguration) SetNamespace(value string) *ServiceAccountSubjectApplyConfiguration {
	b.fields.Namespace = &value
	return b
}

// RemoveNamespace removes the Namespace field from the declarative configuration.
func (b *ServiceAccountSubjectApplyConfiguration) RemoveNamespace() *ServiceAccountSubjectApplyConfiguration {
	b.fields.Namespace = nil
	return b
}

// GetNamespace gets the Namespace field from the declarative configuration.
func (b *ServiceAccountSubjectApplyConfiguration) GetNamespace() (value string, ok bool) {
	if v := b.fields.Namespace; v != nil {
		return *v, true
	}
	return value, false
}

// SetName sets the Name field in the declarative configuration to the given value.
func (b *ServiceAccountSubjectApplyConfiguration) SetName(value string) *ServiceAccountSubjectApplyConfiguration {
	b.fields.Name = &value
	return b
}

// RemoveName removes the Name field from the declarative configuration.
func (b *ServiceAccountSubjectApplyConfiguration) RemoveName() *ServiceAccountSubjectApplyConfiguration {
	b.fields.Name = nil
	return b
}

// GetName gets the Name field from the declarative configuration.
func (b *ServiceAccountSubjectApplyConfiguration) GetName() (value string, ok bool) {
	if v := b.fields.Name; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ServiceAccountSubjectApplyConfiguration to unstructured.
func (b *ServiceAccountSubjectApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ServiceAccountSubjectApplyConfiguration, replacing the contents
// of ServiceAccountSubjectApplyConfiguration.
func (b *ServiceAccountSubjectApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &serviceAccountSubjectFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ServiceAccountSubjectApplyConfiguration to JSON.
func (b *ServiceAccountSubjectApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into ServiceAccountSubjectApplyConfiguration, replacing the contents of
// ServiceAccountSubjectApplyConfiguration.
func (b *ServiceAccountSubjectApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ServiceAccountSubjectList represents a listAlias of ServiceAccountSubjectApplyConfiguration.
type ServiceAccountSubjectList []*ServiceAccountSubjectApplyConfiguration

// ServiceAccountSubjectList represents a map of ServiceAccountSubjectApplyConfiguration.
type ServiceAccountSubjectMap map[string]ServiceAccountSubjectApplyConfiguration

func (b *ServiceAccountSubjectApplyConfiguration) preMarshal() {
}
func (b *ServiceAccountSubjectApplyConfiguration) postUnmarshal() {
}
