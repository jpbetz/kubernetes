/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

// AllowedHostPathApplyConfiguration represents an declarative configuration of the AllowedHostPath type for use
// with apply.
type AllowedHostPathApplyConfiguration struct {
	PathPrefix *string `json:"pathPrefix,omitempty"`
	ReadOnly   *bool   `json:"readOnly,omitempty"`
}

// AllowedHostPathApplyConfiguration constructs an declarative configuration of the AllowedHostPath type for use with
// apply.
func AllowedHostPath() *AllowedHostPathApplyConfiguration {
	return &AllowedHostPathApplyConfiguration{}
}

// SetPathPrefix sets the PathPrefix field in the declarative configuration to the given value.
func (b *AllowedHostPathApplyConfiguration) SetPathPrefix(value string) *AllowedHostPathApplyConfiguration {
	b.PathPrefix = &value
	return b
}

// RemovePathPrefix removes the PathPrefix field from the declarative configuration.
func (b *AllowedHostPathApplyConfiguration) RemovePathPrefix() *AllowedHostPathApplyConfiguration {
	b.PathPrefix = nil
	return b
}

// GetPathPrefix gets the PathPrefix field from the declarative configuration.
func (b *AllowedHostPathApplyConfiguration) GetPathPrefix() (value string, ok bool) {
	if v := b.PathPrefix; v != nil {
		return *v, true
	}
	return value, false
}

// SetReadOnly sets the ReadOnly field in the declarative configuration to the given value.
func (b *AllowedHostPathApplyConfiguration) SetReadOnly(value bool) *AllowedHostPathApplyConfiguration {
	b.ReadOnly = &value
	return b
}

// RemoveReadOnly removes the ReadOnly field from the declarative configuration.
func (b *AllowedHostPathApplyConfiguration) RemoveReadOnly() *AllowedHostPathApplyConfiguration {
	b.ReadOnly = nil
	return b
}

// GetReadOnly gets the ReadOnly field from the declarative configuration.
func (b *AllowedHostPathApplyConfiguration) GetReadOnly() (value bool, ok bool) {
	if v := b.ReadOnly; v != nil {
		return *v, true
	}
	return value, false
}

// AllowedHostPathList represents a listAlias of AllowedHostPathApplyConfiguration.
type AllowedHostPathList []*AllowedHostPathApplyConfiguration

// AllowedHostPathList represents a map of AllowedHostPathApplyConfiguration.
type AllowedHostPathMap map[string]AllowedHostPathApplyConfiguration
