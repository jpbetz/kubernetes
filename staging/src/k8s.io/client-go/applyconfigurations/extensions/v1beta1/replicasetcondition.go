/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	v1 "k8s.io/api/core/v1"
	v1beta1 "k8s.io/api/extensions/v1beta1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ReplicaSetConditionApplyConfiguration represents an declarative configuration of the ReplicaSetCondition type for use
// with apply.
type ReplicaSetConditionApplyConfiguration struct {
	Type               *v1beta1.ReplicaSetConditionType `json:"type,omitempty"`
	Status             *v1.ConditionStatus              `json:"status,omitempty"`
	LastTransitionTime *metav1.Time                     `json:"lastTransitionTime,omitempty"`
	Reason             *string                          `json:"reason,omitempty"`
	Message            *string                          `json:"message,omitempty"`
}

// ReplicaSetConditionApplyConfiguration constructs an declarative configuration of the ReplicaSetCondition type for use with
// apply.
func ReplicaSetCondition() *ReplicaSetConditionApplyConfiguration {
	return &ReplicaSetConditionApplyConfiguration{}
}

// SetType sets the Type field in the declarative configuration to the given value.
func (b *ReplicaSetConditionApplyConfiguration) SetType(value v1beta1.ReplicaSetConditionType) *ReplicaSetConditionApplyConfiguration {
	b.Type = &value
	return b
}

// RemoveType removes the Type field from the declarative configuration.
func (b *ReplicaSetConditionApplyConfiguration) RemoveType() *ReplicaSetConditionApplyConfiguration {
	b.Type = nil
	return b
}

// GetType gets the Type field from the declarative configuration.
func (b *ReplicaSetConditionApplyConfiguration) GetType() (value v1beta1.ReplicaSetConditionType, ok bool) {
	if v := b.Type; v != nil {
		return *v, true
	}
	return value, false
}

// SetStatus sets the Status field in the declarative configuration to the given value.
func (b *ReplicaSetConditionApplyConfiguration) SetStatus(value v1.ConditionStatus) *ReplicaSetConditionApplyConfiguration {
	b.Status = &value
	return b
}

// RemoveStatus removes the Status field from the declarative configuration.
func (b *ReplicaSetConditionApplyConfiguration) RemoveStatus() *ReplicaSetConditionApplyConfiguration {
	b.Status = nil
	return b
}

// GetStatus gets the Status field from the declarative configuration.
func (b *ReplicaSetConditionApplyConfiguration) GetStatus() (value v1.ConditionStatus, ok bool) {
	if v := b.Status; v != nil {
		return *v, true
	}
	return value, false
}

// SetLastTransitionTime sets the LastTransitionTime field in the declarative configuration to the given value.
func (b *ReplicaSetConditionApplyConfiguration) SetLastTransitionTime(value metav1.Time) *ReplicaSetConditionApplyConfiguration {
	b.LastTransitionTime = &value
	return b
}

// RemoveLastTransitionTime removes the LastTransitionTime field from the declarative configuration.
func (b *ReplicaSetConditionApplyConfiguration) RemoveLastTransitionTime() *ReplicaSetConditionApplyConfiguration {
	b.LastTransitionTime = nil
	return b
}

// GetLastTransitionTime gets the LastTransitionTime field from the declarative configuration.
func (b *ReplicaSetConditionApplyConfiguration) GetLastTransitionTime() (value metav1.Time, ok bool) {
	if v := b.LastTransitionTime; v != nil {
		return *v, true
	}
	return value, false
}

// SetReason sets the Reason field in the declarative configuration to the given value.
func (b *ReplicaSetConditionApplyConfiguration) SetReason(value string) *ReplicaSetConditionApplyConfiguration {
	b.Reason = &value
	return b
}

// RemoveReason removes the Reason field from the declarative configuration.
func (b *ReplicaSetConditionApplyConfiguration) RemoveReason() *ReplicaSetConditionApplyConfiguration {
	b.Reason = nil
	return b
}

// GetReason gets the Reason field from the declarative configuration.
func (b *ReplicaSetConditionApplyConfiguration) GetReason() (value string, ok bool) {
	if v := b.Reason; v != nil {
		return *v, true
	}
	return value, false
}

// SetMessage sets the Message field in the declarative configuration to the given value.
func (b *ReplicaSetConditionApplyConfiguration) SetMessage(value string) *ReplicaSetConditionApplyConfiguration {
	b.Message = &value
	return b
}

// RemoveMessage removes the Message field from the declarative configuration.
func (b *ReplicaSetConditionApplyConfiguration) RemoveMessage() *ReplicaSetConditionApplyConfiguration {
	b.Message = nil
	return b
}

// GetMessage gets the Message field from the declarative configuration.
func (b *ReplicaSetConditionApplyConfiguration) GetMessage() (value string, ok bool) {
	if v := b.Message; v != nil {
		return *v, true
	}
	return value, false
}

// ReplicaSetConditionList represents a listAlias of ReplicaSetConditionApplyConfiguration.
type ReplicaSetConditionList []*ReplicaSetConditionApplyConfiguration

// ReplicaSetConditionList represents a map of ReplicaSetConditionApplyConfiguration.
type ReplicaSetConditionMap map[string]ReplicaSetConditionApplyConfiguration
