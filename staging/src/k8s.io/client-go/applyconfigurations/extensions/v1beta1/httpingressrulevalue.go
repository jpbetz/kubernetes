/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// HTTPIngressRuleValueApplyConfiguration represents an declarative configuration of the HTTPIngressRuleValue type for use
// with apply.
type HTTPIngressRuleValueApplyConfiguration struct {
	fields hTTPIngressRuleValueFields
}

// HTTPIngressRuleValueApplyConfiguration constructs an declarative configuration of the HTTPIngressRuleValue type for use with
// apply.
func HTTPIngressRuleValue() *HTTPIngressRuleValueApplyConfiguration {
	return &HTTPIngressRuleValueApplyConfiguration{}
}

// hTTPIngressRuleValueFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in HTTPIngressRuleValueApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type hTTPIngressRuleValueFields struct {
	Paths *HTTPIngressPathList `json:"paths,omitempty"`
}

// SetPaths sets the Paths field in the declarative configuration to the given value.
func (b *HTTPIngressRuleValueApplyConfiguration) SetPaths(value HTTPIngressPathList) *HTTPIngressRuleValueApplyConfiguration {
	b.fields.Paths = &value
	return b
}

// RemovePaths removes the Paths field from the declarative configuration.
func (b *HTTPIngressRuleValueApplyConfiguration) RemovePaths() *HTTPIngressRuleValueApplyConfiguration {
	b.fields.Paths = nil
	return b
}

// GetPaths gets the Paths field from the declarative configuration.
func (b *HTTPIngressRuleValueApplyConfiguration) GetPaths() (value HTTPIngressPathList, ok bool) {
	if v := b.fields.Paths; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts HTTPIngressRuleValueApplyConfiguration to unstructured.
func (b *HTTPIngressRuleValueApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to HTTPIngressRuleValueApplyConfiguration, replacing the contents
// of HTTPIngressRuleValueApplyConfiguration.
func (b *HTTPIngressRuleValueApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &hTTPIngressRuleValueFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals HTTPIngressRuleValueApplyConfiguration to JSON.
func (b *HTTPIngressRuleValueApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into HTTPIngressRuleValueApplyConfiguration, replacing the contents of
// HTTPIngressRuleValueApplyConfiguration.
func (b *HTTPIngressRuleValueApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// HTTPIngressRuleValueList represents a listAlias of HTTPIngressRuleValueApplyConfiguration.
type HTTPIngressRuleValueList []*HTTPIngressRuleValueApplyConfiguration

// HTTPIngressRuleValueList represents a map of HTTPIngressRuleValueApplyConfiguration.
type HTTPIngressRuleValueMap map[string]HTTPIngressRuleValueApplyConfiguration

func (b *HTTPIngressRuleValueApplyConfiguration) preMarshal() {
}
func (b *HTTPIngressRuleValueApplyConfiguration) postUnmarshal() {
}
