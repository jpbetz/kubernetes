/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// IDRangeApplyConfiguration represents an declarative configuration of the IDRange type for use
// with apply.
type IDRangeApplyConfiguration struct {
	fields iDRangeFields
}

// IDRangeApplyConfiguration constructs an declarative configuration of the IDRange type for use with
// apply.
func IDRange() *IDRangeApplyConfiguration {
	return &IDRangeApplyConfiguration{}
}

// iDRangeFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in IDRangeApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type iDRangeFields struct {
	Min *int64 `json:"min,omitempty"`
	Max *int64 `json:"max,omitempty"`
}

// SetMin sets the Min field in the declarative configuration to the given value.
func (b *IDRangeApplyConfiguration) SetMin(value int64) *IDRangeApplyConfiguration {
	b.fields.Min = &value
	return b
}

// RemoveMin removes the Min field from the declarative configuration.
func (b *IDRangeApplyConfiguration) RemoveMin() *IDRangeApplyConfiguration {
	b.fields.Min = nil
	return b
}

// GetMin gets the Min field from the declarative configuration.
func (b *IDRangeApplyConfiguration) GetMin() (value int64, ok bool) {
	if v := b.fields.Min; v != nil {
		return *v, true
	}
	return value, false
}

// SetMax sets the Max field in the declarative configuration to the given value.
func (b *IDRangeApplyConfiguration) SetMax(value int64) *IDRangeApplyConfiguration {
	b.fields.Max = &value
	return b
}

// RemoveMax removes the Max field from the declarative configuration.
func (b *IDRangeApplyConfiguration) RemoveMax() *IDRangeApplyConfiguration {
	b.fields.Max = nil
	return b
}

// GetMax gets the Max field from the declarative configuration.
func (b *IDRangeApplyConfiguration) GetMax() (value int64, ok bool) {
	if v := b.fields.Max; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts IDRangeApplyConfiguration to unstructured.
func (b *IDRangeApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to IDRangeApplyConfiguration, replacing the contents
// of IDRangeApplyConfiguration.
func (b *IDRangeApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &iDRangeFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals IDRangeApplyConfiguration to JSON.
func (b *IDRangeApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into IDRangeApplyConfiguration, replacing the contents of
// IDRangeApplyConfiguration.
func (b *IDRangeApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// IDRangeList represents a listAlias of IDRangeApplyConfiguration.
type IDRangeList []*IDRangeApplyConfiguration

// IDRangeList represents a map of IDRangeApplyConfiguration.
type IDRangeMap map[string]IDRangeApplyConfiguration

func (b *IDRangeApplyConfiguration) preMarshal() {
}
func (b *IDRangeApplyConfiguration) postUnmarshal() {
}
