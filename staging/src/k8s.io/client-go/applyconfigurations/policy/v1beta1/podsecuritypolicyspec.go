/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	v1 "k8s.io/api/core/v1"
	v1beta1 "k8s.io/api/policy/v1beta1"
)

// PodSecurityPolicySpecApplyConfiguration represents an declarative configuration of the PodSecurityPolicySpec type for use
// with apply.
type PodSecurityPolicySpecApplyConfiguration struct {
	Privileged                      *bool                                                `json:"privileged,omitempty"`
	DefaultAddCapabilities          *[]v1.Capability                                     `json:"defaultAddCapabilities,omitempty"`
	RequiredDropCapabilities        *[]v1.Capability                                     `json:"requiredDropCapabilities,omitempty"`
	AllowedCapabilities             *[]v1.Capability                                     `json:"allowedCapabilities,omitempty"`
	Volumes                         *[]v1beta1.FSType                                    `json:"volumes,omitempty"`
	HostNetwork                     *bool                                                `json:"hostNetwork,omitempty"`
	HostPorts                       *HostPortRangeList                                   `json:"hostPorts,omitempty"`
	HostPID                         *bool                                                `json:"hostPID,omitempty"`
	HostIPC                         *bool                                                `json:"hostIPC,omitempty"`
	SELinux                         *SELinuxStrategyOptionsApplyConfiguration            `json:"seLinux,omitempty"`
	RunAsUser                       *RunAsUserStrategyOptionsApplyConfiguration          `json:"runAsUser,omitempty"`
	RunAsGroup                      *RunAsGroupStrategyOptionsApplyConfiguration         `json:"runAsGroup,omitempty"`
	SupplementalGroups              *SupplementalGroupsStrategyOptionsApplyConfiguration `json:"supplementalGroups,omitempty"`
	FSGroup                         *FSGroupStrategyOptionsApplyConfiguration            `json:"fsGroup,omitempty"`
	ReadOnlyRootFilesystem          *bool                                                `json:"readOnlyRootFilesystem,omitempty"`
	DefaultAllowPrivilegeEscalation *bool                                                `json:"defaultAllowPrivilegeEscalation,omitempty"`
	AllowPrivilegeEscalation        *bool                                                `json:"allowPrivilegeEscalation,omitempty"`
	AllowedHostPaths                *AllowedHostPathList                                 `json:"allowedHostPaths,omitempty"`
	AllowedFlexVolumes              *AllowedFlexVolumeList                               `json:"allowedFlexVolumes,omitempty"`
	AllowedCSIDrivers               *AllowedCSIDriverList                                `json:"allowedCSIDrivers,omitempty"`
	AllowedUnsafeSysctls            *[]string                                            `json:"allowedUnsafeSysctls,omitempty"`
	ForbiddenSysctls                *[]string                                            `json:"forbiddenSysctls,omitempty"`
	AllowedProcMountTypes           *[]v1.ProcMountType                                  `json:"allowedProcMountTypes,omitempty"`
	RuntimeClass                    *RuntimeClassStrategyOptionsApplyConfiguration       `json:"runtimeClass,omitempty"`
}

// PodSecurityPolicySpecApplyConfiguration constructs an declarative configuration of the PodSecurityPolicySpec type for use with
// apply.
func PodSecurityPolicySpec() *PodSecurityPolicySpecApplyConfiguration {
	return &PodSecurityPolicySpecApplyConfiguration{}
}

// SetPrivileged sets the Privileged field in the declarative configuration to the given value.
func (b *PodSecurityPolicySpecApplyConfiguration) SetPrivileged(value bool) *PodSecurityPolicySpecApplyConfiguration {
	b.Privileged = &value
	return b
}

// RemovePrivileged removes the Privileged field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) RemovePrivileged() *PodSecurityPolicySpecApplyConfiguration {
	b.Privileged = nil
	return b
}

// GetPrivileged gets the Privileged field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) GetPrivileged() (value bool, ok bool) {
	if v := b.Privileged; v != nil {
		return *v, true
	}
	return value, false
}

// SetDefaultAddCapabilities sets the DefaultAddCapabilities field in the declarative configuration to the given value.
func (b *PodSecurityPolicySpecApplyConfiguration) SetDefaultAddCapabilities(value []v1.Capability) *PodSecurityPolicySpecApplyConfiguration {
	b.DefaultAddCapabilities = &value
	return b
}

// RemoveDefaultAddCapabilities removes the DefaultAddCapabilities field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) RemoveDefaultAddCapabilities() *PodSecurityPolicySpecApplyConfiguration {
	b.DefaultAddCapabilities = nil
	return b
}

// GetDefaultAddCapabilities gets the DefaultAddCapabilities field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) GetDefaultAddCapabilities() (value []v1.Capability, ok bool) {
	if v := b.DefaultAddCapabilities; v != nil {
		return *v, true
	}
	return value, false
}

// SetRequiredDropCapabilities sets the RequiredDropCapabilities field in the declarative configuration to the given value.
func (b *PodSecurityPolicySpecApplyConfiguration) SetRequiredDropCapabilities(value []v1.Capability) *PodSecurityPolicySpecApplyConfiguration {
	b.RequiredDropCapabilities = &value
	return b
}

// RemoveRequiredDropCapabilities removes the RequiredDropCapabilities field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) RemoveRequiredDropCapabilities() *PodSecurityPolicySpecApplyConfiguration {
	b.RequiredDropCapabilities = nil
	return b
}

// GetRequiredDropCapabilities gets the RequiredDropCapabilities field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) GetRequiredDropCapabilities() (value []v1.Capability, ok bool) {
	if v := b.RequiredDropCapabilities; v != nil {
		return *v, true
	}
	return value, false
}

// SetAllowedCapabilities sets the AllowedCapabilities field in the declarative configuration to the given value.
func (b *PodSecurityPolicySpecApplyConfiguration) SetAllowedCapabilities(value []v1.Capability) *PodSecurityPolicySpecApplyConfiguration {
	b.AllowedCapabilities = &value
	return b
}

// RemoveAllowedCapabilities removes the AllowedCapabilities field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) RemoveAllowedCapabilities() *PodSecurityPolicySpecApplyConfiguration {
	b.AllowedCapabilities = nil
	return b
}

// GetAllowedCapabilities gets the AllowedCapabilities field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) GetAllowedCapabilities() (value []v1.Capability, ok bool) {
	if v := b.AllowedCapabilities; v != nil {
		return *v, true
	}
	return value, false
}

// SetVolumes sets the Volumes field in the declarative configuration to the given value.
func (b *PodSecurityPolicySpecApplyConfiguration) SetVolumes(value []v1beta1.FSType) *PodSecurityPolicySpecApplyConfiguration {
	b.Volumes = &value
	return b
}

// RemoveVolumes removes the Volumes field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) RemoveVolumes() *PodSecurityPolicySpecApplyConfiguration {
	b.Volumes = nil
	return b
}

// GetVolumes gets the Volumes field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) GetVolumes() (value []v1beta1.FSType, ok bool) {
	if v := b.Volumes; v != nil {
		return *v, true
	}
	return value, false
}

// SetHostNetwork sets the HostNetwork field in the declarative configuration to the given value.
func (b *PodSecurityPolicySpecApplyConfiguration) SetHostNetwork(value bool) *PodSecurityPolicySpecApplyConfiguration {
	b.HostNetwork = &value
	return b
}

// RemoveHostNetwork removes the HostNetwork field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) RemoveHostNetwork() *PodSecurityPolicySpecApplyConfiguration {
	b.HostNetwork = nil
	return b
}

// GetHostNetwork gets the HostNetwork field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) GetHostNetwork() (value bool, ok bool) {
	if v := b.HostNetwork; v != nil {
		return *v, true
	}
	return value, false
}

// SetHostPorts sets the HostPorts field in the declarative configuration to the given value.
func (b *PodSecurityPolicySpecApplyConfiguration) SetHostPorts(value HostPortRangeList) *PodSecurityPolicySpecApplyConfiguration {
	b.HostPorts = &value
	return b
}

// RemoveHostPorts removes the HostPorts field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) RemoveHostPorts() *PodSecurityPolicySpecApplyConfiguration {
	b.HostPorts = nil
	return b
}

// GetHostPorts gets the HostPorts field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) GetHostPorts() (value HostPortRangeList, ok bool) {
	if v := b.HostPorts; v != nil {
		return *v, true
	}
	return value, false
}

// SetHostPID sets the HostPID field in the declarative configuration to the given value.
func (b *PodSecurityPolicySpecApplyConfiguration) SetHostPID(value bool) *PodSecurityPolicySpecApplyConfiguration {
	b.HostPID = &value
	return b
}

// RemoveHostPID removes the HostPID field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) RemoveHostPID() *PodSecurityPolicySpecApplyConfiguration {
	b.HostPID = nil
	return b
}

// GetHostPID gets the HostPID field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) GetHostPID() (value bool, ok bool) {
	if v := b.HostPID; v != nil {
		return *v, true
	}
	return value, false
}

// SetHostIPC sets the HostIPC field in the declarative configuration to the given value.
func (b *PodSecurityPolicySpecApplyConfiguration) SetHostIPC(value bool) *PodSecurityPolicySpecApplyConfiguration {
	b.HostIPC = &value
	return b
}

// RemoveHostIPC removes the HostIPC field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) RemoveHostIPC() *PodSecurityPolicySpecApplyConfiguration {
	b.HostIPC = nil
	return b
}

// GetHostIPC gets the HostIPC field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) GetHostIPC() (value bool, ok bool) {
	if v := b.HostIPC; v != nil {
		return *v, true
	}
	return value, false
}

// SetSELinux sets the SELinux field in the declarative configuration to the given value.
func (b *PodSecurityPolicySpecApplyConfiguration) SetSELinux(value *SELinuxStrategyOptionsApplyConfiguration) *PodSecurityPolicySpecApplyConfiguration {
	b.SELinux = value
	return b
}

// RemoveSELinux removes the SELinux field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) RemoveSELinux() *PodSecurityPolicySpecApplyConfiguration {
	b.SELinux = nil
	return b
}

// GetSELinux gets the SELinux field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) GetSELinux() (value *SELinuxStrategyOptionsApplyConfiguration, ok bool) {
	return b.SELinux, b.SELinux != nil
}

// SetRunAsUser sets the RunAsUser field in the declarative configuration to the given value.
func (b *PodSecurityPolicySpecApplyConfiguration) SetRunAsUser(value *RunAsUserStrategyOptionsApplyConfiguration) *PodSecurityPolicySpecApplyConfiguration {
	b.RunAsUser = value
	return b
}

// RemoveRunAsUser removes the RunAsUser field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) RemoveRunAsUser() *PodSecurityPolicySpecApplyConfiguration {
	b.RunAsUser = nil
	return b
}

// GetRunAsUser gets the RunAsUser field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) GetRunAsUser() (value *RunAsUserStrategyOptionsApplyConfiguration, ok bool) {
	return b.RunAsUser, b.RunAsUser != nil
}

// SetRunAsGroup sets the RunAsGroup field in the declarative configuration to the given value.
func (b *PodSecurityPolicySpecApplyConfiguration) SetRunAsGroup(value *RunAsGroupStrategyOptionsApplyConfiguration) *PodSecurityPolicySpecApplyConfiguration {
	b.RunAsGroup = value
	return b
}

// RemoveRunAsGroup removes the RunAsGroup field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) RemoveRunAsGroup() *PodSecurityPolicySpecApplyConfiguration {
	b.RunAsGroup = nil
	return b
}

// GetRunAsGroup gets the RunAsGroup field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) GetRunAsGroup() (value *RunAsGroupStrategyOptionsApplyConfiguration, ok bool) {
	return b.RunAsGroup, b.RunAsGroup != nil
}

// SetSupplementalGroups sets the SupplementalGroups field in the declarative configuration to the given value.
func (b *PodSecurityPolicySpecApplyConfiguration) SetSupplementalGroups(value *SupplementalGroupsStrategyOptionsApplyConfiguration) *PodSecurityPolicySpecApplyConfiguration {
	b.SupplementalGroups = value
	return b
}

// RemoveSupplementalGroups removes the SupplementalGroups field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) RemoveSupplementalGroups() *PodSecurityPolicySpecApplyConfiguration {
	b.SupplementalGroups = nil
	return b
}

// GetSupplementalGroups gets the SupplementalGroups field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) GetSupplementalGroups() (value *SupplementalGroupsStrategyOptionsApplyConfiguration, ok bool) {
	return b.SupplementalGroups, b.SupplementalGroups != nil
}

// SetFSGroup sets the FSGroup field in the declarative configuration to the given value.
func (b *PodSecurityPolicySpecApplyConfiguration) SetFSGroup(value *FSGroupStrategyOptionsApplyConfiguration) *PodSecurityPolicySpecApplyConfiguration {
	b.FSGroup = value
	return b
}

// RemoveFSGroup removes the FSGroup field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) RemoveFSGroup() *PodSecurityPolicySpecApplyConfiguration {
	b.FSGroup = nil
	return b
}

// GetFSGroup gets the FSGroup field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) GetFSGroup() (value *FSGroupStrategyOptionsApplyConfiguration, ok bool) {
	return b.FSGroup, b.FSGroup != nil
}

// SetReadOnlyRootFilesystem sets the ReadOnlyRootFilesystem field in the declarative configuration to the given value.
func (b *PodSecurityPolicySpecApplyConfiguration) SetReadOnlyRootFilesystem(value bool) *PodSecurityPolicySpecApplyConfiguration {
	b.ReadOnlyRootFilesystem = &value
	return b
}

// RemoveReadOnlyRootFilesystem removes the ReadOnlyRootFilesystem field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) RemoveReadOnlyRootFilesystem() *PodSecurityPolicySpecApplyConfiguration {
	b.ReadOnlyRootFilesystem = nil
	return b
}

// GetReadOnlyRootFilesystem gets the ReadOnlyRootFilesystem field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) GetReadOnlyRootFilesystem() (value bool, ok bool) {
	if v := b.ReadOnlyRootFilesystem; v != nil {
		return *v, true
	}
	return value, false
}

// SetDefaultAllowPrivilegeEscalation sets the DefaultAllowPrivilegeEscalation field in the declarative configuration to the given value.
func (b *PodSecurityPolicySpecApplyConfiguration) SetDefaultAllowPrivilegeEscalation(value bool) *PodSecurityPolicySpecApplyConfiguration {
	b.DefaultAllowPrivilegeEscalation = &value
	return b
}

// RemoveDefaultAllowPrivilegeEscalation removes the DefaultAllowPrivilegeEscalation field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) RemoveDefaultAllowPrivilegeEscalation() *PodSecurityPolicySpecApplyConfiguration {
	b.DefaultAllowPrivilegeEscalation = nil
	return b
}

// GetDefaultAllowPrivilegeEscalation gets the DefaultAllowPrivilegeEscalation field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) GetDefaultAllowPrivilegeEscalation() (value bool, ok bool) {
	if v := b.DefaultAllowPrivilegeEscalation; v != nil {
		return *v, true
	}
	return value, false
}

// SetAllowPrivilegeEscalation sets the AllowPrivilegeEscalation field in the declarative configuration to the given value.
func (b *PodSecurityPolicySpecApplyConfiguration) SetAllowPrivilegeEscalation(value bool) *PodSecurityPolicySpecApplyConfiguration {
	b.AllowPrivilegeEscalation = &value
	return b
}

// RemoveAllowPrivilegeEscalation removes the AllowPrivilegeEscalation field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) RemoveAllowPrivilegeEscalation() *PodSecurityPolicySpecApplyConfiguration {
	b.AllowPrivilegeEscalation = nil
	return b
}

// GetAllowPrivilegeEscalation gets the AllowPrivilegeEscalation field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) GetAllowPrivilegeEscalation() (value bool, ok bool) {
	if v := b.AllowPrivilegeEscalation; v != nil {
		return *v, true
	}
	return value, false
}

// SetAllowedHostPaths sets the AllowedHostPaths field in the declarative configuration to the given value.
func (b *PodSecurityPolicySpecApplyConfiguration) SetAllowedHostPaths(value AllowedHostPathList) *PodSecurityPolicySpecApplyConfiguration {
	b.AllowedHostPaths = &value
	return b
}

// RemoveAllowedHostPaths removes the AllowedHostPaths field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) RemoveAllowedHostPaths() *PodSecurityPolicySpecApplyConfiguration {
	b.AllowedHostPaths = nil
	return b
}

// GetAllowedHostPaths gets the AllowedHostPaths field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) GetAllowedHostPaths() (value AllowedHostPathList, ok bool) {
	if v := b.AllowedHostPaths; v != nil {
		return *v, true
	}
	return value, false
}

// SetAllowedFlexVolumes sets the AllowedFlexVolumes field in the declarative configuration to the given value.
func (b *PodSecurityPolicySpecApplyConfiguration) SetAllowedFlexVolumes(value AllowedFlexVolumeList) *PodSecurityPolicySpecApplyConfiguration {
	b.AllowedFlexVolumes = &value
	return b
}

// RemoveAllowedFlexVolumes removes the AllowedFlexVolumes field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) RemoveAllowedFlexVolumes() *PodSecurityPolicySpecApplyConfiguration {
	b.AllowedFlexVolumes = nil
	return b
}

// GetAllowedFlexVolumes gets the AllowedFlexVolumes field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) GetAllowedFlexVolumes() (value AllowedFlexVolumeList, ok bool) {
	if v := b.AllowedFlexVolumes; v != nil {
		return *v, true
	}
	return value, false
}

// SetAllowedCSIDrivers sets the AllowedCSIDrivers field in the declarative configuration to the given value.
func (b *PodSecurityPolicySpecApplyConfiguration) SetAllowedCSIDrivers(value AllowedCSIDriverList) *PodSecurityPolicySpecApplyConfiguration {
	b.AllowedCSIDrivers = &value
	return b
}

// RemoveAllowedCSIDrivers removes the AllowedCSIDrivers field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) RemoveAllowedCSIDrivers() *PodSecurityPolicySpecApplyConfiguration {
	b.AllowedCSIDrivers = nil
	return b
}

// GetAllowedCSIDrivers gets the AllowedCSIDrivers field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) GetAllowedCSIDrivers() (value AllowedCSIDriverList, ok bool) {
	if v := b.AllowedCSIDrivers; v != nil {
		return *v, true
	}
	return value, false
}

// SetAllowedUnsafeSysctls sets the AllowedUnsafeSysctls field in the declarative configuration to the given value.
func (b *PodSecurityPolicySpecApplyConfiguration) SetAllowedUnsafeSysctls(value []string) *PodSecurityPolicySpecApplyConfiguration {
	b.AllowedUnsafeSysctls = &value
	return b
}

// RemoveAllowedUnsafeSysctls removes the AllowedUnsafeSysctls field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) RemoveAllowedUnsafeSysctls() *PodSecurityPolicySpecApplyConfiguration {
	b.AllowedUnsafeSysctls = nil
	return b
}

// GetAllowedUnsafeSysctls gets the AllowedUnsafeSysctls field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) GetAllowedUnsafeSysctls() (value []string, ok bool) {
	if v := b.AllowedUnsafeSysctls; v != nil {
		return *v, true
	}
	return value, false
}

// SetForbiddenSysctls sets the ForbiddenSysctls field in the declarative configuration to the given value.
func (b *PodSecurityPolicySpecApplyConfiguration) SetForbiddenSysctls(value []string) *PodSecurityPolicySpecApplyConfiguration {
	b.ForbiddenSysctls = &value
	return b
}

// RemoveForbiddenSysctls removes the ForbiddenSysctls field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) RemoveForbiddenSysctls() *PodSecurityPolicySpecApplyConfiguration {
	b.ForbiddenSysctls = nil
	return b
}

// GetForbiddenSysctls gets the ForbiddenSysctls field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) GetForbiddenSysctls() (value []string, ok bool) {
	if v := b.ForbiddenSysctls; v != nil {
		return *v, true
	}
	return value, false
}

// SetAllowedProcMountTypes sets the AllowedProcMountTypes field in the declarative configuration to the given value.
func (b *PodSecurityPolicySpecApplyConfiguration) SetAllowedProcMountTypes(value []v1.ProcMountType) *PodSecurityPolicySpecApplyConfiguration {
	b.AllowedProcMountTypes = &value
	return b
}

// RemoveAllowedProcMountTypes removes the AllowedProcMountTypes field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) RemoveAllowedProcMountTypes() *PodSecurityPolicySpecApplyConfiguration {
	b.AllowedProcMountTypes = nil
	return b
}

// GetAllowedProcMountTypes gets the AllowedProcMountTypes field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) GetAllowedProcMountTypes() (value []v1.ProcMountType, ok bool) {
	if v := b.AllowedProcMountTypes; v != nil {
		return *v, true
	}
	return value, false
}

// SetRuntimeClass sets the RuntimeClass field in the declarative configuration to the given value.
func (b *PodSecurityPolicySpecApplyConfiguration) SetRuntimeClass(value *RuntimeClassStrategyOptionsApplyConfiguration) *PodSecurityPolicySpecApplyConfiguration {
	b.RuntimeClass = value
	return b
}

// RemoveRuntimeClass removes the RuntimeClass field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) RemoveRuntimeClass() *PodSecurityPolicySpecApplyConfiguration {
	b.RuntimeClass = nil
	return b
}

// GetRuntimeClass gets the RuntimeClass field from the declarative configuration.
func (b *PodSecurityPolicySpecApplyConfiguration) GetRuntimeClass() (value *RuntimeClassStrategyOptionsApplyConfiguration, ok bool) {
	return b.RuntimeClass, b.RuntimeClass != nil
}

// PodSecurityPolicySpecList represents a listAlias of PodSecurityPolicySpecApplyConfiguration.
type PodSecurityPolicySpecList []*PodSecurityPolicySpecApplyConfiguration

// PodSecurityPolicySpecList represents a map of PodSecurityPolicySpecApplyConfiguration.
type PodSecurityPolicySpecMap map[string]PodSecurityPolicySpecApplyConfiguration
