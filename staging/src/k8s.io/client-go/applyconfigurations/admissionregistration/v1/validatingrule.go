/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	admissionregistrationv1 "k8s.io/api/admissionregistration/v1"
	metav1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// ValidatingRuleApplyConfiguration represents an declarative configuration of the ValidatingRule type for use
// with apply.
type ValidatingRuleApplyConfiguration struct {
	Name              *string                                  `json:"name,omitempty"`
	Validations       []ValidationApplyConfiguration           `json:"validations,omitempty"`
	Lookups           []LookupApplyConfiguration               `json:"lookups,omitempty"`
	MatchRules        []RuleWithOperationsApplyConfiguration   `json:"matchRules,omitempty"`
	MatchPolicy       *admissionregistrationv1.MatchPolicyType `json:"matchPolicy,omitempty"`
	NamespaceSelector *metav1.LabelSelectorApplyConfiguration  `json:"namespaceSelector,omitempty"`
	ObjectSelector    *metav1.LabelSelectorApplyConfiguration  `json:"objectSelector,omitempty"`
}

// ValidatingRuleApplyConfiguration constructs an declarative configuration of the ValidatingRule type for use with
// apply.
func ValidatingRule() *ValidatingRuleApplyConfiguration {
	return &ValidatingRuleApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *ValidatingRuleApplyConfiguration) WithName(value string) *ValidatingRuleApplyConfiguration {
	b.Name = &value
	return b
}

// WithValidations adds the given value to the Validations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Validations field.
func (b *ValidatingRuleApplyConfiguration) WithValidations(values ...*ValidationApplyConfiguration) *ValidatingRuleApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithValidations")
		}
		b.Validations = append(b.Validations, *values[i])
	}
	return b
}

// WithLookups adds the given value to the Lookups field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Lookups field.
func (b *ValidatingRuleApplyConfiguration) WithLookups(values ...*LookupApplyConfiguration) *ValidatingRuleApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithLookups")
		}
		b.Lookups = append(b.Lookups, *values[i])
	}
	return b
}

// WithMatchRules adds the given value to the MatchRules field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the MatchRules field.
func (b *ValidatingRuleApplyConfiguration) WithMatchRules(values ...*RuleWithOperationsApplyConfiguration) *ValidatingRuleApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithMatchRules")
		}
		b.MatchRules = append(b.MatchRules, *values[i])
	}
	return b
}

// WithMatchPolicy sets the MatchPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MatchPolicy field is set to the value of the last call.
func (b *ValidatingRuleApplyConfiguration) WithMatchPolicy(value admissionregistrationv1.MatchPolicyType) *ValidatingRuleApplyConfiguration {
	b.MatchPolicy = &value
	return b
}

// WithNamespaceSelector sets the NamespaceSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NamespaceSelector field is set to the value of the last call.
func (b *ValidatingRuleApplyConfiguration) WithNamespaceSelector(value *metav1.LabelSelectorApplyConfiguration) *ValidatingRuleApplyConfiguration {
	b.NamespaceSelector = value
	return b
}

// WithObjectSelector sets the ObjectSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ObjectSelector field is set to the value of the last call.
func (b *ValidatingRuleApplyConfiguration) WithObjectSelector(value *metav1.LabelSelectorApplyConfiguration) *ValidatingRuleApplyConfiguration {
	b.ObjectSelector = value
	return b
}
