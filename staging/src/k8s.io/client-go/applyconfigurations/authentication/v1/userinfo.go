/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s.io/api/authentication/v1"
)

// UserInfoApplyConfiguration represents an declarative configuration of the UserInfo type for use
// with apply.
type UserInfoApplyConfiguration struct {
	Username *string                   `json:"username,omitempty"`
	UID      *string                   `json:"uid,omitempty"`
	Groups   *[]string                 `json:"groups,omitempty"`
	Extra    *map[string]v1.ExtraValue `json:"extra,omitempty"`
}

// UserInfoApplyConfiguration constructs an declarative configuration of the UserInfo type for use with
// apply.
func UserInfo() *UserInfoApplyConfiguration {
	return &UserInfoApplyConfiguration{}
}

// SetUsername sets the Username field in the declarative configuration to the given value.
func (b *UserInfoApplyConfiguration) SetUsername(value string) *UserInfoApplyConfiguration {
	b.Username = &value
	return b
}

// RemoveUsername removes the Username field from the declarative configuration.
func (b *UserInfoApplyConfiguration) RemoveUsername() *UserInfoApplyConfiguration {
	b.Username = nil
	return b
}

// GetUsername gets the Username field from the declarative configuration.
func (b *UserInfoApplyConfiguration) GetUsername() (value string, ok bool) {
	if v := b.Username; v != nil {
		return *v, true
	}
	return value, false
}

// SetUID sets the UID field in the declarative configuration to the given value.
func (b *UserInfoApplyConfiguration) SetUID(value string) *UserInfoApplyConfiguration {
	b.UID = &value
	return b
}

// RemoveUID removes the UID field from the declarative configuration.
func (b *UserInfoApplyConfiguration) RemoveUID() *UserInfoApplyConfiguration {
	b.UID = nil
	return b
}

// GetUID gets the UID field from the declarative configuration.
func (b *UserInfoApplyConfiguration) GetUID() (value string, ok bool) {
	if v := b.UID; v != nil {
		return *v, true
	}
	return value, false
}

// SetGroups sets the Groups field in the declarative configuration to the given value.
func (b *UserInfoApplyConfiguration) SetGroups(value []string) *UserInfoApplyConfiguration {
	b.Groups = &value
	return b
}

// RemoveGroups removes the Groups field from the declarative configuration.
func (b *UserInfoApplyConfiguration) RemoveGroups() *UserInfoApplyConfiguration {
	b.Groups = nil
	return b
}

// GetGroups gets the Groups field from the declarative configuration.
func (b *UserInfoApplyConfiguration) GetGroups() (value []string, ok bool) {
	if v := b.Groups; v != nil {
		return *v, true
	}
	return value, false
}

// SetExtra sets the Extra field in the declarative configuration to the given value.
func (b *UserInfoApplyConfiguration) SetExtra(value map[string]v1.ExtraValue) *UserInfoApplyConfiguration {
	b.Extra = &value
	return b
}

// RemoveExtra removes the Extra field from the declarative configuration.
func (b *UserInfoApplyConfiguration) RemoveExtra() *UserInfoApplyConfiguration {
	b.Extra = nil
	return b
}

// GetExtra gets the Extra field from the declarative configuration.
func (b *UserInfoApplyConfiguration) GetExtra() (value map[string]v1.ExtraValue, ok bool) {
	if v := b.Extra; v != nil {
		return *v, true
	}
	return value, false
}

// UserInfoList represents a listAlias of UserInfoApplyConfiguration.
type UserInfoList []*UserInfoApplyConfiguration

// UserInfoList represents a map of UserInfoApplyConfiguration.
type UserInfoMap map[string]UserInfoApplyConfiguration
