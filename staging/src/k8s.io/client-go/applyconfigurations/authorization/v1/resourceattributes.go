/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// ResourceAttributesApplyConfiguration represents an declarative configuration of the ResourceAttributes type for use
// with apply.
type ResourceAttributesApplyConfiguration struct {
	Namespace   *string `json:"namespace,omitempty"`
	Verb        *string `json:"verb,omitempty"`
	Group       *string `json:"group,omitempty"`
	Version     *string `json:"version,omitempty"`
	Resource    *string `json:"resource,omitempty"`
	Subresource *string `json:"subresource,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// ResourceAttributesApplyConfiguration constructs an declarative configuration of the ResourceAttributes type for use with
// apply.
func ResourceAttributes() *ResourceAttributesApplyConfiguration {
	return &ResourceAttributesApplyConfiguration{}
}

// SetNamespace sets the Namespace field in the declarative configuration to the given value.
func (b *ResourceAttributesApplyConfiguration) SetNamespace(value string) *ResourceAttributesApplyConfiguration {
	b.Namespace = &value
	return b
}

// RemoveNamespace removes the Namespace field from the declarative configuration.
func (b *ResourceAttributesApplyConfiguration) RemoveNamespace() *ResourceAttributesApplyConfiguration {
	b.Namespace = nil
	return b
}

// GetNamespace gets the Namespace field from the declarative configuration.
func (b *ResourceAttributesApplyConfiguration) GetNamespace() (value string, ok bool) {
	if v := b.Namespace; v != nil {
		return *v, true
	}
	return value, false
}

// SetVerb sets the Verb field in the declarative configuration to the given value.
func (b *ResourceAttributesApplyConfiguration) SetVerb(value string) *ResourceAttributesApplyConfiguration {
	b.Verb = &value
	return b
}

// RemoveVerb removes the Verb field from the declarative configuration.
func (b *ResourceAttributesApplyConfiguration) RemoveVerb() *ResourceAttributesApplyConfiguration {
	b.Verb = nil
	return b
}

// GetVerb gets the Verb field from the declarative configuration.
func (b *ResourceAttributesApplyConfiguration) GetVerb() (value string, ok bool) {
	if v := b.Verb; v != nil {
		return *v, true
	}
	return value, false
}

// SetGroup sets the Group field in the declarative configuration to the given value.
func (b *ResourceAttributesApplyConfiguration) SetGroup(value string) *ResourceAttributesApplyConfiguration {
	b.Group = &value
	return b
}

// RemoveGroup removes the Group field from the declarative configuration.
func (b *ResourceAttributesApplyConfiguration) RemoveGroup() *ResourceAttributesApplyConfiguration {
	b.Group = nil
	return b
}

// GetGroup gets the Group field from the declarative configuration.
func (b *ResourceAttributesApplyConfiguration) GetGroup() (value string, ok bool) {
	if v := b.Group; v != nil {
		return *v, true
	}
	return value, false
}

// SetVersion sets the Version field in the declarative configuration to the given value.
func (b *ResourceAttributesApplyConfiguration) SetVersion(value string) *ResourceAttributesApplyConfiguration {
	b.Version = &value
	return b
}

// RemoveVersion removes the Version field from the declarative configuration.
func (b *ResourceAttributesApplyConfiguration) RemoveVersion() *ResourceAttributesApplyConfiguration {
	b.Version = nil
	return b
}

// GetVersion gets the Version field from the declarative configuration.
func (b *ResourceAttributesApplyConfiguration) GetVersion() (value string, ok bool) {
	if v := b.Version; v != nil {
		return *v, true
	}
	return value, false
}

// SetResource sets the Resource field in the declarative configuration to the given value.
func (b *ResourceAttributesApplyConfiguration) SetResource(value string) *ResourceAttributesApplyConfiguration {
	b.Resource = &value
	return b
}

// RemoveResource removes the Resource field from the declarative configuration.
func (b *ResourceAttributesApplyConfiguration) RemoveResource() *ResourceAttributesApplyConfiguration {
	b.Resource = nil
	return b
}

// GetResource gets the Resource field from the declarative configuration.
func (b *ResourceAttributesApplyConfiguration) GetResource() (value string, ok bool) {
	if v := b.Resource; v != nil {
		return *v, true
	}
	return value, false
}

// SetSubresource sets the Subresource field in the declarative configuration to the given value.
func (b *ResourceAttributesApplyConfiguration) SetSubresource(value string) *ResourceAttributesApplyConfiguration {
	b.Subresource = &value
	return b
}

// RemoveSubresource removes the Subresource field from the declarative configuration.
func (b *ResourceAttributesApplyConfiguration) RemoveSubresource() *ResourceAttributesApplyConfiguration {
	b.Subresource = nil
	return b
}

// GetSubresource gets the Subresource field from the declarative configuration.
func (b *ResourceAttributesApplyConfiguration) GetSubresource() (value string, ok bool) {
	if v := b.Subresource; v != nil {
		return *v, true
	}
	return value, false
}

// SetName sets the Name field in the declarative configuration to the given value.
func (b *ResourceAttributesApplyConfiguration) SetName(value string) *ResourceAttributesApplyConfiguration {
	b.Name = &value
	return b
}

// RemoveName removes the Name field from the declarative configuration.
func (b *ResourceAttributesApplyConfiguration) RemoveName() *ResourceAttributesApplyConfiguration {
	b.Name = nil
	return b
}

// GetName gets the Name field from the declarative configuration.
func (b *ResourceAttributesApplyConfiguration) GetName() (value string, ok bool) {
	if v := b.Name; v != nil {
		return *v, true
	}
	return value, false
}

// ResourceAttributesList represents a listAlias of ResourceAttributesApplyConfiguration.
type ResourceAttributesList []*ResourceAttributesApplyConfiguration

// ResourceAttributesList represents a map of ResourceAttributesApplyConfiguration.
type ResourceAttributesMap map[string]ResourceAttributesApplyConfiguration
