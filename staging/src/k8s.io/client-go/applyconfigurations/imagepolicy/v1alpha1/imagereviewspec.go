/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// ImageReviewSpecApplyConfiguration represents an declarative configuration of the ImageReviewSpec type for use
// with apply.
type ImageReviewSpecApplyConfiguration struct {
	Containers  *ImageReviewContainerSpecList `json:"containers,omitempty"`
	Annotations *map[string]string            `json:"annotations,omitempty"`
	Namespace   *string                       `json:"namespace,omitempty"`
}

// ImageReviewSpecApplyConfiguration constructs an declarative configuration of the ImageReviewSpec type for use with
// apply.
func ImageReviewSpec() *ImageReviewSpecApplyConfiguration {
	return &ImageReviewSpecApplyConfiguration{}
}

// SetContainers sets the Containers field in the declarative configuration to the given value.
func (b *ImageReviewSpecApplyConfiguration) SetContainers(value ImageReviewContainerSpecList) *ImageReviewSpecApplyConfiguration {
	b.Containers = &value
	return b
}

// RemoveContainers removes the Containers field from the declarative configuration.
func (b *ImageReviewSpecApplyConfiguration) RemoveContainers() *ImageReviewSpecApplyConfiguration {
	b.Containers = nil
	return b
}

// GetContainers gets the Containers field from the declarative configuration.
func (b *ImageReviewSpecApplyConfiguration) GetContainers() (value ImageReviewContainerSpecList, ok bool) {
	if v := b.Containers; v != nil {
		return *v, true
	}
	return value, false
}

// SetAnnotations sets the Annotations field in the declarative configuration to the given value.
func (b *ImageReviewSpecApplyConfiguration) SetAnnotations(value map[string]string) *ImageReviewSpecApplyConfiguration {
	b.Annotations = &value
	return b
}

// RemoveAnnotations removes the Annotations field from the declarative configuration.
func (b *ImageReviewSpecApplyConfiguration) RemoveAnnotations() *ImageReviewSpecApplyConfiguration {
	b.Annotations = nil
	return b
}

// GetAnnotations gets the Annotations field from the declarative configuration.
func (b *ImageReviewSpecApplyConfiguration) GetAnnotations() (value map[string]string, ok bool) {
	if v := b.Annotations; v != nil {
		return *v, true
	}
	return value, false
}

// SetNamespace sets the Namespace field in the declarative configuration to the given value.
func (b *ImageReviewSpecApplyConfiguration) SetNamespace(value string) *ImageReviewSpecApplyConfiguration {
	b.Namespace = &value
	return b
}

// RemoveNamespace removes the Namespace field from the declarative configuration.
func (b *ImageReviewSpecApplyConfiguration) RemoveNamespace() *ImageReviewSpecApplyConfiguration {
	b.Namespace = nil
	return b
}

// GetNamespace gets the Namespace field from the declarative configuration.
func (b *ImageReviewSpecApplyConfiguration) GetNamespace() (value string, ok bool) {
	if v := b.Namespace; v != nil {
		return *v, true
	}
	return value, false
}

// ImageReviewSpecList represents a listAlias of ImageReviewSpecApplyConfiguration.
type ImageReviewSpecList []*ImageReviewSpecApplyConfiguration

// ImageReviewSpecList represents a map of ImageReviewSpecApplyConfiguration.
type ImageReviewSpecMap map[string]ImageReviewSpecApplyConfiguration
