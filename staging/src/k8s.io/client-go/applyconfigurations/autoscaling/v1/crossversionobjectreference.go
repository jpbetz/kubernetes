/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// CrossVersionObjectReferenceApplyConfiguration represents an declarative configuration of the CrossVersionObjectReference type for use
// with apply.
type CrossVersionObjectReferenceApplyConfiguration struct {
	fields crossVersionObjectReferenceFields
}

// CrossVersionObjectReferenceApplyConfiguration constructs an declarative configuration of the CrossVersionObjectReference type for use with
// apply.
func CrossVersionObjectReference() *CrossVersionObjectReferenceApplyConfiguration {
	return &CrossVersionObjectReferenceApplyConfiguration{}
}

// crossVersionObjectReferenceFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in CrossVersionObjectReferenceApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type crossVersionObjectReferenceFields struct {
	Kind       *string `json:"kind,omitempty"`
	Name       *string `json:"name,omitempty"`
	APIVersion *string `json:"apiVersion,omitempty"`
}

// SetKind sets the Kind field in the declarative configuration to the given value.
func (b *CrossVersionObjectReferenceApplyConfiguration) SetKind(value string) *CrossVersionObjectReferenceApplyConfiguration {
	b.fields.Kind = &value
	return b
}

// RemoveKind removes the Kind field from the declarative configuration.
func (b *CrossVersionObjectReferenceApplyConfiguration) RemoveKind() *CrossVersionObjectReferenceApplyConfiguration {
	b.fields.Kind = nil
	return b
}

// GetKind gets the Kind field from the declarative configuration.
func (b *CrossVersionObjectReferenceApplyConfiguration) GetKind() (value string, ok bool) {
	if v := b.fields.Kind; v != nil {
		return *v, true
	}
	return value, false
}

// SetName sets the Name field in the declarative configuration to the given value.
func (b *CrossVersionObjectReferenceApplyConfiguration) SetName(value string) *CrossVersionObjectReferenceApplyConfiguration {
	b.fields.Name = &value
	return b
}

// RemoveName removes the Name field from the declarative configuration.
func (b *CrossVersionObjectReferenceApplyConfiguration) RemoveName() *CrossVersionObjectReferenceApplyConfiguration {
	b.fields.Name = nil
	return b
}

// GetName gets the Name field from the declarative configuration.
func (b *CrossVersionObjectReferenceApplyConfiguration) GetName() (value string, ok bool) {
	if v := b.fields.Name; v != nil {
		return *v, true
	}
	return value, false
}

// SetAPIVersion sets the APIVersion field in the declarative configuration to the given value.
func (b *CrossVersionObjectReferenceApplyConfiguration) SetAPIVersion(value string) *CrossVersionObjectReferenceApplyConfiguration {
	b.fields.APIVersion = &value
	return b
}

// RemoveAPIVersion removes the APIVersion field from the declarative configuration.
func (b *CrossVersionObjectReferenceApplyConfiguration) RemoveAPIVersion() *CrossVersionObjectReferenceApplyConfiguration {
	b.fields.APIVersion = nil
	return b
}

// GetAPIVersion gets the APIVersion field from the declarative configuration.
func (b *CrossVersionObjectReferenceApplyConfiguration) GetAPIVersion() (value string, ok bool) {
	if v := b.fields.APIVersion; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts CrossVersionObjectReferenceApplyConfiguration to unstructured.
func (b *CrossVersionObjectReferenceApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to CrossVersionObjectReferenceApplyConfiguration, replacing the contents
// of CrossVersionObjectReferenceApplyConfiguration.
func (b *CrossVersionObjectReferenceApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &crossVersionObjectReferenceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals CrossVersionObjectReferenceApplyConfiguration to JSON.
func (b *CrossVersionObjectReferenceApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into CrossVersionObjectReferenceApplyConfiguration, replacing the contents of
// CrossVersionObjectReferenceApplyConfiguration.
func (b *CrossVersionObjectReferenceApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// CrossVersionObjectReferenceList represents a listAlias of CrossVersionObjectReferenceApplyConfiguration.
type CrossVersionObjectReferenceList []*CrossVersionObjectReferenceApplyConfiguration

// CrossVersionObjectReferenceList represents a map of CrossVersionObjectReferenceApplyConfiguration.
type CrossVersionObjectReferenceMap map[string]CrossVersionObjectReferenceApplyConfiguration

func (b *CrossVersionObjectReferenceApplyConfiguration) preMarshal() {
}
func (b *CrossVersionObjectReferenceApplyConfiguration) postUnmarshal() {
}
