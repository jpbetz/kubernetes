/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2beta2

import (
	v2beta2 "k8s.io/api/autoscaling/v2beta2"
)

// HPAScalingPolicyApplyConfiguration represents an declarative configuration of the HPAScalingPolicy type for use
// with apply.
type HPAScalingPolicyApplyConfiguration struct {
	Type          *v2beta2.HPAScalingPolicyType `json:"type,omitempty"`
	Value         *int32                        `json:"value,omitempty"`
	PeriodSeconds *int32                        `json:"periodSeconds,omitempty"`
}

// HPAScalingPolicyApplyConfiguration constructs an declarative configuration of the HPAScalingPolicy type for use with
// apply.
func HPAScalingPolicy() *HPAScalingPolicyApplyConfiguration {
	return &HPAScalingPolicyApplyConfiguration{}
}

// SetType sets the Type field in the declarative configuration to the given value.
func (b *HPAScalingPolicyApplyConfiguration) SetType(value v2beta2.HPAScalingPolicyType) *HPAScalingPolicyApplyConfiguration {
	b.Type = &value
	return b
}

// SetValue sets the Value field in the declarative configuration to the given value.
func (b *HPAScalingPolicyApplyConfiguration) SetValue(value int32) *HPAScalingPolicyApplyConfiguration {
	b.Value = &value
	return b
}

// SetPeriodSeconds sets the PeriodSeconds field in the declarative configuration to the given value.
func (b *HPAScalingPolicyApplyConfiguration) SetPeriodSeconds(value int32) *HPAScalingPolicyApplyConfiguration {
	b.PeriodSeconds = &value
	return b
}
