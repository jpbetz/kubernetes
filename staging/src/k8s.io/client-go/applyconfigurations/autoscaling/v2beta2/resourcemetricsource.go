/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2beta2

import (
	json "encoding/json"

	v1 "k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ResourceMetricSourceApplyConfiguration represents an declarative configuration of the ResourceMetricSource type for use
// with apply.
type ResourceMetricSourceApplyConfiguration struct {
	fields resourceMetricSourceFields
}

// ResourceMetricSourceApplyConfiguration constructs an declarative configuration of the ResourceMetricSource type for use with
// apply.
func ResourceMetricSource() *ResourceMetricSourceApplyConfiguration {
	return &ResourceMetricSourceApplyConfiguration{}
}

// resourceMetricSourceFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in ResourceMetricSourceApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type resourceMetricSourceFields struct {
	Name   *v1.ResourceName                `json:"name,omitempty"`
	Target *MetricTargetApplyConfiguration `json:"target,omitempty"`
}

// SetName sets the Name field in the declarative configuration to the given value.
func (b *ResourceMetricSourceApplyConfiguration) SetName(value v1.ResourceName) *ResourceMetricSourceApplyConfiguration {
	b.fields.Name = &value
	return b
}

// RemoveName removes the Name field from the declarative configuration.
func (b *ResourceMetricSourceApplyConfiguration) RemoveName() *ResourceMetricSourceApplyConfiguration {
	b.fields.Name = nil
	return b
}

// GetName gets the Name field from the declarative configuration.
func (b *ResourceMetricSourceApplyConfiguration) GetName() (value v1.ResourceName, ok bool) {
	if v := b.fields.Name; v != nil {
		return *v, true
	}
	return value, false
}

// SetTarget sets the Target field in the declarative configuration to the given value.
func (b *ResourceMetricSourceApplyConfiguration) SetTarget(value *MetricTargetApplyConfiguration) *ResourceMetricSourceApplyConfiguration {
	b.fields.Target = value
	return b
}

// RemoveTarget removes the Target field from the declarative configuration.
func (b *ResourceMetricSourceApplyConfiguration) RemoveTarget() *ResourceMetricSourceApplyConfiguration {
	b.fields.Target = nil
	return b
}

// GetTarget gets the Target field from the declarative configuration.
func (b *ResourceMetricSourceApplyConfiguration) GetTarget() (value *MetricTargetApplyConfiguration, ok bool) {
	return b.fields.Target, b.fields.Target != nil
}

// ToUnstructured converts ResourceMetricSourceApplyConfiguration to unstructured.
func (b *ResourceMetricSourceApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ResourceMetricSourceApplyConfiguration, replacing the contents
// of ResourceMetricSourceApplyConfiguration.
func (b *ResourceMetricSourceApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &resourceMetricSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ResourceMetricSourceApplyConfiguration to JSON.
func (b *ResourceMetricSourceApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into ResourceMetricSourceApplyConfiguration, replacing the contents of
// ResourceMetricSourceApplyConfiguration.
func (b *ResourceMetricSourceApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ResourceMetricSourceList represents a listAlias of ResourceMetricSourceApplyConfiguration.
type ResourceMetricSourceList []*ResourceMetricSourceApplyConfiguration

// ResourceMetricSourceList represents a map of ResourceMetricSourceApplyConfiguration.
type ResourceMetricSourceMap map[string]ResourceMetricSourceApplyConfiguration

func (b *ResourceMetricSourceApplyConfiguration) preMarshal() {
}
func (b *ResourceMetricSourceApplyConfiguration) postUnmarshal() {
}
