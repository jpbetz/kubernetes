/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2beta2

import (
	v2beta2 "k8s.io/api/autoscaling/v2beta2"
)

// HPAScalingRulesApplyConfiguration represents an declarative configuration of the HPAScalingRules type for use
// with apply.
type HPAScalingRulesApplyConfiguration struct {
	StabilizationWindowSeconds *int32                       `json:"stabilizationWindowSeconds,omitempty"`
	SelectPolicy               *v2beta2.ScalingPolicySelect `json:"selectPolicy,omitempty"`
	Policies                   *HPAScalingPolicyList        `json:"policies,omitempty"`
}

// HPAScalingRulesApplyConfiguration constructs an declarative configuration of the HPAScalingRules type for use with
// apply.
func HPAScalingRules() *HPAScalingRulesApplyConfiguration {
	return &HPAScalingRulesApplyConfiguration{}
}

// SetStabilizationWindowSeconds sets the StabilizationWindowSeconds field in the declarative configuration to the given value.
func (b *HPAScalingRulesApplyConfiguration) SetStabilizationWindowSeconds(value int32) *HPAScalingRulesApplyConfiguration {
	b.StabilizationWindowSeconds = &value
	return b
}

// RemoveStabilizationWindowSeconds removes the StabilizationWindowSeconds field from the declarative configuration.
func (b *HPAScalingRulesApplyConfiguration) RemoveStabilizationWindowSeconds() *HPAScalingRulesApplyConfiguration {
	b.StabilizationWindowSeconds = nil
	return b
}

// GetStabilizationWindowSeconds gets the StabilizationWindowSeconds field from the declarative configuration.
func (b *HPAScalingRulesApplyConfiguration) GetStabilizationWindowSeconds() (value int32, ok bool) {
	if v := b.StabilizationWindowSeconds; v != nil {
		return *v, true
	}
	return value, false
}

// SetSelectPolicy sets the SelectPolicy field in the declarative configuration to the given value.
func (b *HPAScalingRulesApplyConfiguration) SetSelectPolicy(value v2beta2.ScalingPolicySelect) *HPAScalingRulesApplyConfiguration {
	b.SelectPolicy = &value
	return b
}

// RemoveSelectPolicy removes the SelectPolicy field from the declarative configuration.
func (b *HPAScalingRulesApplyConfiguration) RemoveSelectPolicy() *HPAScalingRulesApplyConfiguration {
	b.SelectPolicy = nil
	return b
}

// GetSelectPolicy gets the SelectPolicy field from the declarative configuration.
func (b *HPAScalingRulesApplyConfiguration) GetSelectPolicy() (value v2beta2.ScalingPolicySelect, ok bool) {
	if v := b.SelectPolicy; v != nil {
		return *v, true
	}
	return value, false
}

// SetPolicies sets the Policies field in the declarative configuration to the given value.
func (b *HPAScalingRulesApplyConfiguration) SetPolicies(value HPAScalingPolicyList) *HPAScalingRulesApplyConfiguration {
	b.Policies = &value
	return b
}

// RemovePolicies removes the Policies field from the declarative configuration.
func (b *HPAScalingRulesApplyConfiguration) RemovePolicies() *HPAScalingRulesApplyConfiguration {
	b.Policies = nil
	return b
}

// GetPolicies gets the Policies field from the declarative configuration.
func (b *HPAScalingRulesApplyConfiguration) GetPolicies() (value HPAScalingPolicyList, ok bool) {
	if v := b.Policies; v != nil {
		return *v, true
	}
	return value, false
}

// HPAScalingRulesList represents a listAlias of HPAScalingRulesApplyConfiguration.
type HPAScalingRulesList []*HPAScalingRulesApplyConfiguration

// HPAScalingRulesList represents a map of HPAScalingRulesApplyConfiguration.
type HPAScalingRulesMap map[string]HPAScalingRulesApplyConfiguration
