/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2beta1

import (
	json "encoding/json"

	v1 "k8s.io/api/core/v1"
	resource "k8s.io/apimachinery/pkg/api/resource"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ContainerResourceMetricSourceApplyConfiguration represents an declarative configuration of the ContainerResourceMetricSource type for use
// with apply.
type ContainerResourceMetricSourceApplyConfiguration struct {
	fields containerResourceMetricSourceFields
}

// ContainerResourceMetricSourceApplyConfiguration constructs an declarative configuration of the ContainerResourceMetricSource type for use with
// apply.
func ContainerResourceMetricSource() *ContainerResourceMetricSourceApplyConfiguration {
	return &ContainerResourceMetricSourceApplyConfiguration{}
}

// containerResourceMetricSourceFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in ContainerResourceMetricSourceApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type containerResourceMetricSourceFields struct {
	Name                     *v1.ResourceName   `json:"name,omitempty"`
	TargetAverageUtilization *int32             `json:"targetAverageUtilization,omitempty"`
	TargetAverageValue       *resource.Quantity `json:"targetAverageValue,omitempty"`
	Container                *string            `json:"container,omitempty"`
}

// SetName sets the Name field in the declarative configuration to the given value.
func (b *ContainerResourceMetricSourceApplyConfiguration) SetName(value v1.ResourceName) *ContainerResourceMetricSourceApplyConfiguration {
	b.fields.Name = &value
	return b
}

// RemoveName removes the Name field from the declarative configuration.
func (b *ContainerResourceMetricSourceApplyConfiguration) RemoveName() *ContainerResourceMetricSourceApplyConfiguration {
	b.fields.Name = nil
	return b
}

// GetName gets the Name field from the declarative configuration.
func (b *ContainerResourceMetricSourceApplyConfiguration) GetName() (value v1.ResourceName, ok bool) {
	if v := b.fields.Name; v != nil {
		return *v, true
	}
	return value, false
}

// SetTargetAverageUtilization sets the TargetAverageUtilization field in the declarative configuration to the given value.
func (b *ContainerResourceMetricSourceApplyConfiguration) SetTargetAverageUtilization(value int32) *ContainerResourceMetricSourceApplyConfiguration {
	b.fields.TargetAverageUtilization = &value
	return b
}

// RemoveTargetAverageUtilization removes the TargetAverageUtilization field from the declarative configuration.
func (b *ContainerResourceMetricSourceApplyConfiguration) RemoveTargetAverageUtilization() *ContainerResourceMetricSourceApplyConfiguration {
	b.fields.TargetAverageUtilization = nil
	return b
}

// GetTargetAverageUtilization gets the TargetAverageUtilization field from the declarative configuration.
func (b *ContainerResourceMetricSourceApplyConfiguration) GetTargetAverageUtilization() (value int32, ok bool) {
	if v := b.fields.TargetAverageUtilization; v != nil {
		return *v, true
	}
	return value, false
}

// SetTargetAverageValue sets the TargetAverageValue field in the declarative configuration to the given value.
func (b *ContainerResourceMetricSourceApplyConfiguration) SetTargetAverageValue(value resource.Quantity) *ContainerResourceMetricSourceApplyConfiguration {
	b.fields.TargetAverageValue = &value
	return b
}

// RemoveTargetAverageValue removes the TargetAverageValue field from the declarative configuration.
func (b *ContainerResourceMetricSourceApplyConfiguration) RemoveTargetAverageValue() *ContainerResourceMetricSourceApplyConfiguration {
	b.fields.TargetAverageValue = nil
	return b
}

// GetTargetAverageValue gets the TargetAverageValue field from the declarative configuration.
func (b *ContainerResourceMetricSourceApplyConfiguration) GetTargetAverageValue() (value resource.Quantity, ok bool) {
	if v := b.fields.TargetAverageValue; v != nil {
		return *v, true
	}
	return value, false
}

// SetContainer sets the Container field in the declarative configuration to the given value.
func (b *ContainerResourceMetricSourceApplyConfiguration) SetContainer(value string) *ContainerResourceMetricSourceApplyConfiguration {
	b.fields.Container = &value
	return b
}

// RemoveContainer removes the Container field from the declarative configuration.
func (b *ContainerResourceMetricSourceApplyConfiguration) RemoveContainer() *ContainerResourceMetricSourceApplyConfiguration {
	b.fields.Container = nil
	return b
}

// GetContainer gets the Container field from the declarative configuration.
func (b *ContainerResourceMetricSourceApplyConfiguration) GetContainer() (value string, ok bool) {
	if v := b.fields.Container; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ContainerResourceMetricSourceApplyConfiguration to unstructured.
func (b *ContainerResourceMetricSourceApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ContainerResourceMetricSourceApplyConfiguration, replacing the contents
// of ContainerResourceMetricSourceApplyConfiguration.
func (b *ContainerResourceMetricSourceApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &containerResourceMetricSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ContainerResourceMetricSourceApplyConfiguration to JSON.
func (b *ContainerResourceMetricSourceApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into ContainerResourceMetricSourceApplyConfiguration, replacing the contents of
// ContainerResourceMetricSourceApplyConfiguration.
func (b *ContainerResourceMetricSourceApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ContainerResourceMetricSourceList represents a listAlias of ContainerResourceMetricSourceApplyConfiguration.
type ContainerResourceMetricSourceList []*ContainerResourceMetricSourceApplyConfiguration

// ContainerResourceMetricSourceList represents a map of ContainerResourceMetricSourceApplyConfiguration.
type ContainerResourceMetricSourceMap map[string]ContainerResourceMetricSourceApplyConfiguration

func (b *ContainerResourceMetricSourceApplyConfiguration) preMarshal() {
}
func (b *ContainerResourceMetricSourceApplyConfiguration) postUnmarshal() {
}
