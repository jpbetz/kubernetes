/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	corev1 "k8s.io/client-go/applyconfigurations/core/v1"
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// JobSpecApplyConfiguration represents an declarative configuration of the JobSpec type for use
// with apply.
type JobSpecApplyConfiguration struct {
	Parallelism             *int32                                    `json:"parallelism,omitempty"`
	Completions             *int32                                    `json:"completions,omitempty"`
	ActiveDeadlineSeconds   *int64                                    `json:"activeDeadlineSeconds,omitempty"`
	BackoffLimit            *int32                                    `json:"backoffLimit,omitempty"`
	Selector                *v1.LabelSelectorApplyConfiguration       `json:"selector,omitempty"`
	ManualSelector          *bool                                     `json:"manualSelector,omitempty"`
	Template                *corev1.PodTemplateSpecApplyConfiguration `json:"template,omitempty"`
	TTLSecondsAfterFinished *int32                                    `json:"ttlSecondsAfterFinished,omitempty"`
}

// JobSpecApplyConfiguration constructs an declarative configuration of the JobSpec type for use with
// apply.
func JobSpec() *JobSpecApplyConfiguration {
	return &JobSpecApplyConfiguration{}
}

// SetParallelism sets the Parallelism field in the declarative configuration to the given value.
func (b *JobSpecApplyConfiguration) SetParallelism(value int32) *JobSpecApplyConfiguration {
	b.Parallelism = &value
	return b
}

// SetCompletions sets the Completions field in the declarative configuration to the given value.
func (b *JobSpecApplyConfiguration) SetCompletions(value int32) *JobSpecApplyConfiguration {
	b.Completions = &value
	return b
}

// SetActiveDeadlineSeconds sets the ActiveDeadlineSeconds field in the declarative configuration to the given value.
func (b *JobSpecApplyConfiguration) SetActiveDeadlineSeconds(value int64) *JobSpecApplyConfiguration {
	b.ActiveDeadlineSeconds = &value
	return b
}

// SetBackoffLimit sets the BackoffLimit field in the declarative configuration to the given value.
func (b *JobSpecApplyConfiguration) SetBackoffLimit(value int32) *JobSpecApplyConfiguration {
	b.BackoffLimit = &value
	return b
}

// SetSelector sets the Selector field in the declarative configuration to the given value.
func (b *JobSpecApplyConfiguration) SetSelector(value *v1.LabelSelectorApplyConfiguration) *JobSpecApplyConfiguration {
	b.Selector = value
	return b
}

// SetManualSelector sets the ManualSelector field in the declarative configuration to the given value.
func (b *JobSpecApplyConfiguration) SetManualSelector(value bool) *JobSpecApplyConfiguration {
	b.ManualSelector = &value
	return b
}

// SetTemplate sets the Template field in the declarative configuration to the given value.
func (b *JobSpecApplyConfiguration) SetTemplate(value *corev1.PodTemplateSpecApplyConfiguration) *JobSpecApplyConfiguration {
	b.Template = value
	return b
}

// SetTTLSecondsAfterFinished sets the TTLSecondsAfterFinished field in the declarative configuration to the given value.
func (b *JobSpecApplyConfiguration) SetTTLSecondsAfterFinished(value int32) *JobSpecApplyConfiguration {
	b.TTLSecondsAfterFinished = &value
	return b
}
