/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	corev1 "k8s.io/client-go/applyconfigurations/core/v1"
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// JobSpecApplyConfiguration represents an declarative configuration of the JobSpec type for use
// with apply.
type JobSpecApplyConfiguration struct {
	Parallelism             *int32                                    `json:"parallelism,omitempty"`
	Completions             *int32                                    `json:"completions,omitempty"`
	ActiveDeadlineSeconds   *int64                                    `json:"activeDeadlineSeconds,omitempty"`
	BackoffLimit            *int32                                    `json:"backoffLimit,omitempty"`
	Selector                *v1.LabelSelectorApplyConfiguration       `json:"selector,omitempty"`
	ManualSelector          *bool                                     `json:"manualSelector,omitempty"`
	Template                *corev1.PodTemplateSpecApplyConfiguration `json:"template,omitempty"`
	TTLSecondsAfterFinished *int32                                    `json:"ttlSecondsAfterFinished,omitempty"`
}

// JobSpecApplyConfiguration constructs an declarative configuration of the JobSpec type for use with
// apply.
func JobSpec() *JobSpecApplyConfiguration {
	return &JobSpecApplyConfiguration{}
}

// SetParallelism sets the Parallelism field in the declarative configuration to the given value.
func (b *JobSpecApplyConfiguration) SetParallelism(value int32) *JobSpecApplyConfiguration {
	b.Parallelism = &value
	return b
}

// RemoveParallelism removes the Parallelism field from the declarative configuration.
func (b *JobSpecApplyConfiguration) RemoveParallelism() *JobSpecApplyConfiguration {
	b.Parallelism = nil
	return b
}

// GetParallelism gets the Parallelism field from the declarative configuration.
func (b *JobSpecApplyConfiguration) GetParallelism() (value int32, ok bool) {
	if v := b.Parallelism; v != nil {
		return *v, true
	}
	return value, false
}

// SetCompletions sets the Completions field in the declarative configuration to the given value.
func (b *JobSpecApplyConfiguration) SetCompletions(value int32) *JobSpecApplyConfiguration {
	b.Completions = &value
	return b
}

// RemoveCompletions removes the Completions field from the declarative configuration.
func (b *JobSpecApplyConfiguration) RemoveCompletions() *JobSpecApplyConfiguration {
	b.Completions = nil
	return b
}

// GetCompletions gets the Completions field from the declarative configuration.
func (b *JobSpecApplyConfiguration) GetCompletions() (value int32, ok bool) {
	if v := b.Completions; v != nil {
		return *v, true
	}
	return value, false
}

// SetActiveDeadlineSeconds sets the ActiveDeadlineSeconds field in the declarative configuration to the given value.
func (b *JobSpecApplyConfiguration) SetActiveDeadlineSeconds(value int64) *JobSpecApplyConfiguration {
	b.ActiveDeadlineSeconds = &value
	return b
}

// RemoveActiveDeadlineSeconds removes the ActiveDeadlineSeconds field from the declarative configuration.
func (b *JobSpecApplyConfiguration) RemoveActiveDeadlineSeconds() *JobSpecApplyConfiguration {
	b.ActiveDeadlineSeconds = nil
	return b
}

// GetActiveDeadlineSeconds gets the ActiveDeadlineSeconds field from the declarative configuration.
func (b *JobSpecApplyConfiguration) GetActiveDeadlineSeconds() (value int64, ok bool) {
	if v := b.ActiveDeadlineSeconds; v != nil {
		return *v, true
	}
	return value, false
}

// SetBackoffLimit sets the BackoffLimit field in the declarative configuration to the given value.
func (b *JobSpecApplyConfiguration) SetBackoffLimit(value int32) *JobSpecApplyConfiguration {
	b.BackoffLimit = &value
	return b
}

// RemoveBackoffLimit removes the BackoffLimit field from the declarative configuration.
func (b *JobSpecApplyConfiguration) RemoveBackoffLimit() *JobSpecApplyConfiguration {
	b.BackoffLimit = nil
	return b
}

// GetBackoffLimit gets the BackoffLimit field from the declarative configuration.
func (b *JobSpecApplyConfiguration) GetBackoffLimit() (value int32, ok bool) {
	if v := b.BackoffLimit; v != nil {
		return *v, true
	}
	return value, false
}

// SetSelector sets the Selector field in the declarative configuration to the given value.
func (b *JobSpecApplyConfiguration) SetSelector(value *v1.LabelSelectorApplyConfiguration) *JobSpecApplyConfiguration {
	b.Selector = value
	return b
}

// RemoveSelector removes the Selector field from the declarative configuration.
func (b *JobSpecApplyConfiguration) RemoveSelector() *JobSpecApplyConfiguration {
	b.Selector = nil
	return b
}

// GetSelector gets the Selector field from the declarative configuration.
func (b *JobSpecApplyConfiguration) GetSelector() (value *v1.LabelSelectorApplyConfiguration, ok bool) {
	return b.Selector, b.Selector != nil
}

// SetManualSelector sets the ManualSelector field in the declarative configuration to the given value.
func (b *JobSpecApplyConfiguration) SetManualSelector(value bool) *JobSpecApplyConfiguration {
	b.ManualSelector = &value
	return b
}

// RemoveManualSelector removes the ManualSelector field from the declarative configuration.
func (b *JobSpecApplyConfiguration) RemoveManualSelector() *JobSpecApplyConfiguration {
	b.ManualSelector = nil
	return b
}

// GetManualSelector gets the ManualSelector field from the declarative configuration.
func (b *JobSpecApplyConfiguration) GetManualSelector() (value bool, ok bool) {
	if v := b.ManualSelector; v != nil {
		return *v, true
	}
	return value, false
}

// SetTemplate sets the Template field in the declarative configuration to the given value.
func (b *JobSpecApplyConfiguration) SetTemplate(value *corev1.PodTemplateSpecApplyConfiguration) *JobSpecApplyConfiguration {
	b.Template = value
	return b
}

// RemoveTemplate removes the Template field from the declarative configuration.
func (b *JobSpecApplyConfiguration) RemoveTemplate() *JobSpecApplyConfiguration {
	b.Template = nil
	return b
}

// GetTemplate gets the Template field from the declarative configuration.
func (b *JobSpecApplyConfiguration) GetTemplate() (value *corev1.PodTemplateSpecApplyConfiguration, ok bool) {
	return b.Template, b.Template != nil
}

// SetTTLSecondsAfterFinished sets the TTLSecondsAfterFinished field in the declarative configuration to the given value.
func (b *JobSpecApplyConfiguration) SetTTLSecondsAfterFinished(value int32) *JobSpecApplyConfiguration {
	b.TTLSecondsAfterFinished = &value
	return b
}

// RemoveTTLSecondsAfterFinished removes the TTLSecondsAfterFinished field from the declarative configuration.
func (b *JobSpecApplyConfiguration) RemoveTTLSecondsAfterFinished() *JobSpecApplyConfiguration {
	b.TTLSecondsAfterFinished = nil
	return b
}

// GetTTLSecondsAfterFinished gets the TTLSecondsAfterFinished field from the declarative configuration.
func (b *JobSpecApplyConfiguration) GetTTLSecondsAfterFinished() (value int32, ok bool) {
	if v := b.TTLSecondsAfterFinished; v != nil {
		return *v, true
	}
	return value, false
}

// JobSpecList represents a listAlias of JobSpecApplyConfiguration.
type JobSpecList []*JobSpecApplyConfiguration

// JobSpecList represents a map of JobSpecApplyConfiguration.
type JobSpecMap map[string]JobSpecApplyConfiguration
