/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// JobStatusApplyConfiguration represents an declarative configuration of the JobStatus type for use
// with apply.
type JobStatusApplyConfiguration struct {
	Conditions     *JobConditionList `json:"conditions,omitempty"`
	StartTime      *metav1.Time      `json:"startTime,omitempty"`
	CompletionTime *metav1.Time      `json:"completionTime,omitempty"`
	Active         *int32            `json:"active,omitempty"`
	Succeeded      *int32            `json:"succeeded,omitempty"`
	Failed         *int32            `json:"failed,omitempty"`
}

// JobStatusApplyConfiguration constructs an declarative configuration of the JobStatus type for use with
// apply.
func JobStatus() *JobStatusApplyConfiguration {
	return &JobStatusApplyConfiguration{}
}

// SetConditions sets the Conditions field in the declarative configuration to the given value.
func (b *JobStatusApplyConfiguration) SetConditions(value JobConditionList) *JobStatusApplyConfiguration {
	b.Conditions = &value
	return b
}

// RemoveConditions removes the Conditions field from the declarative configuration.
func (b *JobStatusApplyConfiguration) RemoveConditions() *JobStatusApplyConfiguration {
	b.Conditions = nil
	return b
}

// GetConditions gets the Conditions field from the declarative configuration.
func (b *JobStatusApplyConfiguration) GetConditions() (value JobConditionList, ok bool) {
	if v := b.Conditions; v != nil {
		return *v, true
	}
	return value, false
}

// SetStartTime sets the StartTime field in the declarative configuration to the given value.
func (b *JobStatusApplyConfiguration) SetStartTime(value metav1.Time) *JobStatusApplyConfiguration {
	b.StartTime = &value
	return b
}

// RemoveStartTime removes the StartTime field from the declarative configuration.
func (b *JobStatusApplyConfiguration) RemoveStartTime() *JobStatusApplyConfiguration {
	b.StartTime = nil
	return b
}

// GetStartTime gets the StartTime field from the declarative configuration.
func (b *JobStatusApplyConfiguration) GetStartTime() (value metav1.Time, ok bool) {
	if v := b.StartTime; v != nil {
		return *v, true
	}
	return value, false
}

// SetCompletionTime sets the CompletionTime field in the declarative configuration to the given value.
func (b *JobStatusApplyConfiguration) SetCompletionTime(value metav1.Time) *JobStatusApplyConfiguration {
	b.CompletionTime = &value
	return b
}

// RemoveCompletionTime removes the CompletionTime field from the declarative configuration.
func (b *JobStatusApplyConfiguration) RemoveCompletionTime() *JobStatusApplyConfiguration {
	b.CompletionTime = nil
	return b
}

// GetCompletionTime gets the CompletionTime field from the declarative configuration.
func (b *JobStatusApplyConfiguration) GetCompletionTime() (value metav1.Time, ok bool) {
	if v := b.CompletionTime; v != nil {
		return *v, true
	}
	return value, false
}

// SetActive sets the Active field in the declarative configuration to the given value.
func (b *JobStatusApplyConfiguration) SetActive(value int32) *JobStatusApplyConfiguration {
	b.Active = &value
	return b
}

// RemoveActive removes the Active field from the declarative configuration.
func (b *JobStatusApplyConfiguration) RemoveActive() *JobStatusApplyConfiguration {
	b.Active = nil
	return b
}

// GetActive gets the Active field from the declarative configuration.
func (b *JobStatusApplyConfiguration) GetActive() (value int32, ok bool) {
	if v := b.Active; v != nil {
		return *v, true
	}
	return value, false
}

// SetSucceeded sets the Succeeded field in the declarative configuration to the given value.
func (b *JobStatusApplyConfiguration) SetSucceeded(value int32) *JobStatusApplyConfiguration {
	b.Succeeded = &value
	return b
}

// RemoveSucceeded removes the Succeeded field from the declarative configuration.
func (b *JobStatusApplyConfiguration) RemoveSucceeded() *JobStatusApplyConfiguration {
	b.Succeeded = nil
	return b
}

// GetSucceeded gets the Succeeded field from the declarative configuration.
func (b *JobStatusApplyConfiguration) GetSucceeded() (value int32, ok bool) {
	if v := b.Succeeded; v != nil {
		return *v, true
	}
	return value, false
}

// SetFailed sets the Failed field in the declarative configuration to the given value.
func (b *JobStatusApplyConfiguration) SetFailed(value int32) *JobStatusApplyConfiguration {
	b.Failed = &value
	return b
}

// RemoveFailed removes the Failed field from the declarative configuration.
func (b *JobStatusApplyConfiguration) RemoveFailed() *JobStatusApplyConfiguration {
	b.Failed = nil
	return b
}

// GetFailed gets the Failed field from the declarative configuration.
func (b *JobStatusApplyConfiguration) GetFailed() (value int32, ok bool) {
	if v := b.Failed; v != nil {
		return *v, true
	}
	return value, false
}

// JobStatusList represents a listAlias of JobStatusApplyConfiguration.
type JobStatusList []*JobStatusApplyConfiguration

// JobStatusList represents a map of JobStatusApplyConfiguration.
type JobStatusMap map[string]JobStatusApplyConfiguration
