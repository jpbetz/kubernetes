/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2alpha1

import (
	json "encoding/json"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/applyconfigurations/core/v1"
)

// CronJobStatusApplyConfiguration represents an declarative configuration of the CronJobStatus type for use
// with apply.
type CronJobStatusApplyConfiguration struct {
	fields cronJobStatusFields
}

// CronJobStatusApplyConfiguration constructs an declarative configuration of the CronJobStatus type for use with
// apply.
func CronJobStatus() *CronJobStatusApplyConfiguration {
	return &CronJobStatusApplyConfiguration{}
}

// cronJobStatusFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in CronJobStatusApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type cronJobStatusFields struct {
	Active           *v1.ObjectReferenceList `json:"active,omitempty"`
	LastScheduleTime *metav1.Time            `json:"lastScheduleTime,omitempty"`
}

// SetActive sets the Active field in the declarative configuration to the given value.
func (b *CronJobStatusApplyConfiguration) SetActive(value v1.ObjectReferenceList) *CronJobStatusApplyConfiguration {
	b.fields.Active = &value
	return b
}

// RemoveActive removes the Active field from the declarative configuration.
func (b *CronJobStatusApplyConfiguration) RemoveActive() *CronJobStatusApplyConfiguration {
	b.fields.Active = nil
	return b
}

// GetActive gets the Active field from the declarative configuration.
func (b *CronJobStatusApplyConfiguration) GetActive() (value v1.ObjectReferenceList, ok bool) {
	if v := b.fields.Active; v != nil {
		return *v, true
	}
	return value, false
}

// SetLastScheduleTime sets the LastScheduleTime field in the declarative configuration to the given value.
func (b *CronJobStatusApplyConfiguration) SetLastScheduleTime(value metav1.Time) *CronJobStatusApplyConfiguration {
	b.fields.LastScheduleTime = &value
	return b
}

// RemoveLastScheduleTime removes the LastScheduleTime field from the declarative configuration.
func (b *CronJobStatusApplyConfiguration) RemoveLastScheduleTime() *CronJobStatusApplyConfiguration {
	b.fields.LastScheduleTime = nil
	return b
}

// GetLastScheduleTime gets the LastScheduleTime field from the declarative configuration.
func (b *CronJobStatusApplyConfiguration) GetLastScheduleTime() (value metav1.Time, ok bool) {
	if v := b.fields.LastScheduleTime; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts CronJobStatusApplyConfiguration to unstructured.
func (b *CronJobStatusApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to CronJobStatusApplyConfiguration, replacing the contents
// of CronJobStatusApplyConfiguration.
func (b *CronJobStatusApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &cronJobStatusFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals CronJobStatusApplyConfiguration to JSON.
func (b *CronJobStatusApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into CronJobStatusApplyConfiguration, replacing the contents of
// CronJobStatusApplyConfiguration.
func (b *CronJobStatusApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// CronJobStatusList represents a listAlias of CronJobStatusApplyConfiguration.
type CronJobStatusList []*CronJobStatusApplyConfiguration

// CronJobStatusList represents a map of CronJobStatusApplyConfiguration.
type CronJobStatusMap map[string]CronJobStatusApplyConfiguration

func (b *CronJobStatusApplyConfiguration) preMarshal() {
}
func (b *CronJobStatusApplyConfiguration) postUnmarshal() {
}
