/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	corev1 "k8s.io/client-go/applyconfigurations/core/v1"
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// EventApplyConfiguration represents an declarative configuration of the Event type for use
// with apply.
type EventApplyConfiguration struct {
	typeMeta *v1.TypeMetaApplyConfiguration // inlined type
	fields   eventFields
}

// EventApplyConfiguration constructs an declarative configuration of the Event type for use with
// apply.
func Event() *EventApplyConfiguration {
	return &EventApplyConfiguration{}
}

// eventFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in EventApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type eventFields struct {
	Kind                     *string                                   `json:"kind,omitempty"`       // inlined EventApplyConfiguration.typeMeta.Kind field
	APIVersion               *string                                   `json:"apiVersion,omitempty"` // inlined EventApplyConfiguration.typeMeta.APIVersion field
	ObjectMeta               *v1.ObjectMetaApplyConfiguration          `json:"metadata,omitempty"`
	EventTime                *metav1.MicroTime                         `json:"eventTime,omitempty"`
	Series                   *EventSeriesApplyConfiguration            `json:"series,omitempty"`
	ReportingController      *string                                   `json:"reportingController,omitempty"`
	ReportingInstance        *string                                   `json:"reportingInstance,omitempty"`
	Action                   *string                                   `json:"action,omitempty"`
	Reason                   *string                                   `json:"reason,omitempty"`
	Regarding                *corev1.ObjectReferenceApplyConfiguration `json:"regarding,omitempty"`
	Related                  *corev1.ObjectReferenceApplyConfiguration `json:"related,omitempty"`
	Note                     *string                                   `json:"note,omitempty"`
	Type                     *string                                   `json:"type,omitempty"`
	DeprecatedSource         *corev1.EventSourceApplyConfiguration     `json:"deprecatedSource,omitempty"`
	DeprecatedFirstTimestamp *metav1.Time                              `json:"deprecatedFirstTimestamp,omitempty"`
	DeprecatedLastTimestamp  *metav1.Time                              `json:"deprecatedLastTimestamp,omitempty"`
	DeprecatedCount          *int32                                    `json:"deprecatedCount,omitempty"`
}

// SetTypeMeta sets the TypeMeta field in the declarative configuration to the given value.
func (b *EventApplyConfiguration) SetTypeMeta(value *v1.TypeMetaApplyConfiguration) *EventApplyConfiguration {
	b.typeMeta = value
	return b
}

// RemoveTypeMeta removes the TypeMeta field from the declarative configuration.
func (b *EventApplyConfiguration) RemoveTypeMeta() *EventApplyConfiguration {
	b.typeMeta = nil
	return b
}

// GetTypeMeta gets the TypeMeta field from the declarative configuration.
func (b *EventApplyConfiguration) GetTypeMeta() (value *v1.TypeMetaApplyConfiguration, ok bool) {
	return b.typeMeta, true
}

// SetObjectMeta sets the ObjectMeta field in the declarative configuration to the given value.
func (b *EventApplyConfiguration) SetObjectMeta(value *v1.ObjectMetaApplyConfiguration) *EventApplyConfiguration {
	b.fields.ObjectMeta = value
	return b
}

// RemoveObjectMeta removes the ObjectMeta field from the declarative configuration.
func (b *EventApplyConfiguration) RemoveObjectMeta() *EventApplyConfiguration {
	b.fields.ObjectMeta = nil
	return b
}

// GetObjectMeta gets the ObjectMeta field from the declarative configuration.
func (b *EventApplyConfiguration) GetObjectMeta() (value *v1.ObjectMetaApplyConfiguration, ok bool) {
	return b.fields.ObjectMeta, b.fields.ObjectMeta != nil
}

// SetEventTime sets the EventTime field in the declarative configuration to the given value.
func (b *EventApplyConfiguration) SetEventTime(value metav1.MicroTime) *EventApplyConfiguration {
	b.fields.EventTime = &value
	return b
}

// RemoveEventTime removes the EventTime field from the declarative configuration.
func (b *EventApplyConfiguration) RemoveEventTime() *EventApplyConfiguration {
	b.fields.EventTime = nil
	return b
}

// GetEventTime gets the EventTime field from the declarative configuration.
func (b *EventApplyConfiguration) GetEventTime() (value metav1.MicroTime, ok bool) {
	if v := b.fields.EventTime; v != nil {
		return *v, true
	}
	return value, false
}

// SetSeries sets the Series field in the declarative configuration to the given value.
func (b *EventApplyConfiguration) SetSeries(value *EventSeriesApplyConfiguration) *EventApplyConfiguration {
	b.fields.Series = value
	return b
}

// RemoveSeries removes the Series field from the declarative configuration.
func (b *EventApplyConfiguration) RemoveSeries() *EventApplyConfiguration {
	b.fields.Series = nil
	return b
}

// GetSeries gets the Series field from the declarative configuration.
func (b *EventApplyConfiguration) GetSeries() (value *EventSeriesApplyConfiguration, ok bool) {
	return b.fields.Series, b.fields.Series != nil
}

// SetReportingController sets the ReportingController field in the declarative configuration to the given value.
func (b *EventApplyConfiguration) SetReportingController(value string) *EventApplyConfiguration {
	b.fields.ReportingController = &value
	return b
}

// RemoveReportingController removes the ReportingController field from the declarative configuration.
func (b *EventApplyConfiguration) RemoveReportingController() *EventApplyConfiguration {
	b.fields.ReportingController = nil
	return b
}

// GetReportingController gets the ReportingController field from the declarative configuration.
func (b *EventApplyConfiguration) GetReportingController() (value string, ok bool) {
	if v := b.fields.ReportingController; v != nil {
		return *v, true
	}
	return value, false
}

// SetReportingInstance sets the ReportingInstance field in the declarative configuration to the given value.
func (b *EventApplyConfiguration) SetReportingInstance(value string) *EventApplyConfiguration {
	b.fields.ReportingInstance = &value
	return b
}

// RemoveReportingInstance removes the ReportingInstance field from the declarative configuration.
func (b *EventApplyConfiguration) RemoveReportingInstance() *EventApplyConfiguration {
	b.fields.ReportingInstance = nil
	return b
}

// GetReportingInstance gets the ReportingInstance field from the declarative configuration.
func (b *EventApplyConfiguration) GetReportingInstance() (value string, ok bool) {
	if v := b.fields.ReportingInstance; v != nil {
		return *v, true
	}
	return value, false
}

// SetAction sets the Action field in the declarative configuration to the given value.
func (b *EventApplyConfiguration) SetAction(value string) *EventApplyConfiguration {
	b.fields.Action = &value
	return b
}

// RemoveAction removes the Action field from the declarative configuration.
func (b *EventApplyConfiguration) RemoveAction() *EventApplyConfiguration {
	b.fields.Action = nil
	return b
}

// GetAction gets the Action field from the declarative configuration.
func (b *EventApplyConfiguration) GetAction() (value string, ok bool) {
	if v := b.fields.Action; v != nil {
		return *v, true
	}
	return value, false
}

// SetReason sets the Reason field in the declarative configuration to the given value.
func (b *EventApplyConfiguration) SetReason(value string) *EventApplyConfiguration {
	b.fields.Reason = &value
	return b
}

// RemoveReason removes the Reason field from the declarative configuration.
func (b *EventApplyConfiguration) RemoveReason() *EventApplyConfiguration {
	b.fields.Reason = nil
	return b
}

// GetReason gets the Reason field from the declarative configuration.
func (b *EventApplyConfiguration) GetReason() (value string, ok bool) {
	if v := b.fields.Reason; v != nil {
		return *v, true
	}
	return value, false
}

// SetRegarding sets the Regarding field in the declarative configuration to the given value.
func (b *EventApplyConfiguration) SetRegarding(value *corev1.ObjectReferenceApplyConfiguration) *EventApplyConfiguration {
	b.fields.Regarding = value
	return b
}

// RemoveRegarding removes the Regarding field from the declarative configuration.
func (b *EventApplyConfiguration) RemoveRegarding() *EventApplyConfiguration {
	b.fields.Regarding = nil
	return b
}

// GetRegarding gets the Regarding field from the declarative configuration.
func (b *EventApplyConfiguration) GetRegarding() (value *corev1.ObjectReferenceApplyConfiguration, ok bool) {
	return b.fields.Regarding, b.fields.Regarding != nil
}

// SetRelated sets the Related field in the declarative configuration to the given value.
func (b *EventApplyConfiguration) SetRelated(value *corev1.ObjectReferenceApplyConfiguration) *EventApplyConfiguration {
	b.fields.Related = value
	return b
}

// RemoveRelated removes the Related field from the declarative configuration.
func (b *EventApplyConfiguration) RemoveRelated() *EventApplyConfiguration {
	b.fields.Related = nil
	return b
}

// GetRelated gets the Related field from the declarative configuration.
func (b *EventApplyConfiguration) GetRelated() (value *corev1.ObjectReferenceApplyConfiguration, ok bool) {
	return b.fields.Related, b.fields.Related != nil
}

// SetNote sets the Note field in the declarative configuration to the given value.
func (b *EventApplyConfiguration) SetNote(value string) *EventApplyConfiguration {
	b.fields.Note = &value
	return b
}

// RemoveNote removes the Note field from the declarative configuration.
func (b *EventApplyConfiguration) RemoveNote() *EventApplyConfiguration {
	b.fields.Note = nil
	return b
}

// GetNote gets the Note field from the declarative configuration.
func (b *EventApplyConfiguration) GetNote() (value string, ok bool) {
	if v := b.fields.Note; v != nil {
		return *v, true
	}
	return value, false
}

// SetType sets the Type field in the declarative configuration to the given value.
func (b *EventApplyConfiguration) SetType(value string) *EventApplyConfiguration {
	b.fields.Type = &value
	return b
}

// RemoveType removes the Type field from the declarative configuration.
func (b *EventApplyConfiguration) RemoveType() *EventApplyConfiguration {
	b.fields.Type = nil
	return b
}

// GetType gets the Type field from the declarative configuration.
func (b *EventApplyConfiguration) GetType() (value string, ok bool) {
	if v := b.fields.Type; v != nil {
		return *v, true
	}
	return value, false
}

// SetDeprecatedSource sets the DeprecatedSource field in the declarative configuration to the given value.
func (b *EventApplyConfiguration) SetDeprecatedSource(value *corev1.EventSourceApplyConfiguration) *EventApplyConfiguration {
	b.fields.DeprecatedSource = value
	return b
}

// RemoveDeprecatedSource removes the DeprecatedSource field from the declarative configuration.
func (b *EventApplyConfiguration) RemoveDeprecatedSource() *EventApplyConfiguration {
	b.fields.DeprecatedSource = nil
	return b
}

// GetDeprecatedSource gets the DeprecatedSource field from the declarative configuration.
func (b *EventApplyConfiguration) GetDeprecatedSource() (value *corev1.EventSourceApplyConfiguration, ok bool) {
	return b.fields.DeprecatedSource, b.fields.DeprecatedSource != nil
}

// SetDeprecatedFirstTimestamp sets the DeprecatedFirstTimestamp field in the declarative configuration to the given value.
func (b *EventApplyConfiguration) SetDeprecatedFirstTimestamp(value metav1.Time) *EventApplyConfiguration {
	b.fields.DeprecatedFirstTimestamp = &value
	return b
}

// RemoveDeprecatedFirstTimestamp removes the DeprecatedFirstTimestamp field from the declarative configuration.
func (b *EventApplyConfiguration) RemoveDeprecatedFirstTimestamp() *EventApplyConfiguration {
	b.fields.DeprecatedFirstTimestamp = nil
	return b
}

// GetDeprecatedFirstTimestamp gets the DeprecatedFirstTimestamp field from the declarative configuration.
func (b *EventApplyConfiguration) GetDeprecatedFirstTimestamp() (value metav1.Time, ok bool) {
	if v := b.fields.DeprecatedFirstTimestamp; v != nil {
		return *v, true
	}
	return value, false
}

// SetDeprecatedLastTimestamp sets the DeprecatedLastTimestamp field in the declarative configuration to the given value.
func (b *EventApplyConfiguration) SetDeprecatedLastTimestamp(value metav1.Time) *EventApplyConfiguration {
	b.fields.DeprecatedLastTimestamp = &value
	return b
}

// RemoveDeprecatedLastTimestamp removes the DeprecatedLastTimestamp field from the declarative configuration.
func (b *EventApplyConfiguration) RemoveDeprecatedLastTimestamp() *EventApplyConfiguration {
	b.fields.DeprecatedLastTimestamp = nil
	return b
}

// GetDeprecatedLastTimestamp gets the DeprecatedLastTimestamp field from the declarative configuration.
func (b *EventApplyConfiguration) GetDeprecatedLastTimestamp() (value metav1.Time, ok bool) {
	if v := b.fields.DeprecatedLastTimestamp; v != nil {
		return *v, true
	}
	return value, false
}

// SetDeprecatedCount sets the DeprecatedCount field in the declarative configuration to the given value.
func (b *EventApplyConfiguration) SetDeprecatedCount(value int32) *EventApplyConfiguration {
	b.fields.DeprecatedCount = &value
	return b
}

// RemoveDeprecatedCount removes the DeprecatedCount field from the declarative configuration.
func (b *EventApplyConfiguration) RemoveDeprecatedCount() *EventApplyConfiguration {
	b.fields.DeprecatedCount = nil
	return b
}

// GetDeprecatedCount gets the DeprecatedCount field from the declarative configuration.
func (b *EventApplyConfiguration) GetDeprecatedCount() (value int32, ok bool) {
	if v := b.fields.DeprecatedCount; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts EventApplyConfiguration to unstructured.
func (b *EventApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to EventApplyConfiguration, replacing the contents
// of EventApplyConfiguration.
func (b *EventApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &eventFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals EventApplyConfiguration to JSON.
func (b *EventApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into EventApplyConfiguration, replacing the contents of
// EventApplyConfiguration.
func (b *EventApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// EventList represents a listAlias of EventApplyConfiguration.
type EventList []*EventApplyConfiguration

// EventList represents a map of EventApplyConfiguration.
type EventMap map[string]EventApplyConfiguration

func (b *EventApplyConfiguration) preMarshal() {
	if b.typeMeta != nil {
		if v, ok := b.typeMeta.GetKind(); ok {
			b.fields.Kind = &v
		}
		if v, ok := b.typeMeta.GetAPIVersion(); ok {
			b.fields.APIVersion = &v
		}
	}
}
func (b *EventApplyConfiguration) postUnmarshal() {
	if b.typeMeta == nil {
		b.typeMeta = &v1.TypeMetaApplyConfiguration{}
	}
	if b.fields.Kind != nil {
		b.typeMeta.SetKind(*b.fields.Kind)
	}
	if b.fields.APIVersion != nil {
		b.typeMeta.SetAPIVersion(*b.fields.APIVersion)
	}
}
