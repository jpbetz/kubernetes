/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// StorageVersionStatusApplyConfiguration represents an declarative configuration of the StorageVersionStatus type for use
// with apply.
type StorageVersionStatusApplyConfiguration struct {
	StorageVersions       *ServerStorageVersionList    `json:"storageVersions,omitempty"`
	CommonEncodingVersion *string                      `json:"commonEncodingVersion,omitempty"`
	Conditions            *StorageVersionConditionList `json:"conditions,omitempty"`
}

// StorageVersionStatusApplyConfiguration constructs an declarative configuration of the StorageVersionStatus type for use with
// apply.
func StorageVersionStatus() *StorageVersionStatusApplyConfiguration {
	return &StorageVersionStatusApplyConfiguration{}
}

// SetStorageVersions sets the StorageVersions field in the declarative configuration to the given value.
func (b *StorageVersionStatusApplyConfiguration) SetStorageVersions(value ServerStorageVersionList) *StorageVersionStatusApplyConfiguration {
	b.StorageVersions = &value
	return b
}

// RemoveStorageVersions removes the StorageVersions field from the declarative configuration.
func (b *StorageVersionStatusApplyConfiguration) RemoveStorageVersions() *StorageVersionStatusApplyConfiguration {
	b.StorageVersions = nil
	return b
}

// GetStorageVersions gets the StorageVersions field from the declarative configuration.
func (b *StorageVersionStatusApplyConfiguration) GetStorageVersions() (value ServerStorageVersionList, ok bool) {
	if v := b.StorageVersions; v != nil {
		return *v, true
	}
	return value, false
}

// SetCommonEncodingVersion sets the CommonEncodingVersion field in the declarative configuration to the given value.
func (b *StorageVersionStatusApplyConfiguration) SetCommonEncodingVersion(value string) *StorageVersionStatusApplyConfiguration {
	b.CommonEncodingVersion = &value
	return b
}

// RemoveCommonEncodingVersion removes the CommonEncodingVersion field from the declarative configuration.
func (b *StorageVersionStatusApplyConfiguration) RemoveCommonEncodingVersion() *StorageVersionStatusApplyConfiguration {
	b.CommonEncodingVersion = nil
	return b
}

// GetCommonEncodingVersion gets the CommonEncodingVersion field from the declarative configuration.
func (b *StorageVersionStatusApplyConfiguration) GetCommonEncodingVersion() (value string, ok bool) {
	if v := b.CommonEncodingVersion; v != nil {
		return *v, true
	}
	return value, false
}

// SetConditions sets the Conditions field in the declarative configuration to the given value.
func (b *StorageVersionStatusApplyConfiguration) SetConditions(value StorageVersionConditionList) *StorageVersionStatusApplyConfiguration {
	b.Conditions = &value
	return b
}

// RemoveConditions removes the Conditions field from the declarative configuration.
func (b *StorageVersionStatusApplyConfiguration) RemoveConditions() *StorageVersionStatusApplyConfiguration {
	b.Conditions = nil
	return b
}

// GetConditions gets the Conditions field from the declarative configuration.
func (b *StorageVersionStatusApplyConfiguration) GetConditions() (value StorageVersionConditionList, ok bool) {
	if v := b.Conditions; v != nil {
		return *v, true
	}
	return value, false
}

// StorageVersionStatusList represents a listAlias of StorageVersionStatusApplyConfiguration.
type StorageVersionStatusList []*StorageVersionStatusApplyConfiguration

// StorageVersionStatusList represents a map of StorageVersionStatusApplyConfiguration.
type StorageVersionStatusMap map[string]StorageVersionStatusApplyConfiguration
