/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/typebuilders/meta/v1"
)

// EvictionBuilder represents an declarative configuration of the Eviction type for use
// with apply.
type EvictionBuilder struct {
	typeMeta *v1.TypeMetaBuilder // inlined type
	fields   evictionFields
}

// evictionFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in EvictionBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type evictionFields struct {
	Kind          *string                  `json:"kind,omitempty"`       // inlined EvictionBuilder.typeMeta.Kind field
	APIVersion    *string                  `json:"apiVersion,omitempty"` // inlined EvictionBuilder.typeMeta.APIVersion field
	ObjectMeta    *v1.ObjectMetaBuilder    `json:"metadata,omitempty"`
	DeleteOptions *v1.DeleteOptionsBuilder `json:"deleteOptions,omitempty"`
}

// Eviction constructs an declarative configuration of the Eviction type for use with
// apply.
func Eviction() *EvictionBuilder {
	return &EvictionBuilder{}
}

// SetTypeMeta sets the TypeMeta field in the declarative configuration to the given value.
func (b *EvictionBuilder) SetTypeMeta(value *v1.TypeMetaBuilder) *EvictionBuilder {
	b.typeMeta = value
	return b
}

// RemoveTypeMeta removes the TypeMeta field from the declarative configuration.
func (b *EvictionBuilder) RemoveTypeMeta() *EvictionBuilder {
	b.typeMeta = nil
	return b
}

// GetTypeMeta gets the TypeMeta field from the declarative configuration.
func (b *EvictionBuilder) GetTypeMeta() (value *v1.TypeMetaBuilder, ok bool) {
	return b.typeMeta, true
}

// SetObjectMeta sets the ObjectMeta field in the declarative configuration to the given value.
func (b *EvictionBuilder) SetObjectMeta(value *v1.ObjectMetaBuilder) *EvictionBuilder {
	b.fields.ObjectMeta = value
	return b
}

// RemoveObjectMeta removes the ObjectMeta field from the declarative configuration.
func (b *EvictionBuilder) RemoveObjectMeta() *EvictionBuilder {
	b.fields.ObjectMeta = nil
	return b
}

// GetObjectMeta gets the ObjectMeta field from the declarative configuration.
func (b *EvictionBuilder) GetObjectMeta() (value *v1.ObjectMetaBuilder, ok bool) {
	return b.fields.ObjectMeta, b.fields.ObjectMeta != nil
}

// SetDeleteOptions sets the DeleteOptions field in the declarative configuration to the given value.
func (b *EvictionBuilder) SetDeleteOptions(value *v1.DeleteOptionsBuilder) *EvictionBuilder {
	b.fields.DeleteOptions = value
	return b
}

// RemoveDeleteOptions removes the DeleteOptions field from the declarative configuration.
func (b *EvictionBuilder) RemoveDeleteOptions() *EvictionBuilder {
	b.fields.DeleteOptions = nil
	return b
}

// GetDeleteOptions gets the DeleteOptions field from the declarative configuration.
func (b *EvictionBuilder) GetDeleteOptions() (value *v1.DeleteOptionsBuilder, ok bool) {
	return b.fields.DeleteOptions, b.fields.DeleteOptions != nil
}

// ToUnstructured converts EvictionBuilder to unstructured.
func (b *EvictionBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to EvictionBuilder, replacing the contents
// of EvictionBuilder.
func (b *EvictionBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &evictionFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals EvictionBuilder to JSON.
func (b *EvictionBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into EvictionBuilder, replacing the contents of
// EvictionBuilder.
func (b *EvictionBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// EvictionList represents a list of EvictionBuilder.
type EvictionList []*EvictionBuilder

// EvictionList represents a map of EvictionBuilder.
type EvictionMap map[string]EvictionBuilder

func (b *EvictionBuilder) preMarshal() {
	if b.typeMeta != nil {
		if v, ok := b.typeMeta.GetKind(); ok {
			b.fields.Kind = &v
		}
		if v, ok := b.typeMeta.GetAPIVersion(); ok {
			b.fields.APIVersion = &v
		}
	}
}
func (b *EvictionBuilder) postUnmarshal() {
	if b.typeMeta == nil {
		b.typeMeta = &v1.TypeMetaBuilder{}
	}
	if b.fields.Kind != nil {
		b.typeMeta.SetKind(*b.fields.Kind)
	}
	if b.fields.APIVersion != nil {
		b.typeMeta.SetAPIVersion(*b.fields.APIVersion)
	}
}
