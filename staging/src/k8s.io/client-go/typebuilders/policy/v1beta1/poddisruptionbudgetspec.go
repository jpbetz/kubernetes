/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
	intstr "k8s.io/apimachinery/pkg/util/intstr"
	v1 "k8s.io/client-go/typebuilders/meta/v1"
)

// PodDisruptionBudgetSpecBuilder represents an declarative configuration of the PodDisruptionBudgetSpec type for use
// with apply.
type PodDisruptionBudgetSpecBuilder struct {
	fields podDisruptionBudgetSpecFields
}

// podDisruptionBudgetSpecFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in PodDisruptionBudgetSpecBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type podDisruptionBudgetSpecFields struct {
	MinAvailable   *intstr.IntOrString      `json:"minAvailable,omitempty"`
	Selector       *v1.LabelSelectorBuilder `json:"selector,omitempty"`
	MaxUnavailable *intstr.IntOrString      `json:"maxUnavailable,omitempty"`
}

// PodDisruptionBudgetSpec constructs an declarative configuration of the PodDisruptionBudgetSpec type for use with
// apply.
func PodDisruptionBudgetSpec() *PodDisruptionBudgetSpecBuilder {
	return &PodDisruptionBudgetSpecBuilder{}
}

// SetMinAvailable sets the MinAvailable field in the declarative configuration to the given value.
func (b *PodDisruptionBudgetSpecBuilder) SetMinAvailable(value intstr.IntOrString) *PodDisruptionBudgetSpecBuilder {
	b.fields.MinAvailable = &value
	return b
}

// RemoveMinAvailable removes the MinAvailable field from the declarative configuration.
func (b *PodDisruptionBudgetSpecBuilder) RemoveMinAvailable() *PodDisruptionBudgetSpecBuilder {
	b.fields.MinAvailable = nil
	return b
}

// GetMinAvailable gets the MinAvailable field from the declarative configuration.
func (b *PodDisruptionBudgetSpecBuilder) GetMinAvailable() (value intstr.IntOrString, ok bool) {
	if v := b.fields.MinAvailable; v != nil {
		return *v, true
	}
	return value, false
}

// SetSelector sets the Selector field in the declarative configuration to the given value.
func (b *PodDisruptionBudgetSpecBuilder) SetSelector(value *v1.LabelSelectorBuilder) *PodDisruptionBudgetSpecBuilder {
	b.fields.Selector = value
	return b
}

// RemoveSelector removes the Selector field from the declarative configuration.
func (b *PodDisruptionBudgetSpecBuilder) RemoveSelector() *PodDisruptionBudgetSpecBuilder {
	b.fields.Selector = nil
	return b
}

// GetSelector gets the Selector field from the declarative configuration.
func (b *PodDisruptionBudgetSpecBuilder) GetSelector() (value *v1.LabelSelectorBuilder, ok bool) {
	return b.fields.Selector, b.fields.Selector != nil
}

// SetMaxUnavailable sets the MaxUnavailable field in the declarative configuration to the given value.
func (b *PodDisruptionBudgetSpecBuilder) SetMaxUnavailable(value intstr.IntOrString) *PodDisruptionBudgetSpecBuilder {
	b.fields.MaxUnavailable = &value
	return b
}

// RemoveMaxUnavailable removes the MaxUnavailable field from the declarative configuration.
func (b *PodDisruptionBudgetSpecBuilder) RemoveMaxUnavailable() *PodDisruptionBudgetSpecBuilder {
	b.fields.MaxUnavailable = nil
	return b
}

// GetMaxUnavailable gets the MaxUnavailable field from the declarative configuration.
func (b *PodDisruptionBudgetSpecBuilder) GetMaxUnavailable() (value intstr.IntOrString, ok bool) {
	if v := b.fields.MaxUnavailable; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts PodDisruptionBudgetSpecBuilder to unstructured.
func (b *PodDisruptionBudgetSpecBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to PodDisruptionBudgetSpecBuilder, replacing the contents
// of PodDisruptionBudgetSpecBuilder.
func (b *PodDisruptionBudgetSpecBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &podDisruptionBudgetSpecFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals PodDisruptionBudgetSpecBuilder to JSON.
func (b *PodDisruptionBudgetSpecBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into PodDisruptionBudgetSpecBuilder, replacing the contents of
// PodDisruptionBudgetSpecBuilder.
func (b *PodDisruptionBudgetSpecBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// PodDisruptionBudgetSpecList represents a list of PodDisruptionBudgetSpecBuilder.
type PodDisruptionBudgetSpecList []*PodDisruptionBudgetSpecBuilder

// PodDisruptionBudgetSpecList represents a map of PodDisruptionBudgetSpecBuilder.
type PodDisruptionBudgetSpecMap map[string]PodDisruptionBudgetSpecBuilder

func (b *PodDisruptionBudgetSpecBuilder) preMarshal() {
}
func (b *PodDisruptionBudgetSpecBuilder) postUnmarshal() {
}
