/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	admissionregistrationv1 "k8s.io/api/admissionregistration/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// RuleWithOperationsBuilder represents an declarative configuration of the RuleWithOperations type for use
// with apply.
type RuleWithOperationsBuilder struct {
	rule   *RuleBuilder // inlined type
	fields ruleWithOperationsFields
}

// ruleWithOperationsFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in RuleWithOperationsBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type ruleWithOperationsFields struct {
	Operations  *[]admissionregistrationv1.OperationType `json:"operations,omitempty"`
	APIGroups   *[]string                                `json:"apiGroups,omitempty"`   // inlined RuleWithOperationsBuilder.rule.APIGroups field
	APIVersions *[]string                                `json:"apiVersions,omitempty"` // inlined RuleWithOperationsBuilder.rule.APIVersions field
	Resources   *[]string                                `json:"resources,omitempty"`   // inlined RuleWithOperationsBuilder.rule.Resources field
	Scope       *admissionregistrationv1.ScopeType       `json:"scope,omitempty"`       // inlined RuleWithOperationsBuilder.rule.Scope field
}

// RuleWithOperations constructs an declarative configuration of the RuleWithOperations type for use with
// apply.
func RuleWithOperations() *RuleWithOperationsBuilder {
	return &RuleWithOperationsBuilder{}
}

// SetOperations sets the Operations field in the declarative configuration to the given value.
func (b *RuleWithOperationsBuilder) SetOperations(value []admissionregistrationv1.OperationType) *RuleWithOperationsBuilder {
	b.fields.Operations = &value
	return b
}

// RemoveOperations removes the Operations field from the declarative configuration.
func (b *RuleWithOperationsBuilder) RemoveOperations() *RuleWithOperationsBuilder {
	b.fields.Operations = nil
	return b
}

// GetOperations gets the Operations field from the declarative configuration.
func (b *RuleWithOperationsBuilder) GetOperations() (value []admissionregistrationv1.OperationType, ok bool) {
	if v := b.fields.Operations; v != nil {
		return *v, true
	}
	return value, false
}

// SetRule sets the Rule field in the declarative configuration to the given value.
func (b *RuleWithOperationsBuilder) SetRule(value *RuleBuilder) *RuleWithOperationsBuilder {
	b.rule = value
	return b
}

// RemoveRule removes the Rule field from the declarative configuration.
func (b *RuleWithOperationsBuilder) RemoveRule() *RuleWithOperationsBuilder {
	b.rule = nil
	return b
}

// GetRule gets the Rule field from the declarative configuration.
func (b *RuleWithOperationsBuilder) GetRule() (value *RuleBuilder, ok bool) {
	return b.rule, true
}

// ToUnstructured converts RuleWithOperationsBuilder to unstructured.
func (b *RuleWithOperationsBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to RuleWithOperationsBuilder, replacing the contents
// of RuleWithOperationsBuilder.
func (b *RuleWithOperationsBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &ruleWithOperationsFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals RuleWithOperationsBuilder to JSON.
func (b *RuleWithOperationsBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into RuleWithOperationsBuilder, replacing the contents of
// RuleWithOperationsBuilder.
func (b *RuleWithOperationsBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// RuleWithOperationsList represents a list of RuleWithOperationsBuilder.
type RuleWithOperationsList []*RuleWithOperationsBuilder

// RuleWithOperationsList represents a map of RuleWithOperationsBuilder.
type RuleWithOperationsMap map[string]RuleWithOperationsBuilder

func (b *RuleWithOperationsBuilder) preMarshal() {
	if b.rule != nil {
		if v, ok := b.rule.GetAPIGroups(); ok {
			b.fields.APIGroups = &v
		}
		if v, ok := b.rule.GetAPIVersions(); ok {
			b.fields.APIVersions = &v
		}
		if v, ok := b.rule.GetResources(); ok {
			b.fields.Resources = &v
		}
		if v, ok := b.rule.GetScope(); ok {
			b.fields.Scope = &v
		}
	}
}
func (b *RuleWithOperationsBuilder) postUnmarshal() {
	if b.rule == nil {
		b.rule = &RuleBuilder{}
	}
	if b.fields.APIGroups != nil {
		b.rule.SetAPIGroups(*b.fields.APIGroups)
	}
	if b.fields.APIVersions != nil {
		b.rule.SetAPIVersions(*b.fields.APIVersions)
	}
	if b.fields.Resources != nil {
		b.rule.SetResources(*b.fields.Resources)
	}
	if b.fields.Scope != nil {
		b.rule.SetScope(*b.fields.Scope)
	}
}
