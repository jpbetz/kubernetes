/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"

	v1beta1 "k8s.io/api/admissionregistration/v1beta1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// RuleBuilder represents an declarative configuration of the Rule type for use
// with apply.
type RuleBuilder struct {
	fields *ruleFields
}

// ruleFields is used by RuleBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in RuleBuilder before marshalling, and
// are copied out to the builder type in RuleBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type ruleFields struct {
	APIGroups   *[]string          `json:"apiGroups,omitempty"`
	APIVersions *[]string          `json:"apiVersions,omitempty"`
	Resources   *[]string          `json:"resources,omitempty"`
	Scope       *v1beta1.ScopeType `json:"scope,omitempty"`
}

func (b *RuleBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &ruleFields{}
	}
}

// Rule constructs an declarative configuration of the Rule type for use with
// apply.
// Provided as a convenience.
func Rule() RuleBuilder {
	return RuleBuilder{fields: &ruleFields{}}
}

// SetAPIGroups sets the APIGroups field in the declarative configuration to the given value.
func (b RuleBuilder) SetAPIGroups(value []string) RuleBuilder {
	b.ensureInitialized()
	b.fields.APIGroups = &value
	return b
}

// RemoveAPIGroups removes the APIGroups field from the declarative configuration.
func (b RuleBuilder) RemoveAPIGroups() RuleBuilder {
	b.ensureInitialized()
	b.fields.APIGroups = nil
	return b
}

// GetAPIGroups gets the APIGroups field from the declarative configuration.
func (b RuleBuilder) GetAPIGroups() (value []string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.APIGroups; v != nil {
		return *v, true
	}
	return value, false
}

// SetAPIVersions sets the APIVersions field in the declarative configuration to the given value.
func (b RuleBuilder) SetAPIVersions(value []string) RuleBuilder {
	b.ensureInitialized()
	b.fields.APIVersions = &value
	return b
}

// RemoveAPIVersions removes the APIVersions field from the declarative configuration.
func (b RuleBuilder) RemoveAPIVersions() RuleBuilder {
	b.ensureInitialized()
	b.fields.APIVersions = nil
	return b
}

// GetAPIVersions gets the APIVersions field from the declarative configuration.
func (b RuleBuilder) GetAPIVersions() (value []string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.APIVersions; v != nil {
		return *v, true
	}
	return value, false
}

// SetResources sets the Resources field in the declarative configuration to the given value.
func (b RuleBuilder) SetResources(value []string) RuleBuilder {
	b.ensureInitialized()
	b.fields.Resources = &value
	return b
}

// RemoveResources removes the Resources field from the declarative configuration.
func (b RuleBuilder) RemoveResources() RuleBuilder {
	b.ensureInitialized()
	b.fields.Resources = nil
	return b
}

// GetResources gets the Resources field from the declarative configuration.
func (b RuleBuilder) GetResources() (value []string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Resources; v != nil {
		return *v, true
	}
	return value, false
}

// SetScope sets the Scope field in the declarative configuration to the given value.
func (b RuleBuilder) SetScope(value v1beta1.ScopeType) RuleBuilder {
	b.ensureInitialized()
	b.fields.Scope = &value
	return b
}

// RemoveScope removes the Scope field from the declarative configuration.
func (b RuleBuilder) RemoveScope() RuleBuilder {
	b.ensureInitialized()
	b.fields.Scope = nil
	return b
}

// GetScope gets the Scope field from the declarative configuration.
func (b RuleBuilder) GetScope() (value v1beta1.ScopeType, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Scope; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts RuleBuilder to unstructured.
func (b *RuleBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to RuleBuilder, replacing the contents
// of RuleBuilder.
func (b *RuleBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &ruleFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals RuleBuilder to JSON.
func (b *RuleBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into RuleBuilder, replacing the contents of
// RuleBuilder.
func (b *RuleBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// RuleList represents a list of RuleBuilder.
// Provided as a convenience.
type RuleList []RuleBuilder

// RuleList represents a map of RuleBuilder.
// Provided as a convenience.
type RuleMap map[string]RuleBuilder

func (b *RuleBuilder) preMarshal() {
}
func (b *RuleBuilder) postUnmarshal() {
}
