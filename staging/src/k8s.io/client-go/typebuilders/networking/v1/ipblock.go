/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// IPBlockBuilder represents an declarative configuration of the IPBlock type for use
// with apply.
type IPBlockBuilder struct {
	fields *iPBlockFields
}

// iPBlockFields is used by IPBlockBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in IPBlockBuilder before marshalling, and
// are copied out to the builder type in IPBlockBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type iPBlockFields struct {
	CIDR   *string   `json:"cidr,omitempty"`
	Except *[]string `json:"except,omitempty"`
}

func (b *IPBlockBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &iPBlockFields{}
	}
}

// IPBlock constructs an declarative configuration of the IPBlock type for use with
// apply.
// Provided as a convenience.
func IPBlock() IPBlockBuilder {
	return IPBlockBuilder{fields: &iPBlockFields{}}
}

// SetCIDR sets the CIDR field in the declarative configuration to the given value.
func (b IPBlockBuilder) SetCIDR(value string) IPBlockBuilder {
	b.ensureInitialized()
	b.fields.CIDR = &value
	return b
}

// RemoveCIDR removes the CIDR field from the declarative configuration.
func (b IPBlockBuilder) RemoveCIDR() IPBlockBuilder {
	b.ensureInitialized()
	b.fields.CIDR = nil
	return b
}

// GetCIDR gets the CIDR field from the declarative configuration.
func (b IPBlockBuilder) GetCIDR() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.CIDR; v != nil {
		return *v, true
	}
	return value, false
}

// SetExcept sets the Except field in the declarative configuration to the given value.
func (b IPBlockBuilder) SetExcept(value []string) IPBlockBuilder {
	b.ensureInitialized()
	b.fields.Except = &value
	return b
}

// RemoveExcept removes the Except field from the declarative configuration.
func (b IPBlockBuilder) RemoveExcept() IPBlockBuilder {
	b.ensureInitialized()
	b.fields.Except = nil
	return b
}

// GetExcept gets the Except field from the declarative configuration.
func (b IPBlockBuilder) GetExcept() (value []string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Except; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts IPBlockBuilder to unstructured.
func (b *IPBlockBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to IPBlockBuilder, replacing the contents
// of IPBlockBuilder.
func (b *IPBlockBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &iPBlockFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals IPBlockBuilder to JSON.
func (b *IPBlockBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into IPBlockBuilder, replacing the contents of
// IPBlockBuilder.
func (b *IPBlockBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// IPBlockList represents a list of IPBlockBuilder.
// Provided as a convenience.
type IPBlockList []IPBlockBuilder

// IPBlockList represents a map of IPBlockBuilder.
// Provided as a convenience.
type IPBlockMap map[string]IPBlockBuilder

func (b *IPBlockBuilder) preMarshal() {
}
func (b *IPBlockBuilder) postUnmarshal() {
}
