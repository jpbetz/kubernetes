/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	v1 "k8s.io/api/networking/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// HTTPIngressPathBuilder represents an declarative configuration of the HTTPIngressPath type for use
// with apply.
type HTTPIngressPathBuilder struct {
	fields hTTPIngressPathFields
}

// hTTPIngressPathFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in HTTPIngressPathBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type hTTPIngressPathFields struct {
	Path     *string                `json:"path,omitempty"`
	PathType *v1.PathType           `json:"pathType,omitempty"`
	Backend  *IngressBackendBuilder `json:"backend,omitempty"`
}

// HTTPIngressPath constructs an declarative configuration of the HTTPIngressPath type for use with
// apply.
func HTTPIngressPath() *HTTPIngressPathBuilder {
	return &HTTPIngressPathBuilder{}
}

// SetPath sets the Path field in the declarative configuration to the given value.
func (b *HTTPIngressPathBuilder) SetPath(value string) *HTTPIngressPathBuilder {
	b.fields.Path = &value
	return b
}

// RemovePath removes the Path field from the declarative configuration.
func (b *HTTPIngressPathBuilder) RemovePath() *HTTPIngressPathBuilder {
	b.fields.Path = nil
	return b
}

// GetPath gets the Path field from the declarative configuration.
func (b *HTTPIngressPathBuilder) GetPath() (value string, ok bool) {
	if v := b.fields.Path; v != nil {
		return *v, true
	}
	return value, false
}

// SetPathType sets the PathType field in the declarative configuration to the given value.
func (b *HTTPIngressPathBuilder) SetPathType(value v1.PathType) *HTTPIngressPathBuilder {
	b.fields.PathType = &value
	return b
}

// RemovePathType removes the PathType field from the declarative configuration.
func (b *HTTPIngressPathBuilder) RemovePathType() *HTTPIngressPathBuilder {
	b.fields.PathType = nil
	return b
}

// GetPathType gets the PathType field from the declarative configuration.
func (b *HTTPIngressPathBuilder) GetPathType() (value v1.PathType, ok bool) {
	if v := b.fields.PathType; v != nil {
		return *v, true
	}
	return value, false
}

// SetBackend sets the Backend field in the declarative configuration to the given value.
func (b *HTTPIngressPathBuilder) SetBackend(value *IngressBackendBuilder) *HTTPIngressPathBuilder {
	b.fields.Backend = value
	return b
}

// RemoveBackend removes the Backend field from the declarative configuration.
func (b *HTTPIngressPathBuilder) RemoveBackend() *HTTPIngressPathBuilder {
	b.fields.Backend = nil
	return b
}

// GetBackend gets the Backend field from the declarative configuration.
func (b *HTTPIngressPathBuilder) GetBackend() (value *IngressBackendBuilder, ok bool) {
	return b.fields.Backend, b.fields.Backend != nil
}

// ToUnstructured converts HTTPIngressPathBuilder to unstructured.
func (b *HTTPIngressPathBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to HTTPIngressPathBuilder, replacing the contents
// of HTTPIngressPathBuilder.
func (b *HTTPIngressPathBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &hTTPIngressPathFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals HTTPIngressPathBuilder to JSON.
func (b *HTTPIngressPathBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into HTTPIngressPathBuilder, replacing the contents of
// HTTPIngressPathBuilder.
func (b *HTTPIngressPathBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// HTTPIngressPathList represents a list of HTTPIngressPathBuilder.
type HTTPIngressPathList []*HTTPIngressPathBuilder

// HTTPIngressPathList represents a map of HTTPIngressPathBuilder.
type HTTPIngressPathMap map[string]HTTPIngressPathBuilder

func (b *HTTPIngressPathBuilder) preMarshal() {
}
func (b *HTTPIngressPathBuilder) postUnmarshal() {
}
