/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ServiceBackendPortBuilder represents an declarative configuration of the ServiceBackendPort type for use
// with apply.
type ServiceBackendPortBuilder struct {
	fields *serviceBackendPortFields
}

// serviceBackendPortFields is used by ServiceBackendPortBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in ServiceBackendPortBuilder before marshalling, and
// are copied out to the builder type in ServiceBackendPortBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type serviceBackendPortFields struct {
	Name   *string `json:"name,omitempty"`
	Number *int32  `json:"number,omitempty"`
}

func (b *ServiceBackendPortBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &serviceBackendPortFields{}
	}
}

// ServiceBackendPort constructs an declarative configuration of the ServiceBackendPort type for use with
// apply.
// Provided as a convenience.
func ServiceBackendPort() ServiceBackendPortBuilder {
	return ServiceBackendPortBuilder{fields: &serviceBackendPortFields{}}
}

// SetName sets the Name field in the declarative configuration to the given value.
func (b ServiceBackendPortBuilder) SetName(value string) ServiceBackendPortBuilder {
	b.ensureInitialized()
	b.fields.Name = &value
	return b
}

// RemoveName removes the Name field from the declarative configuration.
func (b ServiceBackendPortBuilder) RemoveName() ServiceBackendPortBuilder {
	b.ensureInitialized()
	b.fields.Name = nil
	return b
}

// GetName gets the Name field from the declarative configuration.
func (b ServiceBackendPortBuilder) GetName() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Name; v != nil {
		return *v, true
	}
	return value, false
}

// SetNumber sets the Number field in the declarative configuration to the given value.
func (b ServiceBackendPortBuilder) SetNumber(value int32) ServiceBackendPortBuilder {
	b.ensureInitialized()
	b.fields.Number = &value
	return b
}

// RemoveNumber removes the Number field from the declarative configuration.
func (b ServiceBackendPortBuilder) RemoveNumber() ServiceBackendPortBuilder {
	b.ensureInitialized()
	b.fields.Number = nil
	return b
}

// GetNumber gets the Number field from the declarative configuration.
func (b ServiceBackendPortBuilder) GetNumber() (value int32, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Number; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ServiceBackendPortBuilder to unstructured.
func (b *ServiceBackendPortBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ServiceBackendPortBuilder, replacing the contents
// of ServiceBackendPortBuilder.
func (b *ServiceBackendPortBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &serviceBackendPortFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ServiceBackendPortBuilder to JSON.
func (b *ServiceBackendPortBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into ServiceBackendPortBuilder, replacing the contents of
// ServiceBackendPortBuilder.
func (b *ServiceBackendPortBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ServiceBackendPortList represents a list of ServiceBackendPortBuilder.
// Provided as a convenience.
type ServiceBackendPortList []ServiceBackendPortBuilder

// ServiceBackendPortList represents a map of ServiceBackendPortBuilder.
// Provided as a convenience.
type ServiceBackendPortMap map[string]ServiceBackendPortBuilder

func (b *ServiceBackendPortBuilder) preMarshal() {
}
func (b *ServiceBackendPortBuilder) postUnmarshal() {
}
