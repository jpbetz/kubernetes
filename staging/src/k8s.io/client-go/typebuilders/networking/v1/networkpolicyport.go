/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	v1 "k8s.io/api/core/v1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
	intstr "k8s.io/apimachinery/pkg/util/intstr"
)

// NetworkPolicyPortBuilder represents an declarative configuration of the NetworkPolicyPort type for use
// with apply.
type NetworkPolicyPortBuilder struct {
	fields *networkPolicyPortFields
}

// networkPolicyPortFields is used by NetworkPolicyPortBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in NetworkPolicyPortBuilder before marshalling, and
// are copied out to the builder type in NetworkPolicyPortBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type networkPolicyPortFields struct {
	Protocol *v1.Protocol        `json:"protocol,omitempty"`
	Port     *intstr.IntOrString `json:"port,omitempty"`
}

func (b *NetworkPolicyPortBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &networkPolicyPortFields{}
	}
}

// NetworkPolicyPort constructs an declarative configuration of the NetworkPolicyPort type for use with
// apply.
// Provided as a convenience.
func NetworkPolicyPort() NetworkPolicyPortBuilder {
	return NetworkPolicyPortBuilder{fields: &networkPolicyPortFields{}}
}

// SetProtocol sets the Protocol field in the declarative configuration to the given value.
func (b NetworkPolicyPortBuilder) SetProtocol(value v1.Protocol) NetworkPolicyPortBuilder {
	b.ensureInitialized()
	b.fields.Protocol = &value
	return b
}

// RemoveProtocol removes the Protocol field from the declarative configuration.
func (b NetworkPolicyPortBuilder) RemoveProtocol() NetworkPolicyPortBuilder {
	b.ensureInitialized()
	b.fields.Protocol = nil
	return b
}

// GetProtocol gets the Protocol field from the declarative configuration.
func (b NetworkPolicyPortBuilder) GetProtocol() (value v1.Protocol, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Protocol; v != nil {
		return *v, true
	}
	return value, false
}

// SetPort sets the Port field in the declarative configuration to the given value.
func (b NetworkPolicyPortBuilder) SetPort(value intstr.IntOrString) NetworkPolicyPortBuilder {
	b.ensureInitialized()
	b.fields.Port = &value
	return b
}

// RemovePort removes the Port field from the declarative configuration.
func (b NetworkPolicyPortBuilder) RemovePort() NetworkPolicyPortBuilder {
	b.ensureInitialized()
	b.fields.Port = nil
	return b
}

// GetPort gets the Port field from the declarative configuration.
func (b NetworkPolicyPortBuilder) GetPort() (value intstr.IntOrString, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Port; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts NetworkPolicyPortBuilder to unstructured.
func (b *NetworkPolicyPortBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to NetworkPolicyPortBuilder, replacing the contents
// of NetworkPolicyPortBuilder.
func (b *NetworkPolicyPortBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &networkPolicyPortFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals NetworkPolicyPortBuilder to JSON.
func (b *NetworkPolicyPortBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into NetworkPolicyPortBuilder, replacing the contents of
// NetworkPolicyPortBuilder.
func (b *NetworkPolicyPortBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// NetworkPolicyPortList represents a list of NetworkPolicyPortBuilder.
// Provided as a convenience.
type NetworkPolicyPortList []NetworkPolicyPortBuilder

// NetworkPolicyPortList represents a map of NetworkPolicyPortBuilder.
// Provided as a convenience.
type NetworkPolicyPortMap map[string]NetworkPolicyPortBuilder

func (b *NetworkPolicyPortBuilder) preMarshal() {
}
func (b *NetworkPolicyPortBuilder) postUnmarshal() {
}
