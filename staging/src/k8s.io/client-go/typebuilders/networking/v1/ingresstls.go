/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// IngressTLSBuilder represents an declarative configuration of the IngressTLS type for use
// with apply.
type IngressTLSBuilder struct {
	fields *ingressTLSFields
}

// ingressTLSFields is used by IngressTLSBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in IngressTLSBuilder before marshalling, and
// are copied out to the builder type in IngressTLSBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type ingressTLSFields struct {
	Hosts      *[]string `json:"hosts,omitempty"`
	SecretName *string   `json:"secretName,omitempty"`
}

func (b *IngressTLSBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &ingressTLSFields{}
	}
}

// IngressTLS constructs an declarative configuration of the IngressTLS type for use with
// apply.
// Provided as a convenience.
func IngressTLS() IngressTLSBuilder {
	return IngressTLSBuilder{fields: &ingressTLSFields{}}
}

// SetHosts sets the Hosts field in the declarative configuration to the given value.
func (b IngressTLSBuilder) SetHosts(value []string) IngressTLSBuilder {
	b.ensureInitialized()
	b.fields.Hosts = &value
	return b
}

// RemoveHosts removes the Hosts field from the declarative configuration.
func (b IngressTLSBuilder) RemoveHosts() IngressTLSBuilder {
	b.ensureInitialized()
	b.fields.Hosts = nil
	return b
}

// GetHosts gets the Hosts field from the declarative configuration.
func (b IngressTLSBuilder) GetHosts() (value []string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Hosts; v != nil {
		return *v, true
	}
	return value, false
}

// SetSecretName sets the SecretName field in the declarative configuration to the given value.
func (b IngressTLSBuilder) SetSecretName(value string) IngressTLSBuilder {
	b.ensureInitialized()
	b.fields.SecretName = &value
	return b
}

// RemoveSecretName removes the SecretName field from the declarative configuration.
func (b IngressTLSBuilder) RemoveSecretName() IngressTLSBuilder {
	b.ensureInitialized()
	b.fields.SecretName = nil
	return b
}

// GetSecretName gets the SecretName field from the declarative configuration.
func (b IngressTLSBuilder) GetSecretName() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.SecretName; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts IngressTLSBuilder to unstructured.
func (b *IngressTLSBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to IngressTLSBuilder, replacing the contents
// of IngressTLSBuilder.
func (b *IngressTLSBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &ingressTLSFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals IngressTLSBuilder to JSON.
func (b *IngressTLSBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into IngressTLSBuilder, replacing the contents of
// IngressTLSBuilder.
func (b *IngressTLSBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// IngressTLSList represents a list of IngressTLSBuilder.
// Provided as a convenience.
type IngressTLSList []IngressTLSBuilder

// IngressTLSList represents a map of IngressTLSBuilder.
// Provided as a convenience.
type IngressTLSMap map[string]IngressTLSBuilder

func (b *IngressTLSBuilder) preMarshal() {
}
func (b *IngressTLSBuilder) postUnmarshal() {
}
