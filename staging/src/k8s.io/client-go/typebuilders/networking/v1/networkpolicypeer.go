/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/typebuilders/meta/v1"
)

// NetworkPolicyPeerApplyConfiguration represents an declarative configuration of the NetworkPolicyPeer type for use
// with apply.
type NetworkPolicyPeerApplyConfiguration struct {
	fields networkPolicyPeerFields
}

// NetworkPolicyPeerApplyConfiguration constructs an declarative configuration of the NetworkPolicyPeer type for use with
// apply.
func NetworkPolicyPeer() *NetworkPolicyPeerApplyConfiguration {
	return &NetworkPolicyPeerApplyConfiguration{}
}

// networkPolicyPeerFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in NetworkPolicyPeerApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type networkPolicyPeerFields struct {
	PodSelector       *v1.LabelSelectorApplyConfiguration `json:"podSelector,omitempty"`
	NamespaceSelector *v1.LabelSelectorApplyConfiguration `json:"namespaceSelector,omitempty"`
	IPBlock           *IPBlockApplyConfiguration          `json:"ipBlock,omitempty"`
}

// SetPodSelector sets the PodSelector field in the declarative configuration to the given value.
func (b *NetworkPolicyPeerApplyConfiguration) SetPodSelector(value *v1.LabelSelectorApplyConfiguration) *NetworkPolicyPeerApplyConfiguration {
	b.fields.PodSelector = value
	return b
}

// RemovePodSelector removes the PodSelector field from the declarative configuration.
func (b *NetworkPolicyPeerApplyConfiguration) RemovePodSelector() *NetworkPolicyPeerApplyConfiguration {
	b.fields.PodSelector = nil
	return b
}

// GetPodSelector gets the PodSelector field from the declarative configuration.
func (b *NetworkPolicyPeerApplyConfiguration) GetPodSelector() (value *v1.LabelSelectorApplyConfiguration, ok bool) {
	return b.fields.PodSelector, b.fields.PodSelector != nil
}

// SetNamespaceSelector sets the NamespaceSelector field in the declarative configuration to the given value.
func (b *NetworkPolicyPeerApplyConfiguration) SetNamespaceSelector(value *v1.LabelSelectorApplyConfiguration) *NetworkPolicyPeerApplyConfiguration {
	b.fields.NamespaceSelector = value
	return b
}

// RemoveNamespaceSelector removes the NamespaceSelector field from the declarative configuration.
func (b *NetworkPolicyPeerApplyConfiguration) RemoveNamespaceSelector() *NetworkPolicyPeerApplyConfiguration {
	b.fields.NamespaceSelector = nil
	return b
}

// GetNamespaceSelector gets the NamespaceSelector field from the declarative configuration.
func (b *NetworkPolicyPeerApplyConfiguration) GetNamespaceSelector() (value *v1.LabelSelectorApplyConfiguration, ok bool) {
	return b.fields.NamespaceSelector, b.fields.NamespaceSelector != nil
}

// SetIPBlock sets the IPBlock field in the declarative configuration to the given value.
func (b *NetworkPolicyPeerApplyConfiguration) SetIPBlock(value *IPBlockApplyConfiguration) *NetworkPolicyPeerApplyConfiguration {
	b.fields.IPBlock = value
	return b
}

// RemoveIPBlock removes the IPBlock field from the declarative configuration.
func (b *NetworkPolicyPeerApplyConfiguration) RemoveIPBlock() *NetworkPolicyPeerApplyConfiguration {
	b.fields.IPBlock = nil
	return b
}

// GetIPBlock gets the IPBlock field from the declarative configuration.
func (b *NetworkPolicyPeerApplyConfiguration) GetIPBlock() (value *IPBlockApplyConfiguration, ok bool) {
	return b.fields.IPBlock, b.fields.IPBlock != nil
}

// ToUnstructured converts NetworkPolicyPeerApplyConfiguration to unstructured.
func (b *NetworkPolicyPeerApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to NetworkPolicyPeerApplyConfiguration, replacing the contents
// of NetworkPolicyPeerApplyConfiguration.
func (b *NetworkPolicyPeerApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &networkPolicyPeerFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals NetworkPolicyPeerApplyConfiguration to JSON.
func (b *NetworkPolicyPeerApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into NetworkPolicyPeerApplyConfiguration, replacing the contents of
// NetworkPolicyPeerApplyConfiguration.
func (b *NetworkPolicyPeerApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// NetworkPolicyPeerList represents a listAlias of NetworkPolicyPeerApplyConfiguration.
type NetworkPolicyPeerList []*NetworkPolicyPeerApplyConfiguration

// NetworkPolicyPeerList represents a map of NetworkPolicyPeerApplyConfiguration.
type NetworkPolicyPeerMap map[string]NetworkPolicyPeerApplyConfiguration

func (b *NetworkPolicyPeerApplyConfiguration) preMarshal() {
}
func (b *NetworkPolicyPeerApplyConfiguration) postUnmarshal() {
}
