/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// NetworkPolicyIngressRuleBuilder represents an declarative configuration of the NetworkPolicyIngressRule type for use
// with apply.
type NetworkPolicyIngressRuleBuilder struct {
	fields *networkPolicyIngressRuleFields
}

// networkPolicyIngressRuleFields is used by NetworkPolicyIngressRuleBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in NetworkPolicyIngressRuleBuilder before marshalling, and
// are copied out to the builder type in NetworkPolicyIngressRuleBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type networkPolicyIngressRuleFields struct {
	Ports *NetworkPolicyPortList `json:"ports,omitempty"`
	From  *NetworkPolicyPeerList `json:"from,omitempty"`
}

func (b *NetworkPolicyIngressRuleBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &networkPolicyIngressRuleFields{}
	}
}

// NetworkPolicyIngressRule constructs an declarative configuration of the NetworkPolicyIngressRule type for use with
// apply.
// Provided as a convenience.
func NetworkPolicyIngressRule() NetworkPolicyIngressRuleBuilder {
	return NetworkPolicyIngressRuleBuilder{fields: &networkPolicyIngressRuleFields{}}
}

// SetPorts sets the Ports field in the declarative configuration to the given value.
func (b NetworkPolicyIngressRuleBuilder) SetPorts(value NetworkPolicyPortList) NetworkPolicyIngressRuleBuilder {
	b.ensureInitialized()
	b.fields.Ports = &value
	return b
}

// RemovePorts removes the Ports field from the declarative configuration.
func (b NetworkPolicyIngressRuleBuilder) RemovePorts() NetworkPolicyIngressRuleBuilder {
	b.ensureInitialized()
	b.fields.Ports = nil
	return b
}

// GetPorts gets the Ports field from the declarative configuration.
func (b NetworkPolicyIngressRuleBuilder) GetPorts() (value NetworkPolicyPortList, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Ports; v != nil {
		return *v, true
	}
	return value, false
}

// SetFrom sets the From field in the declarative configuration to the given value.
func (b NetworkPolicyIngressRuleBuilder) SetFrom(value NetworkPolicyPeerList) NetworkPolicyIngressRuleBuilder {
	b.ensureInitialized()
	b.fields.From = &value
	return b
}

// RemoveFrom removes the From field from the declarative configuration.
func (b NetworkPolicyIngressRuleBuilder) RemoveFrom() NetworkPolicyIngressRuleBuilder {
	b.ensureInitialized()
	b.fields.From = nil
	return b
}

// GetFrom gets the From field from the declarative configuration.
func (b NetworkPolicyIngressRuleBuilder) GetFrom() (value NetworkPolicyPeerList, ok bool) {
	b.ensureInitialized()
	if v := b.fields.From; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts NetworkPolicyIngressRuleBuilder to unstructured.
func (b *NetworkPolicyIngressRuleBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to NetworkPolicyIngressRuleBuilder, replacing the contents
// of NetworkPolicyIngressRuleBuilder.
func (b *NetworkPolicyIngressRuleBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &networkPolicyIngressRuleFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals NetworkPolicyIngressRuleBuilder to JSON.
func (b *NetworkPolicyIngressRuleBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into NetworkPolicyIngressRuleBuilder, replacing the contents of
// NetworkPolicyIngressRuleBuilder.
func (b *NetworkPolicyIngressRuleBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// NetworkPolicyIngressRuleList represents a list of NetworkPolicyIngressRuleBuilder.
// Provided as a convenience.
type NetworkPolicyIngressRuleList []NetworkPolicyIngressRuleBuilder

// NetworkPolicyIngressRuleList represents a map of NetworkPolicyIngressRuleBuilder.
// Provided as a convenience.
type NetworkPolicyIngressRuleMap map[string]NetworkPolicyIngressRuleBuilder

func (b *NetworkPolicyIngressRuleBuilder) preMarshal() {
}
func (b *NetworkPolicyIngressRuleBuilder) postUnmarshal() {
}
