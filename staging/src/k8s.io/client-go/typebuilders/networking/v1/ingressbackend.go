/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
	corev1 "k8s.io/client-go/typebuilders/core/v1"
)

// IngressBackendBuilder represents an declarative configuration of the IngressBackend type for use
// with apply.
type IngressBackendBuilder struct {
	fields *ingressBackendFields
}

// ingressBackendFields is used by IngressBackendBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in IngressBackendBuilder before marshalling, and
// are copied out to the builder type in IngressBackendBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type ingressBackendFields struct {
	Service  *IngressServiceBackendBuilder            `json:"service,omitempty"`
	Resource *corev1.TypedLocalObjectReferenceBuilder `json:"resource,omitempty"`
}

func (b *IngressBackendBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &ingressBackendFields{}
	}
}

// IngressBackend constructs an declarative configuration of the IngressBackend type for use with
// apply.
// Provided as a convenience.
func IngressBackend() IngressBackendBuilder {
	return IngressBackendBuilder{fields: &ingressBackendFields{}}
}

// SetService sets the Service field in the declarative configuration to the given value.
func (b IngressBackendBuilder) SetService(value IngressServiceBackendBuilder) IngressBackendBuilder {
	b.ensureInitialized()
	b.fields.Service = &value
	return b
}

// RemoveService removes the Service field from the declarative configuration.
func (b IngressBackendBuilder) RemoveService() IngressBackendBuilder {
	b.ensureInitialized()
	b.fields.Service = nil
	return b
}

// GetService gets the Service field from the declarative configuration.
func (b IngressBackendBuilder) GetService() (value IngressServiceBackendBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Service; v != nil {
		return *v, true
	}
	return value, false
}

// SetResource sets the Resource field in the declarative configuration to the given value.
func (b IngressBackendBuilder) SetResource(value corev1.TypedLocalObjectReferenceBuilder) IngressBackendBuilder {
	b.ensureInitialized()
	b.fields.Resource = &value
	return b
}

// RemoveResource removes the Resource field from the declarative configuration.
func (b IngressBackendBuilder) RemoveResource() IngressBackendBuilder {
	b.ensureInitialized()
	b.fields.Resource = nil
	return b
}

// GetResource gets the Resource field from the declarative configuration.
func (b IngressBackendBuilder) GetResource() (value corev1.TypedLocalObjectReferenceBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Resource; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts IngressBackendBuilder to unstructured.
func (b *IngressBackendBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to IngressBackendBuilder, replacing the contents
// of IngressBackendBuilder.
func (b *IngressBackendBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &ingressBackendFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals IngressBackendBuilder to JSON.
func (b *IngressBackendBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into IngressBackendBuilder, replacing the contents of
// IngressBackendBuilder.
func (b *IngressBackendBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// IngressBackendList represents a list of IngressBackendBuilder.
// Provided as a convenience.
type IngressBackendList []IngressBackendBuilder

// IngressBackendList represents a map of IngressBackendBuilder.
// Provided as a convenience.
type IngressBackendMap map[string]IngressBackendBuilder

func (b *IngressBackendBuilder) preMarshal() {
}
func (b *IngressBackendBuilder) postUnmarshal() {
}
