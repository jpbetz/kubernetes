/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// IngressServiceBackendBuilder represents an declarative configuration of the IngressServiceBackend type for use
// with apply.
type IngressServiceBackendBuilder struct {
	fields *ingressServiceBackendFields
}

// ingressServiceBackendFields is used by IngressServiceBackendBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in IngressServiceBackendBuilder before marshalling, and
// are copied out to the builder type in IngressServiceBackendBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type ingressServiceBackendFields struct {
	Name *string                    `json:"name,omitempty"`
	Port *ServiceBackendPortBuilder `json:"port,omitempty"`
}

func (b *IngressServiceBackendBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &ingressServiceBackendFields{}
	}
}

// IngressServiceBackend constructs an declarative configuration of the IngressServiceBackend type for use with
// apply.
// Provided as a convenience.
func IngressServiceBackend() IngressServiceBackendBuilder {
	return IngressServiceBackendBuilder{fields: &ingressServiceBackendFields{}}
}

// SetName sets the Name field in the declarative configuration to the given value.
func (b IngressServiceBackendBuilder) SetName(value string) IngressServiceBackendBuilder {
	b.ensureInitialized()
	b.fields.Name = &value
	return b
}

// RemoveName removes the Name field from the declarative configuration.
func (b IngressServiceBackendBuilder) RemoveName() IngressServiceBackendBuilder {
	b.ensureInitialized()
	b.fields.Name = nil
	return b
}

// GetName gets the Name field from the declarative configuration.
func (b IngressServiceBackendBuilder) GetName() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Name; v != nil {
		return *v, true
	}
	return value, false
}

// SetPort sets the Port field in the declarative configuration to the given value.
func (b IngressServiceBackendBuilder) SetPort(value ServiceBackendPortBuilder) IngressServiceBackendBuilder {
	b.ensureInitialized()
	b.fields.Port = &value
	return b
}

// RemovePort removes the Port field from the declarative configuration.
func (b IngressServiceBackendBuilder) RemovePort() IngressServiceBackendBuilder {
	b.ensureInitialized()
	b.fields.Port = nil
	return b
}

// GetPort gets the Port field from the declarative configuration.
func (b IngressServiceBackendBuilder) GetPort() (value ServiceBackendPortBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Port; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts IngressServiceBackendBuilder to unstructured.
func (b *IngressServiceBackendBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to IngressServiceBackendBuilder, replacing the contents
// of IngressServiceBackendBuilder.
func (b *IngressServiceBackendBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &ingressServiceBackendFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals IngressServiceBackendBuilder to JSON.
func (b *IngressServiceBackendBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into IngressServiceBackendBuilder, replacing the contents of
// IngressServiceBackendBuilder.
func (b *IngressServiceBackendBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// IngressServiceBackendList represents a list of IngressServiceBackendBuilder.
// Provided as a convenience.
type IngressServiceBackendList []IngressServiceBackendBuilder

// IngressServiceBackendList represents a map of IngressServiceBackendBuilder.
// Provided as a convenience.
type IngressServiceBackendMap map[string]IngressServiceBackendBuilder

func (b *IngressServiceBackendBuilder) preMarshal() {
}
func (b *IngressServiceBackendBuilder) postUnmarshal() {
}
