/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// IngressRuleValueBuilder represents an declarative configuration of the IngressRuleValue type for use
// with apply.
type IngressRuleValueBuilder struct {
	fields *ingressRuleValueFields
}

// ingressRuleValueFields is used by IngressRuleValueBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in IngressRuleValueBuilder before marshalling, and
// are copied out to the builder type in IngressRuleValueBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type ingressRuleValueFields struct {
	HTTP *HTTPIngressRuleValueBuilder `json:"http,omitempty"`
}

func (b *IngressRuleValueBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &ingressRuleValueFields{}
	}
}

// IngressRuleValue constructs an declarative configuration of the IngressRuleValue type for use with
// apply.
// Provided as a convenience.
func IngressRuleValue() IngressRuleValueBuilder {
	return IngressRuleValueBuilder{fields: &ingressRuleValueFields{}}
}

// SetHTTP sets the HTTP field in the declarative configuration to the given value.
func (b IngressRuleValueBuilder) SetHTTP(value HTTPIngressRuleValueBuilder) IngressRuleValueBuilder {
	b.ensureInitialized()
	b.fields.HTTP = &value
	return b
}

// RemoveHTTP removes the HTTP field from the declarative configuration.
func (b IngressRuleValueBuilder) RemoveHTTP() IngressRuleValueBuilder {
	b.ensureInitialized()
	b.fields.HTTP = nil
	return b
}

// GetHTTP gets the HTTP field from the declarative configuration.
func (b IngressRuleValueBuilder) GetHTTP() (value HTTPIngressRuleValueBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.HTTP; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts IngressRuleValueBuilder to unstructured.
func (b *IngressRuleValueBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to IngressRuleValueBuilder, replacing the contents
// of IngressRuleValueBuilder.
func (b *IngressRuleValueBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &ingressRuleValueFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals IngressRuleValueBuilder to JSON.
func (b *IngressRuleValueBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into IngressRuleValueBuilder, replacing the contents of
// IngressRuleValueBuilder.
func (b *IngressRuleValueBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// IngressRuleValueList represents a list of IngressRuleValueBuilder.
// Provided as a convenience.
type IngressRuleValueList []IngressRuleValueBuilder

// IngressRuleValueList represents a map of IngressRuleValueBuilder.
// Provided as a convenience.
type IngressRuleValueMap map[string]IngressRuleValueBuilder

func (b *IngressRuleValueBuilder) preMarshal() {
}
func (b *IngressRuleValueBuilder) postUnmarshal() {
}
