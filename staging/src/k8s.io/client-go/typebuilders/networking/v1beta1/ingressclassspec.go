/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/typebuilders/core/v1"
)

// IngressClassSpecBuilder represents an declarative configuration of the IngressClassSpec type for use
// with apply.
type IngressClassSpecBuilder struct {
	fields *ingressClassSpecFields
}

// ingressClassSpecFields is used by IngressClassSpecBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in IngressClassSpecBuilder before marshalling, and
// are copied out to the builder type in IngressClassSpecBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type ingressClassSpecFields struct {
	Controller *string                              `json:"controller,omitempty"`
	Parameters *v1.TypedLocalObjectReferenceBuilder `json:"parameters,omitempty"`
}

func (b *IngressClassSpecBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &ingressClassSpecFields{}
	}
}

// IngressClassSpec constructs an declarative configuration of the IngressClassSpec type for use with
// apply.
// Provided as a convenience.
func IngressClassSpec() IngressClassSpecBuilder {
	return IngressClassSpecBuilder{fields: &ingressClassSpecFields{}}
}

// SetController sets the Controller field in the declarative configuration to the given value.
func (b IngressClassSpecBuilder) SetController(value string) IngressClassSpecBuilder {
	b.ensureInitialized()
	b.fields.Controller = &value
	return b
}

// RemoveController removes the Controller field from the declarative configuration.
func (b IngressClassSpecBuilder) RemoveController() IngressClassSpecBuilder {
	b.ensureInitialized()
	b.fields.Controller = nil
	return b
}

// GetController gets the Controller field from the declarative configuration.
func (b IngressClassSpecBuilder) GetController() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Controller; v != nil {
		return *v, true
	}
	return value, false
}

// SetParameters sets the Parameters field in the declarative configuration to the given value.
func (b IngressClassSpecBuilder) SetParameters(value v1.TypedLocalObjectReferenceBuilder) IngressClassSpecBuilder {
	b.ensureInitialized()
	b.fields.Parameters = &value
	return b
}

// RemoveParameters removes the Parameters field from the declarative configuration.
func (b IngressClassSpecBuilder) RemoveParameters() IngressClassSpecBuilder {
	b.ensureInitialized()
	b.fields.Parameters = nil
	return b
}

// GetParameters gets the Parameters field from the declarative configuration.
func (b IngressClassSpecBuilder) GetParameters() (value v1.TypedLocalObjectReferenceBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Parameters; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts IngressClassSpecBuilder to unstructured.
func (b *IngressClassSpecBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to IngressClassSpecBuilder, replacing the contents
// of IngressClassSpecBuilder.
func (b *IngressClassSpecBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &ingressClassSpecFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals IngressClassSpecBuilder to JSON.
func (b *IngressClassSpecBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into IngressClassSpecBuilder, replacing the contents of
// IngressClassSpecBuilder.
func (b *IngressClassSpecBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// IngressClassSpecList represents a list of IngressClassSpecBuilder.
// Provided as a convenience.
type IngressClassSpecList []IngressClassSpecBuilder

// IngressClassSpecList represents a map of IngressClassSpecBuilder.
// Provided as a convenience.
type IngressClassSpecMap map[string]IngressClassSpecBuilder

func (b *IngressClassSpecBuilder) preMarshal() {
}
func (b *IngressClassSpecBuilder) postUnmarshal() {
}
