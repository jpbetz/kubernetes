/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/typebuilders/core/v1"
)

// IngressClassSpecBuilder represents an declarative configuration of the IngressClassSpec type for use
// with apply.
type IngressClassSpecBuilder struct {
	fields ingressClassSpecFields
}

// ingressClassSpecFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in IngressClassSpecBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type ingressClassSpecFields struct {
	Controller *string                              `json:"controller,omitempty"`
	Parameters *v1.TypedLocalObjectReferenceBuilder `json:"parameters,omitempty"`
}

// IngressClassSpec constructs an declarative configuration of the IngressClassSpec type for use with
// apply.
func IngressClassSpec() *IngressClassSpecBuilder {
	return &IngressClassSpecBuilder{}
}

// SetController sets the Controller field in the declarative configuration to the given value.
func (b *IngressClassSpecBuilder) SetController(value string) *IngressClassSpecBuilder {
	b.fields.Controller = &value
	return b
}

// RemoveController removes the Controller field from the declarative configuration.
func (b *IngressClassSpecBuilder) RemoveController() *IngressClassSpecBuilder {
	b.fields.Controller = nil
	return b
}

// GetController gets the Controller field from the declarative configuration.
func (b *IngressClassSpecBuilder) GetController() (value string, ok bool) {
	if v := b.fields.Controller; v != nil {
		return *v, true
	}
	return value, false
}

// SetParameters sets the Parameters field in the declarative configuration to the given value.
func (b *IngressClassSpecBuilder) SetParameters(value *v1.TypedLocalObjectReferenceBuilder) *IngressClassSpecBuilder {
	b.fields.Parameters = value
	return b
}

// RemoveParameters removes the Parameters field from the declarative configuration.
func (b *IngressClassSpecBuilder) RemoveParameters() *IngressClassSpecBuilder {
	b.fields.Parameters = nil
	return b
}

// GetParameters gets the Parameters field from the declarative configuration.
func (b *IngressClassSpecBuilder) GetParameters() (value *v1.TypedLocalObjectReferenceBuilder, ok bool) {
	return b.fields.Parameters, b.fields.Parameters != nil
}

// ToUnstructured converts IngressClassSpecBuilder to unstructured.
func (b *IngressClassSpecBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to IngressClassSpecBuilder, replacing the contents
// of IngressClassSpecBuilder.
func (b *IngressClassSpecBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &ingressClassSpecFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals IngressClassSpecBuilder to JSON.
func (b *IngressClassSpecBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into IngressClassSpecBuilder, replacing the contents of
// IngressClassSpecBuilder.
func (b *IngressClassSpecBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// IngressClassSpecList represents a list of IngressClassSpecBuilder.
type IngressClassSpecList []*IngressClassSpecBuilder

// IngressClassSpecList represents a map of IngressClassSpecBuilder.
type IngressClassSpecMap map[string]IngressClassSpecBuilder

func (b *IngressClassSpecBuilder) preMarshal() {
}
func (b *IngressClassSpecBuilder) postUnmarshal() {
}
