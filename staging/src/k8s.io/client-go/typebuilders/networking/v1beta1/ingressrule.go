/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// IngressRuleBuilder represents an declarative configuration of the IngressRule type for use
// with apply.
type IngressRuleBuilder struct {
	ingressRuleValue IngressRuleValueBuilder // inlined type
	fields           *ingressRuleFields
}

// ingressRuleFields is used by IngressRuleBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in IngressRuleBuilder before marshalling, and
// are copied out to the builder type in IngressRuleBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type ingressRuleFields struct {
	Host *string                      `json:"host,omitempty"`
	HTTP *HTTPIngressRuleValueBuilder `json:"http,omitempty"` // inlined IngressRuleBuilder.ingressRuleValue.HTTP field
}

func (b *IngressRuleBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &ingressRuleFields{}
	}
}

// IngressRule constructs an declarative configuration of the IngressRule type for use with
// apply.
// Provided as a convenience.
func IngressRule() IngressRuleBuilder {
	return IngressRuleBuilder{fields: &ingressRuleFields{}}
}

// SetHost sets the Host field in the declarative configuration to the given value.
func (b IngressRuleBuilder) SetHost(value string) IngressRuleBuilder {
	b.ensureInitialized()
	b.fields.Host = &value
	return b
}

// RemoveHost removes the Host field from the declarative configuration.
func (b IngressRuleBuilder) RemoveHost() IngressRuleBuilder {
	b.ensureInitialized()
	b.fields.Host = nil
	return b
}

// GetHost gets the Host field from the declarative configuration.
func (b IngressRuleBuilder) GetHost() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Host; v != nil {
		return *v, true
	}
	return value, false
}

// SetIngressRuleValue sets the IngressRuleValue field in the declarative configuration to the given value.
func (b IngressRuleBuilder) SetIngressRuleValue(value IngressRuleValueBuilder) IngressRuleBuilder {
	b.ensureInitialized()
	b.ingressRuleValue = value
	return b
}

// RemoveIngressRuleValue removes the IngressRuleValue field from the declarative configuration.
func (b IngressRuleBuilder) RemoveIngressRuleValue() IngressRuleBuilder {
	b.ensureInitialized()
	b.ingressRuleValue = IngressRuleValueBuilder{}
	return b
}

// GetIngressRuleValue gets the IngressRuleValue field from the declarative configuration.
func (b IngressRuleBuilder) GetIngressRuleValue() (value IngressRuleValueBuilder, ok bool) {
	b.ensureInitialized()
	return b.ingressRuleValue, true
}

// ToUnstructured converts IngressRuleBuilder to unstructured.
func (b *IngressRuleBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to IngressRuleBuilder, replacing the contents
// of IngressRuleBuilder.
func (b *IngressRuleBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &ingressRuleFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals IngressRuleBuilder to JSON.
func (b *IngressRuleBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into IngressRuleBuilder, replacing the contents of
// IngressRuleBuilder.
func (b *IngressRuleBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// IngressRuleList represents a list of IngressRuleBuilder.
// Provided as a convenience.
type IngressRuleList []IngressRuleBuilder

// IngressRuleList represents a map of IngressRuleBuilder.
// Provided as a convenience.
type IngressRuleMap map[string]IngressRuleBuilder

func (b *IngressRuleBuilder) preMarshal() {
	if v, ok := b.ingressRuleValue.GetHTTP(); ok {
		b.fields.HTTP = &v
	}
}
func (b *IngressRuleBuilder) postUnmarshal() {
	if b.fields.HTTP != nil {
		b.ingressRuleValue.SetHTTP(*b.fields.HTTP)
	}
}
