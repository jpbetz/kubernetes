/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/typebuilders/meta/v1"
)

// IngressClassBuilder represents an declarative configuration of the IngressClass type for use
// with apply.
type IngressClassBuilder struct {
	typeMeta v1.TypeMetaBuilder // inlined type
	fields   *ingressClassFields
}

// ingressClassFields is used by IngressClassBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in IngressClassBuilder before marshalling, and
// are copied out to the builder type in IngressClassBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type ingressClassFields struct {
	Kind       *string                  `json:"kind,omitempty"`       // inlined IngressClassBuilder.typeMeta.Kind field
	APIVersion *string                  `json:"apiVersion,omitempty"` // inlined IngressClassBuilder.typeMeta.APIVersion field
	ObjectMeta *v1.ObjectMetaBuilder    `json:"metadata,omitempty"`
	Spec       *IngressClassSpecBuilder `json:"spec,omitempty"`
}

func (b *IngressClassBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &ingressClassFields{}
	}
}

// IngressClass constructs an declarative configuration of the IngressClass type for use with
// apply.
// Provided as a convenience.
func IngressClass() IngressClassBuilder {
	return IngressClassBuilder{fields: &ingressClassFields{}}
}

// SetTypeMeta sets the TypeMeta field in the declarative configuration to the given value.
func (b IngressClassBuilder) SetTypeMeta(value v1.TypeMetaBuilder) IngressClassBuilder {
	b.ensureInitialized()
	b.typeMeta = value
	return b
}

// RemoveTypeMeta removes the TypeMeta field from the declarative configuration.
func (b IngressClassBuilder) RemoveTypeMeta() IngressClassBuilder {
	b.ensureInitialized()
	b.typeMeta = v1.TypeMetaBuilder{}
	return b
}

// GetTypeMeta gets the TypeMeta field from the declarative configuration.
func (b IngressClassBuilder) GetTypeMeta() (value v1.TypeMetaBuilder, ok bool) {
	b.ensureInitialized()
	return b.typeMeta, true
}

// SetObjectMeta sets the ObjectMeta field in the declarative configuration to the given value.
func (b IngressClassBuilder) SetObjectMeta(value v1.ObjectMetaBuilder) IngressClassBuilder {
	b.ensureInitialized()
	b.fields.ObjectMeta = &value
	return b
}

// RemoveObjectMeta removes the ObjectMeta field from the declarative configuration.
func (b IngressClassBuilder) RemoveObjectMeta() IngressClassBuilder {
	b.ensureInitialized()
	b.fields.ObjectMeta = nil
	return b
}

// GetObjectMeta gets the ObjectMeta field from the declarative configuration.
func (b IngressClassBuilder) GetObjectMeta() (value v1.ObjectMetaBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.ObjectMeta; v != nil {
		return *v, true
	}
	return value, false
}

// SetSpec sets the Spec field in the declarative configuration to the given value.
func (b IngressClassBuilder) SetSpec(value IngressClassSpecBuilder) IngressClassBuilder {
	b.ensureInitialized()
	b.fields.Spec = &value
	return b
}

// RemoveSpec removes the Spec field from the declarative configuration.
func (b IngressClassBuilder) RemoveSpec() IngressClassBuilder {
	b.ensureInitialized()
	b.fields.Spec = nil
	return b
}

// GetSpec gets the Spec field from the declarative configuration.
func (b IngressClassBuilder) GetSpec() (value IngressClassSpecBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Spec; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts IngressClassBuilder to unstructured.
func (b *IngressClassBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to IngressClassBuilder, replacing the contents
// of IngressClassBuilder.
func (b *IngressClassBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &ingressClassFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals IngressClassBuilder to JSON.
func (b *IngressClassBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into IngressClassBuilder, replacing the contents of
// IngressClassBuilder.
func (b *IngressClassBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// IngressClassList represents a list of IngressClassBuilder.
// Provided as a convenience.
type IngressClassList []IngressClassBuilder

// IngressClassList represents a map of IngressClassBuilder.
// Provided as a convenience.
type IngressClassMap map[string]IngressClassBuilder

func (b *IngressClassBuilder) preMarshal() {
	if v, ok := b.typeMeta.GetKind(); ok {
		b.fields.Kind = &v
	}
	if v, ok := b.typeMeta.GetAPIVersion(); ok {
		b.fields.APIVersion = &v
	}
}
func (b *IngressClassBuilder) postUnmarshal() {
	if b.fields.Kind != nil {
		b.typeMeta.SetKind(*b.fields.Kind)
	}
	if b.fields.APIVersion != nil {
		b.typeMeta.SetAPIVersion(*b.fields.APIVersion)
	}
}
