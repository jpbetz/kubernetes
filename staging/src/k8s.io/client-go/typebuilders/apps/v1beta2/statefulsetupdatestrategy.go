/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1beta2

import (
	json "encoding/json"

	v1beta2 "k8s.io/api/apps/v1beta2"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// StatefulSetUpdateStrategyBuilder represents an declarative configuration of the StatefulSetUpdateStrategy type for use
// with apply.
type StatefulSetUpdateStrategyBuilder struct {
	fields *statefulSetUpdateStrategyFields
}

// statefulSetUpdateStrategyFields is used by StatefulSetUpdateStrategyBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in StatefulSetUpdateStrategyBuilder before marshalling, and
// are copied out to the builder type in StatefulSetUpdateStrategyBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type statefulSetUpdateStrategyFields struct {
	Type          *v1beta2.StatefulSetUpdateStrategyType   `json:"type,omitempty"`
	RollingUpdate *RollingUpdateStatefulSetStrategyBuilder `json:"rollingUpdate,omitempty"`
}

func (b *StatefulSetUpdateStrategyBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &statefulSetUpdateStrategyFields{}
	}
}

// StatefulSetUpdateStrategy constructs an declarative configuration of the StatefulSetUpdateStrategy type for use with
// apply.
// Provided as a convenience.
func StatefulSetUpdateStrategy() StatefulSetUpdateStrategyBuilder {
	return StatefulSetUpdateStrategyBuilder{fields: &statefulSetUpdateStrategyFields{}}
}

// SetType sets the Type field in the declarative configuration to the given value.
func (b StatefulSetUpdateStrategyBuilder) SetType(value v1beta2.StatefulSetUpdateStrategyType) StatefulSetUpdateStrategyBuilder {
	b.ensureInitialized()
	b.fields.Type = &value
	return b
}

// RemoveType removes the Type field from the declarative configuration.
func (b StatefulSetUpdateStrategyBuilder) RemoveType() StatefulSetUpdateStrategyBuilder {
	b.ensureInitialized()
	b.fields.Type = nil
	return b
}

// GetType gets the Type field from the declarative configuration.
func (b StatefulSetUpdateStrategyBuilder) GetType() (value v1beta2.StatefulSetUpdateStrategyType, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Type; v != nil {
		return *v, true
	}
	return value, false
}

// SetRollingUpdate sets the RollingUpdate field in the declarative configuration to the given value.
func (b StatefulSetUpdateStrategyBuilder) SetRollingUpdate(value RollingUpdateStatefulSetStrategyBuilder) StatefulSetUpdateStrategyBuilder {
	b.ensureInitialized()
	b.fields.RollingUpdate = &value
	return b
}

// RemoveRollingUpdate removes the RollingUpdate field from the declarative configuration.
func (b StatefulSetUpdateStrategyBuilder) RemoveRollingUpdate() StatefulSetUpdateStrategyBuilder {
	b.ensureInitialized()
	b.fields.RollingUpdate = nil
	return b
}

// GetRollingUpdate gets the RollingUpdate field from the declarative configuration.
func (b StatefulSetUpdateStrategyBuilder) GetRollingUpdate() (value RollingUpdateStatefulSetStrategyBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.RollingUpdate; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts StatefulSetUpdateStrategyBuilder to unstructured.
func (b *StatefulSetUpdateStrategyBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to StatefulSetUpdateStrategyBuilder, replacing the contents
// of StatefulSetUpdateStrategyBuilder.
func (b *StatefulSetUpdateStrategyBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &statefulSetUpdateStrategyFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals StatefulSetUpdateStrategyBuilder to JSON.
func (b *StatefulSetUpdateStrategyBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into StatefulSetUpdateStrategyBuilder, replacing the contents of
// StatefulSetUpdateStrategyBuilder.
func (b *StatefulSetUpdateStrategyBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// StatefulSetUpdateStrategyList represents a list of StatefulSetUpdateStrategyBuilder.
// Provided as a convenience.
type StatefulSetUpdateStrategyList []StatefulSetUpdateStrategyBuilder

// StatefulSetUpdateStrategyList represents a map of StatefulSetUpdateStrategyBuilder.
// Provided as a convenience.
type StatefulSetUpdateStrategyMap map[string]StatefulSetUpdateStrategyBuilder

func (b *StatefulSetUpdateStrategyBuilder) preMarshal() {
}
func (b *StatefulSetUpdateStrategyBuilder) postUnmarshal() {
}
