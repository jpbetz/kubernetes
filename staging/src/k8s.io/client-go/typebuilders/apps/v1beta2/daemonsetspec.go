/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1beta2

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
	corev1 "k8s.io/client-go/typebuilders/core/v1"
	v1 "k8s.io/client-go/typebuilders/meta/v1"
)

// DaemonSetSpecBuilder represents an declarative configuration of the DaemonSetSpec type for use
// with apply.
type DaemonSetSpecBuilder struct {
	fields daemonSetSpecFields
}

// daemonSetSpecFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in DaemonSetSpecBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type daemonSetSpecFields struct {
	Selector             *v1.LabelSelectorBuilder        `json:"selector,omitempty"`
	Template             *corev1.PodTemplateSpecBuilder  `json:"template,omitempty"`
	UpdateStrategy       *DaemonSetUpdateStrategyBuilder `json:"updateStrategy,omitempty"`
	MinReadySeconds      *int32                          `json:"minReadySeconds,omitempty"`
	RevisionHistoryLimit *int32                          `json:"revisionHistoryLimit,omitempty"`
}

// DaemonSetSpec constructs an declarative configuration of the DaemonSetSpec type for use with
// apply.
func DaemonSetSpec() *DaemonSetSpecBuilder {
	return &DaemonSetSpecBuilder{}
}

// SetSelector sets the Selector field in the declarative configuration to the given value.
func (b *DaemonSetSpecBuilder) SetSelector(value *v1.LabelSelectorBuilder) *DaemonSetSpecBuilder {
	b.fields.Selector = value
	return b
}

// RemoveSelector removes the Selector field from the declarative configuration.
func (b *DaemonSetSpecBuilder) RemoveSelector() *DaemonSetSpecBuilder {
	b.fields.Selector = nil
	return b
}

// GetSelector gets the Selector field from the declarative configuration.
func (b *DaemonSetSpecBuilder) GetSelector() (value *v1.LabelSelectorBuilder, ok bool) {
	return b.fields.Selector, b.fields.Selector != nil
}

// SetTemplate sets the Template field in the declarative configuration to the given value.
func (b *DaemonSetSpecBuilder) SetTemplate(value *corev1.PodTemplateSpecBuilder) *DaemonSetSpecBuilder {
	b.fields.Template = value
	return b
}

// RemoveTemplate removes the Template field from the declarative configuration.
func (b *DaemonSetSpecBuilder) RemoveTemplate() *DaemonSetSpecBuilder {
	b.fields.Template = nil
	return b
}

// GetTemplate gets the Template field from the declarative configuration.
func (b *DaemonSetSpecBuilder) GetTemplate() (value *corev1.PodTemplateSpecBuilder, ok bool) {
	return b.fields.Template, b.fields.Template != nil
}

// SetUpdateStrategy sets the UpdateStrategy field in the declarative configuration to the given value.
func (b *DaemonSetSpecBuilder) SetUpdateStrategy(value *DaemonSetUpdateStrategyBuilder) *DaemonSetSpecBuilder {
	b.fields.UpdateStrategy = value
	return b
}

// RemoveUpdateStrategy removes the UpdateStrategy field from the declarative configuration.
func (b *DaemonSetSpecBuilder) RemoveUpdateStrategy() *DaemonSetSpecBuilder {
	b.fields.UpdateStrategy = nil
	return b
}

// GetUpdateStrategy gets the UpdateStrategy field from the declarative configuration.
func (b *DaemonSetSpecBuilder) GetUpdateStrategy() (value *DaemonSetUpdateStrategyBuilder, ok bool) {
	return b.fields.UpdateStrategy, b.fields.UpdateStrategy != nil
}

// SetMinReadySeconds sets the MinReadySeconds field in the declarative configuration to the given value.
func (b *DaemonSetSpecBuilder) SetMinReadySeconds(value int32) *DaemonSetSpecBuilder {
	b.fields.MinReadySeconds = &value
	return b
}

// RemoveMinReadySeconds removes the MinReadySeconds field from the declarative configuration.
func (b *DaemonSetSpecBuilder) RemoveMinReadySeconds() *DaemonSetSpecBuilder {
	b.fields.MinReadySeconds = nil
	return b
}

// GetMinReadySeconds gets the MinReadySeconds field from the declarative configuration.
func (b *DaemonSetSpecBuilder) GetMinReadySeconds() (value int32, ok bool) {
	if v := b.fields.MinReadySeconds; v != nil {
		return *v, true
	}
	return value, false
}

// SetRevisionHistoryLimit sets the RevisionHistoryLimit field in the declarative configuration to the given value.
func (b *DaemonSetSpecBuilder) SetRevisionHistoryLimit(value int32) *DaemonSetSpecBuilder {
	b.fields.RevisionHistoryLimit = &value
	return b
}

// RemoveRevisionHistoryLimit removes the RevisionHistoryLimit field from the declarative configuration.
func (b *DaemonSetSpecBuilder) RemoveRevisionHistoryLimit() *DaemonSetSpecBuilder {
	b.fields.RevisionHistoryLimit = nil
	return b
}

// GetRevisionHistoryLimit gets the RevisionHistoryLimit field from the declarative configuration.
func (b *DaemonSetSpecBuilder) GetRevisionHistoryLimit() (value int32, ok bool) {
	if v := b.fields.RevisionHistoryLimit; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts DaemonSetSpecBuilder to unstructured.
func (b *DaemonSetSpecBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to DaemonSetSpecBuilder, replacing the contents
// of DaemonSetSpecBuilder.
func (b *DaemonSetSpecBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &daemonSetSpecFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals DaemonSetSpecBuilder to JSON.
func (b *DaemonSetSpecBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into DaemonSetSpecBuilder, replacing the contents of
// DaemonSetSpecBuilder.
func (b *DaemonSetSpecBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// DaemonSetSpecList represents a list of DaemonSetSpecBuilder.
type DaemonSetSpecList []*DaemonSetSpecBuilder

// DaemonSetSpecList represents a map of DaemonSetSpecBuilder.
type DaemonSetSpecMap map[string]DaemonSetSpecBuilder

func (b *DaemonSetSpecBuilder) preMarshal() {
}
func (b *DaemonSetSpecBuilder) postUnmarshal() {
}
