/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1beta2

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// RollingUpdateStatefulSetStrategyBuilder represents an declarative configuration of the RollingUpdateStatefulSetStrategy type for use
// with apply.
type RollingUpdateStatefulSetStrategyBuilder struct {
	fields rollingUpdateStatefulSetStrategyFields
}

// rollingUpdateStatefulSetStrategyFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in RollingUpdateStatefulSetStrategyBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type rollingUpdateStatefulSetStrategyFields struct {
	Partition *int32 `json:"partition,omitempty"`
}

// RollingUpdateStatefulSetStrategy constructs an declarative configuration of the RollingUpdateStatefulSetStrategy type for use with
// apply.
func RollingUpdateStatefulSetStrategy() *RollingUpdateStatefulSetStrategyBuilder {
	return &RollingUpdateStatefulSetStrategyBuilder{}
}

// SetPartition sets the Partition field in the declarative configuration to the given value.
func (b *RollingUpdateStatefulSetStrategyBuilder) SetPartition(value int32) *RollingUpdateStatefulSetStrategyBuilder {
	b.fields.Partition = &value
	return b
}

// RemovePartition removes the Partition field from the declarative configuration.
func (b *RollingUpdateStatefulSetStrategyBuilder) RemovePartition() *RollingUpdateStatefulSetStrategyBuilder {
	b.fields.Partition = nil
	return b
}

// GetPartition gets the Partition field from the declarative configuration.
func (b *RollingUpdateStatefulSetStrategyBuilder) GetPartition() (value int32, ok bool) {
	if v := b.fields.Partition; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts RollingUpdateStatefulSetStrategyBuilder to unstructured.
func (b *RollingUpdateStatefulSetStrategyBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to RollingUpdateStatefulSetStrategyBuilder, replacing the contents
// of RollingUpdateStatefulSetStrategyBuilder.
func (b *RollingUpdateStatefulSetStrategyBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &rollingUpdateStatefulSetStrategyFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals RollingUpdateStatefulSetStrategyBuilder to JSON.
func (b *RollingUpdateStatefulSetStrategyBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into RollingUpdateStatefulSetStrategyBuilder, replacing the contents of
// RollingUpdateStatefulSetStrategyBuilder.
func (b *RollingUpdateStatefulSetStrategyBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// RollingUpdateStatefulSetStrategyList represents a list of RollingUpdateStatefulSetStrategyBuilder.
type RollingUpdateStatefulSetStrategyList []*RollingUpdateStatefulSetStrategyBuilder

// RollingUpdateStatefulSetStrategyList represents a map of RollingUpdateStatefulSetStrategyBuilder.
type RollingUpdateStatefulSetStrategyMap map[string]RollingUpdateStatefulSetStrategyBuilder

func (b *RollingUpdateStatefulSetStrategyBuilder) preMarshal() {
}
func (b *RollingUpdateStatefulSetStrategyBuilder) postUnmarshal() {
}
