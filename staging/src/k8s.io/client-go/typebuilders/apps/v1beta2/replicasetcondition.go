/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1beta2

import (
	json "encoding/json"

	v1beta2 "k8s.io/api/apps/v1beta2"
	v1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ReplicaSetConditionApplyConfiguration represents an declarative configuration of the ReplicaSetCondition type for use
// with apply.
type ReplicaSetConditionApplyConfiguration struct {
	fields replicaSetConditionFields
}

// ReplicaSetConditionApplyConfiguration constructs an declarative configuration of the ReplicaSetCondition type for use with
// apply.
func ReplicaSetCondition() *ReplicaSetConditionApplyConfiguration {
	return &ReplicaSetConditionApplyConfiguration{}
}

// replicaSetConditionFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in ReplicaSetConditionApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type replicaSetConditionFields struct {
	Type               *v1beta2.ReplicaSetConditionType `json:"type,omitempty"`
	Status             *v1.ConditionStatus              `json:"status,omitempty"`
	LastTransitionTime *metav1.Time                     `json:"lastTransitionTime,omitempty"`
	Reason             *string                          `json:"reason,omitempty"`
	Message            *string                          `json:"message,omitempty"`
}

// SetType sets the Type field in the declarative configuration to the given value.
func (b *ReplicaSetConditionApplyConfiguration) SetType(value v1beta2.ReplicaSetConditionType) *ReplicaSetConditionApplyConfiguration {
	b.fields.Type = &value
	return b
}

// RemoveType removes the Type field from the declarative configuration.
func (b *ReplicaSetConditionApplyConfiguration) RemoveType() *ReplicaSetConditionApplyConfiguration {
	b.fields.Type = nil
	return b
}

// GetType gets the Type field from the declarative configuration.
func (b *ReplicaSetConditionApplyConfiguration) GetType() (value v1beta2.ReplicaSetConditionType, ok bool) {
	if v := b.fields.Type; v != nil {
		return *v, true
	}
	return value, false
}

// SetStatus sets the Status field in the declarative configuration to the given value.
func (b *ReplicaSetConditionApplyConfiguration) SetStatus(value v1.ConditionStatus) *ReplicaSetConditionApplyConfiguration {
	b.fields.Status = &value
	return b
}

// RemoveStatus removes the Status field from the declarative configuration.
func (b *ReplicaSetConditionApplyConfiguration) RemoveStatus() *ReplicaSetConditionApplyConfiguration {
	b.fields.Status = nil
	return b
}

// GetStatus gets the Status field from the declarative configuration.
func (b *ReplicaSetConditionApplyConfiguration) GetStatus() (value v1.ConditionStatus, ok bool) {
	if v := b.fields.Status; v != nil {
		return *v, true
	}
	return value, false
}

// SetLastTransitionTime sets the LastTransitionTime field in the declarative configuration to the given value.
func (b *ReplicaSetConditionApplyConfiguration) SetLastTransitionTime(value metav1.Time) *ReplicaSetConditionApplyConfiguration {
	b.fields.LastTransitionTime = &value
	return b
}

// RemoveLastTransitionTime removes the LastTransitionTime field from the declarative configuration.
func (b *ReplicaSetConditionApplyConfiguration) RemoveLastTransitionTime() *ReplicaSetConditionApplyConfiguration {
	b.fields.LastTransitionTime = nil
	return b
}

// GetLastTransitionTime gets the LastTransitionTime field from the declarative configuration.
func (b *ReplicaSetConditionApplyConfiguration) GetLastTransitionTime() (value metav1.Time, ok bool) {
	if v := b.fields.LastTransitionTime; v != nil {
		return *v, true
	}
	return value, false
}

// SetReason sets the Reason field in the declarative configuration to the given value.
func (b *ReplicaSetConditionApplyConfiguration) SetReason(value string) *ReplicaSetConditionApplyConfiguration {
	b.fields.Reason = &value
	return b
}

// RemoveReason removes the Reason field from the declarative configuration.
func (b *ReplicaSetConditionApplyConfiguration) RemoveReason() *ReplicaSetConditionApplyConfiguration {
	b.fields.Reason = nil
	return b
}

// GetReason gets the Reason field from the declarative configuration.
func (b *ReplicaSetConditionApplyConfiguration) GetReason() (value string, ok bool) {
	if v := b.fields.Reason; v != nil {
		return *v, true
	}
	return value, false
}

// SetMessage sets the Message field in the declarative configuration to the given value.
func (b *ReplicaSetConditionApplyConfiguration) SetMessage(value string) *ReplicaSetConditionApplyConfiguration {
	b.fields.Message = &value
	return b
}

// RemoveMessage removes the Message field from the declarative configuration.
func (b *ReplicaSetConditionApplyConfiguration) RemoveMessage() *ReplicaSetConditionApplyConfiguration {
	b.fields.Message = nil
	return b
}

// GetMessage gets the Message field from the declarative configuration.
func (b *ReplicaSetConditionApplyConfiguration) GetMessage() (value string, ok bool) {
	if v := b.fields.Message; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ReplicaSetConditionApplyConfiguration to unstructured.
func (b *ReplicaSetConditionApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ReplicaSetConditionApplyConfiguration, replacing the contents
// of ReplicaSetConditionApplyConfiguration.
func (b *ReplicaSetConditionApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &replicaSetConditionFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ReplicaSetConditionApplyConfiguration to JSON.
func (b *ReplicaSetConditionApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into ReplicaSetConditionApplyConfiguration, replacing the contents of
// ReplicaSetConditionApplyConfiguration.
func (b *ReplicaSetConditionApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ReplicaSetConditionList represents a listAlias of ReplicaSetConditionApplyConfiguration.
type ReplicaSetConditionList []*ReplicaSetConditionApplyConfiguration

// ReplicaSetConditionList represents a map of ReplicaSetConditionApplyConfiguration.
type ReplicaSetConditionMap map[string]ReplicaSetConditionApplyConfiguration

func (b *ReplicaSetConditionApplyConfiguration) preMarshal() {
}
func (b *ReplicaSetConditionApplyConfiguration) postUnmarshal() {
}
