/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"

	v1beta1 "k8s.io/api/apps/v1beta1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	corev1 "k8s.io/client-go/typebuilders/core/v1"
	v1 "k8s.io/client-go/typebuilders/meta/v1"
)

// StatefulSetSpecBuilder represents an declarative configuration of the StatefulSetSpec type for use
// with apply.
type StatefulSetSpecBuilder struct {
	fields *statefulSetSpecFields
}

// statefulSetSpecFields is used by StatefulSetSpecBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in StatefulSetSpecBuilder before marshalling, and
// are copied out to the builder type in StatefulSetSpecBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type statefulSetSpecFields struct {
	Replicas             *int32                            `json:"replicas,omitempty"`
	Selector             *v1.LabelSelectorBuilder          `json:"selector,omitempty"`
	Template             *corev1.PodTemplateSpecBuilder    `json:"template,omitempty"`
	VolumeClaimTemplates *corev1.PersistentVolumeClaimList `json:"volumeClaimTemplates,omitempty"`
	ServiceName          *string                           `json:"serviceName,omitempty"`
	PodManagementPolicy  *v1beta1.PodManagementPolicyType  `json:"podManagementPolicy,omitempty"`
	UpdateStrategy       *StatefulSetUpdateStrategyBuilder `json:"updateStrategy,omitempty"`
	RevisionHistoryLimit *int32                            `json:"revisionHistoryLimit,omitempty"`
}

func (b *StatefulSetSpecBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &statefulSetSpecFields{}
	}
}

// StatefulSetSpec constructs an declarative configuration of the StatefulSetSpec type for use with
// apply.
// Provided as a convenience.
func StatefulSetSpec() StatefulSetSpecBuilder {
	return StatefulSetSpecBuilder{fields: &statefulSetSpecFields{}}
}

// SetReplicas sets the Replicas field in the declarative configuration to the given value.
func (b StatefulSetSpecBuilder) SetReplicas(value int32) StatefulSetSpecBuilder {
	b.ensureInitialized()
	b.fields.Replicas = &value
	return b
}

// RemoveReplicas removes the Replicas field from the declarative configuration.
func (b StatefulSetSpecBuilder) RemoveReplicas() StatefulSetSpecBuilder {
	b.ensureInitialized()
	b.fields.Replicas = nil
	return b
}

// GetReplicas gets the Replicas field from the declarative configuration.
func (b StatefulSetSpecBuilder) GetReplicas() (value int32, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Replicas; v != nil {
		return *v, true
	}
	return value, false
}

// SetSelector sets the Selector field in the declarative configuration to the given value.
func (b StatefulSetSpecBuilder) SetSelector(value v1.LabelSelectorBuilder) StatefulSetSpecBuilder {
	b.ensureInitialized()
	b.fields.Selector = &value
	return b
}

// RemoveSelector removes the Selector field from the declarative configuration.
func (b StatefulSetSpecBuilder) RemoveSelector() StatefulSetSpecBuilder {
	b.ensureInitialized()
	b.fields.Selector = nil
	return b
}

// GetSelector gets the Selector field from the declarative configuration.
func (b StatefulSetSpecBuilder) GetSelector() (value v1.LabelSelectorBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Selector; v != nil {
		return *v, true
	}
	return value, false
}

// SetTemplate sets the Template field in the declarative configuration to the given value.
func (b StatefulSetSpecBuilder) SetTemplate(value corev1.PodTemplateSpecBuilder) StatefulSetSpecBuilder {
	b.ensureInitialized()
	b.fields.Template = &value
	return b
}

// RemoveTemplate removes the Template field from the declarative configuration.
func (b StatefulSetSpecBuilder) RemoveTemplate() StatefulSetSpecBuilder {
	b.ensureInitialized()
	b.fields.Template = nil
	return b
}

// GetTemplate gets the Template field from the declarative configuration.
func (b StatefulSetSpecBuilder) GetTemplate() (value corev1.PodTemplateSpecBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Template; v != nil {
		return *v, true
	}
	return value, false
}

// SetVolumeClaimTemplates sets the VolumeClaimTemplates field in the declarative configuration to the given value.
func (b StatefulSetSpecBuilder) SetVolumeClaimTemplates(value corev1.PersistentVolumeClaimList) StatefulSetSpecBuilder {
	b.ensureInitialized()
	b.fields.VolumeClaimTemplates = &value
	return b
}

// RemoveVolumeClaimTemplates removes the VolumeClaimTemplates field from the declarative configuration.
func (b StatefulSetSpecBuilder) RemoveVolumeClaimTemplates() StatefulSetSpecBuilder {
	b.ensureInitialized()
	b.fields.VolumeClaimTemplates = nil
	return b
}

// GetVolumeClaimTemplates gets the VolumeClaimTemplates field from the declarative configuration.
func (b StatefulSetSpecBuilder) GetVolumeClaimTemplates() (value corev1.PersistentVolumeClaimList, ok bool) {
	b.ensureInitialized()
	if v := b.fields.VolumeClaimTemplates; v != nil {
		return *v, true
	}
	return value, false
}

// SetServiceName sets the ServiceName field in the declarative configuration to the given value.
func (b StatefulSetSpecBuilder) SetServiceName(value string) StatefulSetSpecBuilder {
	b.ensureInitialized()
	b.fields.ServiceName = &value
	return b
}

// RemoveServiceName removes the ServiceName field from the declarative configuration.
func (b StatefulSetSpecBuilder) RemoveServiceName() StatefulSetSpecBuilder {
	b.ensureInitialized()
	b.fields.ServiceName = nil
	return b
}

// GetServiceName gets the ServiceName field from the declarative configuration.
func (b StatefulSetSpecBuilder) GetServiceName() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.ServiceName; v != nil {
		return *v, true
	}
	return value, false
}

// SetPodManagementPolicy sets the PodManagementPolicy field in the declarative configuration to the given value.
func (b StatefulSetSpecBuilder) SetPodManagementPolicy(value v1beta1.PodManagementPolicyType) StatefulSetSpecBuilder {
	b.ensureInitialized()
	b.fields.PodManagementPolicy = &value
	return b
}

// RemovePodManagementPolicy removes the PodManagementPolicy field from the declarative configuration.
func (b StatefulSetSpecBuilder) RemovePodManagementPolicy() StatefulSetSpecBuilder {
	b.ensureInitialized()
	b.fields.PodManagementPolicy = nil
	return b
}

// GetPodManagementPolicy gets the PodManagementPolicy field from the declarative configuration.
func (b StatefulSetSpecBuilder) GetPodManagementPolicy() (value v1beta1.PodManagementPolicyType, ok bool) {
	b.ensureInitialized()
	if v := b.fields.PodManagementPolicy; v != nil {
		return *v, true
	}
	return value, false
}

// SetUpdateStrategy sets the UpdateStrategy field in the declarative configuration to the given value.
func (b StatefulSetSpecBuilder) SetUpdateStrategy(value StatefulSetUpdateStrategyBuilder) StatefulSetSpecBuilder {
	b.ensureInitialized()
	b.fields.UpdateStrategy = &value
	return b
}

// RemoveUpdateStrategy removes the UpdateStrategy field from the declarative configuration.
func (b StatefulSetSpecBuilder) RemoveUpdateStrategy() StatefulSetSpecBuilder {
	b.ensureInitialized()
	b.fields.UpdateStrategy = nil
	return b
}

// GetUpdateStrategy gets the UpdateStrategy field from the declarative configuration.
func (b StatefulSetSpecBuilder) GetUpdateStrategy() (value StatefulSetUpdateStrategyBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.UpdateStrategy; v != nil {
		return *v, true
	}
	return value, false
}

// SetRevisionHistoryLimit sets the RevisionHistoryLimit field in the declarative configuration to the given value.
func (b StatefulSetSpecBuilder) SetRevisionHistoryLimit(value int32) StatefulSetSpecBuilder {
	b.ensureInitialized()
	b.fields.RevisionHistoryLimit = &value
	return b
}

// RemoveRevisionHistoryLimit removes the RevisionHistoryLimit field from the declarative configuration.
func (b StatefulSetSpecBuilder) RemoveRevisionHistoryLimit() StatefulSetSpecBuilder {
	b.ensureInitialized()
	b.fields.RevisionHistoryLimit = nil
	return b
}

// GetRevisionHistoryLimit gets the RevisionHistoryLimit field from the declarative configuration.
func (b StatefulSetSpecBuilder) GetRevisionHistoryLimit() (value int32, ok bool) {
	b.ensureInitialized()
	if v := b.fields.RevisionHistoryLimit; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts StatefulSetSpecBuilder to unstructured.
func (b *StatefulSetSpecBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to StatefulSetSpecBuilder, replacing the contents
// of StatefulSetSpecBuilder.
func (b *StatefulSetSpecBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &statefulSetSpecFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals StatefulSetSpecBuilder to JSON.
func (b *StatefulSetSpecBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into StatefulSetSpecBuilder, replacing the contents of
// StatefulSetSpecBuilder.
func (b *StatefulSetSpecBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// StatefulSetSpecList represents a list of StatefulSetSpecBuilder.
// Provided as a convenience.
type StatefulSetSpecList []StatefulSetSpecBuilder

// StatefulSetSpecList represents a map of StatefulSetSpecBuilder.
// Provided as a convenience.
type StatefulSetSpecMap map[string]StatefulSetSpecBuilder

func (b *StatefulSetSpecBuilder) preMarshal() {
}
func (b *StatefulSetSpecBuilder) postUnmarshal() {
}
