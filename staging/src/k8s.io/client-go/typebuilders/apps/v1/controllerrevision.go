/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/typebuilders/meta/v1"
)

// ControllerRevisionBuilder represents an declarative configuration of the ControllerRevision type for use
// with apply.
type ControllerRevisionBuilder struct {
	typeMeta *v1.TypeMetaBuilder // inlined type
	fields   controllerRevisionFields
}

// controllerRevisionFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in ControllerRevisionBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type controllerRevisionFields struct {
	Kind       *string               `json:"kind,omitempty"`       // inlined ControllerRevisionBuilder.typeMeta.Kind field
	APIVersion *string               `json:"apiVersion,omitempty"` // inlined ControllerRevisionBuilder.typeMeta.APIVersion field
	ObjectMeta *v1.ObjectMetaBuilder `json:"metadata,omitempty"`
	Data       *runtime.RawExtension `json:"data,omitempty"`
	Revision   *int64                `json:"revision,omitempty"`
}

// ControllerRevision constructs an declarative configuration of the ControllerRevision type for use with
// apply.
func ControllerRevision() *ControllerRevisionBuilder {
	return &ControllerRevisionBuilder{}
}

// SetTypeMeta sets the TypeMeta field in the declarative configuration to the given value.
func (b *ControllerRevisionBuilder) SetTypeMeta(value *v1.TypeMetaBuilder) *ControllerRevisionBuilder {
	b.typeMeta = value
	return b
}

// RemoveTypeMeta removes the TypeMeta field from the declarative configuration.
func (b *ControllerRevisionBuilder) RemoveTypeMeta() *ControllerRevisionBuilder {
	b.typeMeta = nil
	return b
}

// GetTypeMeta gets the TypeMeta field from the declarative configuration.
func (b *ControllerRevisionBuilder) GetTypeMeta() (value *v1.TypeMetaBuilder, ok bool) {
	return b.typeMeta, true
}

// SetObjectMeta sets the ObjectMeta field in the declarative configuration to the given value.
func (b *ControllerRevisionBuilder) SetObjectMeta(value *v1.ObjectMetaBuilder) *ControllerRevisionBuilder {
	b.fields.ObjectMeta = value
	return b
}

// RemoveObjectMeta removes the ObjectMeta field from the declarative configuration.
func (b *ControllerRevisionBuilder) RemoveObjectMeta() *ControllerRevisionBuilder {
	b.fields.ObjectMeta = nil
	return b
}

// GetObjectMeta gets the ObjectMeta field from the declarative configuration.
func (b *ControllerRevisionBuilder) GetObjectMeta() (value *v1.ObjectMetaBuilder, ok bool) {
	return b.fields.ObjectMeta, b.fields.ObjectMeta != nil
}

// SetData sets the Data field in the declarative configuration to the given value.
func (b *ControllerRevisionBuilder) SetData(value runtime.RawExtension) *ControllerRevisionBuilder {
	b.fields.Data = &value
	return b
}

// RemoveData removes the Data field from the declarative configuration.
func (b *ControllerRevisionBuilder) RemoveData() *ControllerRevisionBuilder {
	b.fields.Data = nil
	return b
}

// GetData gets the Data field from the declarative configuration.
func (b *ControllerRevisionBuilder) GetData() (value runtime.RawExtension, ok bool) {
	if v := b.fields.Data; v != nil {
		return *v, true
	}
	return value, false
}

// SetRevision sets the Revision field in the declarative configuration to the given value.
func (b *ControllerRevisionBuilder) SetRevision(value int64) *ControllerRevisionBuilder {
	b.fields.Revision = &value
	return b
}

// RemoveRevision removes the Revision field from the declarative configuration.
func (b *ControllerRevisionBuilder) RemoveRevision() *ControllerRevisionBuilder {
	b.fields.Revision = nil
	return b
}

// GetRevision gets the Revision field from the declarative configuration.
func (b *ControllerRevisionBuilder) GetRevision() (value int64, ok bool) {
	if v := b.fields.Revision; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ControllerRevisionBuilder to unstructured.
func (b *ControllerRevisionBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ControllerRevisionBuilder, replacing the contents
// of ControllerRevisionBuilder.
func (b *ControllerRevisionBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &controllerRevisionFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ControllerRevisionBuilder to JSON.
func (b *ControllerRevisionBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into ControllerRevisionBuilder, replacing the contents of
// ControllerRevisionBuilder.
func (b *ControllerRevisionBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ControllerRevisionList represents a list of ControllerRevisionBuilder.
type ControllerRevisionList []*ControllerRevisionBuilder

// ControllerRevisionList represents a map of ControllerRevisionBuilder.
type ControllerRevisionMap map[string]ControllerRevisionBuilder

func (b *ControllerRevisionBuilder) preMarshal() {
	if b.typeMeta != nil {
		if v, ok := b.typeMeta.GetKind(); ok {
			b.fields.Kind = &v
		}
		if v, ok := b.typeMeta.GetAPIVersion(); ok {
			b.fields.APIVersion = &v
		}
	}
}
func (b *ControllerRevisionBuilder) postUnmarshal() {
	if b.typeMeta == nil {
		b.typeMeta = &v1.TypeMetaBuilder{}
	}
	if b.fields.Kind != nil {
		b.typeMeta.SetKind(*b.fields.Kind)
	}
	if b.fields.APIVersion != nil {
		b.typeMeta.SetAPIVersion(*b.fields.APIVersion)
	}
}
