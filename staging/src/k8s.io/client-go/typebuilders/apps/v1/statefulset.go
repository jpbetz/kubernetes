/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/typebuilders/meta/v1"
)

// StatefulSetBuilder represents an declarative configuration of the StatefulSet type for use
// with apply.
type StatefulSetBuilder struct {
	typeMeta v1.TypeMetaBuilder // inlined type
	fields   *statefulSetFields
}

// statefulSetFields is used by StatefulSetBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in StatefulSetBuilder before marshalling, and
// are copied out to the builder type in StatefulSetBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type statefulSetFields struct {
	Kind       *string                   `json:"kind,omitempty"`       // inlined StatefulSetBuilder.typeMeta.Kind field
	APIVersion *string                   `json:"apiVersion,omitempty"` // inlined StatefulSetBuilder.typeMeta.APIVersion field
	ObjectMeta *v1.ObjectMetaBuilder     `json:"metadata,omitempty"`
	Spec       *StatefulSetSpecBuilder   `json:"spec,omitempty"`
	Status     *StatefulSetStatusBuilder `json:"status,omitempty"`
}

func (b *StatefulSetBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &statefulSetFields{}
	}
}

// StatefulSet constructs an declarative configuration of the StatefulSet type for use with
// apply.
// Provided as a convenience.
func StatefulSet() StatefulSetBuilder {
	return StatefulSetBuilder{fields: &statefulSetFields{}}
}

// SetTypeMeta sets the TypeMeta field in the declarative configuration to the given value.
func (b StatefulSetBuilder) SetTypeMeta(value v1.TypeMetaBuilder) StatefulSetBuilder {
	b.ensureInitialized()
	b.typeMeta = value
	return b
}

// RemoveTypeMeta removes the TypeMeta field from the declarative configuration.
func (b StatefulSetBuilder) RemoveTypeMeta() StatefulSetBuilder {
	b.ensureInitialized()
	b.typeMeta = v1.TypeMetaBuilder{}
	return b
}

// GetTypeMeta gets the TypeMeta field from the declarative configuration.
func (b StatefulSetBuilder) GetTypeMeta() (value v1.TypeMetaBuilder, ok bool) {
	b.ensureInitialized()
	return b.typeMeta, true
}

// SetObjectMeta sets the ObjectMeta field in the declarative configuration to the given value.
func (b StatefulSetBuilder) SetObjectMeta(value v1.ObjectMetaBuilder) StatefulSetBuilder {
	b.ensureInitialized()
	b.fields.ObjectMeta = &value
	return b
}

// RemoveObjectMeta removes the ObjectMeta field from the declarative configuration.
func (b StatefulSetBuilder) RemoveObjectMeta() StatefulSetBuilder {
	b.ensureInitialized()
	b.fields.ObjectMeta = nil
	return b
}

// GetObjectMeta gets the ObjectMeta field from the declarative configuration.
func (b StatefulSetBuilder) GetObjectMeta() (value v1.ObjectMetaBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.ObjectMeta; v != nil {
		return *v, true
	}
	return value, false
}

// SetSpec sets the Spec field in the declarative configuration to the given value.
func (b StatefulSetBuilder) SetSpec(value StatefulSetSpecBuilder) StatefulSetBuilder {
	b.ensureInitialized()
	b.fields.Spec = &value
	return b
}

// RemoveSpec removes the Spec field from the declarative configuration.
func (b StatefulSetBuilder) RemoveSpec() StatefulSetBuilder {
	b.ensureInitialized()
	b.fields.Spec = nil
	return b
}

// GetSpec gets the Spec field from the declarative configuration.
func (b StatefulSetBuilder) GetSpec() (value StatefulSetSpecBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Spec; v != nil {
		return *v, true
	}
	return value, false
}

// SetStatus sets the Status field in the declarative configuration to the given value.
func (b StatefulSetBuilder) SetStatus(value StatefulSetStatusBuilder) StatefulSetBuilder {
	b.ensureInitialized()
	b.fields.Status = &value
	return b
}

// RemoveStatus removes the Status field from the declarative configuration.
func (b StatefulSetBuilder) RemoveStatus() StatefulSetBuilder {
	b.ensureInitialized()
	b.fields.Status = nil
	return b
}

// GetStatus gets the Status field from the declarative configuration.
func (b StatefulSetBuilder) GetStatus() (value StatefulSetStatusBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Status; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts StatefulSetBuilder to unstructured.
func (b *StatefulSetBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to StatefulSetBuilder, replacing the contents
// of StatefulSetBuilder.
func (b *StatefulSetBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &statefulSetFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals StatefulSetBuilder to JSON.
func (b *StatefulSetBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into StatefulSetBuilder, replacing the contents of
// StatefulSetBuilder.
func (b *StatefulSetBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// StatefulSetList represents a list of StatefulSetBuilder.
// Provided as a convenience.
type StatefulSetList []StatefulSetBuilder

// StatefulSetList represents a map of StatefulSetBuilder.
// Provided as a convenience.
type StatefulSetMap map[string]StatefulSetBuilder

func (b *StatefulSetBuilder) preMarshal() {
	if v, ok := b.typeMeta.GetKind(); ok {
		b.fields.Kind = &v
	}
	if v, ok := b.typeMeta.GetAPIVersion(); ok {
		b.fields.APIVersion = &v
	}
}
func (b *StatefulSetBuilder) postUnmarshal() {
	if b.fields.Kind != nil {
		b.typeMeta.SetKind(*b.fields.Kind)
	}
	if b.fields.APIVersion != nil {
		b.typeMeta.SetAPIVersion(*b.fields.APIVersion)
	}
}
