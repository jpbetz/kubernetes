/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
	corev1 "k8s.io/client-go/typebuilders/core/v1"
	v1 "k8s.io/client-go/typebuilders/meta/v1"
)

// ReplicaSetSpecBuilder represents an declarative configuration of the ReplicaSetSpec type for use
// with apply.
type ReplicaSetSpecBuilder struct {
	fields *replicaSetSpecFields
}

// replicaSetSpecFields is used by ReplicaSetSpecBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in ReplicaSetSpecBuilder before marshalling, and
// are copied out to the builder type in ReplicaSetSpecBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type replicaSetSpecFields struct {
	Replicas        *int32                         `json:"replicas,omitempty"`
	MinReadySeconds *int32                         `json:"minReadySeconds,omitempty"`
	Selector        *v1.LabelSelectorBuilder       `json:"selector,omitempty"`
	Template        *corev1.PodTemplateSpecBuilder `json:"template,omitempty"`
}

func (b *ReplicaSetSpecBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &replicaSetSpecFields{}
	}
}

// ReplicaSetSpec constructs an declarative configuration of the ReplicaSetSpec type for use with
// apply.
// Provided as a convenience.
func ReplicaSetSpec() ReplicaSetSpecBuilder {
	return ReplicaSetSpecBuilder{fields: &replicaSetSpecFields{}}
}

// SetReplicas sets the Replicas field in the declarative configuration to the given value.
func (b ReplicaSetSpecBuilder) SetReplicas(value int32) ReplicaSetSpecBuilder {
	b.ensureInitialized()
	b.fields.Replicas = &value
	return b
}

// RemoveReplicas removes the Replicas field from the declarative configuration.
func (b ReplicaSetSpecBuilder) RemoveReplicas() ReplicaSetSpecBuilder {
	b.ensureInitialized()
	b.fields.Replicas = nil
	return b
}

// GetReplicas gets the Replicas field from the declarative configuration.
func (b ReplicaSetSpecBuilder) GetReplicas() (value int32, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Replicas; v != nil {
		return *v, true
	}
	return value, false
}

// SetMinReadySeconds sets the MinReadySeconds field in the declarative configuration to the given value.
func (b ReplicaSetSpecBuilder) SetMinReadySeconds(value int32) ReplicaSetSpecBuilder {
	b.ensureInitialized()
	b.fields.MinReadySeconds = &value
	return b
}

// RemoveMinReadySeconds removes the MinReadySeconds field from the declarative configuration.
func (b ReplicaSetSpecBuilder) RemoveMinReadySeconds() ReplicaSetSpecBuilder {
	b.ensureInitialized()
	b.fields.MinReadySeconds = nil
	return b
}

// GetMinReadySeconds gets the MinReadySeconds field from the declarative configuration.
func (b ReplicaSetSpecBuilder) GetMinReadySeconds() (value int32, ok bool) {
	b.ensureInitialized()
	if v := b.fields.MinReadySeconds; v != nil {
		return *v, true
	}
	return value, false
}

// SetSelector sets the Selector field in the declarative configuration to the given value.
func (b ReplicaSetSpecBuilder) SetSelector(value v1.LabelSelectorBuilder) ReplicaSetSpecBuilder {
	b.ensureInitialized()
	b.fields.Selector = &value
	return b
}

// RemoveSelector removes the Selector field from the declarative configuration.
func (b ReplicaSetSpecBuilder) RemoveSelector() ReplicaSetSpecBuilder {
	b.ensureInitialized()
	b.fields.Selector = nil
	return b
}

// GetSelector gets the Selector field from the declarative configuration.
func (b ReplicaSetSpecBuilder) GetSelector() (value v1.LabelSelectorBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Selector; v != nil {
		return *v, true
	}
	return value, false
}

// SetTemplate sets the Template field in the declarative configuration to the given value.
func (b ReplicaSetSpecBuilder) SetTemplate(value corev1.PodTemplateSpecBuilder) ReplicaSetSpecBuilder {
	b.ensureInitialized()
	b.fields.Template = &value
	return b
}

// RemoveTemplate removes the Template field from the declarative configuration.
func (b ReplicaSetSpecBuilder) RemoveTemplate() ReplicaSetSpecBuilder {
	b.ensureInitialized()
	b.fields.Template = nil
	return b
}

// GetTemplate gets the Template field from the declarative configuration.
func (b ReplicaSetSpecBuilder) GetTemplate() (value corev1.PodTemplateSpecBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Template; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ReplicaSetSpecBuilder to unstructured.
func (b *ReplicaSetSpecBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ReplicaSetSpecBuilder, replacing the contents
// of ReplicaSetSpecBuilder.
func (b *ReplicaSetSpecBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &replicaSetSpecFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ReplicaSetSpecBuilder to JSON.
func (b *ReplicaSetSpecBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into ReplicaSetSpecBuilder, replacing the contents of
// ReplicaSetSpecBuilder.
func (b *ReplicaSetSpecBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ReplicaSetSpecList represents a list of ReplicaSetSpecBuilder.
// Provided as a convenience.
type ReplicaSetSpecList []ReplicaSetSpecBuilder

// ReplicaSetSpecList represents a map of ReplicaSetSpecBuilder.
// Provided as a convenience.
type ReplicaSetSpecMap map[string]ReplicaSetSpecBuilder

func (b *ReplicaSetSpecBuilder) preMarshal() {
}
func (b *ReplicaSetSpecBuilder) postUnmarshal() {
}
