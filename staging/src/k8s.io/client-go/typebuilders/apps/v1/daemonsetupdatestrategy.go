/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	v1 "k8s.io/api/apps/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DaemonSetUpdateStrategyBuilder represents an declarative configuration of the DaemonSetUpdateStrategy type for use
// with apply.
type DaemonSetUpdateStrategyBuilder struct {
	fields daemonSetUpdateStrategyFields
}

// daemonSetUpdateStrategyFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in DaemonSetUpdateStrategyBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type daemonSetUpdateStrategyFields struct {
	Type          *v1.DaemonSetUpdateStrategyType `json:"type,omitempty"`
	RollingUpdate *RollingUpdateDaemonSetBuilder  `json:"rollingUpdate,omitempty"`
}

// DaemonSetUpdateStrategy constructs an declarative configuration of the DaemonSetUpdateStrategy type for use with
// apply.
func DaemonSetUpdateStrategy() *DaemonSetUpdateStrategyBuilder {
	return &DaemonSetUpdateStrategyBuilder{}
}

// SetType sets the Type field in the declarative configuration to the given value.
func (b *DaemonSetUpdateStrategyBuilder) SetType(value v1.DaemonSetUpdateStrategyType) *DaemonSetUpdateStrategyBuilder {
	b.fields.Type = &value
	return b
}

// RemoveType removes the Type field from the declarative configuration.
func (b *DaemonSetUpdateStrategyBuilder) RemoveType() *DaemonSetUpdateStrategyBuilder {
	b.fields.Type = nil
	return b
}

// GetType gets the Type field from the declarative configuration.
func (b *DaemonSetUpdateStrategyBuilder) GetType() (value v1.DaemonSetUpdateStrategyType, ok bool) {
	if v := b.fields.Type; v != nil {
		return *v, true
	}
	return value, false
}

// SetRollingUpdate sets the RollingUpdate field in the declarative configuration to the given value.
func (b *DaemonSetUpdateStrategyBuilder) SetRollingUpdate(value *RollingUpdateDaemonSetBuilder) *DaemonSetUpdateStrategyBuilder {
	b.fields.RollingUpdate = value
	return b
}

// RemoveRollingUpdate removes the RollingUpdate field from the declarative configuration.
func (b *DaemonSetUpdateStrategyBuilder) RemoveRollingUpdate() *DaemonSetUpdateStrategyBuilder {
	b.fields.RollingUpdate = nil
	return b
}

// GetRollingUpdate gets the RollingUpdate field from the declarative configuration.
func (b *DaemonSetUpdateStrategyBuilder) GetRollingUpdate() (value *RollingUpdateDaemonSetBuilder, ok bool) {
	return b.fields.RollingUpdate, b.fields.RollingUpdate != nil
}

// ToUnstructured converts DaemonSetUpdateStrategyBuilder to unstructured.
func (b *DaemonSetUpdateStrategyBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to DaemonSetUpdateStrategyBuilder, replacing the contents
// of DaemonSetUpdateStrategyBuilder.
func (b *DaemonSetUpdateStrategyBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &daemonSetUpdateStrategyFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals DaemonSetUpdateStrategyBuilder to JSON.
func (b *DaemonSetUpdateStrategyBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into DaemonSetUpdateStrategyBuilder, replacing the contents of
// DaemonSetUpdateStrategyBuilder.
func (b *DaemonSetUpdateStrategyBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// DaemonSetUpdateStrategyList represents a list of DaemonSetUpdateStrategyBuilder.
type DaemonSetUpdateStrategyList []*DaemonSetUpdateStrategyBuilder

// DaemonSetUpdateStrategyList represents a map of DaemonSetUpdateStrategyBuilder.
type DaemonSetUpdateStrategyMap map[string]DaemonSetUpdateStrategyBuilder

func (b *DaemonSetUpdateStrategyBuilder) preMarshal() {
}
func (b *DaemonSetUpdateStrategyBuilder) postUnmarshal() {
}
