/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// NonResourceRuleBuilder represents an declarative configuration of the NonResourceRule type for use
// with apply.
type NonResourceRuleBuilder struct {
	fields *nonResourceRuleFields
}

// nonResourceRuleFields is used by NonResourceRuleBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in NonResourceRuleBuilder before marshalling, and
// are copied out to the builder type in NonResourceRuleBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type nonResourceRuleFields struct {
	Verbs           *[]string `json:"verbs,omitempty"`
	NonResourceURLs *[]string `json:"nonResourceURLs,omitempty"`
}

func (b *NonResourceRuleBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &nonResourceRuleFields{}
	}
}

// NonResourceRule constructs an declarative configuration of the NonResourceRule type for use with
// apply.
// Provided as a convenience.
func NonResourceRule() NonResourceRuleBuilder {
	return NonResourceRuleBuilder{fields: &nonResourceRuleFields{}}
}

// SetVerbs sets the Verbs field in the declarative configuration to the given value.
func (b NonResourceRuleBuilder) SetVerbs(value []string) NonResourceRuleBuilder {
	b.ensureInitialized()
	b.fields.Verbs = &value
	return b
}

// RemoveVerbs removes the Verbs field from the declarative configuration.
func (b NonResourceRuleBuilder) RemoveVerbs() NonResourceRuleBuilder {
	b.ensureInitialized()
	b.fields.Verbs = nil
	return b
}

// GetVerbs gets the Verbs field from the declarative configuration.
func (b NonResourceRuleBuilder) GetVerbs() (value []string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Verbs; v != nil {
		return *v, true
	}
	return value, false
}

// SetNonResourceURLs sets the NonResourceURLs field in the declarative configuration to the given value.
func (b NonResourceRuleBuilder) SetNonResourceURLs(value []string) NonResourceRuleBuilder {
	b.ensureInitialized()
	b.fields.NonResourceURLs = &value
	return b
}

// RemoveNonResourceURLs removes the NonResourceURLs field from the declarative configuration.
func (b NonResourceRuleBuilder) RemoveNonResourceURLs() NonResourceRuleBuilder {
	b.ensureInitialized()
	b.fields.NonResourceURLs = nil
	return b
}

// GetNonResourceURLs gets the NonResourceURLs field from the declarative configuration.
func (b NonResourceRuleBuilder) GetNonResourceURLs() (value []string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.NonResourceURLs; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts NonResourceRuleBuilder to unstructured.
func (b *NonResourceRuleBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to NonResourceRuleBuilder, replacing the contents
// of NonResourceRuleBuilder.
func (b *NonResourceRuleBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &nonResourceRuleFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals NonResourceRuleBuilder to JSON.
func (b *NonResourceRuleBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into NonResourceRuleBuilder, replacing the contents of
// NonResourceRuleBuilder.
func (b *NonResourceRuleBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// NonResourceRuleList represents a list of NonResourceRuleBuilder.
// Provided as a convenience.
type NonResourceRuleList []NonResourceRuleBuilder

// NonResourceRuleList represents a map of NonResourceRuleBuilder.
// Provided as a convenience.
type NonResourceRuleMap map[string]NonResourceRuleBuilder

func (b *NonResourceRuleBuilder) preMarshal() {
}
func (b *NonResourceRuleBuilder) postUnmarshal() {
}
