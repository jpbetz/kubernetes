/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ResourceAttributesBuilder represents an declarative configuration of the ResourceAttributes type for use
// with apply.
type ResourceAttributesBuilder struct {
	fields resourceAttributesFields
}

// resourceAttributesFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in ResourceAttributesBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type resourceAttributesFields struct {
	Namespace   *string `json:"namespace,omitempty"`
	Verb        *string `json:"verb,omitempty"`
	Group       *string `json:"group,omitempty"`
	Version     *string `json:"version,omitempty"`
	Resource    *string `json:"resource,omitempty"`
	Subresource *string `json:"subresource,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// ResourceAttributes constructs an declarative configuration of the ResourceAttributes type for use with
// apply.
func ResourceAttributes() *ResourceAttributesBuilder {
	return &ResourceAttributesBuilder{}
}

// SetNamespace sets the Namespace field in the declarative configuration to the given value.
func (b *ResourceAttributesBuilder) SetNamespace(value string) *ResourceAttributesBuilder {
	b.fields.Namespace = &value
	return b
}

// RemoveNamespace removes the Namespace field from the declarative configuration.
func (b *ResourceAttributesBuilder) RemoveNamespace() *ResourceAttributesBuilder {
	b.fields.Namespace = nil
	return b
}

// GetNamespace gets the Namespace field from the declarative configuration.
func (b *ResourceAttributesBuilder) GetNamespace() (value string, ok bool) {
	if v := b.fields.Namespace; v != nil {
		return *v, true
	}
	return value, false
}

// SetVerb sets the Verb field in the declarative configuration to the given value.
func (b *ResourceAttributesBuilder) SetVerb(value string) *ResourceAttributesBuilder {
	b.fields.Verb = &value
	return b
}

// RemoveVerb removes the Verb field from the declarative configuration.
func (b *ResourceAttributesBuilder) RemoveVerb() *ResourceAttributesBuilder {
	b.fields.Verb = nil
	return b
}

// GetVerb gets the Verb field from the declarative configuration.
func (b *ResourceAttributesBuilder) GetVerb() (value string, ok bool) {
	if v := b.fields.Verb; v != nil {
		return *v, true
	}
	return value, false
}

// SetGroup sets the Group field in the declarative configuration to the given value.
func (b *ResourceAttributesBuilder) SetGroup(value string) *ResourceAttributesBuilder {
	b.fields.Group = &value
	return b
}

// RemoveGroup removes the Group field from the declarative configuration.
func (b *ResourceAttributesBuilder) RemoveGroup() *ResourceAttributesBuilder {
	b.fields.Group = nil
	return b
}

// GetGroup gets the Group field from the declarative configuration.
func (b *ResourceAttributesBuilder) GetGroup() (value string, ok bool) {
	if v := b.fields.Group; v != nil {
		return *v, true
	}
	return value, false
}

// SetVersion sets the Version field in the declarative configuration to the given value.
func (b *ResourceAttributesBuilder) SetVersion(value string) *ResourceAttributesBuilder {
	b.fields.Version = &value
	return b
}

// RemoveVersion removes the Version field from the declarative configuration.
func (b *ResourceAttributesBuilder) RemoveVersion() *ResourceAttributesBuilder {
	b.fields.Version = nil
	return b
}

// GetVersion gets the Version field from the declarative configuration.
func (b *ResourceAttributesBuilder) GetVersion() (value string, ok bool) {
	if v := b.fields.Version; v != nil {
		return *v, true
	}
	return value, false
}

// SetResource sets the Resource field in the declarative configuration to the given value.
func (b *ResourceAttributesBuilder) SetResource(value string) *ResourceAttributesBuilder {
	b.fields.Resource = &value
	return b
}

// RemoveResource removes the Resource field from the declarative configuration.
func (b *ResourceAttributesBuilder) RemoveResource() *ResourceAttributesBuilder {
	b.fields.Resource = nil
	return b
}

// GetResource gets the Resource field from the declarative configuration.
func (b *ResourceAttributesBuilder) GetResource() (value string, ok bool) {
	if v := b.fields.Resource; v != nil {
		return *v, true
	}
	return value, false
}

// SetSubresource sets the Subresource field in the declarative configuration to the given value.
func (b *ResourceAttributesBuilder) SetSubresource(value string) *ResourceAttributesBuilder {
	b.fields.Subresource = &value
	return b
}

// RemoveSubresource removes the Subresource field from the declarative configuration.
func (b *ResourceAttributesBuilder) RemoveSubresource() *ResourceAttributesBuilder {
	b.fields.Subresource = nil
	return b
}

// GetSubresource gets the Subresource field from the declarative configuration.
func (b *ResourceAttributesBuilder) GetSubresource() (value string, ok bool) {
	if v := b.fields.Subresource; v != nil {
		return *v, true
	}
	return value, false
}

// SetName sets the Name field in the declarative configuration to the given value.
func (b *ResourceAttributesBuilder) SetName(value string) *ResourceAttributesBuilder {
	b.fields.Name = &value
	return b
}

// RemoveName removes the Name field from the declarative configuration.
func (b *ResourceAttributesBuilder) RemoveName() *ResourceAttributesBuilder {
	b.fields.Name = nil
	return b
}

// GetName gets the Name field from the declarative configuration.
func (b *ResourceAttributesBuilder) GetName() (value string, ok bool) {
	if v := b.fields.Name; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ResourceAttributesBuilder to unstructured.
func (b *ResourceAttributesBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ResourceAttributesBuilder, replacing the contents
// of ResourceAttributesBuilder.
func (b *ResourceAttributesBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &resourceAttributesFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ResourceAttributesBuilder to JSON.
func (b *ResourceAttributesBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into ResourceAttributesBuilder, replacing the contents of
// ResourceAttributesBuilder.
func (b *ResourceAttributesBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ResourceAttributesList represents a list of ResourceAttributesBuilder.
type ResourceAttributesList []*ResourceAttributesBuilder

// ResourceAttributesList represents a map of ResourceAttributesBuilder.
type ResourceAttributesMap map[string]ResourceAttributesBuilder

func (b *ResourceAttributesBuilder) preMarshal() {
}
func (b *ResourceAttributesBuilder) postUnmarshal() {
}
