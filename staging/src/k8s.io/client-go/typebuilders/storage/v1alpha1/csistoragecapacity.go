/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1alpha1

import (
	json "encoding/json"

	resource "k8s.io/apimachinery/pkg/api/resource"
	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/typebuilders/meta/v1"
)

// CSIStorageCapacityBuilder represents an declarative configuration of the CSIStorageCapacity type for use
// with apply.
type CSIStorageCapacityBuilder struct {
	typeMeta *v1.TypeMetaBuilder // inlined type
	fields   cSIStorageCapacityFields
}

// cSIStorageCapacityFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in CSIStorageCapacityBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type cSIStorageCapacityFields struct {
	Kind             *string                  `json:"kind,omitempty"`       // inlined CSIStorageCapacityBuilder.typeMeta.Kind field
	APIVersion       *string                  `json:"apiVersion,omitempty"` // inlined CSIStorageCapacityBuilder.typeMeta.APIVersion field
	ObjectMeta       *v1.ObjectMetaBuilder    `json:"metadata,omitempty"`
	NodeTopology     *v1.LabelSelectorBuilder `json:"nodeTopology,omitempty"`
	StorageClassName *string                  `json:"storageClassName,omitempty"`
	Capacity         *resource.Quantity       `json:"capacity,omitempty"`
}

// CSIStorageCapacity constructs an declarative configuration of the CSIStorageCapacity type for use with
// apply.
func CSIStorageCapacity() *CSIStorageCapacityBuilder {
	return &CSIStorageCapacityBuilder{}
}

// SetTypeMeta sets the TypeMeta field in the declarative configuration to the given value.
func (b *CSIStorageCapacityBuilder) SetTypeMeta(value *v1.TypeMetaBuilder) *CSIStorageCapacityBuilder {
	b.typeMeta = value
	return b
}

// RemoveTypeMeta removes the TypeMeta field from the declarative configuration.
func (b *CSIStorageCapacityBuilder) RemoveTypeMeta() *CSIStorageCapacityBuilder {
	b.typeMeta = nil
	return b
}

// GetTypeMeta gets the TypeMeta field from the declarative configuration.
func (b *CSIStorageCapacityBuilder) GetTypeMeta() (value *v1.TypeMetaBuilder, ok bool) {
	return b.typeMeta, true
}

// SetObjectMeta sets the ObjectMeta field in the declarative configuration to the given value.
func (b *CSIStorageCapacityBuilder) SetObjectMeta(value *v1.ObjectMetaBuilder) *CSIStorageCapacityBuilder {
	b.fields.ObjectMeta = value
	return b
}

// RemoveObjectMeta removes the ObjectMeta field from the declarative configuration.
func (b *CSIStorageCapacityBuilder) RemoveObjectMeta() *CSIStorageCapacityBuilder {
	b.fields.ObjectMeta = nil
	return b
}

// GetObjectMeta gets the ObjectMeta field from the declarative configuration.
func (b *CSIStorageCapacityBuilder) GetObjectMeta() (value *v1.ObjectMetaBuilder, ok bool) {
	return b.fields.ObjectMeta, b.fields.ObjectMeta != nil
}

// SetNodeTopology sets the NodeTopology field in the declarative configuration to the given value.
func (b *CSIStorageCapacityBuilder) SetNodeTopology(value *v1.LabelSelectorBuilder) *CSIStorageCapacityBuilder {
	b.fields.NodeTopology = value
	return b
}

// RemoveNodeTopology removes the NodeTopology field from the declarative configuration.
func (b *CSIStorageCapacityBuilder) RemoveNodeTopology() *CSIStorageCapacityBuilder {
	b.fields.NodeTopology = nil
	return b
}

// GetNodeTopology gets the NodeTopology field from the declarative configuration.
func (b *CSIStorageCapacityBuilder) GetNodeTopology() (value *v1.LabelSelectorBuilder, ok bool) {
	return b.fields.NodeTopology, b.fields.NodeTopology != nil
}

// SetStorageClassName sets the StorageClassName field in the declarative configuration to the given value.
func (b *CSIStorageCapacityBuilder) SetStorageClassName(value string) *CSIStorageCapacityBuilder {
	b.fields.StorageClassName = &value
	return b
}

// RemoveStorageClassName removes the StorageClassName field from the declarative configuration.
func (b *CSIStorageCapacityBuilder) RemoveStorageClassName() *CSIStorageCapacityBuilder {
	b.fields.StorageClassName = nil
	return b
}

// GetStorageClassName gets the StorageClassName field from the declarative configuration.
func (b *CSIStorageCapacityBuilder) GetStorageClassName() (value string, ok bool) {
	if v := b.fields.StorageClassName; v != nil {
		return *v, true
	}
	return value, false
}

// SetCapacity sets the Capacity field in the declarative configuration to the given value.
func (b *CSIStorageCapacityBuilder) SetCapacity(value resource.Quantity) *CSIStorageCapacityBuilder {
	b.fields.Capacity = &value
	return b
}

// RemoveCapacity removes the Capacity field from the declarative configuration.
func (b *CSIStorageCapacityBuilder) RemoveCapacity() *CSIStorageCapacityBuilder {
	b.fields.Capacity = nil
	return b
}

// GetCapacity gets the Capacity field from the declarative configuration.
func (b *CSIStorageCapacityBuilder) GetCapacity() (value resource.Quantity, ok bool) {
	if v := b.fields.Capacity; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts CSIStorageCapacityBuilder to unstructured.
func (b *CSIStorageCapacityBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to CSIStorageCapacityBuilder, replacing the contents
// of CSIStorageCapacityBuilder.
func (b *CSIStorageCapacityBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &cSIStorageCapacityFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals CSIStorageCapacityBuilder to JSON.
func (b *CSIStorageCapacityBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into CSIStorageCapacityBuilder, replacing the contents of
// CSIStorageCapacityBuilder.
func (b *CSIStorageCapacityBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// CSIStorageCapacityList represents a list of CSIStorageCapacityBuilder.
type CSIStorageCapacityList []*CSIStorageCapacityBuilder

// CSIStorageCapacityList represents a map of CSIStorageCapacityBuilder.
type CSIStorageCapacityMap map[string]CSIStorageCapacityBuilder

func (b *CSIStorageCapacityBuilder) preMarshal() {
	if b.typeMeta != nil {
		if v, ok := b.typeMeta.GetKind(); ok {
			b.fields.Kind = &v
		}
		if v, ok := b.typeMeta.GetAPIVersion(); ok {
			b.fields.APIVersion = &v
		}
	}
}
func (b *CSIStorageCapacityBuilder) postUnmarshal() {
	if b.typeMeta == nil {
		b.typeMeta = &v1.TypeMetaBuilder{}
	}
	if b.fields.Kind != nil {
		b.typeMeta.SetKind(*b.fields.Kind)
	}
	if b.fields.APIVersion != nil {
		b.typeMeta.SetAPIVersion(*b.fields.APIVersion)
	}
}
