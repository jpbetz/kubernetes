/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1alpha1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/typebuilders/core/v1"
)

// VolumeAttachmentSourceBuilder represents an declarative configuration of the VolumeAttachmentSource type for use
// with apply.
type VolumeAttachmentSourceBuilder struct {
	fields *volumeAttachmentSourceFields
}

// volumeAttachmentSourceFields is used by VolumeAttachmentSourceBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in VolumeAttachmentSourceBuilder before marshalling, and
// are copied out to the builder type in VolumeAttachmentSourceBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type volumeAttachmentSourceFields struct {
	PersistentVolumeName *string                         `json:"persistentVolumeName,omitempty"`
	InlineVolumeSpec     *v1.PersistentVolumeSpecBuilder `json:"inlineVolumeSpec,omitempty"`
}

func (b *VolumeAttachmentSourceBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &volumeAttachmentSourceFields{}
	}
}

// VolumeAttachmentSource constructs an declarative configuration of the VolumeAttachmentSource type for use with
// apply.
// Provided as a convenience.
func VolumeAttachmentSource() VolumeAttachmentSourceBuilder {
	return VolumeAttachmentSourceBuilder{fields: &volumeAttachmentSourceFields{}}
}

// SetPersistentVolumeName sets the PersistentVolumeName field in the declarative configuration to the given value.
func (b VolumeAttachmentSourceBuilder) SetPersistentVolumeName(value string) VolumeAttachmentSourceBuilder {
	b.ensureInitialized()
	b.fields.PersistentVolumeName = &value
	return b
}

// RemovePersistentVolumeName removes the PersistentVolumeName field from the declarative configuration.
func (b VolumeAttachmentSourceBuilder) RemovePersistentVolumeName() VolumeAttachmentSourceBuilder {
	b.ensureInitialized()
	b.fields.PersistentVolumeName = nil
	return b
}

// GetPersistentVolumeName gets the PersistentVolumeName field from the declarative configuration.
func (b VolumeAttachmentSourceBuilder) GetPersistentVolumeName() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.PersistentVolumeName; v != nil {
		return *v, true
	}
	return value, false
}

// SetInlineVolumeSpec sets the InlineVolumeSpec field in the declarative configuration to the given value.
func (b VolumeAttachmentSourceBuilder) SetInlineVolumeSpec(value v1.PersistentVolumeSpecBuilder) VolumeAttachmentSourceBuilder {
	b.ensureInitialized()
	b.fields.InlineVolumeSpec = &value
	return b
}

// RemoveInlineVolumeSpec removes the InlineVolumeSpec field from the declarative configuration.
func (b VolumeAttachmentSourceBuilder) RemoveInlineVolumeSpec() VolumeAttachmentSourceBuilder {
	b.ensureInitialized()
	b.fields.InlineVolumeSpec = nil
	return b
}

// GetInlineVolumeSpec gets the InlineVolumeSpec field from the declarative configuration.
func (b VolumeAttachmentSourceBuilder) GetInlineVolumeSpec() (value v1.PersistentVolumeSpecBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.InlineVolumeSpec; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts VolumeAttachmentSourceBuilder to unstructured.
func (b *VolumeAttachmentSourceBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to VolumeAttachmentSourceBuilder, replacing the contents
// of VolumeAttachmentSourceBuilder.
func (b *VolumeAttachmentSourceBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &volumeAttachmentSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals VolumeAttachmentSourceBuilder to JSON.
func (b *VolumeAttachmentSourceBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into VolumeAttachmentSourceBuilder, replacing the contents of
// VolumeAttachmentSourceBuilder.
func (b *VolumeAttachmentSourceBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// VolumeAttachmentSourceList represents a list of VolumeAttachmentSourceBuilder.
// Provided as a convenience.
type VolumeAttachmentSourceList []VolumeAttachmentSourceBuilder

// VolumeAttachmentSourceList represents a map of VolumeAttachmentSourceBuilder.
// Provided as a convenience.
type VolumeAttachmentSourceMap map[string]VolumeAttachmentSourceBuilder

func (b *VolumeAttachmentSourceBuilder) preMarshal() {
}
func (b *VolumeAttachmentSourceBuilder) postUnmarshal() {
}
