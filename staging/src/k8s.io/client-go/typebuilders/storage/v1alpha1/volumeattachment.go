/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1alpha1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/typebuilders/meta/v1"
)

// VolumeAttachmentBuilder represents an declarative configuration of the VolumeAttachment type for use
// with apply.
type VolumeAttachmentBuilder struct {
	typeMeta v1.TypeMetaBuilder // inlined type
	fields   *volumeAttachmentFields
}

// volumeAttachmentFields is used by VolumeAttachmentBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in VolumeAttachmentBuilder before marshalling, and
// are copied out to the builder type in VolumeAttachmentBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type volumeAttachmentFields struct {
	Kind       *string                        `json:"kind,omitempty"`       // inlined VolumeAttachmentBuilder.typeMeta.Kind field
	APIVersion *string                        `json:"apiVersion,omitempty"` // inlined VolumeAttachmentBuilder.typeMeta.APIVersion field
	ObjectMeta *v1.ObjectMetaBuilder          `json:"metadata,omitempty"`
	Spec       *VolumeAttachmentSpecBuilder   `json:"spec,omitempty"`
	Status     *VolumeAttachmentStatusBuilder `json:"status,omitempty"`
}

func (b *VolumeAttachmentBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &volumeAttachmentFields{}
	}
}

// VolumeAttachment constructs an declarative configuration of the VolumeAttachment type for use with
// apply.
// Provided as a convenience.
func VolumeAttachment() VolumeAttachmentBuilder {
	return VolumeAttachmentBuilder{fields: &volumeAttachmentFields{}}
}

// SetTypeMeta sets the TypeMeta field in the declarative configuration to the given value.
func (b VolumeAttachmentBuilder) SetTypeMeta(value v1.TypeMetaBuilder) VolumeAttachmentBuilder {
	b.ensureInitialized()
	b.typeMeta = value
	return b
}

// RemoveTypeMeta removes the TypeMeta field from the declarative configuration.
func (b VolumeAttachmentBuilder) RemoveTypeMeta() VolumeAttachmentBuilder {
	b.ensureInitialized()
	b.typeMeta = v1.TypeMetaBuilder{}
	return b
}

// GetTypeMeta gets the TypeMeta field from the declarative configuration.
func (b VolumeAttachmentBuilder) GetTypeMeta() (value v1.TypeMetaBuilder, ok bool) {
	b.ensureInitialized()
	return b.typeMeta, true
}

// SetObjectMeta sets the ObjectMeta field in the declarative configuration to the given value.
func (b VolumeAttachmentBuilder) SetObjectMeta(value v1.ObjectMetaBuilder) VolumeAttachmentBuilder {
	b.ensureInitialized()
	b.fields.ObjectMeta = &value
	return b
}

// RemoveObjectMeta removes the ObjectMeta field from the declarative configuration.
func (b VolumeAttachmentBuilder) RemoveObjectMeta() VolumeAttachmentBuilder {
	b.ensureInitialized()
	b.fields.ObjectMeta = nil
	return b
}

// GetObjectMeta gets the ObjectMeta field from the declarative configuration.
func (b VolumeAttachmentBuilder) GetObjectMeta() (value v1.ObjectMetaBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.ObjectMeta; v != nil {
		return *v, true
	}
	return value, false
}

// SetSpec sets the Spec field in the declarative configuration to the given value.
func (b VolumeAttachmentBuilder) SetSpec(value VolumeAttachmentSpecBuilder) VolumeAttachmentBuilder {
	b.ensureInitialized()
	b.fields.Spec = &value
	return b
}

// RemoveSpec removes the Spec field from the declarative configuration.
func (b VolumeAttachmentBuilder) RemoveSpec() VolumeAttachmentBuilder {
	b.ensureInitialized()
	b.fields.Spec = nil
	return b
}

// GetSpec gets the Spec field from the declarative configuration.
func (b VolumeAttachmentBuilder) GetSpec() (value VolumeAttachmentSpecBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Spec; v != nil {
		return *v, true
	}
	return value, false
}

// SetStatus sets the Status field in the declarative configuration to the given value.
func (b VolumeAttachmentBuilder) SetStatus(value VolumeAttachmentStatusBuilder) VolumeAttachmentBuilder {
	b.ensureInitialized()
	b.fields.Status = &value
	return b
}

// RemoveStatus removes the Status field from the declarative configuration.
func (b VolumeAttachmentBuilder) RemoveStatus() VolumeAttachmentBuilder {
	b.ensureInitialized()
	b.fields.Status = nil
	return b
}

// GetStatus gets the Status field from the declarative configuration.
func (b VolumeAttachmentBuilder) GetStatus() (value VolumeAttachmentStatusBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Status; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts VolumeAttachmentBuilder to unstructured.
func (b *VolumeAttachmentBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to VolumeAttachmentBuilder, replacing the contents
// of VolumeAttachmentBuilder.
func (b *VolumeAttachmentBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &volumeAttachmentFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals VolumeAttachmentBuilder to JSON.
func (b *VolumeAttachmentBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into VolumeAttachmentBuilder, replacing the contents of
// VolumeAttachmentBuilder.
func (b *VolumeAttachmentBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// VolumeAttachmentList represents a list of VolumeAttachmentBuilder.
// Provided as a convenience.
type VolumeAttachmentList []VolumeAttachmentBuilder

// VolumeAttachmentList represents a map of VolumeAttachmentBuilder.
// Provided as a convenience.
type VolumeAttachmentMap map[string]VolumeAttachmentBuilder

func (b *VolumeAttachmentBuilder) preMarshal() {
	if v, ok := b.typeMeta.GetKind(); ok {
		b.fields.Kind = &v
	}
	if v, ok := b.typeMeta.GetAPIVersion(); ok {
		b.fields.APIVersion = &v
	}
}
func (b *VolumeAttachmentBuilder) postUnmarshal() {
	if b.fields.Kind != nil {
		b.typeMeta.SetKind(*b.fields.Kind)
	}
	if b.fields.APIVersion != nil {
		b.typeMeta.SetAPIVersion(*b.fields.APIVersion)
	}
}
