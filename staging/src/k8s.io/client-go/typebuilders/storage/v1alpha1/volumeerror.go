/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1alpha1

import (
	json "encoding/json"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// VolumeErrorBuilder represents an declarative configuration of the VolumeError type for use
// with apply.
type VolumeErrorBuilder struct {
	fields *volumeErrorFields
}

// volumeErrorFields is used by VolumeErrorBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in VolumeErrorBuilder before marshalling, and
// are copied out to the builder type in VolumeErrorBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type volumeErrorFields struct {
	Time    *v1.Time `json:"time,omitempty"`
	Message *string  `json:"message,omitempty"`
}

func (b *VolumeErrorBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &volumeErrorFields{}
	}
}

// VolumeError constructs an declarative configuration of the VolumeError type for use with
// apply.
// Provided as a convenience.
func VolumeError() VolumeErrorBuilder {
	return VolumeErrorBuilder{fields: &volumeErrorFields{}}
}

// SetTime sets the Time field in the declarative configuration to the given value.
func (b VolumeErrorBuilder) SetTime(value v1.Time) VolumeErrorBuilder {
	b.ensureInitialized()
	b.fields.Time = &value
	return b
}

// RemoveTime removes the Time field from the declarative configuration.
func (b VolumeErrorBuilder) RemoveTime() VolumeErrorBuilder {
	b.ensureInitialized()
	b.fields.Time = nil
	return b
}

// GetTime gets the Time field from the declarative configuration.
func (b VolumeErrorBuilder) GetTime() (value v1.Time, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Time; v != nil {
		return *v, true
	}
	return value, false
}

// SetMessage sets the Message field in the declarative configuration to the given value.
func (b VolumeErrorBuilder) SetMessage(value string) VolumeErrorBuilder {
	b.ensureInitialized()
	b.fields.Message = &value
	return b
}

// RemoveMessage removes the Message field from the declarative configuration.
func (b VolumeErrorBuilder) RemoveMessage() VolumeErrorBuilder {
	b.ensureInitialized()
	b.fields.Message = nil
	return b
}

// GetMessage gets the Message field from the declarative configuration.
func (b VolumeErrorBuilder) GetMessage() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Message; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts VolumeErrorBuilder to unstructured.
func (b *VolumeErrorBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to VolumeErrorBuilder, replacing the contents
// of VolumeErrorBuilder.
func (b *VolumeErrorBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &volumeErrorFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals VolumeErrorBuilder to JSON.
func (b *VolumeErrorBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into VolumeErrorBuilder, replacing the contents of
// VolumeErrorBuilder.
func (b *VolumeErrorBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// VolumeErrorList represents a list of VolumeErrorBuilder.
// Provided as a convenience.
type VolumeErrorList []VolumeErrorBuilder

// VolumeErrorList represents a map of VolumeErrorBuilder.
// Provided as a convenience.
type VolumeErrorMap map[string]VolumeErrorBuilder

func (b *VolumeErrorBuilder) preMarshal() {
}
func (b *VolumeErrorBuilder) postUnmarshal() {
}
