/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1alpha1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// VolumeAttachmentSpecBuilder represents an declarative configuration of the VolumeAttachmentSpec type for use
// with apply.
type VolumeAttachmentSpecBuilder struct {
	fields *volumeAttachmentSpecFields
}

// volumeAttachmentSpecFields is used by VolumeAttachmentSpecBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in VolumeAttachmentSpecBuilder before marshalling, and
// are copied out to the builder type in VolumeAttachmentSpecBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type volumeAttachmentSpecFields struct {
	Attacher *string                        `json:"attacher,omitempty"`
	Source   *VolumeAttachmentSourceBuilder `json:"source,omitempty"`
	NodeName *string                        `json:"nodeName,omitempty"`
}

func (b *VolumeAttachmentSpecBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &volumeAttachmentSpecFields{}
	}
}

// VolumeAttachmentSpec constructs an declarative configuration of the VolumeAttachmentSpec type for use with
// apply.
// Provided as a convenience.
func VolumeAttachmentSpec() VolumeAttachmentSpecBuilder {
	return VolumeAttachmentSpecBuilder{fields: &volumeAttachmentSpecFields{}}
}

// SetAttacher sets the Attacher field in the declarative configuration to the given value.
func (b VolumeAttachmentSpecBuilder) SetAttacher(value string) VolumeAttachmentSpecBuilder {
	b.ensureInitialized()
	b.fields.Attacher = &value
	return b
}

// RemoveAttacher removes the Attacher field from the declarative configuration.
func (b VolumeAttachmentSpecBuilder) RemoveAttacher() VolumeAttachmentSpecBuilder {
	b.ensureInitialized()
	b.fields.Attacher = nil
	return b
}

// GetAttacher gets the Attacher field from the declarative configuration.
func (b VolumeAttachmentSpecBuilder) GetAttacher() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Attacher; v != nil {
		return *v, true
	}
	return value, false
}

// SetSource sets the Source field in the declarative configuration to the given value.
func (b VolumeAttachmentSpecBuilder) SetSource(value VolumeAttachmentSourceBuilder) VolumeAttachmentSpecBuilder {
	b.ensureInitialized()
	b.fields.Source = &value
	return b
}

// RemoveSource removes the Source field from the declarative configuration.
func (b VolumeAttachmentSpecBuilder) RemoveSource() VolumeAttachmentSpecBuilder {
	b.ensureInitialized()
	b.fields.Source = nil
	return b
}

// GetSource gets the Source field from the declarative configuration.
func (b VolumeAttachmentSpecBuilder) GetSource() (value VolumeAttachmentSourceBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Source; v != nil {
		return *v, true
	}
	return value, false
}

// SetNodeName sets the NodeName field in the declarative configuration to the given value.
func (b VolumeAttachmentSpecBuilder) SetNodeName(value string) VolumeAttachmentSpecBuilder {
	b.ensureInitialized()
	b.fields.NodeName = &value
	return b
}

// RemoveNodeName removes the NodeName field from the declarative configuration.
func (b VolumeAttachmentSpecBuilder) RemoveNodeName() VolumeAttachmentSpecBuilder {
	b.ensureInitialized()
	b.fields.NodeName = nil
	return b
}

// GetNodeName gets the NodeName field from the declarative configuration.
func (b VolumeAttachmentSpecBuilder) GetNodeName() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.NodeName; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts VolumeAttachmentSpecBuilder to unstructured.
func (b *VolumeAttachmentSpecBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to VolumeAttachmentSpecBuilder, replacing the contents
// of VolumeAttachmentSpecBuilder.
func (b *VolumeAttachmentSpecBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &volumeAttachmentSpecFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals VolumeAttachmentSpecBuilder to JSON.
func (b *VolumeAttachmentSpecBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into VolumeAttachmentSpecBuilder, replacing the contents of
// VolumeAttachmentSpecBuilder.
func (b *VolumeAttachmentSpecBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// VolumeAttachmentSpecList represents a list of VolumeAttachmentSpecBuilder.
// Provided as a convenience.
type VolumeAttachmentSpecList []VolumeAttachmentSpecBuilder

// VolumeAttachmentSpecList represents a map of VolumeAttachmentSpecBuilder.
// Provided as a convenience.
type VolumeAttachmentSpecMap map[string]VolumeAttachmentSpecBuilder

func (b *VolumeAttachmentSpecBuilder) preMarshal() {
}
func (b *VolumeAttachmentSpecBuilder) postUnmarshal() {
}
