/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/typebuilders/core/v1"
)

// VolumeAttachmentSourceApplyConfiguration represents an declarative configuration of the VolumeAttachmentSource type for use
// with apply.
type VolumeAttachmentSourceApplyConfiguration struct {
	fields volumeAttachmentSourceFields
}

// VolumeAttachmentSourceApplyConfiguration constructs an declarative configuration of the VolumeAttachmentSource type for use with
// apply.
func VolumeAttachmentSource() *VolumeAttachmentSourceApplyConfiguration {
	return &VolumeAttachmentSourceApplyConfiguration{}
}

// volumeAttachmentSourceFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in VolumeAttachmentSourceApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type volumeAttachmentSourceFields struct {
	PersistentVolumeName *string                                    `json:"persistentVolumeName,omitempty"`
	InlineVolumeSpec     *v1.PersistentVolumeSpecApplyConfiguration `json:"inlineVolumeSpec,omitempty"`
}

// SetPersistentVolumeName sets the PersistentVolumeName field in the declarative configuration to the given value.
func (b *VolumeAttachmentSourceApplyConfiguration) SetPersistentVolumeName(value string) *VolumeAttachmentSourceApplyConfiguration {
	b.fields.PersistentVolumeName = &value
	return b
}

// RemovePersistentVolumeName removes the PersistentVolumeName field from the declarative configuration.
func (b *VolumeAttachmentSourceApplyConfiguration) RemovePersistentVolumeName() *VolumeAttachmentSourceApplyConfiguration {
	b.fields.PersistentVolumeName = nil
	return b
}

// GetPersistentVolumeName gets the PersistentVolumeName field from the declarative configuration.
func (b *VolumeAttachmentSourceApplyConfiguration) GetPersistentVolumeName() (value string, ok bool) {
	if v := b.fields.PersistentVolumeName; v != nil {
		return *v, true
	}
	return value, false
}

// SetInlineVolumeSpec sets the InlineVolumeSpec field in the declarative configuration to the given value.
func (b *VolumeAttachmentSourceApplyConfiguration) SetInlineVolumeSpec(value *v1.PersistentVolumeSpecApplyConfiguration) *VolumeAttachmentSourceApplyConfiguration {
	b.fields.InlineVolumeSpec = value
	return b
}

// RemoveInlineVolumeSpec removes the InlineVolumeSpec field from the declarative configuration.
func (b *VolumeAttachmentSourceApplyConfiguration) RemoveInlineVolumeSpec() *VolumeAttachmentSourceApplyConfiguration {
	b.fields.InlineVolumeSpec = nil
	return b
}

// GetInlineVolumeSpec gets the InlineVolumeSpec field from the declarative configuration.
func (b *VolumeAttachmentSourceApplyConfiguration) GetInlineVolumeSpec() (value *v1.PersistentVolumeSpecApplyConfiguration, ok bool) {
	return b.fields.InlineVolumeSpec, b.fields.InlineVolumeSpec != nil
}

// ToUnstructured converts VolumeAttachmentSourceApplyConfiguration to unstructured.
func (b *VolumeAttachmentSourceApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to VolumeAttachmentSourceApplyConfiguration, replacing the contents
// of VolumeAttachmentSourceApplyConfiguration.
func (b *VolumeAttachmentSourceApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &volumeAttachmentSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals VolumeAttachmentSourceApplyConfiguration to JSON.
func (b *VolumeAttachmentSourceApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into VolumeAttachmentSourceApplyConfiguration, replacing the contents of
// VolumeAttachmentSourceApplyConfiguration.
func (b *VolumeAttachmentSourceApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// VolumeAttachmentSourceList represents a listAlias of VolumeAttachmentSourceApplyConfiguration.
type VolumeAttachmentSourceList []*VolumeAttachmentSourceApplyConfiguration

// VolumeAttachmentSourceList represents a map of VolumeAttachmentSourceApplyConfiguration.
type VolumeAttachmentSourceMap map[string]VolumeAttachmentSourceApplyConfiguration

func (b *VolumeAttachmentSourceApplyConfiguration) preMarshal() {
}
func (b *VolumeAttachmentSourceApplyConfiguration) postUnmarshal() {
}
