/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// VolumeAttachmentStatusBuilder represents an declarative configuration of the VolumeAttachmentStatus type for use
// with apply.
type VolumeAttachmentStatusBuilder struct {
	fields volumeAttachmentStatusFields
}

// volumeAttachmentStatusFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in VolumeAttachmentStatusBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type volumeAttachmentStatusFields struct {
	Attached           *bool               `json:"attached,omitempty"`
	AttachmentMetadata *map[string]string  `json:"attachmentMetadata,omitempty"`
	AttachError        *VolumeErrorBuilder `json:"attachError,omitempty"`
	DetachError        *VolumeErrorBuilder `json:"detachError,omitempty"`
}

// VolumeAttachmentStatus constructs an declarative configuration of the VolumeAttachmentStatus type for use with
// apply.
func VolumeAttachmentStatus() *VolumeAttachmentStatusBuilder {
	return &VolumeAttachmentStatusBuilder{}
}

// SetAttached sets the Attached field in the declarative configuration to the given value.
func (b *VolumeAttachmentStatusBuilder) SetAttached(value bool) *VolumeAttachmentStatusBuilder {
	b.fields.Attached = &value
	return b
}

// RemoveAttached removes the Attached field from the declarative configuration.
func (b *VolumeAttachmentStatusBuilder) RemoveAttached() *VolumeAttachmentStatusBuilder {
	b.fields.Attached = nil
	return b
}

// GetAttached gets the Attached field from the declarative configuration.
func (b *VolumeAttachmentStatusBuilder) GetAttached() (value bool, ok bool) {
	if v := b.fields.Attached; v != nil {
		return *v, true
	}
	return value, false
}

// SetAttachmentMetadata sets the AttachmentMetadata field in the declarative configuration to the given value.
func (b *VolumeAttachmentStatusBuilder) SetAttachmentMetadata(value map[string]string) *VolumeAttachmentStatusBuilder {
	b.fields.AttachmentMetadata = &value
	return b
}

// RemoveAttachmentMetadata removes the AttachmentMetadata field from the declarative configuration.
func (b *VolumeAttachmentStatusBuilder) RemoveAttachmentMetadata() *VolumeAttachmentStatusBuilder {
	b.fields.AttachmentMetadata = nil
	return b
}

// GetAttachmentMetadata gets the AttachmentMetadata field from the declarative configuration.
func (b *VolumeAttachmentStatusBuilder) GetAttachmentMetadata() (value map[string]string, ok bool) {
	if v := b.fields.AttachmentMetadata; v != nil {
		return *v, true
	}
	return value, false
}

// SetAttachError sets the AttachError field in the declarative configuration to the given value.
func (b *VolumeAttachmentStatusBuilder) SetAttachError(value *VolumeErrorBuilder) *VolumeAttachmentStatusBuilder {
	b.fields.AttachError = value
	return b
}

// RemoveAttachError removes the AttachError field from the declarative configuration.
func (b *VolumeAttachmentStatusBuilder) RemoveAttachError() *VolumeAttachmentStatusBuilder {
	b.fields.AttachError = nil
	return b
}

// GetAttachError gets the AttachError field from the declarative configuration.
func (b *VolumeAttachmentStatusBuilder) GetAttachError() (value *VolumeErrorBuilder, ok bool) {
	return b.fields.AttachError, b.fields.AttachError != nil
}

// SetDetachError sets the DetachError field in the declarative configuration to the given value.
func (b *VolumeAttachmentStatusBuilder) SetDetachError(value *VolumeErrorBuilder) *VolumeAttachmentStatusBuilder {
	b.fields.DetachError = value
	return b
}

// RemoveDetachError removes the DetachError field from the declarative configuration.
func (b *VolumeAttachmentStatusBuilder) RemoveDetachError() *VolumeAttachmentStatusBuilder {
	b.fields.DetachError = nil
	return b
}

// GetDetachError gets the DetachError field from the declarative configuration.
func (b *VolumeAttachmentStatusBuilder) GetDetachError() (value *VolumeErrorBuilder, ok bool) {
	return b.fields.DetachError, b.fields.DetachError != nil
}

// ToUnstructured converts VolumeAttachmentStatusBuilder to unstructured.
func (b *VolumeAttachmentStatusBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to VolumeAttachmentStatusBuilder, replacing the contents
// of VolumeAttachmentStatusBuilder.
func (b *VolumeAttachmentStatusBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &volumeAttachmentStatusFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals VolumeAttachmentStatusBuilder to JSON.
func (b *VolumeAttachmentStatusBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into VolumeAttachmentStatusBuilder, replacing the contents of
// VolumeAttachmentStatusBuilder.
func (b *VolumeAttachmentStatusBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// VolumeAttachmentStatusList represents a list of VolumeAttachmentStatusBuilder.
type VolumeAttachmentStatusList []*VolumeAttachmentStatusBuilder

// VolumeAttachmentStatusList represents a map of VolumeAttachmentStatusBuilder.
type VolumeAttachmentStatusMap map[string]VolumeAttachmentStatusBuilder

func (b *VolumeAttachmentStatusBuilder) preMarshal() {
}
func (b *VolumeAttachmentStatusBuilder) postUnmarshal() {
}
