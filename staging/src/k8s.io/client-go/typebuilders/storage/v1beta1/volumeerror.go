/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// VolumeErrorBuilder represents an declarative configuration of the VolumeError type for use
// with apply.
type VolumeErrorBuilder struct {
	fields volumeErrorFields
}

// volumeErrorFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in VolumeErrorBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type volumeErrorFields struct {
	Time    *v1.Time `json:"time,omitempty"`
	Message *string  `json:"message,omitempty"`
}

// VolumeError constructs an declarative configuration of the VolumeError type for use with
// apply.
func VolumeError() *VolumeErrorBuilder {
	return &VolumeErrorBuilder{}
}

// SetTime sets the Time field in the declarative configuration to the given value.
func (b *VolumeErrorBuilder) SetTime(value v1.Time) *VolumeErrorBuilder {
	b.fields.Time = &value
	return b
}

// RemoveTime removes the Time field from the declarative configuration.
func (b *VolumeErrorBuilder) RemoveTime() *VolumeErrorBuilder {
	b.fields.Time = nil
	return b
}

// GetTime gets the Time field from the declarative configuration.
func (b *VolumeErrorBuilder) GetTime() (value v1.Time, ok bool) {
	if v := b.fields.Time; v != nil {
		return *v, true
	}
	return value, false
}

// SetMessage sets the Message field in the declarative configuration to the given value.
func (b *VolumeErrorBuilder) SetMessage(value string) *VolumeErrorBuilder {
	b.fields.Message = &value
	return b
}

// RemoveMessage removes the Message field from the declarative configuration.
func (b *VolumeErrorBuilder) RemoveMessage() *VolumeErrorBuilder {
	b.fields.Message = nil
	return b
}

// GetMessage gets the Message field from the declarative configuration.
func (b *VolumeErrorBuilder) GetMessage() (value string, ok bool) {
	if v := b.fields.Message; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts VolumeErrorBuilder to unstructured.
func (b *VolumeErrorBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to VolumeErrorBuilder, replacing the contents
// of VolumeErrorBuilder.
func (b *VolumeErrorBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &volumeErrorFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals VolumeErrorBuilder to JSON.
func (b *VolumeErrorBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into VolumeErrorBuilder, replacing the contents of
// VolumeErrorBuilder.
func (b *VolumeErrorBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// VolumeErrorList represents a list of VolumeErrorBuilder.
type VolumeErrorList []*VolumeErrorBuilder

// VolumeErrorList represents a map of VolumeErrorBuilder.
type VolumeErrorMap map[string]VolumeErrorBuilder

func (b *VolumeErrorBuilder) preMarshal() {
}
func (b *VolumeErrorBuilder) postUnmarshal() {
}
