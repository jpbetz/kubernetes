/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// CSINodeSpecBuilder represents an declarative configuration of the CSINodeSpec type for use
// with apply.
type CSINodeSpecBuilder struct {
	fields *cSINodeSpecFields
}

// cSINodeSpecFields is used by CSINodeSpecBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in CSINodeSpecBuilder before marshalling, and
// are copied out to the builder type in CSINodeSpecBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type cSINodeSpecFields struct {
	Drivers *CSINodeDriverList `json:"drivers,omitempty"`
}

func (b *CSINodeSpecBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &cSINodeSpecFields{}
	}
}

// CSINodeSpec constructs an declarative configuration of the CSINodeSpec type for use with
// apply.
// Provided as a convenience.
func CSINodeSpec() CSINodeSpecBuilder {
	return CSINodeSpecBuilder{fields: &cSINodeSpecFields{}}
}

// SetDrivers sets the Drivers field in the declarative configuration to the given value.
func (b CSINodeSpecBuilder) SetDrivers(value CSINodeDriverList) CSINodeSpecBuilder {
	b.ensureInitialized()
	b.fields.Drivers = &value
	return b
}

// RemoveDrivers removes the Drivers field from the declarative configuration.
func (b CSINodeSpecBuilder) RemoveDrivers() CSINodeSpecBuilder {
	b.ensureInitialized()
	b.fields.Drivers = nil
	return b
}

// GetDrivers gets the Drivers field from the declarative configuration.
func (b CSINodeSpecBuilder) GetDrivers() (value CSINodeDriverList, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Drivers; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts CSINodeSpecBuilder to unstructured.
func (b *CSINodeSpecBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to CSINodeSpecBuilder, replacing the contents
// of CSINodeSpecBuilder.
func (b *CSINodeSpecBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &cSINodeSpecFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals CSINodeSpecBuilder to JSON.
func (b *CSINodeSpecBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into CSINodeSpecBuilder, replacing the contents of
// CSINodeSpecBuilder.
func (b *CSINodeSpecBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// CSINodeSpecList represents a list of CSINodeSpecBuilder.
// Provided as a convenience.
type CSINodeSpecList []CSINodeSpecBuilder

// CSINodeSpecList represents a map of CSINodeSpecBuilder.
// Provided as a convenience.
type CSINodeSpecMap map[string]CSINodeSpecBuilder

func (b *CSINodeSpecBuilder) preMarshal() {
}
func (b *CSINodeSpecBuilder) postUnmarshal() {
}
