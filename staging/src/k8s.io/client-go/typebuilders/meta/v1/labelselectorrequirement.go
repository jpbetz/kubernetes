/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// LabelSelectorRequirementBuilder represents an declarative configuration of the LabelSelectorRequirement type for use
// with apply.
type LabelSelectorRequirementBuilder struct {
	fields labelSelectorRequirementFields
}

// labelSelectorRequirementFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in LabelSelectorRequirementBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type labelSelectorRequirementFields struct {
	Key      *string                   `json:"key,omitempty"`
	Operator *v1.LabelSelectorOperator `json:"operator,omitempty"`
	Values   *[]string                 `json:"values,omitempty"`
}

// LabelSelectorRequirement constructs an declarative configuration of the LabelSelectorRequirement type for use with
// apply.
func LabelSelectorRequirement() *LabelSelectorRequirementBuilder {
	return &LabelSelectorRequirementBuilder{}
}

// SetKey sets the Key field in the declarative configuration to the given value.
func (b *LabelSelectorRequirementBuilder) SetKey(value string) *LabelSelectorRequirementBuilder {
	b.fields.Key = &value
	return b
}

// RemoveKey removes the Key field from the declarative configuration.
func (b *LabelSelectorRequirementBuilder) RemoveKey() *LabelSelectorRequirementBuilder {
	b.fields.Key = nil
	return b
}

// GetKey gets the Key field from the declarative configuration.
func (b *LabelSelectorRequirementBuilder) GetKey() (value string, ok bool) {
	if v := b.fields.Key; v != nil {
		return *v, true
	}
	return value, false
}

// SetOperator sets the Operator field in the declarative configuration to the given value.
func (b *LabelSelectorRequirementBuilder) SetOperator(value v1.LabelSelectorOperator) *LabelSelectorRequirementBuilder {
	b.fields.Operator = &value
	return b
}

// RemoveOperator removes the Operator field from the declarative configuration.
func (b *LabelSelectorRequirementBuilder) RemoveOperator() *LabelSelectorRequirementBuilder {
	b.fields.Operator = nil
	return b
}

// GetOperator gets the Operator field from the declarative configuration.
func (b *LabelSelectorRequirementBuilder) GetOperator() (value v1.LabelSelectorOperator, ok bool) {
	if v := b.fields.Operator; v != nil {
		return *v, true
	}
	return value, false
}

// SetValues sets the Values field in the declarative configuration to the given value.
func (b *LabelSelectorRequirementBuilder) SetValues(value []string) *LabelSelectorRequirementBuilder {
	b.fields.Values = &value
	return b
}

// RemoveValues removes the Values field from the declarative configuration.
func (b *LabelSelectorRequirementBuilder) RemoveValues() *LabelSelectorRequirementBuilder {
	b.fields.Values = nil
	return b
}

// GetValues gets the Values field from the declarative configuration.
func (b *LabelSelectorRequirementBuilder) GetValues() (value []string, ok bool) {
	if v := b.fields.Values; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts LabelSelectorRequirementBuilder to unstructured.
func (b *LabelSelectorRequirementBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to LabelSelectorRequirementBuilder, replacing the contents
// of LabelSelectorRequirementBuilder.
func (b *LabelSelectorRequirementBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &labelSelectorRequirementFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals LabelSelectorRequirementBuilder to JSON.
func (b *LabelSelectorRequirementBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into LabelSelectorRequirementBuilder, replacing the contents of
// LabelSelectorRequirementBuilder.
func (b *LabelSelectorRequirementBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// LabelSelectorRequirementList represents a list of LabelSelectorRequirementBuilder.
type LabelSelectorRequirementList []*LabelSelectorRequirementBuilder

// LabelSelectorRequirementList represents a map of LabelSelectorRequirementBuilder.
type LabelSelectorRequirementMap map[string]LabelSelectorRequirementBuilder

func (b *LabelSelectorRequirementBuilder) preMarshal() {
}
func (b *LabelSelectorRequirementBuilder) postUnmarshal() {
}
