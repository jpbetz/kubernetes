/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
	types "k8s.io/apimachinery/pkg/types"
)

// PreconditionsBuilder represents an declarative configuration of the Preconditions type for use
// with apply.
type PreconditionsBuilder struct {
	fields *preconditionsFields
}

// preconditionsFields is used by PreconditionsBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in PreconditionsBuilder before marshalling, and
// are copied out to the builder type in PreconditionsBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type preconditionsFields struct {
	UID             *types.UID `json:"uid,omitempty"`
	ResourceVersion *string    `json:"resourceVersion,omitempty"`
}

func (b *PreconditionsBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &preconditionsFields{}
	}
}

// Preconditions constructs an declarative configuration of the Preconditions type for use with
// apply.
// Provided as a convenience.
func Preconditions() PreconditionsBuilder {
	return PreconditionsBuilder{fields: &preconditionsFields{}}
}

// SetUID sets the UID field in the declarative configuration to the given value.
func (b PreconditionsBuilder) SetUID(value types.UID) PreconditionsBuilder {
	b.ensureInitialized()
	b.fields.UID = &value
	return b
}

// RemoveUID removes the UID field from the declarative configuration.
func (b PreconditionsBuilder) RemoveUID() PreconditionsBuilder {
	b.ensureInitialized()
	b.fields.UID = nil
	return b
}

// GetUID gets the UID field from the declarative configuration.
func (b PreconditionsBuilder) GetUID() (value types.UID, ok bool) {
	b.ensureInitialized()
	if v := b.fields.UID; v != nil {
		return *v, true
	}
	return value, false
}

// SetResourceVersion sets the ResourceVersion field in the declarative configuration to the given value.
func (b PreconditionsBuilder) SetResourceVersion(value string) PreconditionsBuilder {
	b.ensureInitialized()
	b.fields.ResourceVersion = &value
	return b
}

// RemoveResourceVersion removes the ResourceVersion field from the declarative configuration.
func (b PreconditionsBuilder) RemoveResourceVersion() PreconditionsBuilder {
	b.ensureInitialized()
	b.fields.ResourceVersion = nil
	return b
}

// GetResourceVersion gets the ResourceVersion field from the declarative configuration.
func (b PreconditionsBuilder) GetResourceVersion() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.ResourceVersion; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts PreconditionsBuilder to unstructured.
func (b *PreconditionsBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to PreconditionsBuilder, replacing the contents
// of PreconditionsBuilder.
func (b *PreconditionsBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &preconditionsFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals PreconditionsBuilder to JSON.
func (b *PreconditionsBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into PreconditionsBuilder, replacing the contents of
// PreconditionsBuilder.
func (b *PreconditionsBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// PreconditionsList represents a list of PreconditionsBuilder.
// Provided as a convenience.
type PreconditionsList []PreconditionsBuilder

// PreconditionsList represents a map of PreconditionsBuilder.
// Provided as a convenience.
type PreconditionsMap map[string]PreconditionsBuilder

func (b *PreconditionsBuilder) preMarshal() {
}
func (b *PreconditionsBuilder) postUnmarshal() {
}
