/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// TypeMetaApplyConfiguration represents an declarative configuration of the TypeMeta type for use
// with apply.
type TypeMetaApplyConfiguration struct {
	fields typeMetaFields
}

// TypeMetaApplyConfiguration constructs an declarative configuration of the TypeMeta type for use with
// apply.
func TypeMeta() *TypeMetaApplyConfiguration {
	return &TypeMetaApplyConfiguration{}
}

// typeMetaFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in TypeMetaApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type typeMetaFields struct {
	Kind       *string `json:"kind,omitempty"`
	APIVersion *string `json:"apiVersion,omitempty"`
}

// SetKind sets the Kind field in the declarative configuration to the given value.
func (b *TypeMetaApplyConfiguration) SetKind(value string) *TypeMetaApplyConfiguration {
	b.fields.Kind = &value
	return b
}

// RemoveKind removes the Kind field from the declarative configuration.
func (b *TypeMetaApplyConfiguration) RemoveKind() *TypeMetaApplyConfiguration {
	b.fields.Kind = nil
	return b
}

// GetKind gets the Kind field from the declarative configuration.
func (b *TypeMetaApplyConfiguration) GetKind() (value string, ok bool) {
	if v := b.fields.Kind; v != nil {
		return *v, true
	}
	return value, false
}

// SetAPIVersion sets the APIVersion field in the declarative configuration to the given value.
func (b *TypeMetaApplyConfiguration) SetAPIVersion(value string) *TypeMetaApplyConfiguration {
	b.fields.APIVersion = &value
	return b
}

// RemoveAPIVersion removes the APIVersion field from the declarative configuration.
func (b *TypeMetaApplyConfiguration) RemoveAPIVersion() *TypeMetaApplyConfiguration {
	b.fields.APIVersion = nil
	return b
}

// GetAPIVersion gets the APIVersion field from the declarative configuration.
func (b *TypeMetaApplyConfiguration) GetAPIVersion() (value string, ok bool) {
	if v := b.fields.APIVersion; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts TypeMetaApplyConfiguration to unstructured.
func (b *TypeMetaApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to TypeMetaApplyConfiguration, replacing the contents
// of TypeMetaApplyConfiguration.
func (b *TypeMetaApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &typeMetaFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals TypeMetaApplyConfiguration to JSON.
func (b *TypeMetaApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into TypeMetaApplyConfiguration, replacing the contents of
// TypeMetaApplyConfiguration.
func (b *TypeMetaApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// TypeMetaList represents a listAlias of TypeMetaApplyConfiguration.
type TypeMetaList []*TypeMetaApplyConfiguration

// TypeMetaList represents a map of TypeMetaApplyConfiguration.
type TypeMetaMap map[string]TypeMetaApplyConfiguration

func (b *TypeMetaApplyConfiguration) preMarshal() {
}
func (b *TypeMetaApplyConfiguration) postUnmarshal() {
}
