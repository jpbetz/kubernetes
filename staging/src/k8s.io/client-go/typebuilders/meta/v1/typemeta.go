/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// TypeMetaBuilder represents an declarative configuration of the TypeMeta type for use
// with apply.
type TypeMetaBuilder struct {
	fields *typeMetaFields
}

// typeMetaFields is used by TypeMetaBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in TypeMetaBuilder before marshalling, and
// are copied out to the builder type in TypeMetaBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type typeMetaFields struct {
	Kind       *string `json:"kind,omitempty"`
	APIVersion *string `json:"apiVersion,omitempty"`
}

func (b *TypeMetaBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &typeMetaFields{}
	}
}

// TypeMeta constructs an declarative configuration of the TypeMeta type for use with
// apply.
// Provided as a convenience.
func TypeMeta() TypeMetaBuilder {
	return TypeMetaBuilder{fields: &typeMetaFields{}}
}

// SetKind sets the Kind field in the declarative configuration to the given value.
func (b TypeMetaBuilder) SetKind(value string) TypeMetaBuilder {
	b.ensureInitialized()
	b.fields.Kind = &value
	return b
}

// RemoveKind removes the Kind field from the declarative configuration.
func (b TypeMetaBuilder) RemoveKind() TypeMetaBuilder {
	b.ensureInitialized()
	b.fields.Kind = nil
	return b
}

// GetKind gets the Kind field from the declarative configuration.
func (b TypeMetaBuilder) GetKind() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Kind; v != nil {
		return *v, true
	}
	return value, false
}

// SetAPIVersion sets the APIVersion field in the declarative configuration to the given value.
func (b TypeMetaBuilder) SetAPIVersion(value string) TypeMetaBuilder {
	b.ensureInitialized()
	b.fields.APIVersion = &value
	return b
}

// RemoveAPIVersion removes the APIVersion field from the declarative configuration.
func (b TypeMetaBuilder) RemoveAPIVersion() TypeMetaBuilder {
	b.ensureInitialized()
	b.fields.APIVersion = nil
	return b
}

// GetAPIVersion gets the APIVersion field from the declarative configuration.
func (b TypeMetaBuilder) GetAPIVersion() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.APIVersion; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts TypeMetaBuilder to unstructured.
func (b *TypeMetaBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to TypeMetaBuilder, replacing the contents
// of TypeMetaBuilder.
func (b *TypeMetaBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &typeMetaFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals TypeMetaBuilder to JSON.
func (b *TypeMetaBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into TypeMetaBuilder, replacing the contents of
// TypeMetaBuilder.
func (b *TypeMetaBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// TypeMetaList represents a list of TypeMetaBuilder.
// Provided as a convenience.
type TypeMetaList []TypeMetaBuilder

// TypeMetaList represents a map of TypeMetaBuilder.
// Provided as a convenience.
type TypeMetaMap map[string]TypeMetaBuilder

func (b *TypeMetaBuilder) preMarshal() {
}
func (b *TypeMetaBuilder) postUnmarshal() {
}
