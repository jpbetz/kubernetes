/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// LabelSelectorBuilder represents an declarative configuration of the LabelSelector type for use
// with apply.
type LabelSelectorBuilder struct {
	fields *labelSelectorFields
}

// labelSelectorFields is used by LabelSelectorBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in LabelSelectorBuilder before marshalling, and
// are copied out to the builder type in LabelSelectorBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type labelSelectorFields struct {
	MatchLabels      *map[string]string            `json:"matchLabels,omitempty"`
	MatchExpressions *LabelSelectorRequirementList `json:"matchExpressions,omitempty"`
}

func (b *LabelSelectorBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &labelSelectorFields{}
	}
}

// LabelSelector constructs an declarative configuration of the LabelSelector type for use with
// apply.
// Provided as a convenience.
func LabelSelector() LabelSelectorBuilder {
	return LabelSelectorBuilder{fields: &labelSelectorFields{}}
}

// SetMatchLabels sets the MatchLabels field in the declarative configuration to the given value.
func (b LabelSelectorBuilder) SetMatchLabels(value map[string]string) LabelSelectorBuilder {
	b.ensureInitialized()
	b.fields.MatchLabels = &value
	return b
}

// RemoveMatchLabels removes the MatchLabels field from the declarative configuration.
func (b LabelSelectorBuilder) RemoveMatchLabels() LabelSelectorBuilder {
	b.ensureInitialized()
	b.fields.MatchLabels = nil
	return b
}

// GetMatchLabels gets the MatchLabels field from the declarative configuration.
func (b LabelSelectorBuilder) GetMatchLabels() (value map[string]string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.MatchLabels; v != nil {
		return *v, true
	}
	return value, false
}

// SetMatchExpressions sets the MatchExpressions field in the declarative configuration to the given value.
func (b LabelSelectorBuilder) SetMatchExpressions(value LabelSelectorRequirementList) LabelSelectorBuilder {
	b.ensureInitialized()
	b.fields.MatchExpressions = &value
	return b
}

// RemoveMatchExpressions removes the MatchExpressions field from the declarative configuration.
func (b LabelSelectorBuilder) RemoveMatchExpressions() LabelSelectorBuilder {
	b.ensureInitialized()
	b.fields.MatchExpressions = nil
	return b
}

// GetMatchExpressions gets the MatchExpressions field from the declarative configuration.
func (b LabelSelectorBuilder) GetMatchExpressions() (value LabelSelectorRequirementList, ok bool) {
	b.ensureInitialized()
	if v := b.fields.MatchExpressions; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts LabelSelectorBuilder to unstructured.
func (b *LabelSelectorBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to LabelSelectorBuilder, replacing the contents
// of LabelSelectorBuilder.
func (b *LabelSelectorBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &labelSelectorFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals LabelSelectorBuilder to JSON.
func (b *LabelSelectorBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into LabelSelectorBuilder, replacing the contents of
// LabelSelectorBuilder.
func (b *LabelSelectorBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// LabelSelectorList represents a list of LabelSelectorBuilder.
// Provided as a convenience.
type LabelSelectorList []LabelSelectorBuilder

// LabelSelectorList represents a map of LabelSelectorBuilder.
// Provided as a convenience.
type LabelSelectorMap map[string]LabelSelectorBuilder

func (b *LabelSelectorBuilder) preMarshal() {
}
func (b *LabelSelectorBuilder) postUnmarshal() {
}
