/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v2beta1

import (
	json "encoding/json"

	resource "k8s.io/apimachinery/pkg/api/resource"
	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/typebuilders/meta/v1"
)

// ObjectMetricStatusBuilder represents an declarative configuration of the ObjectMetricStatus type for use
// with apply.
type ObjectMetricStatusBuilder struct {
	fields *objectMetricStatusFields
}

// objectMetricStatusFields is used by ObjectMetricStatusBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in ObjectMetricStatusBuilder before marshalling, and
// are copied out to the builder type in ObjectMetricStatusBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type objectMetricStatusFields struct {
	Target       *CrossVersionObjectReferenceBuilder `json:"target,omitempty"`
	MetricName   *string                             `json:"metricName,omitempty"`
	CurrentValue *resource.Quantity                  `json:"currentValue,omitempty"`
	Selector     *v1.LabelSelectorBuilder            `json:"selector,omitempty"`
	AverageValue *resource.Quantity                  `json:"averageValue,omitempty"`
}

func (b *ObjectMetricStatusBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &objectMetricStatusFields{}
	}
}

// ObjectMetricStatus constructs an declarative configuration of the ObjectMetricStatus type for use with
// apply.
// Provided as a convenience.
func ObjectMetricStatus() ObjectMetricStatusBuilder {
	return ObjectMetricStatusBuilder{fields: &objectMetricStatusFields{}}
}

// SetTarget sets the Target field in the declarative configuration to the given value.
func (b ObjectMetricStatusBuilder) SetTarget(value CrossVersionObjectReferenceBuilder) ObjectMetricStatusBuilder {
	b.ensureInitialized()
	b.fields.Target = &value
	return b
}

// RemoveTarget removes the Target field from the declarative configuration.
func (b ObjectMetricStatusBuilder) RemoveTarget() ObjectMetricStatusBuilder {
	b.ensureInitialized()
	b.fields.Target = nil
	return b
}

// GetTarget gets the Target field from the declarative configuration.
func (b ObjectMetricStatusBuilder) GetTarget() (value CrossVersionObjectReferenceBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Target; v != nil {
		return *v, true
	}
	return value, false
}

// SetMetricName sets the MetricName field in the declarative configuration to the given value.
func (b ObjectMetricStatusBuilder) SetMetricName(value string) ObjectMetricStatusBuilder {
	b.ensureInitialized()
	b.fields.MetricName = &value
	return b
}

// RemoveMetricName removes the MetricName field from the declarative configuration.
func (b ObjectMetricStatusBuilder) RemoveMetricName() ObjectMetricStatusBuilder {
	b.ensureInitialized()
	b.fields.MetricName = nil
	return b
}

// GetMetricName gets the MetricName field from the declarative configuration.
func (b ObjectMetricStatusBuilder) GetMetricName() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.MetricName; v != nil {
		return *v, true
	}
	return value, false
}

// SetCurrentValue sets the CurrentValue field in the declarative configuration to the given value.
func (b ObjectMetricStatusBuilder) SetCurrentValue(value resource.Quantity) ObjectMetricStatusBuilder {
	b.ensureInitialized()
	b.fields.CurrentValue = &value
	return b
}

// RemoveCurrentValue removes the CurrentValue field from the declarative configuration.
func (b ObjectMetricStatusBuilder) RemoveCurrentValue() ObjectMetricStatusBuilder {
	b.ensureInitialized()
	b.fields.CurrentValue = nil
	return b
}

// GetCurrentValue gets the CurrentValue field from the declarative configuration.
func (b ObjectMetricStatusBuilder) GetCurrentValue() (value resource.Quantity, ok bool) {
	b.ensureInitialized()
	if v := b.fields.CurrentValue; v != nil {
		return *v, true
	}
	return value, false
}

// SetSelector sets the Selector field in the declarative configuration to the given value.
func (b ObjectMetricStatusBuilder) SetSelector(value v1.LabelSelectorBuilder) ObjectMetricStatusBuilder {
	b.ensureInitialized()
	b.fields.Selector = &value
	return b
}

// RemoveSelector removes the Selector field from the declarative configuration.
func (b ObjectMetricStatusBuilder) RemoveSelector() ObjectMetricStatusBuilder {
	b.ensureInitialized()
	b.fields.Selector = nil
	return b
}

// GetSelector gets the Selector field from the declarative configuration.
func (b ObjectMetricStatusBuilder) GetSelector() (value v1.LabelSelectorBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Selector; v != nil {
		return *v, true
	}
	return value, false
}

// SetAverageValue sets the AverageValue field in the declarative configuration to the given value.
func (b ObjectMetricStatusBuilder) SetAverageValue(value resource.Quantity) ObjectMetricStatusBuilder {
	b.ensureInitialized()
	b.fields.AverageValue = &value
	return b
}

// RemoveAverageValue removes the AverageValue field from the declarative configuration.
func (b ObjectMetricStatusBuilder) RemoveAverageValue() ObjectMetricStatusBuilder {
	b.ensureInitialized()
	b.fields.AverageValue = nil
	return b
}

// GetAverageValue gets the AverageValue field from the declarative configuration.
func (b ObjectMetricStatusBuilder) GetAverageValue() (value resource.Quantity, ok bool) {
	b.ensureInitialized()
	if v := b.fields.AverageValue; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ObjectMetricStatusBuilder to unstructured.
func (b *ObjectMetricStatusBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ObjectMetricStatusBuilder, replacing the contents
// of ObjectMetricStatusBuilder.
func (b *ObjectMetricStatusBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &objectMetricStatusFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ObjectMetricStatusBuilder to JSON.
func (b *ObjectMetricStatusBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into ObjectMetricStatusBuilder, replacing the contents of
// ObjectMetricStatusBuilder.
func (b *ObjectMetricStatusBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ObjectMetricStatusList represents a list of ObjectMetricStatusBuilder.
// Provided as a convenience.
type ObjectMetricStatusList []ObjectMetricStatusBuilder

// ObjectMetricStatusList represents a map of ObjectMetricStatusBuilder.
// Provided as a convenience.
type ObjectMetricStatusMap map[string]ObjectMetricStatusBuilder

func (b *ObjectMetricStatusBuilder) preMarshal() {
}
func (b *ObjectMetricStatusBuilder) postUnmarshal() {
}
