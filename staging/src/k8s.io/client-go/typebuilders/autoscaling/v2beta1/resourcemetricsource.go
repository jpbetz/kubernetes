/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v2beta1

import (
	json "encoding/json"

	v1 "k8s.io/api/core/v1"
	resource "k8s.io/apimachinery/pkg/api/resource"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ResourceMetricSourceBuilder represents an declarative configuration of the ResourceMetricSource type for use
// with apply.
type ResourceMetricSourceBuilder struct {
	fields *resourceMetricSourceFields
}

// resourceMetricSourceFields is used by ResourceMetricSourceBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in ResourceMetricSourceBuilder before marshalling, and
// are copied out to the builder type in ResourceMetricSourceBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type resourceMetricSourceFields struct {
	Name                     *v1.ResourceName   `json:"name,omitempty"`
	TargetAverageUtilization *int32             `json:"targetAverageUtilization,omitempty"`
	TargetAverageValue       *resource.Quantity `json:"targetAverageValue,omitempty"`
}

func (b *ResourceMetricSourceBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &resourceMetricSourceFields{}
	}
}

// ResourceMetricSource constructs an declarative configuration of the ResourceMetricSource type for use with
// apply.
// Provided as a convenience.
func ResourceMetricSource() ResourceMetricSourceBuilder {
	return ResourceMetricSourceBuilder{fields: &resourceMetricSourceFields{}}
}

// SetName sets the Name field in the declarative configuration to the given value.
func (b ResourceMetricSourceBuilder) SetName(value v1.ResourceName) ResourceMetricSourceBuilder {
	b.ensureInitialized()
	b.fields.Name = &value
	return b
}

// RemoveName removes the Name field from the declarative configuration.
func (b ResourceMetricSourceBuilder) RemoveName() ResourceMetricSourceBuilder {
	b.ensureInitialized()
	b.fields.Name = nil
	return b
}

// GetName gets the Name field from the declarative configuration.
func (b ResourceMetricSourceBuilder) GetName() (value v1.ResourceName, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Name; v != nil {
		return *v, true
	}
	return value, false
}

// SetTargetAverageUtilization sets the TargetAverageUtilization field in the declarative configuration to the given value.
func (b ResourceMetricSourceBuilder) SetTargetAverageUtilization(value int32) ResourceMetricSourceBuilder {
	b.ensureInitialized()
	b.fields.TargetAverageUtilization = &value
	return b
}

// RemoveTargetAverageUtilization removes the TargetAverageUtilization field from the declarative configuration.
func (b ResourceMetricSourceBuilder) RemoveTargetAverageUtilization() ResourceMetricSourceBuilder {
	b.ensureInitialized()
	b.fields.TargetAverageUtilization = nil
	return b
}

// GetTargetAverageUtilization gets the TargetAverageUtilization field from the declarative configuration.
func (b ResourceMetricSourceBuilder) GetTargetAverageUtilization() (value int32, ok bool) {
	b.ensureInitialized()
	if v := b.fields.TargetAverageUtilization; v != nil {
		return *v, true
	}
	return value, false
}

// SetTargetAverageValue sets the TargetAverageValue field in the declarative configuration to the given value.
func (b ResourceMetricSourceBuilder) SetTargetAverageValue(value resource.Quantity) ResourceMetricSourceBuilder {
	b.ensureInitialized()
	b.fields.TargetAverageValue = &value
	return b
}

// RemoveTargetAverageValue removes the TargetAverageValue field from the declarative configuration.
func (b ResourceMetricSourceBuilder) RemoveTargetAverageValue() ResourceMetricSourceBuilder {
	b.ensureInitialized()
	b.fields.TargetAverageValue = nil
	return b
}

// GetTargetAverageValue gets the TargetAverageValue field from the declarative configuration.
func (b ResourceMetricSourceBuilder) GetTargetAverageValue() (value resource.Quantity, ok bool) {
	b.ensureInitialized()
	if v := b.fields.TargetAverageValue; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ResourceMetricSourceBuilder to unstructured.
func (b *ResourceMetricSourceBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ResourceMetricSourceBuilder, replacing the contents
// of ResourceMetricSourceBuilder.
func (b *ResourceMetricSourceBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &resourceMetricSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ResourceMetricSourceBuilder to JSON.
func (b *ResourceMetricSourceBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into ResourceMetricSourceBuilder, replacing the contents of
// ResourceMetricSourceBuilder.
func (b *ResourceMetricSourceBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ResourceMetricSourceList represents a list of ResourceMetricSourceBuilder.
// Provided as a convenience.
type ResourceMetricSourceList []ResourceMetricSourceBuilder

// ResourceMetricSourceList represents a map of ResourceMetricSourceBuilder.
// Provided as a convenience.
type ResourceMetricSourceMap map[string]ResourceMetricSourceBuilder

func (b *ResourceMetricSourceBuilder) preMarshal() {
}
func (b *ResourceMetricSourceBuilder) postUnmarshal() {
}
