/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v2beta2

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ExternalMetricSourceBuilder represents an declarative configuration of the ExternalMetricSource type for use
// with apply.
type ExternalMetricSourceBuilder struct {
	fields *externalMetricSourceFields
}

// externalMetricSourceFields is used by ExternalMetricSourceBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in ExternalMetricSourceBuilder before marshalling, and
// are copied out to the builder type in ExternalMetricSourceBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type externalMetricSourceFields struct {
	Metric *MetricIdentifierBuilder `json:"metric,omitempty"`
	Target *MetricTargetBuilder     `json:"target,omitempty"`
}

func (b *ExternalMetricSourceBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &externalMetricSourceFields{}
	}
}

// ExternalMetricSource constructs an declarative configuration of the ExternalMetricSource type for use with
// apply.
// Provided as a convenience.
func ExternalMetricSource() ExternalMetricSourceBuilder {
	return ExternalMetricSourceBuilder{fields: &externalMetricSourceFields{}}
}

// SetMetric sets the Metric field in the declarative configuration to the given value.
func (b ExternalMetricSourceBuilder) SetMetric(value MetricIdentifierBuilder) ExternalMetricSourceBuilder {
	b.ensureInitialized()
	b.fields.Metric = &value
	return b
}

// RemoveMetric removes the Metric field from the declarative configuration.
func (b ExternalMetricSourceBuilder) RemoveMetric() ExternalMetricSourceBuilder {
	b.ensureInitialized()
	b.fields.Metric = nil
	return b
}

// GetMetric gets the Metric field from the declarative configuration.
func (b ExternalMetricSourceBuilder) GetMetric() (value MetricIdentifierBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Metric; v != nil {
		return *v, true
	}
	return value, false
}

// SetTarget sets the Target field in the declarative configuration to the given value.
func (b ExternalMetricSourceBuilder) SetTarget(value MetricTargetBuilder) ExternalMetricSourceBuilder {
	b.ensureInitialized()
	b.fields.Target = &value
	return b
}

// RemoveTarget removes the Target field from the declarative configuration.
func (b ExternalMetricSourceBuilder) RemoveTarget() ExternalMetricSourceBuilder {
	b.ensureInitialized()
	b.fields.Target = nil
	return b
}

// GetTarget gets the Target field from the declarative configuration.
func (b ExternalMetricSourceBuilder) GetTarget() (value MetricTargetBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Target; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ExternalMetricSourceBuilder to unstructured.
func (b *ExternalMetricSourceBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ExternalMetricSourceBuilder, replacing the contents
// of ExternalMetricSourceBuilder.
func (b *ExternalMetricSourceBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &externalMetricSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ExternalMetricSourceBuilder to JSON.
func (b *ExternalMetricSourceBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into ExternalMetricSourceBuilder, replacing the contents of
// ExternalMetricSourceBuilder.
func (b *ExternalMetricSourceBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ExternalMetricSourceList represents a list of ExternalMetricSourceBuilder.
// Provided as a convenience.
type ExternalMetricSourceList []ExternalMetricSourceBuilder

// ExternalMetricSourceList represents a map of ExternalMetricSourceBuilder.
// Provided as a convenience.
type ExternalMetricSourceMap map[string]ExternalMetricSourceBuilder

func (b *ExternalMetricSourceBuilder) preMarshal() {
}
func (b *ExternalMetricSourceBuilder) postUnmarshal() {
}
