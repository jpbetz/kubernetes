/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v2beta2

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ObjectMetricStatusBuilder represents an declarative configuration of the ObjectMetricStatus type for use
// with apply.
type ObjectMetricStatusBuilder struct {
	fields *objectMetricStatusFields
}

// objectMetricStatusFields is used by ObjectMetricStatusBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in ObjectMetricStatusBuilder before marshalling, and
// are copied out to the builder type in ObjectMetricStatusBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type objectMetricStatusFields struct {
	Metric          *MetricIdentifierBuilder            `json:"metric,omitempty"`
	Current         *MetricValueStatusBuilder           `json:"current,omitempty"`
	DescribedObject *CrossVersionObjectReferenceBuilder `json:"describedObject,omitempty"`
}

func (b *ObjectMetricStatusBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &objectMetricStatusFields{}
	}
}

// ObjectMetricStatus constructs an declarative configuration of the ObjectMetricStatus type for use with
// apply.
// Provided as a convenience.
func ObjectMetricStatus() ObjectMetricStatusBuilder {
	return ObjectMetricStatusBuilder{fields: &objectMetricStatusFields{}}
}

// SetMetric sets the Metric field in the declarative configuration to the given value.
func (b ObjectMetricStatusBuilder) SetMetric(value MetricIdentifierBuilder) ObjectMetricStatusBuilder {
	b.ensureInitialized()
	b.fields.Metric = &value
	return b
}

// RemoveMetric removes the Metric field from the declarative configuration.
func (b ObjectMetricStatusBuilder) RemoveMetric() ObjectMetricStatusBuilder {
	b.ensureInitialized()
	b.fields.Metric = nil
	return b
}

// GetMetric gets the Metric field from the declarative configuration.
func (b ObjectMetricStatusBuilder) GetMetric() (value MetricIdentifierBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Metric; v != nil {
		return *v, true
	}
	return value, false
}

// SetCurrent sets the Current field in the declarative configuration to the given value.
func (b ObjectMetricStatusBuilder) SetCurrent(value MetricValueStatusBuilder) ObjectMetricStatusBuilder {
	b.ensureInitialized()
	b.fields.Current = &value
	return b
}

// RemoveCurrent removes the Current field from the declarative configuration.
func (b ObjectMetricStatusBuilder) RemoveCurrent() ObjectMetricStatusBuilder {
	b.ensureInitialized()
	b.fields.Current = nil
	return b
}

// GetCurrent gets the Current field from the declarative configuration.
func (b ObjectMetricStatusBuilder) GetCurrent() (value MetricValueStatusBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Current; v != nil {
		return *v, true
	}
	return value, false
}

// SetDescribedObject sets the DescribedObject field in the declarative configuration to the given value.
func (b ObjectMetricStatusBuilder) SetDescribedObject(value CrossVersionObjectReferenceBuilder) ObjectMetricStatusBuilder {
	b.ensureInitialized()
	b.fields.DescribedObject = &value
	return b
}

// RemoveDescribedObject removes the DescribedObject field from the declarative configuration.
func (b ObjectMetricStatusBuilder) RemoveDescribedObject() ObjectMetricStatusBuilder {
	b.ensureInitialized()
	b.fields.DescribedObject = nil
	return b
}

// GetDescribedObject gets the DescribedObject field from the declarative configuration.
func (b ObjectMetricStatusBuilder) GetDescribedObject() (value CrossVersionObjectReferenceBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.DescribedObject; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ObjectMetricStatusBuilder to unstructured.
func (b *ObjectMetricStatusBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ObjectMetricStatusBuilder, replacing the contents
// of ObjectMetricStatusBuilder.
func (b *ObjectMetricStatusBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &objectMetricStatusFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ObjectMetricStatusBuilder to JSON.
func (b *ObjectMetricStatusBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into ObjectMetricStatusBuilder, replacing the contents of
// ObjectMetricStatusBuilder.
func (b *ObjectMetricStatusBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ObjectMetricStatusList represents a list of ObjectMetricStatusBuilder.
// Provided as a convenience.
type ObjectMetricStatusList []ObjectMetricStatusBuilder

// ObjectMetricStatusList represents a map of ObjectMetricStatusBuilder.
// Provided as a convenience.
type ObjectMetricStatusMap map[string]ObjectMetricStatusBuilder

func (b *ObjectMetricStatusBuilder) preMarshal() {
}
func (b *ObjectMetricStatusBuilder) postUnmarshal() {
}
