/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v2beta2

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ObjectMetricSourceBuilder represents an declarative configuration of the ObjectMetricSource type for use
// with apply.
type ObjectMetricSourceBuilder struct {
	fields *objectMetricSourceFields
}

// objectMetricSourceFields is used by ObjectMetricSourceBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in ObjectMetricSourceBuilder before marshalling, and
// are copied out to the builder type in ObjectMetricSourceBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type objectMetricSourceFields struct {
	DescribedObject *CrossVersionObjectReferenceBuilder `json:"describedObject,omitempty"`
	Target          *MetricTargetBuilder                `json:"target,omitempty"`
	Metric          *MetricIdentifierBuilder            `json:"metric,omitempty"`
}

func (b *ObjectMetricSourceBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &objectMetricSourceFields{}
	}
}

// ObjectMetricSource constructs an declarative configuration of the ObjectMetricSource type for use with
// apply.
// Provided as a convenience.
func ObjectMetricSource() ObjectMetricSourceBuilder {
	return ObjectMetricSourceBuilder{fields: &objectMetricSourceFields{}}
}

// SetDescribedObject sets the DescribedObject field in the declarative configuration to the given value.
func (b ObjectMetricSourceBuilder) SetDescribedObject(value CrossVersionObjectReferenceBuilder) ObjectMetricSourceBuilder {
	b.ensureInitialized()
	b.fields.DescribedObject = &value
	return b
}

// RemoveDescribedObject removes the DescribedObject field from the declarative configuration.
func (b ObjectMetricSourceBuilder) RemoveDescribedObject() ObjectMetricSourceBuilder {
	b.ensureInitialized()
	b.fields.DescribedObject = nil
	return b
}

// GetDescribedObject gets the DescribedObject field from the declarative configuration.
func (b ObjectMetricSourceBuilder) GetDescribedObject() (value CrossVersionObjectReferenceBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.DescribedObject; v != nil {
		return *v, true
	}
	return value, false
}

// SetTarget sets the Target field in the declarative configuration to the given value.
func (b ObjectMetricSourceBuilder) SetTarget(value MetricTargetBuilder) ObjectMetricSourceBuilder {
	b.ensureInitialized()
	b.fields.Target = &value
	return b
}

// RemoveTarget removes the Target field from the declarative configuration.
func (b ObjectMetricSourceBuilder) RemoveTarget() ObjectMetricSourceBuilder {
	b.ensureInitialized()
	b.fields.Target = nil
	return b
}

// GetTarget gets the Target field from the declarative configuration.
func (b ObjectMetricSourceBuilder) GetTarget() (value MetricTargetBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Target; v != nil {
		return *v, true
	}
	return value, false
}

// SetMetric sets the Metric field in the declarative configuration to the given value.
func (b ObjectMetricSourceBuilder) SetMetric(value MetricIdentifierBuilder) ObjectMetricSourceBuilder {
	b.ensureInitialized()
	b.fields.Metric = &value
	return b
}

// RemoveMetric removes the Metric field from the declarative configuration.
func (b ObjectMetricSourceBuilder) RemoveMetric() ObjectMetricSourceBuilder {
	b.ensureInitialized()
	b.fields.Metric = nil
	return b
}

// GetMetric gets the Metric field from the declarative configuration.
func (b ObjectMetricSourceBuilder) GetMetric() (value MetricIdentifierBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Metric; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ObjectMetricSourceBuilder to unstructured.
func (b *ObjectMetricSourceBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ObjectMetricSourceBuilder, replacing the contents
// of ObjectMetricSourceBuilder.
func (b *ObjectMetricSourceBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &objectMetricSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ObjectMetricSourceBuilder to JSON.
func (b *ObjectMetricSourceBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into ObjectMetricSourceBuilder, replacing the contents of
// ObjectMetricSourceBuilder.
func (b *ObjectMetricSourceBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ObjectMetricSourceList represents a list of ObjectMetricSourceBuilder.
// Provided as a convenience.
type ObjectMetricSourceList []ObjectMetricSourceBuilder

// ObjectMetricSourceList represents a map of ObjectMetricSourceBuilder.
// Provided as a convenience.
type ObjectMetricSourceMap map[string]ObjectMetricSourceBuilder

func (b *ObjectMetricSourceBuilder) preMarshal() {
}
func (b *ObjectMetricSourceBuilder) postUnmarshal() {
}
