/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"

	v1beta1 "k8s.io/api/extensions/v1beta1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// RunAsUserStrategyOptionsBuilder represents an declarative configuration of the RunAsUserStrategyOptions type for use
// with apply.
type RunAsUserStrategyOptionsBuilder struct {
	fields *runAsUserStrategyOptionsFields
}

// runAsUserStrategyOptionsFields is used by RunAsUserStrategyOptionsBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in RunAsUserStrategyOptionsBuilder before marshalling, and
// are copied out to the builder type in RunAsUserStrategyOptionsBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type runAsUserStrategyOptionsFields struct {
	Rule   *v1beta1.RunAsUserStrategy `json:"rule,omitempty"`
	Ranges *IDRangeList               `json:"ranges,omitempty"`
}

func (b *RunAsUserStrategyOptionsBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &runAsUserStrategyOptionsFields{}
	}
}

// RunAsUserStrategyOptions constructs an declarative configuration of the RunAsUserStrategyOptions type for use with
// apply.
// Provided as a convenience.
func RunAsUserStrategyOptions() RunAsUserStrategyOptionsBuilder {
	return RunAsUserStrategyOptionsBuilder{fields: &runAsUserStrategyOptionsFields{}}
}

// SetRule sets the Rule field in the declarative configuration to the given value.
func (b RunAsUserStrategyOptionsBuilder) SetRule(value v1beta1.RunAsUserStrategy) RunAsUserStrategyOptionsBuilder {
	b.ensureInitialized()
	b.fields.Rule = &value
	return b
}

// RemoveRule removes the Rule field from the declarative configuration.
func (b RunAsUserStrategyOptionsBuilder) RemoveRule() RunAsUserStrategyOptionsBuilder {
	b.ensureInitialized()
	b.fields.Rule = nil
	return b
}

// GetRule gets the Rule field from the declarative configuration.
func (b RunAsUserStrategyOptionsBuilder) GetRule() (value v1beta1.RunAsUserStrategy, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Rule; v != nil {
		return *v, true
	}
	return value, false
}

// SetRanges sets the Ranges field in the declarative configuration to the given value.
func (b RunAsUserStrategyOptionsBuilder) SetRanges(value IDRangeList) RunAsUserStrategyOptionsBuilder {
	b.ensureInitialized()
	b.fields.Ranges = &value
	return b
}

// RemoveRanges removes the Ranges field from the declarative configuration.
func (b RunAsUserStrategyOptionsBuilder) RemoveRanges() RunAsUserStrategyOptionsBuilder {
	b.ensureInitialized()
	b.fields.Ranges = nil
	return b
}

// GetRanges gets the Ranges field from the declarative configuration.
func (b RunAsUserStrategyOptionsBuilder) GetRanges() (value IDRangeList, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Ranges; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts RunAsUserStrategyOptionsBuilder to unstructured.
func (b *RunAsUserStrategyOptionsBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to RunAsUserStrategyOptionsBuilder, replacing the contents
// of RunAsUserStrategyOptionsBuilder.
func (b *RunAsUserStrategyOptionsBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &runAsUserStrategyOptionsFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals RunAsUserStrategyOptionsBuilder to JSON.
func (b *RunAsUserStrategyOptionsBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into RunAsUserStrategyOptionsBuilder, replacing the contents of
// RunAsUserStrategyOptionsBuilder.
func (b *RunAsUserStrategyOptionsBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// RunAsUserStrategyOptionsList represents a list of RunAsUserStrategyOptionsBuilder.
// Provided as a convenience.
type RunAsUserStrategyOptionsList []RunAsUserStrategyOptionsBuilder

// RunAsUserStrategyOptionsList represents a map of RunAsUserStrategyOptionsBuilder.
// Provided as a convenience.
type RunAsUserStrategyOptionsMap map[string]RunAsUserStrategyOptionsBuilder

func (b *RunAsUserStrategyOptionsBuilder) preMarshal() {
}
func (b *RunAsUserStrategyOptionsBuilder) postUnmarshal() {
}
