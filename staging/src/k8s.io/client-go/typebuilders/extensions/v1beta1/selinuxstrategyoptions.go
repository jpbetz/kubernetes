/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"

	v1beta1 "k8s.io/api/extensions/v1beta1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/typebuilders/core/v1"
)

// SELinuxStrategyOptionsBuilder represents an declarative configuration of the SELinuxStrategyOptions type for use
// with apply.
type SELinuxStrategyOptionsBuilder struct {
	fields *sELinuxStrategyOptionsFields
}

// sELinuxStrategyOptionsFields is used by SELinuxStrategyOptionsBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in SELinuxStrategyOptionsBuilder before marshalling, and
// are copied out to the builder type in SELinuxStrategyOptionsBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type sELinuxStrategyOptionsFields struct {
	Rule           *v1beta1.SELinuxStrategy  `json:"rule,omitempty"`
	SELinuxOptions *v1.SELinuxOptionsBuilder `json:"seLinuxOptions,omitempty"`
}

func (b *SELinuxStrategyOptionsBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &sELinuxStrategyOptionsFields{}
	}
}

// SELinuxStrategyOptions constructs an declarative configuration of the SELinuxStrategyOptions type for use with
// apply.
// Provided as a convenience.
func SELinuxStrategyOptions() SELinuxStrategyOptionsBuilder {
	return SELinuxStrategyOptionsBuilder{fields: &sELinuxStrategyOptionsFields{}}
}

// SetRule sets the Rule field in the declarative configuration to the given value.
func (b SELinuxStrategyOptionsBuilder) SetRule(value v1beta1.SELinuxStrategy) SELinuxStrategyOptionsBuilder {
	b.ensureInitialized()
	b.fields.Rule = &value
	return b
}

// RemoveRule removes the Rule field from the declarative configuration.
func (b SELinuxStrategyOptionsBuilder) RemoveRule() SELinuxStrategyOptionsBuilder {
	b.ensureInitialized()
	b.fields.Rule = nil
	return b
}

// GetRule gets the Rule field from the declarative configuration.
func (b SELinuxStrategyOptionsBuilder) GetRule() (value v1beta1.SELinuxStrategy, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Rule; v != nil {
		return *v, true
	}
	return value, false
}

// SetSELinuxOptions sets the SELinuxOptions field in the declarative configuration to the given value.
func (b SELinuxStrategyOptionsBuilder) SetSELinuxOptions(value v1.SELinuxOptionsBuilder) SELinuxStrategyOptionsBuilder {
	b.ensureInitialized()
	b.fields.SELinuxOptions = &value
	return b
}

// RemoveSELinuxOptions removes the SELinuxOptions field from the declarative configuration.
func (b SELinuxStrategyOptionsBuilder) RemoveSELinuxOptions() SELinuxStrategyOptionsBuilder {
	b.ensureInitialized()
	b.fields.SELinuxOptions = nil
	return b
}

// GetSELinuxOptions gets the SELinuxOptions field from the declarative configuration.
func (b SELinuxStrategyOptionsBuilder) GetSELinuxOptions() (value v1.SELinuxOptionsBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.SELinuxOptions; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts SELinuxStrategyOptionsBuilder to unstructured.
func (b *SELinuxStrategyOptionsBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to SELinuxStrategyOptionsBuilder, replacing the contents
// of SELinuxStrategyOptionsBuilder.
func (b *SELinuxStrategyOptionsBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &sELinuxStrategyOptionsFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals SELinuxStrategyOptionsBuilder to JSON.
func (b *SELinuxStrategyOptionsBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into SELinuxStrategyOptionsBuilder, replacing the contents of
// SELinuxStrategyOptionsBuilder.
func (b *SELinuxStrategyOptionsBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// SELinuxStrategyOptionsList represents a list of SELinuxStrategyOptionsBuilder.
// Provided as a convenience.
type SELinuxStrategyOptionsList []SELinuxStrategyOptionsBuilder

// SELinuxStrategyOptionsList represents a map of SELinuxStrategyOptionsBuilder.
// Provided as a convenience.
type SELinuxStrategyOptionsMap map[string]SELinuxStrategyOptionsBuilder

func (b *SELinuxStrategyOptionsBuilder) preMarshal() {
}
func (b *SELinuxStrategyOptionsBuilder) postUnmarshal() {
}
