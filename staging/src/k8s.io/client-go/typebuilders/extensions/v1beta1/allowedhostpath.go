/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// AllowedHostPathBuilder represents an declarative configuration of the AllowedHostPath type for use
// with apply.
type AllowedHostPathBuilder struct {
	fields *allowedHostPathFields
}

// allowedHostPathFields is used by AllowedHostPathBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in AllowedHostPathBuilder before marshalling, and
// are copied out to the builder type in AllowedHostPathBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type allowedHostPathFields struct {
	PathPrefix *string `json:"pathPrefix,omitempty"`
	ReadOnly   *bool   `json:"readOnly,omitempty"`
}

func (b *AllowedHostPathBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &allowedHostPathFields{}
	}
}

// AllowedHostPath constructs an declarative configuration of the AllowedHostPath type for use with
// apply.
// Provided as a convenience.
func AllowedHostPath() AllowedHostPathBuilder {
	return AllowedHostPathBuilder{fields: &allowedHostPathFields{}}
}

// SetPathPrefix sets the PathPrefix field in the declarative configuration to the given value.
func (b AllowedHostPathBuilder) SetPathPrefix(value string) AllowedHostPathBuilder {
	b.ensureInitialized()
	b.fields.PathPrefix = &value
	return b
}

// RemovePathPrefix removes the PathPrefix field from the declarative configuration.
func (b AllowedHostPathBuilder) RemovePathPrefix() AllowedHostPathBuilder {
	b.ensureInitialized()
	b.fields.PathPrefix = nil
	return b
}

// GetPathPrefix gets the PathPrefix field from the declarative configuration.
func (b AllowedHostPathBuilder) GetPathPrefix() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.PathPrefix; v != nil {
		return *v, true
	}
	return value, false
}

// SetReadOnly sets the ReadOnly field in the declarative configuration to the given value.
func (b AllowedHostPathBuilder) SetReadOnly(value bool) AllowedHostPathBuilder {
	b.ensureInitialized()
	b.fields.ReadOnly = &value
	return b
}

// RemoveReadOnly removes the ReadOnly field from the declarative configuration.
func (b AllowedHostPathBuilder) RemoveReadOnly() AllowedHostPathBuilder {
	b.ensureInitialized()
	b.fields.ReadOnly = nil
	return b
}

// GetReadOnly gets the ReadOnly field from the declarative configuration.
func (b AllowedHostPathBuilder) GetReadOnly() (value bool, ok bool) {
	b.ensureInitialized()
	if v := b.fields.ReadOnly; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts AllowedHostPathBuilder to unstructured.
func (b *AllowedHostPathBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to AllowedHostPathBuilder, replacing the contents
// of AllowedHostPathBuilder.
func (b *AllowedHostPathBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &allowedHostPathFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals AllowedHostPathBuilder to JSON.
func (b *AllowedHostPathBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into AllowedHostPathBuilder, replacing the contents of
// AllowedHostPathBuilder.
func (b *AllowedHostPathBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// AllowedHostPathList represents a list of AllowedHostPathBuilder.
// Provided as a convenience.
type AllowedHostPathList []AllowedHostPathBuilder

// AllowedHostPathList represents a map of AllowedHostPathBuilder.
// Provided as a convenience.
type AllowedHostPathMap map[string]AllowedHostPathBuilder

func (b *AllowedHostPathBuilder) preMarshal() {
}
func (b *AllowedHostPathBuilder) postUnmarshal() {
}
