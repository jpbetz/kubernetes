/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/typebuilders/meta/v1"
)

// NetworkPolicyPeerBuilder represents an declarative configuration of the NetworkPolicyPeer type for use
// with apply.
type NetworkPolicyPeerBuilder struct {
	fields *networkPolicyPeerFields
}

// networkPolicyPeerFields is used by NetworkPolicyPeerBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in NetworkPolicyPeerBuilder before marshalling, and
// are copied out to the builder type in NetworkPolicyPeerBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type networkPolicyPeerFields struct {
	PodSelector       *v1.LabelSelectorBuilder `json:"podSelector,omitempty"`
	NamespaceSelector *v1.LabelSelectorBuilder `json:"namespaceSelector,omitempty"`
	IPBlock           *IPBlockBuilder          `json:"ipBlock,omitempty"`
}

func (b *NetworkPolicyPeerBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &networkPolicyPeerFields{}
	}
}

// NetworkPolicyPeer constructs an declarative configuration of the NetworkPolicyPeer type for use with
// apply.
// Provided as a convenience.
func NetworkPolicyPeer() NetworkPolicyPeerBuilder {
	return NetworkPolicyPeerBuilder{fields: &networkPolicyPeerFields{}}
}

// SetPodSelector sets the PodSelector field in the declarative configuration to the given value.
func (b NetworkPolicyPeerBuilder) SetPodSelector(value v1.LabelSelectorBuilder) NetworkPolicyPeerBuilder {
	b.ensureInitialized()
	b.fields.PodSelector = &value
	return b
}

// RemovePodSelector removes the PodSelector field from the declarative configuration.
func (b NetworkPolicyPeerBuilder) RemovePodSelector() NetworkPolicyPeerBuilder {
	b.ensureInitialized()
	b.fields.PodSelector = nil
	return b
}

// GetPodSelector gets the PodSelector field from the declarative configuration.
func (b NetworkPolicyPeerBuilder) GetPodSelector() (value v1.LabelSelectorBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.PodSelector; v != nil {
		return *v, true
	}
	return value, false
}

// SetNamespaceSelector sets the NamespaceSelector field in the declarative configuration to the given value.
func (b NetworkPolicyPeerBuilder) SetNamespaceSelector(value v1.LabelSelectorBuilder) NetworkPolicyPeerBuilder {
	b.ensureInitialized()
	b.fields.NamespaceSelector = &value
	return b
}

// RemoveNamespaceSelector removes the NamespaceSelector field from the declarative configuration.
func (b NetworkPolicyPeerBuilder) RemoveNamespaceSelector() NetworkPolicyPeerBuilder {
	b.ensureInitialized()
	b.fields.NamespaceSelector = nil
	return b
}

// GetNamespaceSelector gets the NamespaceSelector field from the declarative configuration.
func (b NetworkPolicyPeerBuilder) GetNamespaceSelector() (value v1.LabelSelectorBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.NamespaceSelector; v != nil {
		return *v, true
	}
	return value, false
}

// SetIPBlock sets the IPBlock field in the declarative configuration to the given value.
func (b NetworkPolicyPeerBuilder) SetIPBlock(value IPBlockBuilder) NetworkPolicyPeerBuilder {
	b.ensureInitialized()
	b.fields.IPBlock = &value
	return b
}

// RemoveIPBlock removes the IPBlock field from the declarative configuration.
func (b NetworkPolicyPeerBuilder) RemoveIPBlock() NetworkPolicyPeerBuilder {
	b.ensureInitialized()
	b.fields.IPBlock = nil
	return b
}

// GetIPBlock gets the IPBlock field from the declarative configuration.
func (b NetworkPolicyPeerBuilder) GetIPBlock() (value IPBlockBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.IPBlock; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts NetworkPolicyPeerBuilder to unstructured.
func (b *NetworkPolicyPeerBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to NetworkPolicyPeerBuilder, replacing the contents
// of NetworkPolicyPeerBuilder.
func (b *NetworkPolicyPeerBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &networkPolicyPeerFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals NetworkPolicyPeerBuilder to JSON.
func (b *NetworkPolicyPeerBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into NetworkPolicyPeerBuilder, replacing the contents of
// NetworkPolicyPeerBuilder.
func (b *NetworkPolicyPeerBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// NetworkPolicyPeerList represents a list of NetworkPolicyPeerBuilder.
// Provided as a convenience.
type NetworkPolicyPeerList []NetworkPolicyPeerBuilder

// NetworkPolicyPeerList represents a map of NetworkPolicyPeerBuilder.
// Provided as a convenience.
type NetworkPolicyPeerMap map[string]NetworkPolicyPeerBuilder

func (b *NetworkPolicyPeerBuilder) preMarshal() {
}
func (b *NetworkPolicyPeerBuilder) postUnmarshal() {
}
