/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// RuntimeClassStrategyOptionsBuilder represents an declarative configuration of the RuntimeClassStrategyOptions type for use
// with apply.
type RuntimeClassStrategyOptionsBuilder struct {
	fields *runtimeClassStrategyOptionsFields
}

// runtimeClassStrategyOptionsFields is used by RuntimeClassStrategyOptionsBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in RuntimeClassStrategyOptionsBuilder before marshalling, and
// are copied out to the builder type in RuntimeClassStrategyOptionsBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type runtimeClassStrategyOptionsFields struct {
	AllowedRuntimeClassNames *[]string `json:"allowedRuntimeClassNames,omitempty"`
	DefaultRuntimeClassName  *string   `json:"defaultRuntimeClassName,omitempty"`
}

func (b *RuntimeClassStrategyOptionsBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &runtimeClassStrategyOptionsFields{}
	}
}

// RuntimeClassStrategyOptions constructs an declarative configuration of the RuntimeClassStrategyOptions type for use with
// apply.
// Provided as a convenience.
func RuntimeClassStrategyOptions() RuntimeClassStrategyOptionsBuilder {
	return RuntimeClassStrategyOptionsBuilder{fields: &runtimeClassStrategyOptionsFields{}}
}

// SetAllowedRuntimeClassNames sets the AllowedRuntimeClassNames field in the declarative configuration to the given value.
func (b RuntimeClassStrategyOptionsBuilder) SetAllowedRuntimeClassNames(value []string) RuntimeClassStrategyOptionsBuilder {
	b.ensureInitialized()
	b.fields.AllowedRuntimeClassNames = &value
	return b
}

// RemoveAllowedRuntimeClassNames removes the AllowedRuntimeClassNames field from the declarative configuration.
func (b RuntimeClassStrategyOptionsBuilder) RemoveAllowedRuntimeClassNames() RuntimeClassStrategyOptionsBuilder {
	b.ensureInitialized()
	b.fields.AllowedRuntimeClassNames = nil
	return b
}

// GetAllowedRuntimeClassNames gets the AllowedRuntimeClassNames field from the declarative configuration.
func (b RuntimeClassStrategyOptionsBuilder) GetAllowedRuntimeClassNames() (value []string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.AllowedRuntimeClassNames; v != nil {
		return *v, true
	}
	return value, false
}

// SetDefaultRuntimeClassName sets the DefaultRuntimeClassName field in the declarative configuration to the given value.
func (b RuntimeClassStrategyOptionsBuilder) SetDefaultRuntimeClassName(value string) RuntimeClassStrategyOptionsBuilder {
	b.ensureInitialized()
	b.fields.DefaultRuntimeClassName = &value
	return b
}

// RemoveDefaultRuntimeClassName removes the DefaultRuntimeClassName field from the declarative configuration.
func (b RuntimeClassStrategyOptionsBuilder) RemoveDefaultRuntimeClassName() RuntimeClassStrategyOptionsBuilder {
	b.ensureInitialized()
	b.fields.DefaultRuntimeClassName = nil
	return b
}

// GetDefaultRuntimeClassName gets the DefaultRuntimeClassName field from the declarative configuration.
func (b RuntimeClassStrategyOptionsBuilder) GetDefaultRuntimeClassName() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.DefaultRuntimeClassName; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts RuntimeClassStrategyOptionsBuilder to unstructured.
func (b *RuntimeClassStrategyOptionsBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to RuntimeClassStrategyOptionsBuilder, replacing the contents
// of RuntimeClassStrategyOptionsBuilder.
func (b *RuntimeClassStrategyOptionsBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &runtimeClassStrategyOptionsFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals RuntimeClassStrategyOptionsBuilder to JSON.
func (b *RuntimeClassStrategyOptionsBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into RuntimeClassStrategyOptionsBuilder, replacing the contents of
// RuntimeClassStrategyOptionsBuilder.
func (b *RuntimeClassStrategyOptionsBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// RuntimeClassStrategyOptionsList represents a list of RuntimeClassStrategyOptionsBuilder.
// Provided as a convenience.
type RuntimeClassStrategyOptionsList []RuntimeClassStrategyOptionsBuilder

// RuntimeClassStrategyOptionsList represents a map of RuntimeClassStrategyOptionsBuilder.
// Provided as a convenience.
type RuntimeClassStrategyOptionsMap map[string]RuntimeClassStrategyOptionsBuilder

func (b *RuntimeClassStrategyOptionsBuilder) preMarshal() {
}
func (b *RuntimeClassStrategyOptionsBuilder) postUnmarshal() {
}
