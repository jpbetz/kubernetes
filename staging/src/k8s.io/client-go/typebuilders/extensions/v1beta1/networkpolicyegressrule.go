/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// NetworkPolicyEgressRuleBuilder represents an declarative configuration of the NetworkPolicyEgressRule type for use
// with apply.
type NetworkPolicyEgressRuleBuilder struct {
	fields *networkPolicyEgressRuleFields
}

// networkPolicyEgressRuleFields is used by NetworkPolicyEgressRuleBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in NetworkPolicyEgressRuleBuilder before marshalling, and
// are copied out to the builder type in NetworkPolicyEgressRuleBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type networkPolicyEgressRuleFields struct {
	Ports *NetworkPolicyPortList `json:"ports,omitempty"`
	To    *NetworkPolicyPeerList `json:"to,omitempty"`
}

func (b *NetworkPolicyEgressRuleBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &networkPolicyEgressRuleFields{}
	}
}

// NetworkPolicyEgressRule constructs an declarative configuration of the NetworkPolicyEgressRule type for use with
// apply.
// Provided as a convenience.
func NetworkPolicyEgressRule() NetworkPolicyEgressRuleBuilder {
	return NetworkPolicyEgressRuleBuilder{fields: &networkPolicyEgressRuleFields{}}
}

// SetPorts sets the Ports field in the declarative configuration to the given value.
func (b NetworkPolicyEgressRuleBuilder) SetPorts(value NetworkPolicyPortList) NetworkPolicyEgressRuleBuilder {
	b.ensureInitialized()
	b.fields.Ports = &value
	return b
}

// RemovePorts removes the Ports field from the declarative configuration.
func (b NetworkPolicyEgressRuleBuilder) RemovePorts() NetworkPolicyEgressRuleBuilder {
	b.ensureInitialized()
	b.fields.Ports = nil
	return b
}

// GetPorts gets the Ports field from the declarative configuration.
func (b NetworkPolicyEgressRuleBuilder) GetPorts() (value NetworkPolicyPortList, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Ports; v != nil {
		return *v, true
	}
	return value, false
}

// SetTo sets the To field in the declarative configuration to the given value.
func (b NetworkPolicyEgressRuleBuilder) SetTo(value NetworkPolicyPeerList) NetworkPolicyEgressRuleBuilder {
	b.ensureInitialized()
	b.fields.To = &value
	return b
}

// RemoveTo removes the To field from the declarative configuration.
func (b NetworkPolicyEgressRuleBuilder) RemoveTo() NetworkPolicyEgressRuleBuilder {
	b.ensureInitialized()
	b.fields.To = nil
	return b
}

// GetTo gets the To field from the declarative configuration.
func (b NetworkPolicyEgressRuleBuilder) GetTo() (value NetworkPolicyPeerList, ok bool) {
	b.ensureInitialized()
	if v := b.fields.To; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts NetworkPolicyEgressRuleBuilder to unstructured.
func (b *NetworkPolicyEgressRuleBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to NetworkPolicyEgressRuleBuilder, replacing the contents
// of NetworkPolicyEgressRuleBuilder.
func (b *NetworkPolicyEgressRuleBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &networkPolicyEgressRuleFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals NetworkPolicyEgressRuleBuilder to JSON.
func (b *NetworkPolicyEgressRuleBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into NetworkPolicyEgressRuleBuilder, replacing the contents of
// NetworkPolicyEgressRuleBuilder.
func (b *NetworkPolicyEgressRuleBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// NetworkPolicyEgressRuleList represents a list of NetworkPolicyEgressRuleBuilder.
// Provided as a convenience.
type NetworkPolicyEgressRuleList []NetworkPolicyEgressRuleBuilder

// NetworkPolicyEgressRuleList represents a map of NetworkPolicyEgressRuleBuilder.
// Provided as a convenience.
type NetworkPolicyEgressRuleMap map[string]NetworkPolicyEgressRuleBuilder

func (b *NetworkPolicyEgressRuleBuilder) preMarshal() {
}
func (b *NetworkPolicyEgressRuleBuilder) postUnmarshal() {
}
