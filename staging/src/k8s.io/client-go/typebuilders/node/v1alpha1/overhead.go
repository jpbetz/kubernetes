/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1alpha1

import (
	json "encoding/json"

	v1 "k8s.io/api/core/v1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// OverheadBuilder represents an declarative configuration of the Overhead type for use
// with apply.
type OverheadBuilder struct {
	fields *overheadFields
}

// overheadFields is used by OverheadBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in OverheadBuilder before marshalling, and
// are copied out to the builder type in OverheadBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type overheadFields struct {
	PodFixed *v1.ResourceList `json:"podFixed,omitempty"`
}

func (b *OverheadBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &overheadFields{}
	}
}

// Overhead constructs an declarative configuration of the Overhead type for use with
// apply.
// Provided as a convenience.
func Overhead() OverheadBuilder {
	return OverheadBuilder{fields: &overheadFields{}}
}

// SetPodFixed sets the PodFixed field in the declarative configuration to the given value.
func (b OverheadBuilder) SetPodFixed(value v1.ResourceList) OverheadBuilder {
	b.ensureInitialized()
	b.fields.PodFixed = &value
	return b
}

// RemovePodFixed removes the PodFixed field from the declarative configuration.
func (b OverheadBuilder) RemovePodFixed() OverheadBuilder {
	b.ensureInitialized()
	b.fields.PodFixed = nil
	return b
}

// GetPodFixed gets the PodFixed field from the declarative configuration.
func (b OverheadBuilder) GetPodFixed() (value v1.ResourceList, ok bool) {
	b.ensureInitialized()
	if v := b.fields.PodFixed; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts OverheadBuilder to unstructured.
func (b *OverheadBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to OverheadBuilder, replacing the contents
// of OverheadBuilder.
func (b *OverheadBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &overheadFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals OverheadBuilder to JSON.
func (b *OverheadBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into OverheadBuilder, replacing the contents of
// OverheadBuilder.
func (b *OverheadBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// OverheadList represents a list of OverheadBuilder.
// Provided as a convenience.
type OverheadList []OverheadBuilder

// OverheadList represents a map of OverheadBuilder.
// Provided as a convenience.
type OverheadMap map[string]OverheadBuilder

func (b *OverheadBuilder) preMarshal() {
}
func (b *OverheadBuilder) postUnmarshal() {
}
