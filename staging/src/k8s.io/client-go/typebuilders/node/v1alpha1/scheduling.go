/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1alpha1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/typebuilders/core/v1"
)

// SchedulingBuilder represents an declarative configuration of the Scheduling type for use
// with apply.
type SchedulingBuilder struct {
	fields schedulingFields
}

// schedulingFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in SchedulingBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type schedulingFields struct {
	NodeSelector *map[string]string `json:"nodeSelector,omitempty"`
	Tolerations  *v1.TolerationList `json:"tolerations,omitempty"`
}

// Scheduling constructs an declarative configuration of the Scheduling type for use with
// apply.
func Scheduling() *SchedulingBuilder {
	return &SchedulingBuilder{}
}

// SetNodeSelector sets the NodeSelector field in the declarative configuration to the given value.
func (b *SchedulingBuilder) SetNodeSelector(value map[string]string) *SchedulingBuilder {
	b.fields.NodeSelector = &value
	return b
}

// RemoveNodeSelector removes the NodeSelector field from the declarative configuration.
func (b *SchedulingBuilder) RemoveNodeSelector() *SchedulingBuilder {
	b.fields.NodeSelector = nil
	return b
}

// GetNodeSelector gets the NodeSelector field from the declarative configuration.
func (b *SchedulingBuilder) GetNodeSelector() (value map[string]string, ok bool) {
	if v := b.fields.NodeSelector; v != nil {
		return *v, true
	}
	return value, false
}

// SetTolerations sets the Tolerations field in the declarative configuration to the given value.
func (b *SchedulingBuilder) SetTolerations(value v1.TolerationList) *SchedulingBuilder {
	b.fields.Tolerations = &value
	return b
}

// RemoveTolerations removes the Tolerations field from the declarative configuration.
func (b *SchedulingBuilder) RemoveTolerations() *SchedulingBuilder {
	b.fields.Tolerations = nil
	return b
}

// GetTolerations gets the Tolerations field from the declarative configuration.
func (b *SchedulingBuilder) GetTolerations() (value v1.TolerationList, ok bool) {
	if v := b.fields.Tolerations; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts SchedulingBuilder to unstructured.
func (b *SchedulingBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to SchedulingBuilder, replacing the contents
// of SchedulingBuilder.
func (b *SchedulingBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &schedulingFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals SchedulingBuilder to JSON.
func (b *SchedulingBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into SchedulingBuilder, replacing the contents of
// SchedulingBuilder.
func (b *SchedulingBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// SchedulingList represents a list of SchedulingBuilder.
type SchedulingList []*SchedulingBuilder

// SchedulingList represents a map of SchedulingBuilder.
type SchedulingMap map[string]SchedulingBuilder

func (b *SchedulingBuilder) preMarshal() {
}
func (b *SchedulingBuilder) postUnmarshal() {
}
