/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1alpha1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// RuntimeClassSpecBuilder represents an declarative configuration of the RuntimeClassSpec type for use
// with apply.
type RuntimeClassSpecBuilder struct {
	fields runtimeClassSpecFields
}

// runtimeClassSpecFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in RuntimeClassSpecBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type runtimeClassSpecFields struct {
	RuntimeHandler *string            `json:"runtimeHandler,omitempty"`
	Overhead       *OverheadBuilder   `json:"overhead,omitempty"`
	Scheduling     *SchedulingBuilder `json:"scheduling,omitempty"`
}

// RuntimeClassSpec constructs an declarative configuration of the RuntimeClassSpec type for use with
// apply.
func RuntimeClassSpec() *RuntimeClassSpecBuilder {
	return &RuntimeClassSpecBuilder{}
}

// SetRuntimeHandler sets the RuntimeHandler field in the declarative configuration to the given value.
func (b *RuntimeClassSpecBuilder) SetRuntimeHandler(value string) *RuntimeClassSpecBuilder {
	b.fields.RuntimeHandler = &value
	return b
}

// RemoveRuntimeHandler removes the RuntimeHandler field from the declarative configuration.
func (b *RuntimeClassSpecBuilder) RemoveRuntimeHandler() *RuntimeClassSpecBuilder {
	b.fields.RuntimeHandler = nil
	return b
}

// GetRuntimeHandler gets the RuntimeHandler field from the declarative configuration.
func (b *RuntimeClassSpecBuilder) GetRuntimeHandler() (value string, ok bool) {
	if v := b.fields.RuntimeHandler; v != nil {
		return *v, true
	}
	return value, false
}

// SetOverhead sets the Overhead field in the declarative configuration to the given value.
func (b *RuntimeClassSpecBuilder) SetOverhead(value *OverheadBuilder) *RuntimeClassSpecBuilder {
	b.fields.Overhead = value
	return b
}

// RemoveOverhead removes the Overhead field from the declarative configuration.
func (b *RuntimeClassSpecBuilder) RemoveOverhead() *RuntimeClassSpecBuilder {
	b.fields.Overhead = nil
	return b
}

// GetOverhead gets the Overhead field from the declarative configuration.
func (b *RuntimeClassSpecBuilder) GetOverhead() (value *OverheadBuilder, ok bool) {
	return b.fields.Overhead, b.fields.Overhead != nil
}

// SetScheduling sets the Scheduling field in the declarative configuration to the given value.
func (b *RuntimeClassSpecBuilder) SetScheduling(value *SchedulingBuilder) *RuntimeClassSpecBuilder {
	b.fields.Scheduling = value
	return b
}

// RemoveScheduling removes the Scheduling field from the declarative configuration.
func (b *RuntimeClassSpecBuilder) RemoveScheduling() *RuntimeClassSpecBuilder {
	b.fields.Scheduling = nil
	return b
}

// GetScheduling gets the Scheduling field from the declarative configuration.
func (b *RuntimeClassSpecBuilder) GetScheduling() (value *SchedulingBuilder, ok bool) {
	return b.fields.Scheduling, b.fields.Scheduling != nil
}

// ToUnstructured converts RuntimeClassSpecBuilder to unstructured.
func (b *RuntimeClassSpecBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to RuntimeClassSpecBuilder, replacing the contents
// of RuntimeClassSpecBuilder.
func (b *RuntimeClassSpecBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &runtimeClassSpecFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals RuntimeClassSpecBuilder to JSON.
func (b *RuntimeClassSpecBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into RuntimeClassSpecBuilder, replacing the contents of
// RuntimeClassSpecBuilder.
func (b *RuntimeClassSpecBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// RuntimeClassSpecList represents a list of RuntimeClassSpecBuilder.
type RuntimeClassSpecList []*RuntimeClassSpecBuilder

// RuntimeClassSpecList represents a map of RuntimeClassSpecBuilder.
type RuntimeClassSpecMap map[string]RuntimeClassSpecBuilder

func (b *RuntimeClassSpecBuilder) preMarshal() {
}
func (b *RuntimeClassSpecBuilder) postUnmarshal() {
}
