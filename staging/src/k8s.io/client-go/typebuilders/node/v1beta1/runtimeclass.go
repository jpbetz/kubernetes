/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/typebuilders/meta/v1"
)

// RuntimeClassBuilder represents an declarative configuration of the RuntimeClass type for use
// with apply.
type RuntimeClassBuilder struct {
	typeMeta v1.TypeMetaBuilder // inlined type
	fields   *runtimeClassFields
}

// runtimeClassFields is used by RuntimeClassBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in RuntimeClassBuilder before marshalling, and
// are copied out to the builder type in RuntimeClassBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type runtimeClassFields struct {
	Kind       *string               `json:"kind,omitempty"`       // inlined RuntimeClassBuilder.typeMeta.Kind field
	APIVersion *string               `json:"apiVersion,omitempty"` // inlined RuntimeClassBuilder.typeMeta.APIVersion field
	ObjectMeta *v1.ObjectMetaBuilder `json:"metadata,omitempty"`
	Handler    *string               `json:"handler,omitempty"`
	Overhead   *OverheadBuilder      `json:"overhead,omitempty"`
	Scheduling *SchedulingBuilder    `json:"scheduling,omitempty"`
}

func (b *RuntimeClassBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &runtimeClassFields{}
	}
}

// RuntimeClass constructs an declarative configuration of the RuntimeClass type for use with
// apply.
// Provided as a convenience.
func RuntimeClass() RuntimeClassBuilder {
	return RuntimeClassBuilder{fields: &runtimeClassFields{}}
}

// SetTypeMeta sets the TypeMeta field in the declarative configuration to the given value.
func (b RuntimeClassBuilder) SetTypeMeta(value v1.TypeMetaBuilder) RuntimeClassBuilder {
	b.ensureInitialized()
	b.typeMeta = value
	return b
}

// RemoveTypeMeta removes the TypeMeta field from the declarative configuration.
func (b RuntimeClassBuilder) RemoveTypeMeta() RuntimeClassBuilder {
	b.ensureInitialized()
	b.typeMeta = v1.TypeMetaBuilder{}
	return b
}

// GetTypeMeta gets the TypeMeta field from the declarative configuration.
func (b RuntimeClassBuilder) GetTypeMeta() (value v1.TypeMetaBuilder, ok bool) {
	b.ensureInitialized()
	return b.typeMeta, true
}

// SetObjectMeta sets the ObjectMeta field in the declarative configuration to the given value.
func (b RuntimeClassBuilder) SetObjectMeta(value v1.ObjectMetaBuilder) RuntimeClassBuilder {
	b.ensureInitialized()
	b.fields.ObjectMeta = &value
	return b
}

// RemoveObjectMeta removes the ObjectMeta field from the declarative configuration.
func (b RuntimeClassBuilder) RemoveObjectMeta() RuntimeClassBuilder {
	b.ensureInitialized()
	b.fields.ObjectMeta = nil
	return b
}

// GetObjectMeta gets the ObjectMeta field from the declarative configuration.
func (b RuntimeClassBuilder) GetObjectMeta() (value v1.ObjectMetaBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.ObjectMeta; v != nil {
		return *v, true
	}
	return value, false
}

// SetHandler sets the Handler field in the declarative configuration to the given value.
func (b RuntimeClassBuilder) SetHandler(value string) RuntimeClassBuilder {
	b.ensureInitialized()
	b.fields.Handler = &value
	return b
}

// RemoveHandler removes the Handler field from the declarative configuration.
func (b RuntimeClassBuilder) RemoveHandler() RuntimeClassBuilder {
	b.ensureInitialized()
	b.fields.Handler = nil
	return b
}

// GetHandler gets the Handler field from the declarative configuration.
func (b RuntimeClassBuilder) GetHandler() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Handler; v != nil {
		return *v, true
	}
	return value, false
}

// SetOverhead sets the Overhead field in the declarative configuration to the given value.
func (b RuntimeClassBuilder) SetOverhead(value OverheadBuilder) RuntimeClassBuilder {
	b.ensureInitialized()
	b.fields.Overhead = &value
	return b
}

// RemoveOverhead removes the Overhead field from the declarative configuration.
func (b RuntimeClassBuilder) RemoveOverhead() RuntimeClassBuilder {
	b.ensureInitialized()
	b.fields.Overhead = nil
	return b
}

// GetOverhead gets the Overhead field from the declarative configuration.
func (b RuntimeClassBuilder) GetOverhead() (value OverheadBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Overhead; v != nil {
		return *v, true
	}
	return value, false
}

// SetScheduling sets the Scheduling field in the declarative configuration to the given value.
func (b RuntimeClassBuilder) SetScheduling(value SchedulingBuilder) RuntimeClassBuilder {
	b.ensureInitialized()
	b.fields.Scheduling = &value
	return b
}

// RemoveScheduling removes the Scheduling field from the declarative configuration.
func (b RuntimeClassBuilder) RemoveScheduling() RuntimeClassBuilder {
	b.ensureInitialized()
	b.fields.Scheduling = nil
	return b
}

// GetScheduling gets the Scheduling field from the declarative configuration.
func (b RuntimeClassBuilder) GetScheduling() (value SchedulingBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Scheduling; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts RuntimeClassBuilder to unstructured.
func (b *RuntimeClassBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to RuntimeClassBuilder, replacing the contents
// of RuntimeClassBuilder.
func (b *RuntimeClassBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &runtimeClassFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals RuntimeClassBuilder to JSON.
func (b *RuntimeClassBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into RuntimeClassBuilder, replacing the contents of
// RuntimeClassBuilder.
func (b *RuntimeClassBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// RuntimeClassList represents a list of RuntimeClassBuilder.
// Provided as a convenience.
type RuntimeClassList []RuntimeClassBuilder

// RuntimeClassList represents a map of RuntimeClassBuilder.
// Provided as a convenience.
type RuntimeClassMap map[string]RuntimeClassBuilder

func (b *RuntimeClassBuilder) preMarshal() {
	if v, ok := b.typeMeta.GetKind(); ok {
		b.fields.Kind = &v
	}
	if v, ok := b.typeMeta.GetAPIVersion(); ok {
		b.fields.APIVersion = &v
	}
}
func (b *RuntimeClassBuilder) postUnmarshal() {
	if b.fields.Kind != nil {
		b.typeMeta.SetKind(*b.fields.Kind)
	}
	if b.fields.APIVersion != nil {
		b.typeMeta.SetAPIVersion(*b.fields.APIVersion)
	}
}
