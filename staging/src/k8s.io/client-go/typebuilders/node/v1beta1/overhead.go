/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"

	v1 "k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// OverheadApplyConfiguration represents an declarative configuration of the Overhead type for use
// with apply.
type OverheadApplyConfiguration struct {
	fields overheadFields
}

// OverheadApplyConfiguration constructs an declarative configuration of the Overhead type for use with
// apply.
func Overhead() *OverheadApplyConfiguration {
	return &OverheadApplyConfiguration{}
}

// overheadFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in OverheadApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type overheadFields struct {
	PodFixed *v1.ResourceList `json:"podFixed,omitempty"`
}

// SetPodFixed sets the PodFixed field in the declarative configuration to the given value.
func (b *OverheadApplyConfiguration) SetPodFixed(value v1.ResourceList) *OverheadApplyConfiguration {
	b.fields.PodFixed = &value
	return b
}

// RemovePodFixed removes the PodFixed field from the declarative configuration.
func (b *OverheadApplyConfiguration) RemovePodFixed() *OverheadApplyConfiguration {
	b.fields.PodFixed = nil
	return b
}

// GetPodFixed gets the PodFixed field from the declarative configuration.
func (b *OverheadApplyConfiguration) GetPodFixed() (value v1.ResourceList, ok bool) {
	if v := b.fields.PodFixed; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts OverheadApplyConfiguration to unstructured.
func (b *OverheadApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to OverheadApplyConfiguration, replacing the contents
// of OverheadApplyConfiguration.
func (b *OverheadApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &overheadFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals OverheadApplyConfiguration to JSON.
func (b *OverheadApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into OverheadApplyConfiguration, replacing the contents of
// OverheadApplyConfiguration.
func (b *OverheadApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// OverheadList represents a listAlias of OverheadApplyConfiguration.
type OverheadList []*OverheadApplyConfiguration

// OverheadList represents a map of OverheadApplyConfiguration.
type OverheadMap map[string]OverheadApplyConfiguration

func (b *OverheadApplyConfiguration) preMarshal() {
}
func (b *OverheadApplyConfiguration) postUnmarshal() {
}
