/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// EventSeriesBuilder represents an declarative configuration of the EventSeries type for use
// with apply.
type EventSeriesBuilder struct {
	fields *eventSeriesFields
}

// eventSeriesFields is used by EventSeriesBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in EventSeriesBuilder before marshalling, and
// are copied out to the builder type in EventSeriesBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type eventSeriesFields struct {
	Count            *int32        `json:"count,omitempty"`
	LastObservedTime *v1.MicroTime `json:"lastObservedTime,omitempty"`
}

func (b *EventSeriesBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &eventSeriesFields{}
	}
}

// EventSeries constructs an declarative configuration of the EventSeries type for use with
// apply.
// Provided as a convenience.
func EventSeries() EventSeriesBuilder {
	return EventSeriesBuilder{fields: &eventSeriesFields{}}
}

// SetCount sets the Count field in the declarative configuration to the given value.
func (b EventSeriesBuilder) SetCount(value int32) EventSeriesBuilder {
	b.ensureInitialized()
	b.fields.Count = &value
	return b
}

// RemoveCount removes the Count field from the declarative configuration.
func (b EventSeriesBuilder) RemoveCount() EventSeriesBuilder {
	b.ensureInitialized()
	b.fields.Count = nil
	return b
}

// GetCount gets the Count field from the declarative configuration.
func (b EventSeriesBuilder) GetCount() (value int32, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Count; v != nil {
		return *v, true
	}
	return value, false
}

// SetLastObservedTime sets the LastObservedTime field in the declarative configuration to the given value.
func (b EventSeriesBuilder) SetLastObservedTime(value v1.MicroTime) EventSeriesBuilder {
	b.ensureInitialized()
	b.fields.LastObservedTime = &value
	return b
}

// RemoveLastObservedTime removes the LastObservedTime field from the declarative configuration.
func (b EventSeriesBuilder) RemoveLastObservedTime() EventSeriesBuilder {
	b.ensureInitialized()
	b.fields.LastObservedTime = nil
	return b
}

// GetLastObservedTime gets the LastObservedTime field from the declarative configuration.
func (b EventSeriesBuilder) GetLastObservedTime() (value v1.MicroTime, ok bool) {
	b.ensureInitialized()
	if v := b.fields.LastObservedTime; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts EventSeriesBuilder to unstructured.
func (b *EventSeriesBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to EventSeriesBuilder, replacing the contents
// of EventSeriesBuilder.
func (b *EventSeriesBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &eventSeriesFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals EventSeriesBuilder to JSON.
func (b *EventSeriesBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into EventSeriesBuilder, replacing the contents of
// EventSeriesBuilder.
func (b *EventSeriesBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// EventSeriesList represents a list of EventSeriesBuilder.
// Provided as a convenience.
type EventSeriesList []EventSeriesBuilder

// EventSeriesList represents a map of EventSeriesBuilder.
// Provided as a convenience.
type EventSeriesMap map[string]EventSeriesBuilder

func (b *EventSeriesBuilder) preMarshal() {
}
func (b *EventSeriesBuilder) postUnmarshal() {
}
