/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// LeaseSpecBuilder represents an declarative configuration of the LeaseSpec type for use
// with apply.
type LeaseSpecBuilder struct {
	fields leaseSpecFields
}

// leaseSpecFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in LeaseSpecBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type leaseSpecFields struct {
	HolderIdentity       *string       `json:"holderIdentity,omitempty"`
	LeaseDurationSeconds *int32        `json:"leaseDurationSeconds,omitempty"`
	AcquireTime          *v1.MicroTime `json:"acquireTime,omitempty"`
	RenewTime            *v1.MicroTime `json:"renewTime,omitempty"`
	LeaseTransitions     *int32        `json:"leaseTransitions,omitempty"`
}

// LeaseSpec constructs an declarative configuration of the LeaseSpec type for use with
// apply.
func LeaseSpec() *LeaseSpecBuilder {
	return &LeaseSpecBuilder{}
}

// SetHolderIdentity sets the HolderIdentity field in the declarative configuration to the given value.
func (b *LeaseSpecBuilder) SetHolderIdentity(value string) *LeaseSpecBuilder {
	b.fields.HolderIdentity = &value
	return b
}

// RemoveHolderIdentity removes the HolderIdentity field from the declarative configuration.
func (b *LeaseSpecBuilder) RemoveHolderIdentity() *LeaseSpecBuilder {
	b.fields.HolderIdentity = nil
	return b
}

// GetHolderIdentity gets the HolderIdentity field from the declarative configuration.
func (b *LeaseSpecBuilder) GetHolderIdentity() (value string, ok bool) {
	if v := b.fields.HolderIdentity; v != nil {
		return *v, true
	}
	return value, false
}

// SetLeaseDurationSeconds sets the LeaseDurationSeconds field in the declarative configuration to the given value.
func (b *LeaseSpecBuilder) SetLeaseDurationSeconds(value int32) *LeaseSpecBuilder {
	b.fields.LeaseDurationSeconds = &value
	return b
}

// RemoveLeaseDurationSeconds removes the LeaseDurationSeconds field from the declarative configuration.
func (b *LeaseSpecBuilder) RemoveLeaseDurationSeconds() *LeaseSpecBuilder {
	b.fields.LeaseDurationSeconds = nil
	return b
}

// GetLeaseDurationSeconds gets the LeaseDurationSeconds field from the declarative configuration.
func (b *LeaseSpecBuilder) GetLeaseDurationSeconds() (value int32, ok bool) {
	if v := b.fields.LeaseDurationSeconds; v != nil {
		return *v, true
	}
	return value, false
}

// SetAcquireTime sets the AcquireTime field in the declarative configuration to the given value.
func (b *LeaseSpecBuilder) SetAcquireTime(value v1.MicroTime) *LeaseSpecBuilder {
	b.fields.AcquireTime = &value
	return b
}

// RemoveAcquireTime removes the AcquireTime field from the declarative configuration.
func (b *LeaseSpecBuilder) RemoveAcquireTime() *LeaseSpecBuilder {
	b.fields.AcquireTime = nil
	return b
}

// GetAcquireTime gets the AcquireTime field from the declarative configuration.
func (b *LeaseSpecBuilder) GetAcquireTime() (value v1.MicroTime, ok bool) {
	if v := b.fields.AcquireTime; v != nil {
		return *v, true
	}
	return value, false
}

// SetRenewTime sets the RenewTime field in the declarative configuration to the given value.
func (b *LeaseSpecBuilder) SetRenewTime(value v1.MicroTime) *LeaseSpecBuilder {
	b.fields.RenewTime = &value
	return b
}

// RemoveRenewTime removes the RenewTime field from the declarative configuration.
func (b *LeaseSpecBuilder) RemoveRenewTime() *LeaseSpecBuilder {
	b.fields.RenewTime = nil
	return b
}

// GetRenewTime gets the RenewTime field from the declarative configuration.
func (b *LeaseSpecBuilder) GetRenewTime() (value v1.MicroTime, ok bool) {
	if v := b.fields.RenewTime; v != nil {
		return *v, true
	}
	return value, false
}

// SetLeaseTransitions sets the LeaseTransitions field in the declarative configuration to the given value.
func (b *LeaseSpecBuilder) SetLeaseTransitions(value int32) *LeaseSpecBuilder {
	b.fields.LeaseTransitions = &value
	return b
}

// RemoveLeaseTransitions removes the LeaseTransitions field from the declarative configuration.
func (b *LeaseSpecBuilder) RemoveLeaseTransitions() *LeaseSpecBuilder {
	b.fields.LeaseTransitions = nil
	return b
}

// GetLeaseTransitions gets the LeaseTransitions field from the declarative configuration.
func (b *LeaseSpecBuilder) GetLeaseTransitions() (value int32, ok bool) {
	if v := b.fields.LeaseTransitions; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts LeaseSpecBuilder to unstructured.
func (b *LeaseSpecBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to LeaseSpecBuilder, replacing the contents
// of LeaseSpecBuilder.
func (b *LeaseSpecBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &leaseSpecFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals LeaseSpecBuilder to JSON.
func (b *LeaseSpecBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into LeaseSpecBuilder, replacing the contents of
// LeaseSpecBuilder.
func (b *LeaseSpecBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// LeaseSpecList represents a list of LeaseSpecBuilder.
type LeaseSpecList []*LeaseSpecBuilder

// LeaseSpecList represents a map of LeaseSpecBuilder.
type LeaseSpecMap map[string]LeaseSpecBuilder

func (b *LeaseSpecBuilder) preMarshal() {
}
func (b *LeaseSpecBuilder) postUnmarshal() {
}
