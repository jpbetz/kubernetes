/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// JobStatusBuilder represents an declarative configuration of the JobStatus type for use
// with apply.
type JobStatusBuilder struct {
	fields *jobStatusFields
}

// jobStatusFields is used by JobStatusBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in JobStatusBuilder before marshalling, and
// are copied out to the builder type in JobStatusBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type jobStatusFields struct {
	Conditions     *JobConditionList `json:"conditions,omitempty"`
	StartTime      *metav1.Time      `json:"startTime,omitempty"`
	CompletionTime *metav1.Time      `json:"completionTime,omitempty"`
	Active         *int32            `json:"active,omitempty"`
	Succeeded      *int32            `json:"succeeded,omitempty"`
	Failed         *int32            `json:"failed,omitempty"`
}

func (b *JobStatusBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &jobStatusFields{}
	}
}

// JobStatus constructs an declarative configuration of the JobStatus type for use with
// apply.
// Provided as a convenience.
func JobStatus() JobStatusBuilder {
	return JobStatusBuilder{fields: &jobStatusFields{}}
}

// SetConditions sets the Conditions field in the declarative configuration to the given value.
func (b JobStatusBuilder) SetConditions(value JobConditionList) JobStatusBuilder {
	b.ensureInitialized()
	b.fields.Conditions = &value
	return b
}

// RemoveConditions removes the Conditions field from the declarative configuration.
func (b JobStatusBuilder) RemoveConditions() JobStatusBuilder {
	b.ensureInitialized()
	b.fields.Conditions = nil
	return b
}

// GetConditions gets the Conditions field from the declarative configuration.
func (b JobStatusBuilder) GetConditions() (value JobConditionList, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Conditions; v != nil {
		return *v, true
	}
	return value, false
}

// SetStartTime sets the StartTime field in the declarative configuration to the given value.
func (b JobStatusBuilder) SetStartTime(value metav1.Time) JobStatusBuilder {
	b.ensureInitialized()
	b.fields.StartTime = &value
	return b
}

// RemoveStartTime removes the StartTime field from the declarative configuration.
func (b JobStatusBuilder) RemoveStartTime() JobStatusBuilder {
	b.ensureInitialized()
	b.fields.StartTime = nil
	return b
}

// GetStartTime gets the StartTime field from the declarative configuration.
func (b JobStatusBuilder) GetStartTime() (value metav1.Time, ok bool) {
	b.ensureInitialized()
	if v := b.fields.StartTime; v != nil {
		return *v, true
	}
	return value, false
}

// SetCompletionTime sets the CompletionTime field in the declarative configuration to the given value.
func (b JobStatusBuilder) SetCompletionTime(value metav1.Time) JobStatusBuilder {
	b.ensureInitialized()
	b.fields.CompletionTime = &value
	return b
}

// RemoveCompletionTime removes the CompletionTime field from the declarative configuration.
func (b JobStatusBuilder) RemoveCompletionTime() JobStatusBuilder {
	b.ensureInitialized()
	b.fields.CompletionTime = nil
	return b
}

// GetCompletionTime gets the CompletionTime field from the declarative configuration.
func (b JobStatusBuilder) GetCompletionTime() (value metav1.Time, ok bool) {
	b.ensureInitialized()
	if v := b.fields.CompletionTime; v != nil {
		return *v, true
	}
	return value, false
}

// SetActive sets the Active field in the declarative configuration to the given value.
func (b JobStatusBuilder) SetActive(value int32) JobStatusBuilder {
	b.ensureInitialized()
	b.fields.Active = &value
	return b
}

// RemoveActive removes the Active field from the declarative configuration.
func (b JobStatusBuilder) RemoveActive() JobStatusBuilder {
	b.ensureInitialized()
	b.fields.Active = nil
	return b
}

// GetActive gets the Active field from the declarative configuration.
func (b JobStatusBuilder) GetActive() (value int32, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Active; v != nil {
		return *v, true
	}
	return value, false
}

// SetSucceeded sets the Succeeded field in the declarative configuration to the given value.
func (b JobStatusBuilder) SetSucceeded(value int32) JobStatusBuilder {
	b.ensureInitialized()
	b.fields.Succeeded = &value
	return b
}

// RemoveSucceeded removes the Succeeded field from the declarative configuration.
func (b JobStatusBuilder) RemoveSucceeded() JobStatusBuilder {
	b.ensureInitialized()
	b.fields.Succeeded = nil
	return b
}

// GetSucceeded gets the Succeeded field from the declarative configuration.
func (b JobStatusBuilder) GetSucceeded() (value int32, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Succeeded; v != nil {
		return *v, true
	}
	return value, false
}

// SetFailed sets the Failed field in the declarative configuration to the given value.
func (b JobStatusBuilder) SetFailed(value int32) JobStatusBuilder {
	b.ensureInitialized()
	b.fields.Failed = &value
	return b
}

// RemoveFailed removes the Failed field from the declarative configuration.
func (b JobStatusBuilder) RemoveFailed() JobStatusBuilder {
	b.ensureInitialized()
	b.fields.Failed = nil
	return b
}

// GetFailed gets the Failed field from the declarative configuration.
func (b JobStatusBuilder) GetFailed() (value int32, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Failed; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts JobStatusBuilder to unstructured.
func (b *JobStatusBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to JobStatusBuilder, replacing the contents
// of JobStatusBuilder.
func (b *JobStatusBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &jobStatusFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals JobStatusBuilder to JSON.
func (b *JobStatusBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into JobStatusBuilder, replacing the contents of
// JobStatusBuilder.
func (b *JobStatusBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// JobStatusList represents a list of JobStatusBuilder.
// Provided as a convenience.
type JobStatusList []JobStatusBuilder

// JobStatusList represents a map of JobStatusBuilder.
// Provided as a convenience.
type JobStatusMap map[string]JobStatusBuilder

func (b *JobStatusBuilder) preMarshal() {
}
func (b *JobStatusBuilder) postUnmarshal() {
}
