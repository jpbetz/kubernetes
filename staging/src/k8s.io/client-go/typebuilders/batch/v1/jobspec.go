/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
	corev1 "k8s.io/client-go/typebuilders/core/v1"
	v1 "k8s.io/client-go/typebuilders/meta/v1"
)

// JobSpecBuilder represents an declarative configuration of the JobSpec type for use
// with apply.
type JobSpecBuilder struct {
	fields *jobSpecFields
}

// jobSpecFields is used by JobSpecBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in JobSpecBuilder before marshalling, and
// are copied out to the builder type in JobSpecBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type jobSpecFields struct {
	Parallelism             *int32                         `json:"parallelism,omitempty"`
	Completions             *int32                         `json:"completions,omitempty"`
	ActiveDeadlineSeconds   *int64                         `json:"activeDeadlineSeconds,omitempty"`
	BackoffLimit            *int32                         `json:"backoffLimit,omitempty"`
	Selector                *v1.LabelSelectorBuilder       `json:"selector,omitempty"`
	ManualSelector          *bool                          `json:"manualSelector,omitempty"`
	Template                *corev1.PodTemplateSpecBuilder `json:"template,omitempty"`
	TTLSecondsAfterFinished *int32                         `json:"ttlSecondsAfterFinished,omitempty"`
}

func (b *JobSpecBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &jobSpecFields{}
	}
}

// JobSpec constructs an declarative configuration of the JobSpec type for use with
// apply.
// Provided as a convenience.
func JobSpec() JobSpecBuilder {
	return JobSpecBuilder{fields: &jobSpecFields{}}
}

// SetParallelism sets the Parallelism field in the declarative configuration to the given value.
func (b JobSpecBuilder) SetParallelism(value int32) JobSpecBuilder {
	b.ensureInitialized()
	b.fields.Parallelism = &value
	return b
}

// RemoveParallelism removes the Parallelism field from the declarative configuration.
func (b JobSpecBuilder) RemoveParallelism() JobSpecBuilder {
	b.ensureInitialized()
	b.fields.Parallelism = nil
	return b
}

// GetParallelism gets the Parallelism field from the declarative configuration.
func (b JobSpecBuilder) GetParallelism() (value int32, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Parallelism; v != nil {
		return *v, true
	}
	return value, false
}

// SetCompletions sets the Completions field in the declarative configuration to the given value.
func (b JobSpecBuilder) SetCompletions(value int32) JobSpecBuilder {
	b.ensureInitialized()
	b.fields.Completions = &value
	return b
}

// RemoveCompletions removes the Completions field from the declarative configuration.
func (b JobSpecBuilder) RemoveCompletions() JobSpecBuilder {
	b.ensureInitialized()
	b.fields.Completions = nil
	return b
}

// GetCompletions gets the Completions field from the declarative configuration.
func (b JobSpecBuilder) GetCompletions() (value int32, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Completions; v != nil {
		return *v, true
	}
	return value, false
}

// SetActiveDeadlineSeconds sets the ActiveDeadlineSeconds field in the declarative configuration to the given value.
func (b JobSpecBuilder) SetActiveDeadlineSeconds(value int64) JobSpecBuilder {
	b.ensureInitialized()
	b.fields.ActiveDeadlineSeconds = &value
	return b
}

// RemoveActiveDeadlineSeconds removes the ActiveDeadlineSeconds field from the declarative configuration.
func (b JobSpecBuilder) RemoveActiveDeadlineSeconds() JobSpecBuilder {
	b.ensureInitialized()
	b.fields.ActiveDeadlineSeconds = nil
	return b
}

// GetActiveDeadlineSeconds gets the ActiveDeadlineSeconds field from the declarative configuration.
func (b JobSpecBuilder) GetActiveDeadlineSeconds() (value int64, ok bool) {
	b.ensureInitialized()
	if v := b.fields.ActiveDeadlineSeconds; v != nil {
		return *v, true
	}
	return value, false
}

// SetBackoffLimit sets the BackoffLimit field in the declarative configuration to the given value.
func (b JobSpecBuilder) SetBackoffLimit(value int32) JobSpecBuilder {
	b.ensureInitialized()
	b.fields.BackoffLimit = &value
	return b
}

// RemoveBackoffLimit removes the BackoffLimit field from the declarative configuration.
func (b JobSpecBuilder) RemoveBackoffLimit() JobSpecBuilder {
	b.ensureInitialized()
	b.fields.BackoffLimit = nil
	return b
}

// GetBackoffLimit gets the BackoffLimit field from the declarative configuration.
func (b JobSpecBuilder) GetBackoffLimit() (value int32, ok bool) {
	b.ensureInitialized()
	if v := b.fields.BackoffLimit; v != nil {
		return *v, true
	}
	return value, false
}

// SetSelector sets the Selector field in the declarative configuration to the given value.
func (b JobSpecBuilder) SetSelector(value v1.LabelSelectorBuilder) JobSpecBuilder {
	b.ensureInitialized()
	b.fields.Selector = &value
	return b
}

// RemoveSelector removes the Selector field from the declarative configuration.
func (b JobSpecBuilder) RemoveSelector() JobSpecBuilder {
	b.ensureInitialized()
	b.fields.Selector = nil
	return b
}

// GetSelector gets the Selector field from the declarative configuration.
func (b JobSpecBuilder) GetSelector() (value v1.LabelSelectorBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Selector; v != nil {
		return *v, true
	}
	return value, false
}

// SetManualSelector sets the ManualSelector field in the declarative configuration to the given value.
func (b JobSpecBuilder) SetManualSelector(value bool) JobSpecBuilder {
	b.ensureInitialized()
	b.fields.ManualSelector = &value
	return b
}

// RemoveManualSelector removes the ManualSelector field from the declarative configuration.
func (b JobSpecBuilder) RemoveManualSelector() JobSpecBuilder {
	b.ensureInitialized()
	b.fields.ManualSelector = nil
	return b
}

// GetManualSelector gets the ManualSelector field from the declarative configuration.
func (b JobSpecBuilder) GetManualSelector() (value bool, ok bool) {
	b.ensureInitialized()
	if v := b.fields.ManualSelector; v != nil {
		return *v, true
	}
	return value, false
}

// SetTemplate sets the Template field in the declarative configuration to the given value.
func (b JobSpecBuilder) SetTemplate(value corev1.PodTemplateSpecBuilder) JobSpecBuilder {
	b.ensureInitialized()
	b.fields.Template = &value
	return b
}

// RemoveTemplate removes the Template field from the declarative configuration.
func (b JobSpecBuilder) RemoveTemplate() JobSpecBuilder {
	b.ensureInitialized()
	b.fields.Template = nil
	return b
}

// GetTemplate gets the Template field from the declarative configuration.
func (b JobSpecBuilder) GetTemplate() (value corev1.PodTemplateSpecBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Template; v != nil {
		return *v, true
	}
	return value, false
}

// SetTTLSecondsAfterFinished sets the TTLSecondsAfterFinished field in the declarative configuration to the given value.
func (b JobSpecBuilder) SetTTLSecondsAfterFinished(value int32) JobSpecBuilder {
	b.ensureInitialized()
	b.fields.TTLSecondsAfterFinished = &value
	return b
}

// RemoveTTLSecondsAfterFinished removes the TTLSecondsAfterFinished field from the declarative configuration.
func (b JobSpecBuilder) RemoveTTLSecondsAfterFinished() JobSpecBuilder {
	b.ensureInitialized()
	b.fields.TTLSecondsAfterFinished = nil
	return b
}

// GetTTLSecondsAfterFinished gets the TTLSecondsAfterFinished field from the declarative configuration.
func (b JobSpecBuilder) GetTTLSecondsAfterFinished() (value int32, ok bool) {
	b.ensureInitialized()
	if v := b.fields.TTLSecondsAfterFinished; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts JobSpecBuilder to unstructured.
func (b *JobSpecBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to JobSpecBuilder, replacing the contents
// of JobSpecBuilder.
func (b *JobSpecBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &jobSpecFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals JobSpecBuilder to JSON.
func (b *JobSpecBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into JobSpecBuilder, replacing the contents of
// JobSpecBuilder.
func (b *JobSpecBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// JobSpecList represents a list of JobSpecBuilder.
// Provided as a convenience.
type JobSpecList []JobSpecBuilder

// JobSpecList represents a map of JobSpecBuilder.
// Provided as a convenience.
type JobSpecMap map[string]JobSpecBuilder

func (b *JobSpecBuilder) preMarshal() {
}
func (b *JobSpecBuilder) postUnmarshal() {
}
