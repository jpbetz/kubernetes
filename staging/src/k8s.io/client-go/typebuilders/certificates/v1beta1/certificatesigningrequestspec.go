/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"

	v1beta1 "k8s.io/api/certificates/v1beta1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// CertificateSigningRequestSpecBuilder represents an declarative configuration of the CertificateSigningRequestSpec type for use
// with apply.
type CertificateSigningRequestSpecBuilder struct {
	fields *certificateSigningRequestSpecFields
}

// certificateSigningRequestSpecFields is used by CertificateSigningRequestSpecBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in CertificateSigningRequestSpecBuilder before marshalling, and
// are copied out to the builder type in CertificateSigningRequestSpecBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type certificateSigningRequestSpecFields struct {
	Request    *[]byte                        `json:"request,omitempty"`
	SignerName *string                        `json:"signerName,omitempty"`
	Usages     *[]v1beta1.KeyUsage            `json:"usages,omitempty"`
	Username   *string                        `json:"username,omitempty"`
	UID        *string                        `json:"uid,omitempty"`
	Groups     *[]string                      `json:"groups,omitempty"`
	Extra      *map[string]v1beta1.ExtraValue `json:"extra,omitempty"`
}

func (b *CertificateSigningRequestSpecBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &certificateSigningRequestSpecFields{}
	}
}

// CertificateSigningRequestSpec constructs an declarative configuration of the CertificateSigningRequestSpec type for use with
// apply.
// Provided as a convenience.
func CertificateSigningRequestSpec() CertificateSigningRequestSpecBuilder {
	return CertificateSigningRequestSpecBuilder{fields: &certificateSigningRequestSpecFields{}}
}

// SetRequest sets the Request field in the declarative configuration to the given value.
func (b CertificateSigningRequestSpecBuilder) SetRequest(value []byte) CertificateSigningRequestSpecBuilder {
	b.ensureInitialized()
	b.fields.Request = &value
	return b
}

// RemoveRequest removes the Request field from the declarative configuration.
func (b CertificateSigningRequestSpecBuilder) RemoveRequest() CertificateSigningRequestSpecBuilder {
	b.ensureInitialized()
	b.fields.Request = nil
	return b
}

// GetRequest gets the Request field from the declarative configuration.
func (b CertificateSigningRequestSpecBuilder) GetRequest() (value []byte, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Request; v != nil {
		return *v, true
	}
	return value, false
}

// SetSignerName sets the SignerName field in the declarative configuration to the given value.
func (b CertificateSigningRequestSpecBuilder) SetSignerName(value string) CertificateSigningRequestSpecBuilder {
	b.ensureInitialized()
	b.fields.SignerName = &value
	return b
}

// RemoveSignerName removes the SignerName field from the declarative configuration.
func (b CertificateSigningRequestSpecBuilder) RemoveSignerName() CertificateSigningRequestSpecBuilder {
	b.ensureInitialized()
	b.fields.SignerName = nil
	return b
}

// GetSignerName gets the SignerName field from the declarative configuration.
func (b CertificateSigningRequestSpecBuilder) GetSignerName() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.SignerName; v != nil {
		return *v, true
	}
	return value, false
}

// SetUsages sets the Usages field in the declarative configuration to the given value.
func (b CertificateSigningRequestSpecBuilder) SetUsages(value []v1beta1.KeyUsage) CertificateSigningRequestSpecBuilder {
	b.ensureInitialized()
	b.fields.Usages = &value
	return b
}

// RemoveUsages removes the Usages field from the declarative configuration.
func (b CertificateSigningRequestSpecBuilder) RemoveUsages() CertificateSigningRequestSpecBuilder {
	b.ensureInitialized()
	b.fields.Usages = nil
	return b
}

// GetUsages gets the Usages field from the declarative configuration.
func (b CertificateSigningRequestSpecBuilder) GetUsages() (value []v1beta1.KeyUsage, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Usages; v != nil {
		return *v, true
	}
	return value, false
}

// SetUsername sets the Username field in the declarative configuration to the given value.
func (b CertificateSigningRequestSpecBuilder) SetUsername(value string) CertificateSigningRequestSpecBuilder {
	b.ensureInitialized()
	b.fields.Username = &value
	return b
}

// RemoveUsername removes the Username field from the declarative configuration.
func (b CertificateSigningRequestSpecBuilder) RemoveUsername() CertificateSigningRequestSpecBuilder {
	b.ensureInitialized()
	b.fields.Username = nil
	return b
}

// GetUsername gets the Username field from the declarative configuration.
func (b CertificateSigningRequestSpecBuilder) GetUsername() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Username; v != nil {
		return *v, true
	}
	return value, false
}

// SetUID sets the UID field in the declarative configuration to the given value.
func (b CertificateSigningRequestSpecBuilder) SetUID(value string) CertificateSigningRequestSpecBuilder {
	b.ensureInitialized()
	b.fields.UID = &value
	return b
}

// RemoveUID removes the UID field from the declarative configuration.
func (b CertificateSigningRequestSpecBuilder) RemoveUID() CertificateSigningRequestSpecBuilder {
	b.ensureInitialized()
	b.fields.UID = nil
	return b
}

// GetUID gets the UID field from the declarative configuration.
func (b CertificateSigningRequestSpecBuilder) GetUID() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.UID; v != nil {
		return *v, true
	}
	return value, false
}

// SetGroups sets the Groups field in the declarative configuration to the given value.
func (b CertificateSigningRequestSpecBuilder) SetGroups(value []string) CertificateSigningRequestSpecBuilder {
	b.ensureInitialized()
	b.fields.Groups = &value
	return b
}

// RemoveGroups removes the Groups field from the declarative configuration.
func (b CertificateSigningRequestSpecBuilder) RemoveGroups() CertificateSigningRequestSpecBuilder {
	b.ensureInitialized()
	b.fields.Groups = nil
	return b
}

// GetGroups gets the Groups field from the declarative configuration.
func (b CertificateSigningRequestSpecBuilder) GetGroups() (value []string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Groups; v != nil {
		return *v, true
	}
	return value, false
}

// SetExtra sets the Extra field in the declarative configuration to the given value.
func (b CertificateSigningRequestSpecBuilder) SetExtra(value map[string]v1beta1.ExtraValue) CertificateSigningRequestSpecBuilder {
	b.ensureInitialized()
	b.fields.Extra = &value
	return b
}

// RemoveExtra removes the Extra field from the declarative configuration.
func (b CertificateSigningRequestSpecBuilder) RemoveExtra() CertificateSigningRequestSpecBuilder {
	b.ensureInitialized()
	b.fields.Extra = nil
	return b
}

// GetExtra gets the Extra field from the declarative configuration.
func (b CertificateSigningRequestSpecBuilder) GetExtra() (value map[string]v1beta1.ExtraValue, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Extra; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts CertificateSigningRequestSpecBuilder to unstructured.
func (b *CertificateSigningRequestSpecBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to CertificateSigningRequestSpecBuilder, replacing the contents
// of CertificateSigningRequestSpecBuilder.
func (b *CertificateSigningRequestSpecBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &certificateSigningRequestSpecFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals CertificateSigningRequestSpecBuilder to JSON.
func (b *CertificateSigningRequestSpecBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into CertificateSigningRequestSpecBuilder, replacing the contents of
// CertificateSigningRequestSpecBuilder.
func (b *CertificateSigningRequestSpecBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// CertificateSigningRequestSpecList represents a list of CertificateSigningRequestSpecBuilder.
// Provided as a convenience.
type CertificateSigningRequestSpecList []CertificateSigningRequestSpecBuilder

// CertificateSigningRequestSpecList represents a map of CertificateSigningRequestSpecBuilder.
// Provided as a convenience.
type CertificateSigningRequestSpecMap map[string]CertificateSigningRequestSpecBuilder

func (b *CertificateSigningRequestSpecBuilder) preMarshal() {
}
func (b *CertificateSigningRequestSpecBuilder) postUnmarshal() {
}
