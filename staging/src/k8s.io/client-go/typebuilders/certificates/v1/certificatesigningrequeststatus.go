/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// CertificateSigningRequestStatusBuilder represents an declarative configuration of the CertificateSigningRequestStatus type for use
// with apply.
type CertificateSigningRequestStatusBuilder struct {
	fields *certificateSigningRequestStatusFields
}

// certificateSigningRequestStatusFields is used by CertificateSigningRequestStatusBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in CertificateSigningRequestStatusBuilder before marshalling, and
// are copied out to the builder type in CertificateSigningRequestStatusBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type certificateSigningRequestStatusFields struct {
	Conditions  *CertificateSigningRequestConditionList `json:"conditions,omitempty"`
	Certificate *[]byte                                 `json:"certificate,omitempty"`
}

func (b *CertificateSigningRequestStatusBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &certificateSigningRequestStatusFields{}
	}
}

// CertificateSigningRequestStatus constructs an declarative configuration of the CertificateSigningRequestStatus type for use with
// apply.
// Provided as a convenience.
func CertificateSigningRequestStatus() CertificateSigningRequestStatusBuilder {
	return CertificateSigningRequestStatusBuilder{fields: &certificateSigningRequestStatusFields{}}
}

// SetConditions sets the Conditions field in the declarative configuration to the given value.
func (b CertificateSigningRequestStatusBuilder) SetConditions(value CertificateSigningRequestConditionList) CertificateSigningRequestStatusBuilder {
	b.ensureInitialized()
	b.fields.Conditions = &value
	return b
}

// RemoveConditions removes the Conditions field from the declarative configuration.
func (b CertificateSigningRequestStatusBuilder) RemoveConditions() CertificateSigningRequestStatusBuilder {
	b.ensureInitialized()
	b.fields.Conditions = nil
	return b
}

// GetConditions gets the Conditions field from the declarative configuration.
func (b CertificateSigningRequestStatusBuilder) GetConditions() (value CertificateSigningRequestConditionList, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Conditions; v != nil {
		return *v, true
	}
	return value, false
}

// SetCertificate sets the Certificate field in the declarative configuration to the given value.
func (b CertificateSigningRequestStatusBuilder) SetCertificate(value []byte) CertificateSigningRequestStatusBuilder {
	b.ensureInitialized()
	b.fields.Certificate = &value
	return b
}

// RemoveCertificate removes the Certificate field from the declarative configuration.
func (b CertificateSigningRequestStatusBuilder) RemoveCertificate() CertificateSigningRequestStatusBuilder {
	b.ensureInitialized()
	b.fields.Certificate = nil
	return b
}

// GetCertificate gets the Certificate field from the declarative configuration.
func (b CertificateSigningRequestStatusBuilder) GetCertificate() (value []byte, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Certificate; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts CertificateSigningRequestStatusBuilder to unstructured.
func (b *CertificateSigningRequestStatusBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to CertificateSigningRequestStatusBuilder, replacing the contents
// of CertificateSigningRequestStatusBuilder.
func (b *CertificateSigningRequestStatusBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &certificateSigningRequestStatusFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals CertificateSigningRequestStatusBuilder to JSON.
func (b *CertificateSigningRequestStatusBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into CertificateSigningRequestStatusBuilder, replacing the contents of
// CertificateSigningRequestStatusBuilder.
func (b *CertificateSigningRequestStatusBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// CertificateSigningRequestStatusList represents a list of CertificateSigningRequestStatusBuilder.
// Provided as a convenience.
type CertificateSigningRequestStatusList []CertificateSigningRequestStatusBuilder

// CertificateSigningRequestStatusList represents a map of CertificateSigningRequestStatusBuilder.
// Provided as a convenience.
type CertificateSigningRequestStatusMap map[string]CertificateSigningRequestStatusBuilder

func (b *CertificateSigningRequestStatusBuilder) preMarshal() {
}
func (b *CertificateSigningRequestStatusBuilder) postUnmarshal() {
}
