/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/typebuilders/meta/v1"
)

// CertificateSigningRequestApplyConfiguration represents an declarative configuration of the CertificateSigningRequest type for use
// with apply.
type CertificateSigningRequestApplyConfiguration struct {
	typeMeta *v1.TypeMetaApplyConfiguration // inlined type
	fields   certificateSigningRequestFields
}

// CertificateSigningRequestApplyConfiguration constructs an declarative configuration of the CertificateSigningRequest type for use with
// apply.
func CertificateSigningRequest() *CertificateSigningRequestApplyConfiguration {
	return &CertificateSigningRequestApplyConfiguration{}
}

// certificateSigningRequestFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in CertificateSigningRequestApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type certificateSigningRequestFields struct {
	Kind       *string                                            `json:"kind,omitempty"`       // inlined CertificateSigningRequestApplyConfiguration.typeMeta.Kind field
	APIVersion *string                                            `json:"apiVersion,omitempty"` // inlined CertificateSigningRequestApplyConfiguration.typeMeta.APIVersion field
	ObjectMeta *v1.ObjectMetaApplyConfiguration                   `json:"metadata,omitempty"`
	Spec       *CertificateSigningRequestSpecApplyConfiguration   `json:"spec,omitempty"`
	Status     *CertificateSigningRequestStatusApplyConfiguration `json:"status,omitempty"`
}

// SetTypeMeta sets the TypeMeta field in the declarative configuration to the given value.
func (b *CertificateSigningRequestApplyConfiguration) SetTypeMeta(value *v1.TypeMetaApplyConfiguration) *CertificateSigningRequestApplyConfiguration {
	b.typeMeta = value
	return b
}

// RemoveTypeMeta removes the TypeMeta field from the declarative configuration.
func (b *CertificateSigningRequestApplyConfiguration) RemoveTypeMeta() *CertificateSigningRequestApplyConfiguration {
	b.typeMeta = nil
	return b
}

// GetTypeMeta gets the TypeMeta field from the declarative configuration.
func (b *CertificateSigningRequestApplyConfiguration) GetTypeMeta() (value *v1.TypeMetaApplyConfiguration, ok bool) {
	return b.typeMeta, true
}

// SetObjectMeta sets the ObjectMeta field in the declarative configuration to the given value.
func (b *CertificateSigningRequestApplyConfiguration) SetObjectMeta(value *v1.ObjectMetaApplyConfiguration) *CertificateSigningRequestApplyConfiguration {
	b.fields.ObjectMeta = value
	return b
}

// RemoveObjectMeta removes the ObjectMeta field from the declarative configuration.
func (b *CertificateSigningRequestApplyConfiguration) RemoveObjectMeta() *CertificateSigningRequestApplyConfiguration {
	b.fields.ObjectMeta = nil
	return b
}

// GetObjectMeta gets the ObjectMeta field from the declarative configuration.
func (b *CertificateSigningRequestApplyConfiguration) GetObjectMeta() (value *v1.ObjectMetaApplyConfiguration, ok bool) {
	return b.fields.ObjectMeta, b.fields.ObjectMeta != nil
}

// SetSpec sets the Spec field in the declarative configuration to the given value.
func (b *CertificateSigningRequestApplyConfiguration) SetSpec(value *CertificateSigningRequestSpecApplyConfiguration) *CertificateSigningRequestApplyConfiguration {
	b.fields.Spec = value
	return b
}

// RemoveSpec removes the Spec field from the declarative configuration.
func (b *CertificateSigningRequestApplyConfiguration) RemoveSpec() *CertificateSigningRequestApplyConfiguration {
	b.fields.Spec = nil
	return b
}

// GetSpec gets the Spec field from the declarative configuration.
func (b *CertificateSigningRequestApplyConfiguration) GetSpec() (value *CertificateSigningRequestSpecApplyConfiguration, ok bool) {
	return b.fields.Spec, b.fields.Spec != nil
}

// SetStatus sets the Status field in the declarative configuration to the given value.
func (b *CertificateSigningRequestApplyConfiguration) SetStatus(value *CertificateSigningRequestStatusApplyConfiguration) *CertificateSigningRequestApplyConfiguration {
	b.fields.Status = value
	return b
}

// RemoveStatus removes the Status field from the declarative configuration.
func (b *CertificateSigningRequestApplyConfiguration) RemoveStatus() *CertificateSigningRequestApplyConfiguration {
	b.fields.Status = nil
	return b
}

// GetStatus gets the Status field from the declarative configuration.
func (b *CertificateSigningRequestApplyConfiguration) GetStatus() (value *CertificateSigningRequestStatusApplyConfiguration, ok bool) {
	return b.fields.Status, b.fields.Status != nil
}

// ToUnstructured converts CertificateSigningRequestApplyConfiguration to unstructured.
func (b *CertificateSigningRequestApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to CertificateSigningRequestApplyConfiguration, replacing the contents
// of CertificateSigningRequestApplyConfiguration.
func (b *CertificateSigningRequestApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &certificateSigningRequestFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals CertificateSigningRequestApplyConfiguration to JSON.
func (b *CertificateSigningRequestApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into CertificateSigningRequestApplyConfiguration, replacing the contents of
// CertificateSigningRequestApplyConfiguration.
func (b *CertificateSigningRequestApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// CertificateSigningRequestList represents a listAlias of CertificateSigningRequestApplyConfiguration.
type CertificateSigningRequestList []*CertificateSigningRequestApplyConfiguration

// CertificateSigningRequestList represents a map of CertificateSigningRequestApplyConfiguration.
type CertificateSigningRequestMap map[string]CertificateSigningRequestApplyConfiguration

func (b *CertificateSigningRequestApplyConfiguration) preMarshal() {
	if b.typeMeta != nil {
		if v, ok := b.typeMeta.GetKind(); ok {
			b.fields.Kind = &v
		}
		if v, ok := b.typeMeta.GetAPIVersion(); ok {
			b.fields.APIVersion = &v
		}
	}
}
func (b *CertificateSigningRequestApplyConfiguration) postUnmarshal() {
	if b.typeMeta == nil {
		b.typeMeta = &v1.TypeMetaApplyConfiguration{}
	}
	if b.fields.Kind != nil {
		b.typeMeta.SetKind(*b.fields.Kind)
	}
	if b.fields.APIVersion != nil {
		b.typeMeta.SetAPIVersion(*b.fields.APIVersion)
	}
}
