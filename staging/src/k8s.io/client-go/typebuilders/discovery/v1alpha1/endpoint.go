/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1alpha1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/typebuilders/core/v1"
)

// EndpointBuilder represents an declarative configuration of the Endpoint type for use
// with apply.
type EndpointBuilder struct {
	fields endpointFields
}

// endpointFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in EndpointBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type endpointFields struct {
	Addresses  *[]string                  `json:"addresses,omitempty"`
	Conditions *EndpointConditionsBuilder `json:"conditions,omitempty"`
	Hostname   *string                    `json:"hostname,omitempty"`
	TargetRef  *v1.ObjectReferenceBuilder `json:"targetRef,omitempty"`
	Topology   *map[string]string         `json:"topology,omitempty"`
}

// Endpoint constructs an declarative configuration of the Endpoint type for use with
// apply.
func Endpoint() *EndpointBuilder {
	return &EndpointBuilder{}
}

// SetAddresses sets the Addresses field in the declarative configuration to the given value.
func (b *EndpointBuilder) SetAddresses(value []string) *EndpointBuilder {
	b.fields.Addresses = &value
	return b
}

// RemoveAddresses removes the Addresses field from the declarative configuration.
func (b *EndpointBuilder) RemoveAddresses() *EndpointBuilder {
	b.fields.Addresses = nil
	return b
}

// GetAddresses gets the Addresses field from the declarative configuration.
func (b *EndpointBuilder) GetAddresses() (value []string, ok bool) {
	if v := b.fields.Addresses; v != nil {
		return *v, true
	}
	return value, false
}

// SetConditions sets the Conditions field in the declarative configuration to the given value.
func (b *EndpointBuilder) SetConditions(value *EndpointConditionsBuilder) *EndpointBuilder {
	b.fields.Conditions = value
	return b
}

// RemoveConditions removes the Conditions field from the declarative configuration.
func (b *EndpointBuilder) RemoveConditions() *EndpointBuilder {
	b.fields.Conditions = nil
	return b
}

// GetConditions gets the Conditions field from the declarative configuration.
func (b *EndpointBuilder) GetConditions() (value *EndpointConditionsBuilder, ok bool) {
	return b.fields.Conditions, b.fields.Conditions != nil
}

// SetHostname sets the Hostname field in the declarative configuration to the given value.
func (b *EndpointBuilder) SetHostname(value string) *EndpointBuilder {
	b.fields.Hostname = &value
	return b
}

// RemoveHostname removes the Hostname field from the declarative configuration.
func (b *EndpointBuilder) RemoveHostname() *EndpointBuilder {
	b.fields.Hostname = nil
	return b
}

// GetHostname gets the Hostname field from the declarative configuration.
func (b *EndpointBuilder) GetHostname() (value string, ok bool) {
	if v := b.fields.Hostname; v != nil {
		return *v, true
	}
	return value, false
}

// SetTargetRef sets the TargetRef field in the declarative configuration to the given value.
func (b *EndpointBuilder) SetTargetRef(value *v1.ObjectReferenceBuilder) *EndpointBuilder {
	b.fields.TargetRef = value
	return b
}

// RemoveTargetRef removes the TargetRef field from the declarative configuration.
func (b *EndpointBuilder) RemoveTargetRef() *EndpointBuilder {
	b.fields.TargetRef = nil
	return b
}

// GetTargetRef gets the TargetRef field from the declarative configuration.
func (b *EndpointBuilder) GetTargetRef() (value *v1.ObjectReferenceBuilder, ok bool) {
	return b.fields.TargetRef, b.fields.TargetRef != nil
}

// SetTopology sets the Topology field in the declarative configuration to the given value.
func (b *EndpointBuilder) SetTopology(value map[string]string) *EndpointBuilder {
	b.fields.Topology = &value
	return b
}

// RemoveTopology removes the Topology field from the declarative configuration.
func (b *EndpointBuilder) RemoveTopology() *EndpointBuilder {
	b.fields.Topology = nil
	return b
}

// GetTopology gets the Topology field from the declarative configuration.
func (b *EndpointBuilder) GetTopology() (value map[string]string, ok bool) {
	if v := b.fields.Topology; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts EndpointBuilder to unstructured.
func (b *EndpointBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to EndpointBuilder, replacing the contents
// of EndpointBuilder.
func (b *EndpointBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &endpointFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals EndpointBuilder to JSON.
func (b *EndpointBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into EndpointBuilder, replacing the contents of
// EndpointBuilder.
func (b *EndpointBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// EndpointList represents a list of EndpointBuilder.
type EndpointList []*EndpointBuilder

// EndpointList represents a map of EndpointBuilder.
type EndpointMap map[string]EndpointBuilder

func (b *EndpointBuilder) preMarshal() {
}
func (b *EndpointBuilder) postUnmarshal() {
}
