/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"

	v1 "k8s.io/api/core/v1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// EndpointPortBuilder represents an declarative configuration of the EndpointPort type for use
// with apply.
type EndpointPortBuilder struct {
	fields *endpointPortFields
}

// endpointPortFields is used by EndpointPortBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in EndpointPortBuilder before marshalling, and
// are copied out to the builder type in EndpointPortBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type endpointPortFields struct {
	Name        *string      `json:"name,omitempty"`
	Protocol    *v1.Protocol `json:"protocol,omitempty"`
	Port        *int32       `json:"port,omitempty"`
	AppProtocol *string      `json:"appProtocol,omitempty"`
}

func (b *EndpointPortBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &endpointPortFields{}
	}
}

// EndpointPort constructs an declarative configuration of the EndpointPort type for use with
// apply.
// Provided as a convenience.
func EndpointPort() EndpointPortBuilder {
	return EndpointPortBuilder{fields: &endpointPortFields{}}
}

// SetName sets the Name field in the declarative configuration to the given value.
func (b EndpointPortBuilder) SetName(value string) EndpointPortBuilder {
	b.ensureInitialized()
	b.fields.Name = &value
	return b
}

// RemoveName removes the Name field from the declarative configuration.
func (b EndpointPortBuilder) RemoveName() EndpointPortBuilder {
	b.ensureInitialized()
	b.fields.Name = nil
	return b
}

// GetName gets the Name field from the declarative configuration.
func (b EndpointPortBuilder) GetName() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Name; v != nil {
		return *v, true
	}
	return value, false
}

// SetProtocol sets the Protocol field in the declarative configuration to the given value.
func (b EndpointPortBuilder) SetProtocol(value v1.Protocol) EndpointPortBuilder {
	b.ensureInitialized()
	b.fields.Protocol = &value
	return b
}

// RemoveProtocol removes the Protocol field from the declarative configuration.
func (b EndpointPortBuilder) RemoveProtocol() EndpointPortBuilder {
	b.ensureInitialized()
	b.fields.Protocol = nil
	return b
}

// GetProtocol gets the Protocol field from the declarative configuration.
func (b EndpointPortBuilder) GetProtocol() (value v1.Protocol, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Protocol; v != nil {
		return *v, true
	}
	return value, false
}

// SetPort sets the Port field in the declarative configuration to the given value.
func (b EndpointPortBuilder) SetPort(value int32) EndpointPortBuilder {
	b.ensureInitialized()
	b.fields.Port = &value
	return b
}

// RemovePort removes the Port field from the declarative configuration.
func (b EndpointPortBuilder) RemovePort() EndpointPortBuilder {
	b.ensureInitialized()
	b.fields.Port = nil
	return b
}

// GetPort gets the Port field from the declarative configuration.
func (b EndpointPortBuilder) GetPort() (value int32, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Port; v != nil {
		return *v, true
	}
	return value, false
}

// SetAppProtocol sets the AppProtocol field in the declarative configuration to the given value.
func (b EndpointPortBuilder) SetAppProtocol(value string) EndpointPortBuilder {
	b.ensureInitialized()
	b.fields.AppProtocol = &value
	return b
}

// RemoveAppProtocol removes the AppProtocol field from the declarative configuration.
func (b EndpointPortBuilder) RemoveAppProtocol() EndpointPortBuilder {
	b.ensureInitialized()
	b.fields.AppProtocol = nil
	return b
}

// GetAppProtocol gets the AppProtocol field from the declarative configuration.
func (b EndpointPortBuilder) GetAppProtocol() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.AppProtocol; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts EndpointPortBuilder to unstructured.
func (b *EndpointPortBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to EndpointPortBuilder, replacing the contents
// of EndpointPortBuilder.
func (b *EndpointPortBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &endpointPortFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals EndpointPortBuilder to JSON.
func (b *EndpointPortBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into EndpointPortBuilder, replacing the contents of
// EndpointPortBuilder.
func (b *EndpointPortBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// EndpointPortList represents a list of EndpointPortBuilder.
// Provided as a convenience.
type EndpointPortList []EndpointPortBuilder

// EndpointPortList represents a map of EndpointPortBuilder.
// Provided as a convenience.
type EndpointPortMap map[string]EndpointPortBuilder

func (b *EndpointPortBuilder) preMarshal() {
}
func (b *EndpointPortBuilder) postUnmarshal() {
}
