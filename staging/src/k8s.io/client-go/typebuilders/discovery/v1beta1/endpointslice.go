/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"

	v1beta1 "k8s.io/api/discovery/v1beta1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/typebuilders/meta/v1"
)

// EndpointSliceApplyConfiguration represents an declarative configuration of the EndpointSlice type for use
// with apply.
type EndpointSliceApplyConfiguration struct {
	typeMeta *v1.TypeMetaApplyConfiguration // inlined type
	fields   endpointSliceFields
}

// EndpointSliceApplyConfiguration constructs an declarative configuration of the EndpointSlice type for use with
// apply.
func EndpointSlice() *EndpointSliceApplyConfiguration {
	return &EndpointSliceApplyConfiguration{}
}

// endpointSliceFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in EndpointSliceApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type endpointSliceFields struct {
	Kind        *string                          `json:"kind,omitempty"`       // inlined EndpointSliceApplyConfiguration.typeMeta.Kind field
	APIVersion  *string                          `json:"apiVersion,omitempty"` // inlined EndpointSliceApplyConfiguration.typeMeta.APIVersion field
	ObjectMeta  *v1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	AddressType *v1beta1.AddressType             `json:"addressType,omitempty"`
	Endpoints   *EndpointList                    `json:"endpoints,omitempty"`
	Ports       *EndpointPortList                `json:"ports,omitempty"`
}

// SetTypeMeta sets the TypeMeta field in the declarative configuration to the given value.
func (b *EndpointSliceApplyConfiguration) SetTypeMeta(value *v1.TypeMetaApplyConfiguration) *EndpointSliceApplyConfiguration {
	b.typeMeta = value
	return b
}

// RemoveTypeMeta removes the TypeMeta field from the declarative configuration.
func (b *EndpointSliceApplyConfiguration) RemoveTypeMeta() *EndpointSliceApplyConfiguration {
	b.typeMeta = nil
	return b
}

// GetTypeMeta gets the TypeMeta field from the declarative configuration.
func (b *EndpointSliceApplyConfiguration) GetTypeMeta() (value *v1.TypeMetaApplyConfiguration, ok bool) {
	return b.typeMeta, true
}

// SetObjectMeta sets the ObjectMeta field in the declarative configuration to the given value.
func (b *EndpointSliceApplyConfiguration) SetObjectMeta(value *v1.ObjectMetaApplyConfiguration) *EndpointSliceApplyConfiguration {
	b.fields.ObjectMeta = value
	return b
}

// RemoveObjectMeta removes the ObjectMeta field from the declarative configuration.
func (b *EndpointSliceApplyConfiguration) RemoveObjectMeta() *EndpointSliceApplyConfiguration {
	b.fields.ObjectMeta = nil
	return b
}

// GetObjectMeta gets the ObjectMeta field from the declarative configuration.
func (b *EndpointSliceApplyConfiguration) GetObjectMeta() (value *v1.ObjectMetaApplyConfiguration, ok bool) {
	return b.fields.ObjectMeta, b.fields.ObjectMeta != nil
}

// SetAddressType sets the AddressType field in the declarative configuration to the given value.
func (b *EndpointSliceApplyConfiguration) SetAddressType(value v1beta1.AddressType) *EndpointSliceApplyConfiguration {
	b.fields.AddressType = &value
	return b
}

// RemoveAddressType removes the AddressType field from the declarative configuration.
func (b *EndpointSliceApplyConfiguration) RemoveAddressType() *EndpointSliceApplyConfiguration {
	b.fields.AddressType = nil
	return b
}

// GetAddressType gets the AddressType field from the declarative configuration.
func (b *EndpointSliceApplyConfiguration) GetAddressType() (value v1beta1.AddressType, ok bool) {
	if v := b.fields.AddressType; v != nil {
		return *v, true
	}
	return value, false
}

// SetEndpoints sets the Endpoints field in the declarative configuration to the given value.
func (b *EndpointSliceApplyConfiguration) SetEndpoints(value EndpointList) *EndpointSliceApplyConfiguration {
	b.fields.Endpoints = &value
	return b
}

// RemoveEndpoints removes the Endpoints field from the declarative configuration.
func (b *EndpointSliceApplyConfiguration) RemoveEndpoints() *EndpointSliceApplyConfiguration {
	b.fields.Endpoints = nil
	return b
}

// GetEndpoints gets the Endpoints field from the declarative configuration.
func (b *EndpointSliceApplyConfiguration) GetEndpoints() (value EndpointList, ok bool) {
	if v := b.fields.Endpoints; v != nil {
		return *v, true
	}
	return value, false
}

// SetPorts sets the Ports field in the declarative configuration to the given value.
func (b *EndpointSliceApplyConfiguration) SetPorts(value EndpointPortList) *EndpointSliceApplyConfiguration {
	b.fields.Ports = &value
	return b
}

// RemovePorts removes the Ports field from the declarative configuration.
func (b *EndpointSliceApplyConfiguration) RemovePorts() *EndpointSliceApplyConfiguration {
	b.fields.Ports = nil
	return b
}

// GetPorts gets the Ports field from the declarative configuration.
func (b *EndpointSliceApplyConfiguration) GetPorts() (value EndpointPortList, ok bool) {
	if v := b.fields.Ports; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts EndpointSliceApplyConfiguration to unstructured.
func (b *EndpointSliceApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to EndpointSliceApplyConfiguration, replacing the contents
// of EndpointSliceApplyConfiguration.
func (b *EndpointSliceApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &endpointSliceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals EndpointSliceApplyConfiguration to JSON.
func (b *EndpointSliceApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into EndpointSliceApplyConfiguration, replacing the contents of
// EndpointSliceApplyConfiguration.
func (b *EndpointSliceApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// EndpointSliceList represents a listAlias of EndpointSliceApplyConfiguration.
type EndpointSliceList []*EndpointSliceApplyConfiguration

// EndpointSliceList represents a map of EndpointSliceApplyConfiguration.
type EndpointSliceMap map[string]EndpointSliceApplyConfiguration

func (b *EndpointSliceApplyConfiguration) preMarshal() {
	if b.typeMeta != nil {
		if v, ok := b.typeMeta.GetKind(); ok {
			b.fields.Kind = &v
		}
		if v, ok := b.typeMeta.GetAPIVersion(); ok {
			b.fields.APIVersion = &v
		}
	}
}
func (b *EndpointSliceApplyConfiguration) postUnmarshal() {
	if b.typeMeta == nil {
		b.typeMeta = &v1.TypeMetaApplyConfiguration{}
	}
	if b.fields.Kind != nil {
		b.typeMeta.SetKind(*b.fields.Kind)
	}
	if b.fields.APIVersion != nil {
		b.typeMeta.SetAPIVersion(*b.fields.APIVersion)
	}
}
