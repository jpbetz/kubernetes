/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1alpha1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ImageReviewStatusBuilder represents an declarative configuration of the ImageReviewStatus type for use
// with apply.
type ImageReviewStatusBuilder struct {
	fields *imageReviewStatusFields
}

// imageReviewStatusFields is used by ImageReviewStatusBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in ImageReviewStatusBuilder before marshalling, and
// are copied out to the builder type in ImageReviewStatusBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type imageReviewStatusFields struct {
	Allowed          *bool              `json:"allowed,omitempty"`
	Reason           *string            `json:"reason,omitempty"`
	AuditAnnotations *map[string]string `json:"auditAnnotations,omitempty"`
}

func (b *ImageReviewStatusBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &imageReviewStatusFields{}
	}
}

// ImageReviewStatus constructs an declarative configuration of the ImageReviewStatus type for use with
// apply.
// Provided as a convenience.
func ImageReviewStatus() ImageReviewStatusBuilder {
	return ImageReviewStatusBuilder{fields: &imageReviewStatusFields{}}
}

// SetAllowed sets the Allowed field in the declarative configuration to the given value.
func (b ImageReviewStatusBuilder) SetAllowed(value bool) ImageReviewStatusBuilder {
	b.ensureInitialized()
	b.fields.Allowed = &value
	return b
}

// RemoveAllowed removes the Allowed field from the declarative configuration.
func (b ImageReviewStatusBuilder) RemoveAllowed() ImageReviewStatusBuilder {
	b.ensureInitialized()
	b.fields.Allowed = nil
	return b
}

// GetAllowed gets the Allowed field from the declarative configuration.
func (b ImageReviewStatusBuilder) GetAllowed() (value bool, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Allowed; v != nil {
		return *v, true
	}
	return value, false
}

// SetReason sets the Reason field in the declarative configuration to the given value.
func (b ImageReviewStatusBuilder) SetReason(value string) ImageReviewStatusBuilder {
	b.ensureInitialized()
	b.fields.Reason = &value
	return b
}

// RemoveReason removes the Reason field from the declarative configuration.
func (b ImageReviewStatusBuilder) RemoveReason() ImageReviewStatusBuilder {
	b.ensureInitialized()
	b.fields.Reason = nil
	return b
}

// GetReason gets the Reason field from the declarative configuration.
func (b ImageReviewStatusBuilder) GetReason() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Reason; v != nil {
		return *v, true
	}
	return value, false
}

// SetAuditAnnotations sets the AuditAnnotations field in the declarative configuration to the given value.
func (b ImageReviewStatusBuilder) SetAuditAnnotations(value map[string]string) ImageReviewStatusBuilder {
	b.ensureInitialized()
	b.fields.AuditAnnotations = &value
	return b
}

// RemoveAuditAnnotations removes the AuditAnnotations field from the declarative configuration.
func (b ImageReviewStatusBuilder) RemoveAuditAnnotations() ImageReviewStatusBuilder {
	b.ensureInitialized()
	b.fields.AuditAnnotations = nil
	return b
}

// GetAuditAnnotations gets the AuditAnnotations field from the declarative configuration.
func (b ImageReviewStatusBuilder) GetAuditAnnotations() (value map[string]string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.AuditAnnotations; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ImageReviewStatusBuilder to unstructured.
func (b *ImageReviewStatusBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ImageReviewStatusBuilder, replacing the contents
// of ImageReviewStatusBuilder.
func (b *ImageReviewStatusBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &imageReviewStatusFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ImageReviewStatusBuilder to JSON.
func (b *ImageReviewStatusBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into ImageReviewStatusBuilder, replacing the contents of
// ImageReviewStatusBuilder.
func (b *ImageReviewStatusBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ImageReviewStatusList represents a list of ImageReviewStatusBuilder.
// Provided as a convenience.
type ImageReviewStatusList []ImageReviewStatusBuilder

// ImageReviewStatusList represents a map of ImageReviewStatusBuilder.
// Provided as a convenience.
type ImageReviewStatusMap map[string]ImageReviewStatusBuilder

func (b *ImageReviewStatusBuilder) preMarshal() {
}
func (b *ImageReviewStatusBuilder) postUnmarshal() {
}
