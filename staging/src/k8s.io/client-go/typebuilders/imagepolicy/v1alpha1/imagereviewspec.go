/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1alpha1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ImageReviewSpecBuilder represents an declarative configuration of the ImageReviewSpec type for use
// with apply.
type ImageReviewSpecBuilder struct {
	fields *imageReviewSpecFields
}

// imageReviewSpecFields is used by ImageReviewSpecBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in ImageReviewSpecBuilder before marshalling, and
// are copied out to the builder type in ImageReviewSpecBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type imageReviewSpecFields struct {
	Containers  *ImageReviewContainerSpecList `json:"containers,omitempty"`
	Annotations *map[string]string            `json:"annotations,omitempty"`
	Namespace   *string                       `json:"namespace,omitempty"`
}

func (b *ImageReviewSpecBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &imageReviewSpecFields{}
	}
}

// ImageReviewSpec constructs an declarative configuration of the ImageReviewSpec type for use with
// apply.
// Provided as a convenience.
func ImageReviewSpec() ImageReviewSpecBuilder {
	return ImageReviewSpecBuilder{fields: &imageReviewSpecFields{}}
}

// SetContainers sets the Containers field in the declarative configuration to the given value.
func (b ImageReviewSpecBuilder) SetContainers(value ImageReviewContainerSpecList) ImageReviewSpecBuilder {
	b.ensureInitialized()
	b.fields.Containers = &value
	return b
}

// RemoveContainers removes the Containers field from the declarative configuration.
func (b ImageReviewSpecBuilder) RemoveContainers() ImageReviewSpecBuilder {
	b.ensureInitialized()
	b.fields.Containers = nil
	return b
}

// GetContainers gets the Containers field from the declarative configuration.
func (b ImageReviewSpecBuilder) GetContainers() (value ImageReviewContainerSpecList, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Containers; v != nil {
		return *v, true
	}
	return value, false
}

// SetAnnotations sets the Annotations field in the declarative configuration to the given value.
func (b ImageReviewSpecBuilder) SetAnnotations(value map[string]string) ImageReviewSpecBuilder {
	b.ensureInitialized()
	b.fields.Annotations = &value
	return b
}

// RemoveAnnotations removes the Annotations field from the declarative configuration.
func (b ImageReviewSpecBuilder) RemoveAnnotations() ImageReviewSpecBuilder {
	b.ensureInitialized()
	b.fields.Annotations = nil
	return b
}

// GetAnnotations gets the Annotations field from the declarative configuration.
func (b ImageReviewSpecBuilder) GetAnnotations() (value map[string]string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Annotations; v != nil {
		return *v, true
	}
	return value, false
}

// SetNamespace sets the Namespace field in the declarative configuration to the given value.
func (b ImageReviewSpecBuilder) SetNamespace(value string) ImageReviewSpecBuilder {
	b.ensureInitialized()
	b.fields.Namespace = &value
	return b
}

// RemoveNamespace removes the Namespace field from the declarative configuration.
func (b ImageReviewSpecBuilder) RemoveNamespace() ImageReviewSpecBuilder {
	b.ensureInitialized()
	b.fields.Namespace = nil
	return b
}

// GetNamespace gets the Namespace field from the declarative configuration.
func (b ImageReviewSpecBuilder) GetNamespace() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Namespace; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ImageReviewSpecBuilder to unstructured.
func (b *ImageReviewSpecBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ImageReviewSpecBuilder, replacing the contents
// of ImageReviewSpecBuilder.
func (b *ImageReviewSpecBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &imageReviewSpecFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ImageReviewSpecBuilder to JSON.
func (b *ImageReviewSpecBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into ImageReviewSpecBuilder, replacing the contents of
// ImageReviewSpecBuilder.
func (b *ImageReviewSpecBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ImageReviewSpecList represents a list of ImageReviewSpecBuilder.
// Provided as a convenience.
type ImageReviewSpecList []ImageReviewSpecBuilder

// ImageReviewSpecList represents a map of ImageReviewSpecBuilder.
// Provided as a convenience.
type ImageReviewSpecMap map[string]ImageReviewSpecBuilder

func (b *ImageReviewSpecBuilder) preMarshal() {
}
func (b *ImageReviewSpecBuilder) postUnmarshal() {
}
