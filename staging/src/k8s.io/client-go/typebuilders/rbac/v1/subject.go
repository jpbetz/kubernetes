/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// SubjectApplyConfiguration represents an declarative configuration of the Subject type for use
// with apply.
type SubjectApplyConfiguration struct {
	fields subjectFields
}

// SubjectApplyConfiguration constructs an declarative configuration of the Subject type for use with
// apply.
func Subject() *SubjectApplyConfiguration {
	return &SubjectApplyConfiguration{}
}

// subjectFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in SubjectApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type subjectFields struct {
	Kind      *string `json:"kind,omitempty"`
	APIGroup  *string `json:"apiGroup,omitempty"`
	Name      *string `json:"name,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
}

// SetKind sets the Kind field in the declarative configuration to the given value.
func (b *SubjectApplyConfiguration) SetKind(value string) *SubjectApplyConfiguration {
	b.fields.Kind = &value
	return b
}

// RemoveKind removes the Kind field from the declarative configuration.
func (b *SubjectApplyConfiguration) RemoveKind() *SubjectApplyConfiguration {
	b.fields.Kind = nil
	return b
}

// GetKind gets the Kind field from the declarative configuration.
func (b *SubjectApplyConfiguration) GetKind() (value string, ok bool) {
	if v := b.fields.Kind; v != nil {
		return *v, true
	}
	return value, false
}

// SetAPIGroup sets the APIGroup field in the declarative configuration to the given value.
func (b *SubjectApplyConfiguration) SetAPIGroup(value string) *SubjectApplyConfiguration {
	b.fields.APIGroup = &value
	return b
}

// RemoveAPIGroup removes the APIGroup field from the declarative configuration.
func (b *SubjectApplyConfiguration) RemoveAPIGroup() *SubjectApplyConfiguration {
	b.fields.APIGroup = nil
	return b
}

// GetAPIGroup gets the APIGroup field from the declarative configuration.
func (b *SubjectApplyConfiguration) GetAPIGroup() (value string, ok bool) {
	if v := b.fields.APIGroup; v != nil {
		return *v, true
	}
	return value, false
}

// SetName sets the Name field in the declarative configuration to the given value.
func (b *SubjectApplyConfiguration) SetName(value string) *SubjectApplyConfiguration {
	b.fields.Name = &value
	return b
}

// RemoveName removes the Name field from the declarative configuration.
func (b *SubjectApplyConfiguration) RemoveName() *SubjectApplyConfiguration {
	b.fields.Name = nil
	return b
}

// GetName gets the Name field from the declarative configuration.
func (b *SubjectApplyConfiguration) GetName() (value string, ok bool) {
	if v := b.fields.Name; v != nil {
		return *v, true
	}
	return value, false
}

// SetNamespace sets the Namespace field in the declarative configuration to the given value.
func (b *SubjectApplyConfiguration) SetNamespace(value string) *SubjectApplyConfiguration {
	b.fields.Namespace = &value
	return b
}

// RemoveNamespace removes the Namespace field from the declarative configuration.
func (b *SubjectApplyConfiguration) RemoveNamespace() *SubjectApplyConfiguration {
	b.fields.Namespace = nil
	return b
}

// GetNamespace gets the Namespace field from the declarative configuration.
func (b *SubjectApplyConfiguration) GetNamespace() (value string, ok bool) {
	if v := b.fields.Namespace; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts SubjectApplyConfiguration to unstructured.
func (b *SubjectApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to SubjectApplyConfiguration, replacing the contents
// of SubjectApplyConfiguration.
func (b *SubjectApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &subjectFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals SubjectApplyConfiguration to JSON.
func (b *SubjectApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into SubjectApplyConfiguration, replacing the contents of
// SubjectApplyConfiguration.
func (b *SubjectApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// SubjectList represents a listAlias of SubjectApplyConfiguration.
type SubjectList []*SubjectApplyConfiguration

// SubjectList represents a map of SubjectApplyConfiguration.
type SubjectMap map[string]SubjectApplyConfiguration

func (b *SubjectApplyConfiguration) preMarshal() {
}
func (b *SubjectApplyConfiguration) postUnmarshal() {
}
