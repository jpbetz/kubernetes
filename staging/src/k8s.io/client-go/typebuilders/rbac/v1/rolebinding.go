/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/typebuilders/meta/v1"
)

// RoleBindingBuilder represents an declarative configuration of the RoleBinding type for use
// with apply.
type RoleBindingBuilder struct {
	typeMeta v1.TypeMetaBuilder // inlined type
	fields   *roleBindingFields
}

// roleBindingFields is used by RoleBindingBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in RoleBindingBuilder before marshalling, and
// are copied out to the builder type in RoleBindingBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type roleBindingFields struct {
	Kind       *string               `json:"kind,omitempty"`       // inlined RoleBindingBuilder.typeMeta.Kind field
	APIVersion *string               `json:"apiVersion,omitempty"` // inlined RoleBindingBuilder.typeMeta.APIVersion field
	ObjectMeta *v1.ObjectMetaBuilder `json:"metadata,omitempty"`
	Subjects   *SubjectList          `json:"subjects,omitempty"`
	RoleRef    *RoleRefBuilder       `json:"roleRef,omitempty"`
}

func (b *RoleBindingBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &roleBindingFields{}
	}
}

// RoleBinding constructs an declarative configuration of the RoleBinding type for use with
// apply.
// Provided as a convenience.
func RoleBinding() RoleBindingBuilder {
	return RoleBindingBuilder{fields: &roleBindingFields{}}
}

// SetTypeMeta sets the TypeMeta field in the declarative configuration to the given value.
func (b RoleBindingBuilder) SetTypeMeta(value v1.TypeMetaBuilder) RoleBindingBuilder {
	b.ensureInitialized()
	b.typeMeta = value
	return b
}

// RemoveTypeMeta removes the TypeMeta field from the declarative configuration.
func (b RoleBindingBuilder) RemoveTypeMeta() RoleBindingBuilder {
	b.ensureInitialized()
	b.typeMeta = v1.TypeMetaBuilder{}
	return b
}

// GetTypeMeta gets the TypeMeta field from the declarative configuration.
func (b RoleBindingBuilder) GetTypeMeta() (value v1.TypeMetaBuilder, ok bool) {
	b.ensureInitialized()
	return b.typeMeta, true
}

// SetObjectMeta sets the ObjectMeta field in the declarative configuration to the given value.
func (b RoleBindingBuilder) SetObjectMeta(value v1.ObjectMetaBuilder) RoleBindingBuilder {
	b.ensureInitialized()
	b.fields.ObjectMeta = &value
	return b
}

// RemoveObjectMeta removes the ObjectMeta field from the declarative configuration.
func (b RoleBindingBuilder) RemoveObjectMeta() RoleBindingBuilder {
	b.ensureInitialized()
	b.fields.ObjectMeta = nil
	return b
}

// GetObjectMeta gets the ObjectMeta field from the declarative configuration.
func (b RoleBindingBuilder) GetObjectMeta() (value v1.ObjectMetaBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.ObjectMeta; v != nil {
		return *v, true
	}
	return value, false
}

// SetSubjects sets the Subjects field in the declarative configuration to the given value.
func (b RoleBindingBuilder) SetSubjects(value SubjectList) RoleBindingBuilder {
	b.ensureInitialized()
	b.fields.Subjects = &value
	return b
}

// RemoveSubjects removes the Subjects field from the declarative configuration.
func (b RoleBindingBuilder) RemoveSubjects() RoleBindingBuilder {
	b.ensureInitialized()
	b.fields.Subjects = nil
	return b
}

// GetSubjects gets the Subjects field from the declarative configuration.
func (b RoleBindingBuilder) GetSubjects() (value SubjectList, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Subjects; v != nil {
		return *v, true
	}
	return value, false
}

// SetRoleRef sets the RoleRef field in the declarative configuration to the given value.
func (b RoleBindingBuilder) SetRoleRef(value RoleRefBuilder) RoleBindingBuilder {
	b.ensureInitialized()
	b.fields.RoleRef = &value
	return b
}

// RemoveRoleRef removes the RoleRef field from the declarative configuration.
func (b RoleBindingBuilder) RemoveRoleRef() RoleBindingBuilder {
	b.ensureInitialized()
	b.fields.RoleRef = nil
	return b
}

// GetRoleRef gets the RoleRef field from the declarative configuration.
func (b RoleBindingBuilder) GetRoleRef() (value RoleRefBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.RoleRef; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts RoleBindingBuilder to unstructured.
func (b *RoleBindingBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to RoleBindingBuilder, replacing the contents
// of RoleBindingBuilder.
func (b *RoleBindingBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &roleBindingFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals RoleBindingBuilder to JSON.
func (b *RoleBindingBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into RoleBindingBuilder, replacing the contents of
// RoleBindingBuilder.
func (b *RoleBindingBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// RoleBindingList represents a list of RoleBindingBuilder.
// Provided as a convenience.
type RoleBindingList []RoleBindingBuilder

// RoleBindingList represents a map of RoleBindingBuilder.
// Provided as a convenience.
type RoleBindingMap map[string]RoleBindingBuilder

func (b *RoleBindingBuilder) preMarshal() {
	if v, ok := b.typeMeta.GetKind(); ok {
		b.fields.Kind = &v
	}
	if v, ok := b.typeMeta.GetAPIVersion(); ok {
		b.fields.APIVersion = &v
	}
}
func (b *RoleBindingBuilder) postUnmarshal() {
	if b.fields.Kind != nil {
		b.typeMeta.SetKind(*b.fields.Kind)
	}
	if b.fields.APIVersion != nil {
		b.typeMeta.SetAPIVersion(*b.fields.APIVersion)
	}
}
