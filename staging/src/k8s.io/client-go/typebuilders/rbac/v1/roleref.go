/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// RoleRefApplyConfiguration represents an declarative configuration of the RoleRef type for use
// with apply.
type RoleRefApplyConfiguration struct {
	fields roleRefFields
}

// RoleRefApplyConfiguration constructs an declarative configuration of the RoleRef type for use with
// apply.
func RoleRef() *RoleRefApplyConfiguration {
	return &RoleRefApplyConfiguration{}
}

// roleRefFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in RoleRefApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type roleRefFields struct {
	APIGroup *string `json:"apiGroup,omitempty"`
	Kind     *string `json:"kind,omitempty"`
	Name     *string `json:"name,omitempty"`
}

// SetAPIGroup sets the APIGroup field in the declarative configuration to the given value.
func (b *RoleRefApplyConfiguration) SetAPIGroup(value string) *RoleRefApplyConfiguration {
	b.fields.APIGroup = &value
	return b
}

// RemoveAPIGroup removes the APIGroup field from the declarative configuration.
func (b *RoleRefApplyConfiguration) RemoveAPIGroup() *RoleRefApplyConfiguration {
	b.fields.APIGroup = nil
	return b
}

// GetAPIGroup gets the APIGroup field from the declarative configuration.
func (b *RoleRefApplyConfiguration) GetAPIGroup() (value string, ok bool) {
	if v := b.fields.APIGroup; v != nil {
		return *v, true
	}
	return value, false
}

// SetKind sets the Kind field in the declarative configuration to the given value.
func (b *RoleRefApplyConfiguration) SetKind(value string) *RoleRefApplyConfiguration {
	b.fields.Kind = &value
	return b
}

// RemoveKind removes the Kind field from the declarative configuration.
func (b *RoleRefApplyConfiguration) RemoveKind() *RoleRefApplyConfiguration {
	b.fields.Kind = nil
	return b
}

// GetKind gets the Kind field from the declarative configuration.
func (b *RoleRefApplyConfiguration) GetKind() (value string, ok bool) {
	if v := b.fields.Kind; v != nil {
		return *v, true
	}
	return value, false
}

// SetName sets the Name field in the declarative configuration to the given value.
func (b *RoleRefApplyConfiguration) SetName(value string) *RoleRefApplyConfiguration {
	b.fields.Name = &value
	return b
}

// RemoveName removes the Name field from the declarative configuration.
func (b *RoleRefApplyConfiguration) RemoveName() *RoleRefApplyConfiguration {
	b.fields.Name = nil
	return b
}

// GetName gets the Name field from the declarative configuration.
func (b *RoleRefApplyConfiguration) GetName() (value string, ok bool) {
	if v := b.fields.Name; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts RoleRefApplyConfiguration to unstructured.
func (b *RoleRefApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to RoleRefApplyConfiguration, replacing the contents
// of RoleRefApplyConfiguration.
func (b *RoleRefApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &roleRefFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals RoleRefApplyConfiguration to JSON.
func (b *RoleRefApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into RoleRefApplyConfiguration, replacing the contents of
// RoleRefApplyConfiguration.
func (b *RoleRefApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// RoleRefList represents a listAlias of RoleRefApplyConfiguration.
type RoleRefList []*RoleRefApplyConfiguration

// RoleRefList represents a map of RoleRefApplyConfiguration.
type RoleRefMap map[string]RoleRefApplyConfiguration

func (b *RoleRefApplyConfiguration) preMarshal() {
}
func (b *RoleRefApplyConfiguration) postUnmarshal() {
}
