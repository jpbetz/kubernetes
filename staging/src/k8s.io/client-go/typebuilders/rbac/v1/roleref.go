/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// RoleRefBuilder represents an declarative configuration of the RoleRef type for use
// with apply.
type RoleRefBuilder struct {
	fields *roleRefFields
}

// roleRefFields is used by RoleRefBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in RoleRefBuilder before marshalling, and
// are copied out to the builder type in RoleRefBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type roleRefFields struct {
	APIGroup *string `json:"apiGroup,omitempty"`
	Kind     *string `json:"kind,omitempty"`
	Name     *string `json:"name,omitempty"`
}

func (b *RoleRefBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &roleRefFields{}
	}
}

// RoleRef constructs an declarative configuration of the RoleRef type for use with
// apply.
// Provided as a convenience.
func RoleRef() RoleRefBuilder {
	return RoleRefBuilder{fields: &roleRefFields{}}
}

// SetAPIGroup sets the APIGroup field in the declarative configuration to the given value.
func (b RoleRefBuilder) SetAPIGroup(value string) RoleRefBuilder {
	b.ensureInitialized()
	b.fields.APIGroup = &value
	return b
}

// RemoveAPIGroup removes the APIGroup field from the declarative configuration.
func (b RoleRefBuilder) RemoveAPIGroup() RoleRefBuilder {
	b.ensureInitialized()
	b.fields.APIGroup = nil
	return b
}

// GetAPIGroup gets the APIGroup field from the declarative configuration.
func (b RoleRefBuilder) GetAPIGroup() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.APIGroup; v != nil {
		return *v, true
	}
	return value, false
}

// SetKind sets the Kind field in the declarative configuration to the given value.
func (b RoleRefBuilder) SetKind(value string) RoleRefBuilder {
	b.ensureInitialized()
	b.fields.Kind = &value
	return b
}

// RemoveKind removes the Kind field from the declarative configuration.
func (b RoleRefBuilder) RemoveKind() RoleRefBuilder {
	b.ensureInitialized()
	b.fields.Kind = nil
	return b
}

// GetKind gets the Kind field from the declarative configuration.
func (b RoleRefBuilder) GetKind() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Kind; v != nil {
		return *v, true
	}
	return value, false
}

// SetName sets the Name field in the declarative configuration to the given value.
func (b RoleRefBuilder) SetName(value string) RoleRefBuilder {
	b.ensureInitialized()
	b.fields.Name = &value
	return b
}

// RemoveName removes the Name field from the declarative configuration.
func (b RoleRefBuilder) RemoveName() RoleRefBuilder {
	b.ensureInitialized()
	b.fields.Name = nil
	return b
}

// GetName gets the Name field from the declarative configuration.
func (b RoleRefBuilder) GetName() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Name; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts RoleRefBuilder to unstructured.
func (b *RoleRefBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to RoleRefBuilder, replacing the contents
// of RoleRefBuilder.
func (b *RoleRefBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &roleRefFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals RoleRefBuilder to JSON.
func (b *RoleRefBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into RoleRefBuilder, replacing the contents of
// RoleRefBuilder.
func (b *RoleRefBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// RoleRefList represents a list of RoleRefBuilder.
// Provided as a convenience.
type RoleRefList []RoleRefBuilder

// RoleRefList represents a map of RoleRefBuilder.
// Provided as a convenience.
type RoleRefMap map[string]RoleRefBuilder

func (b *RoleRefBuilder) preMarshal() {
}
func (b *RoleRefBuilder) postUnmarshal() {
}
