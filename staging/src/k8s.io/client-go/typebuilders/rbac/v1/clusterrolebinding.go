/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/typebuilders/meta/v1"
)

// ClusterRoleBindingApplyConfiguration represents an declarative configuration of the ClusterRoleBinding type for use
// with apply.
type ClusterRoleBindingApplyConfiguration struct {
	typeMeta *v1.TypeMetaApplyConfiguration // inlined type
	fields   clusterRoleBindingFields
}

// ClusterRoleBindingApplyConfiguration constructs an declarative configuration of the ClusterRoleBinding type for use with
// apply.
func ClusterRoleBinding() *ClusterRoleBindingApplyConfiguration {
	return &ClusterRoleBindingApplyConfiguration{}
}

// clusterRoleBindingFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in ClusterRoleBindingApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type clusterRoleBindingFields struct {
	Kind       *string                          `json:"kind,omitempty"`       // inlined ClusterRoleBindingApplyConfiguration.typeMeta.Kind field
	APIVersion *string                          `json:"apiVersion,omitempty"` // inlined ClusterRoleBindingApplyConfiguration.typeMeta.APIVersion field
	ObjectMeta *v1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	Subjects   *SubjectList                     `json:"subjects,omitempty"`
	RoleRef    *RoleRefApplyConfiguration       `json:"roleRef,omitempty"`
}

// SetTypeMeta sets the TypeMeta field in the declarative configuration to the given value.
func (b *ClusterRoleBindingApplyConfiguration) SetTypeMeta(value *v1.TypeMetaApplyConfiguration) *ClusterRoleBindingApplyConfiguration {
	b.typeMeta = value
	return b
}

// RemoveTypeMeta removes the TypeMeta field from the declarative configuration.
func (b *ClusterRoleBindingApplyConfiguration) RemoveTypeMeta() *ClusterRoleBindingApplyConfiguration {
	b.typeMeta = nil
	return b
}

// GetTypeMeta gets the TypeMeta field from the declarative configuration.
func (b *ClusterRoleBindingApplyConfiguration) GetTypeMeta() (value *v1.TypeMetaApplyConfiguration, ok bool) {
	return b.typeMeta, true
}

// SetObjectMeta sets the ObjectMeta field in the declarative configuration to the given value.
func (b *ClusterRoleBindingApplyConfiguration) SetObjectMeta(value *v1.ObjectMetaApplyConfiguration) *ClusterRoleBindingApplyConfiguration {
	b.fields.ObjectMeta = value
	return b
}

// RemoveObjectMeta removes the ObjectMeta field from the declarative configuration.
func (b *ClusterRoleBindingApplyConfiguration) RemoveObjectMeta() *ClusterRoleBindingApplyConfiguration {
	b.fields.ObjectMeta = nil
	return b
}

// GetObjectMeta gets the ObjectMeta field from the declarative configuration.
func (b *ClusterRoleBindingApplyConfiguration) GetObjectMeta() (value *v1.ObjectMetaApplyConfiguration, ok bool) {
	return b.fields.ObjectMeta, b.fields.ObjectMeta != nil
}

// SetSubjects sets the Subjects field in the declarative configuration to the given value.
func (b *ClusterRoleBindingApplyConfiguration) SetSubjects(value SubjectList) *ClusterRoleBindingApplyConfiguration {
	b.fields.Subjects = &value
	return b
}

// RemoveSubjects removes the Subjects field from the declarative configuration.
func (b *ClusterRoleBindingApplyConfiguration) RemoveSubjects() *ClusterRoleBindingApplyConfiguration {
	b.fields.Subjects = nil
	return b
}

// GetSubjects gets the Subjects field from the declarative configuration.
func (b *ClusterRoleBindingApplyConfiguration) GetSubjects() (value SubjectList, ok bool) {
	if v := b.fields.Subjects; v != nil {
		return *v, true
	}
	return value, false
}

// SetRoleRef sets the RoleRef field in the declarative configuration to the given value.
func (b *ClusterRoleBindingApplyConfiguration) SetRoleRef(value *RoleRefApplyConfiguration) *ClusterRoleBindingApplyConfiguration {
	b.fields.RoleRef = value
	return b
}

// RemoveRoleRef removes the RoleRef field from the declarative configuration.
func (b *ClusterRoleBindingApplyConfiguration) RemoveRoleRef() *ClusterRoleBindingApplyConfiguration {
	b.fields.RoleRef = nil
	return b
}

// GetRoleRef gets the RoleRef field from the declarative configuration.
func (b *ClusterRoleBindingApplyConfiguration) GetRoleRef() (value *RoleRefApplyConfiguration, ok bool) {
	return b.fields.RoleRef, b.fields.RoleRef != nil
}

// ToUnstructured converts ClusterRoleBindingApplyConfiguration to unstructured.
func (b *ClusterRoleBindingApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ClusterRoleBindingApplyConfiguration, replacing the contents
// of ClusterRoleBindingApplyConfiguration.
func (b *ClusterRoleBindingApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &clusterRoleBindingFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ClusterRoleBindingApplyConfiguration to JSON.
func (b *ClusterRoleBindingApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into ClusterRoleBindingApplyConfiguration, replacing the contents of
// ClusterRoleBindingApplyConfiguration.
func (b *ClusterRoleBindingApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ClusterRoleBindingList represents a listAlias of ClusterRoleBindingApplyConfiguration.
type ClusterRoleBindingList []*ClusterRoleBindingApplyConfiguration

// ClusterRoleBindingList represents a map of ClusterRoleBindingApplyConfiguration.
type ClusterRoleBindingMap map[string]ClusterRoleBindingApplyConfiguration

func (b *ClusterRoleBindingApplyConfiguration) preMarshal() {
	if b.typeMeta != nil {
		if v, ok := b.typeMeta.GetKind(); ok {
			b.fields.Kind = &v
		}
		if v, ok := b.typeMeta.GetAPIVersion(); ok {
			b.fields.APIVersion = &v
		}
	}
}
func (b *ClusterRoleBindingApplyConfiguration) postUnmarshal() {
	if b.typeMeta == nil {
		b.typeMeta = &v1.TypeMetaApplyConfiguration{}
	}
	if b.fields.Kind != nil {
		b.typeMeta.SetKind(*b.fields.Kind)
	}
	if b.fields.APIVersion != nil {
		b.typeMeta.SetAPIVersion(*b.fields.APIVersion)
	}
}
