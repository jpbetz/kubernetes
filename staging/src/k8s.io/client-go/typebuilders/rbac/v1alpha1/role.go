/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1alpha1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/typebuilders/meta/v1"
)

// RoleBuilder represents an declarative configuration of the Role type for use
// with apply.
type RoleBuilder struct {
	typeMeta v1.TypeMetaBuilder // inlined type
	fields   *roleFields
}

// roleFields is used by RoleBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in RoleBuilder before marshalling, and
// are copied out to the builder type in RoleBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type roleFields struct {
	Kind       *string               `json:"kind,omitempty"`       // inlined RoleBuilder.typeMeta.Kind field
	APIVersion *string               `json:"apiVersion,omitempty"` // inlined RoleBuilder.typeMeta.APIVersion field
	ObjectMeta *v1.ObjectMetaBuilder `json:"metadata,omitempty"`
	Rules      *PolicyRuleList       `json:"rules,omitempty"`
}

func (b *RoleBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &roleFields{}
	}
}

// Role constructs an declarative configuration of the Role type for use with
// apply.
// Provided as a convenience.
func Role() RoleBuilder {
	return RoleBuilder{fields: &roleFields{}}
}

// SetTypeMeta sets the TypeMeta field in the declarative configuration to the given value.
func (b RoleBuilder) SetTypeMeta(value v1.TypeMetaBuilder) RoleBuilder {
	b.ensureInitialized()
	b.typeMeta = value
	return b
}

// RemoveTypeMeta removes the TypeMeta field from the declarative configuration.
func (b RoleBuilder) RemoveTypeMeta() RoleBuilder {
	b.ensureInitialized()
	b.typeMeta = v1.TypeMetaBuilder{}
	return b
}

// GetTypeMeta gets the TypeMeta field from the declarative configuration.
func (b RoleBuilder) GetTypeMeta() (value v1.TypeMetaBuilder, ok bool) {
	b.ensureInitialized()
	return b.typeMeta, true
}

// SetObjectMeta sets the ObjectMeta field in the declarative configuration to the given value.
func (b RoleBuilder) SetObjectMeta(value v1.ObjectMetaBuilder) RoleBuilder {
	b.ensureInitialized()
	b.fields.ObjectMeta = &value
	return b
}

// RemoveObjectMeta removes the ObjectMeta field from the declarative configuration.
func (b RoleBuilder) RemoveObjectMeta() RoleBuilder {
	b.ensureInitialized()
	b.fields.ObjectMeta = nil
	return b
}

// GetObjectMeta gets the ObjectMeta field from the declarative configuration.
func (b RoleBuilder) GetObjectMeta() (value v1.ObjectMetaBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.ObjectMeta; v != nil {
		return *v, true
	}
	return value, false
}

// SetRules sets the Rules field in the declarative configuration to the given value.
func (b RoleBuilder) SetRules(value PolicyRuleList) RoleBuilder {
	b.ensureInitialized()
	b.fields.Rules = &value
	return b
}

// RemoveRules removes the Rules field from the declarative configuration.
func (b RoleBuilder) RemoveRules() RoleBuilder {
	b.ensureInitialized()
	b.fields.Rules = nil
	return b
}

// GetRules gets the Rules field from the declarative configuration.
func (b RoleBuilder) GetRules() (value PolicyRuleList, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Rules; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts RoleBuilder to unstructured.
func (b *RoleBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to RoleBuilder, replacing the contents
// of RoleBuilder.
func (b *RoleBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &roleFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals RoleBuilder to JSON.
func (b *RoleBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into RoleBuilder, replacing the contents of
// RoleBuilder.
func (b *RoleBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// RoleList represents a list of RoleBuilder.
// Provided as a convenience.
type RoleList []RoleBuilder

// RoleList represents a map of RoleBuilder.
// Provided as a convenience.
type RoleMap map[string]RoleBuilder

func (b *RoleBuilder) preMarshal() {
	if v, ok := b.typeMeta.GetKind(); ok {
		b.fields.Kind = &v
	}
	if v, ok := b.typeMeta.GetAPIVersion(); ok {
		b.fields.APIVersion = &v
	}
}
func (b *RoleBuilder) postUnmarshal() {
	if b.fields.Kind != nil {
		b.typeMeta.SetKind(*b.fields.Kind)
	}
	if b.fields.APIVersion != nil {
		b.typeMeta.SetAPIVersion(*b.fields.APIVersion)
	}
}
