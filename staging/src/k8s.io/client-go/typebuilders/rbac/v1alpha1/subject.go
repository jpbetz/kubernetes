/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1alpha1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// SubjectBuilder represents an declarative configuration of the Subject type for use
// with apply.
type SubjectBuilder struct {
	fields *subjectFields
}

// subjectFields is used by SubjectBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in SubjectBuilder before marshalling, and
// are copied out to the builder type in SubjectBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type subjectFields struct {
	Kind       *string `json:"kind,omitempty"`
	APIVersion *string `json:"apiVersion,omitempty"`
	Name       *string `json:"name,omitempty"`
	Namespace  *string `json:"namespace,omitempty"`
}

func (b *SubjectBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &subjectFields{}
	}
}

// Subject constructs an declarative configuration of the Subject type for use with
// apply.
// Provided as a convenience.
func Subject() SubjectBuilder {
	return SubjectBuilder{fields: &subjectFields{}}
}

// SetKind sets the Kind field in the declarative configuration to the given value.
func (b SubjectBuilder) SetKind(value string) SubjectBuilder {
	b.ensureInitialized()
	b.fields.Kind = &value
	return b
}

// RemoveKind removes the Kind field from the declarative configuration.
func (b SubjectBuilder) RemoveKind() SubjectBuilder {
	b.ensureInitialized()
	b.fields.Kind = nil
	return b
}

// GetKind gets the Kind field from the declarative configuration.
func (b SubjectBuilder) GetKind() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Kind; v != nil {
		return *v, true
	}
	return value, false
}

// SetAPIVersion sets the APIVersion field in the declarative configuration to the given value.
func (b SubjectBuilder) SetAPIVersion(value string) SubjectBuilder {
	b.ensureInitialized()
	b.fields.APIVersion = &value
	return b
}

// RemoveAPIVersion removes the APIVersion field from the declarative configuration.
func (b SubjectBuilder) RemoveAPIVersion() SubjectBuilder {
	b.ensureInitialized()
	b.fields.APIVersion = nil
	return b
}

// GetAPIVersion gets the APIVersion field from the declarative configuration.
func (b SubjectBuilder) GetAPIVersion() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.APIVersion; v != nil {
		return *v, true
	}
	return value, false
}

// SetName sets the Name field in the declarative configuration to the given value.
func (b SubjectBuilder) SetName(value string) SubjectBuilder {
	b.ensureInitialized()
	b.fields.Name = &value
	return b
}

// RemoveName removes the Name field from the declarative configuration.
func (b SubjectBuilder) RemoveName() SubjectBuilder {
	b.ensureInitialized()
	b.fields.Name = nil
	return b
}

// GetName gets the Name field from the declarative configuration.
func (b SubjectBuilder) GetName() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Name; v != nil {
		return *v, true
	}
	return value, false
}

// SetNamespace sets the Namespace field in the declarative configuration to the given value.
func (b SubjectBuilder) SetNamespace(value string) SubjectBuilder {
	b.ensureInitialized()
	b.fields.Namespace = &value
	return b
}

// RemoveNamespace removes the Namespace field from the declarative configuration.
func (b SubjectBuilder) RemoveNamespace() SubjectBuilder {
	b.ensureInitialized()
	b.fields.Namespace = nil
	return b
}

// GetNamespace gets the Namespace field from the declarative configuration.
func (b SubjectBuilder) GetNamespace() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Namespace; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts SubjectBuilder to unstructured.
func (b *SubjectBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to SubjectBuilder, replacing the contents
// of SubjectBuilder.
func (b *SubjectBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &subjectFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals SubjectBuilder to JSON.
func (b *SubjectBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into SubjectBuilder, replacing the contents of
// SubjectBuilder.
func (b *SubjectBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// SubjectList represents a list of SubjectBuilder.
// Provided as a convenience.
type SubjectList []SubjectBuilder

// SubjectList represents a map of SubjectBuilder.
// Provided as a convenience.
type SubjectMap map[string]SubjectBuilder

func (b *SubjectBuilder) preMarshal() {
}
func (b *SubjectBuilder) postUnmarshal() {
}
