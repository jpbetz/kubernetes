/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1alpha1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/typebuilders/meta/v1"
)

// AggregationRuleBuilder represents an declarative configuration of the AggregationRule type for use
// with apply.
type AggregationRuleBuilder struct {
	fields *aggregationRuleFields
}

// aggregationRuleFields is used by AggregationRuleBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in AggregationRuleBuilder before marshalling, and
// are copied out to the builder type in AggregationRuleBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type aggregationRuleFields struct {
	ClusterRoleSelectors *v1.LabelSelectorList `json:"clusterRoleSelectors,omitempty"`
}

func (b *AggregationRuleBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &aggregationRuleFields{}
	}
}

// AggregationRule constructs an declarative configuration of the AggregationRule type for use with
// apply.
// Provided as a convenience.
func AggregationRule() AggregationRuleBuilder {
	return AggregationRuleBuilder{fields: &aggregationRuleFields{}}
}

// SetClusterRoleSelectors sets the ClusterRoleSelectors field in the declarative configuration to the given value.
func (b AggregationRuleBuilder) SetClusterRoleSelectors(value v1.LabelSelectorList) AggregationRuleBuilder {
	b.ensureInitialized()
	b.fields.ClusterRoleSelectors = &value
	return b
}

// RemoveClusterRoleSelectors removes the ClusterRoleSelectors field from the declarative configuration.
func (b AggregationRuleBuilder) RemoveClusterRoleSelectors() AggregationRuleBuilder {
	b.ensureInitialized()
	b.fields.ClusterRoleSelectors = nil
	return b
}

// GetClusterRoleSelectors gets the ClusterRoleSelectors field from the declarative configuration.
func (b AggregationRuleBuilder) GetClusterRoleSelectors() (value v1.LabelSelectorList, ok bool) {
	b.ensureInitialized()
	if v := b.fields.ClusterRoleSelectors; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts AggregationRuleBuilder to unstructured.
func (b *AggregationRuleBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to AggregationRuleBuilder, replacing the contents
// of AggregationRuleBuilder.
func (b *AggregationRuleBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &aggregationRuleFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals AggregationRuleBuilder to JSON.
func (b *AggregationRuleBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into AggregationRuleBuilder, replacing the contents of
// AggregationRuleBuilder.
func (b *AggregationRuleBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// AggregationRuleList represents a list of AggregationRuleBuilder.
// Provided as a convenience.
type AggregationRuleList []AggregationRuleBuilder

// AggregationRuleList represents a map of AggregationRuleBuilder.
// Provided as a convenience.
type AggregationRuleMap map[string]AggregationRuleBuilder

func (b *AggregationRuleBuilder) preMarshal() {
}
func (b *AggregationRuleBuilder) postUnmarshal() {
}
