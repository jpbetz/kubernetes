/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// NodeSelectorTermBuilder represents an declarative configuration of the NodeSelectorTerm type for use
// with apply.
type NodeSelectorTermBuilder struct {
	fields *nodeSelectorTermFields
}

// nodeSelectorTermFields is used by NodeSelectorTermBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in NodeSelectorTermBuilder before marshalling, and
// are copied out to the builder type in NodeSelectorTermBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type nodeSelectorTermFields struct {
	MatchExpressions *NodeSelectorRequirementList `json:"matchExpressions,omitempty"`
	MatchFields      *NodeSelectorRequirementList `json:"matchFields,omitempty"`
}

func (b *NodeSelectorTermBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &nodeSelectorTermFields{}
	}
}

// NodeSelectorTerm constructs an declarative configuration of the NodeSelectorTerm type for use with
// apply.
// Provided as a convenience.
func NodeSelectorTerm() NodeSelectorTermBuilder {
	return NodeSelectorTermBuilder{fields: &nodeSelectorTermFields{}}
}

// SetMatchExpressions sets the MatchExpressions field in the declarative configuration to the given value.
func (b NodeSelectorTermBuilder) SetMatchExpressions(value NodeSelectorRequirementList) NodeSelectorTermBuilder {
	b.ensureInitialized()
	b.fields.MatchExpressions = &value
	return b
}

// RemoveMatchExpressions removes the MatchExpressions field from the declarative configuration.
func (b NodeSelectorTermBuilder) RemoveMatchExpressions() NodeSelectorTermBuilder {
	b.ensureInitialized()
	b.fields.MatchExpressions = nil
	return b
}

// GetMatchExpressions gets the MatchExpressions field from the declarative configuration.
func (b NodeSelectorTermBuilder) GetMatchExpressions() (value NodeSelectorRequirementList, ok bool) {
	b.ensureInitialized()
	if v := b.fields.MatchExpressions; v != nil {
		return *v, true
	}
	return value, false
}

// SetMatchFields sets the MatchFields field in the declarative configuration to the given value.
func (b NodeSelectorTermBuilder) SetMatchFields(value NodeSelectorRequirementList) NodeSelectorTermBuilder {
	b.ensureInitialized()
	b.fields.MatchFields = &value
	return b
}

// RemoveMatchFields removes the MatchFields field from the declarative configuration.
func (b NodeSelectorTermBuilder) RemoveMatchFields() NodeSelectorTermBuilder {
	b.ensureInitialized()
	b.fields.MatchFields = nil
	return b
}

// GetMatchFields gets the MatchFields field from the declarative configuration.
func (b NodeSelectorTermBuilder) GetMatchFields() (value NodeSelectorRequirementList, ok bool) {
	b.ensureInitialized()
	if v := b.fields.MatchFields; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts NodeSelectorTermBuilder to unstructured.
func (b *NodeSelectorTermBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to NodeSelectorTermBuilder, replacing the contents
// of NodeSelectorTermBuilder.
func (b *NodeSelectorTermBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &nodeSelectorTermFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals NodeSelectorTermBuilder to JSON.
func (b *NodeSelectorTermBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into NodeSelectorTermBuilder, replacing the contents of
// NodeSelectorTermBuilder.
func (b *NodeSelectorTermBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// NodeSelectorTermList represents a list of NodeSelectorTermBuilder.
// Provided as a convenience.
type NodeSelectorTermList []NodeSelectorTermBuilder

// NodeSelectorTermList represents a map of NodeSelectorTermBuilder.
// Provided as a convenience.
type NodeSelectorTermMap map[string]NodeSelectorTermBuilder

func (b *NodeSelectorTermBuilder) preMarshal() {
}
func (b *NodeSelectorTermBuilder) postUnmarshal() {
}
