/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// FlockerVolumeSourceBuilder represents an declarative configuration of the FlockerVolumeSource type for use
// with apply.
type FlockerVolumeSourceBuilder struct {
	fields *flockerVolumeSourceFields
}

// flockerVolumeSourceFields is used by FlockerVolumeSourceBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in FlockerVolumeSourceBuilder before marshalling, and
// are copied out to the builder type in FlockerVolumeSourceBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type flockerVolumeSourceFields struct {
	DatasetName *string `json:"datasetName,omitempty"`
	DatasetUUID *string `json:"datasetUUID,omitempty"`
}

func (b *FlockerVolumeSourceBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &flockerVolumeSourceFields{}
	}
}

// FlockerVolumeSource constructs an declarative configuration of the FlockerVolumeSource type for use with
// apply.
// Provided as a convenience.
func FlockerVolumeSource() FlockerVolumeSourceBuilder {
	return FlockerVolumeSourceBuilder{fields: &flockerVolumeSourceFields{}}
}

// SetDatasetName sets the DatasetName field in the declarative configuration to the given value.
func (b FlockerVolumeSourceBuilder) SetDatasetName(value string) FlockerVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.DatasetName = &value
	return b
}

// RemoveDatasetName removes the DatasetName field from the declarative configuration.
func (b FlockerVolumeSourceBuilder) RemoveDatasetName() FlockerVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.DatasetName = nil
	return b
}

// GetDatasetName gets the DatasetName field from the declarative configuration.
func (b FlockerVolumeSourceBuilder) GetDatasetName() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.DatasetName; v != nil {
		return *v, true
	}
	return value, false
}

// SetDatasetUUID sets the DatasetUUID field in the declarative configuration to the given value.
func (b FlockerVolumeSourceBuilder) SetDatasetUUID(value string) FlockerVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.DatasetUUID = &value
	return b
}

// RemoveDatasetUUID removes the DatasetUUID field from the declarative configuration.
func (b FlockerVolumeSourceBuilder) RemoveDatasetUUID() FlockerVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.DatasetUUID = nil
	return b
}

// GetDatasetUUID gets the DatasetUUID field from the declarative configuration.
func (b FlockerVolumeSourceBuilder) GetDatasetUUID() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.DatasetUUID; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts FlockerVolumeSourceBuilder to unstructured.
func (b *FlockerVolumeSourceBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to FlockerVolumeSourceBuilder, replacing the contents
// of FlockerVolumeSourceBuilder.
func (b *FlockerVolumeSourceBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &flockerVolumeSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals FlockerVolumeSourceBuilder to JSON.
func (b *FlockerVolumeSourceBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into FlockerVolumeSourceBuilder, replacing the contents of
// FlockerVolumeSourceBuilder.
func (b *FlockerVolumeSourceBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// FlockerVolumeSourceList represents a list of FlockerVolumeSourceBuilder.
// Provided as a convenience.
type FlockerVolumeSourceList []FlockerVolumeSourceBuilder

// FlockerVolumeSourceList represents a map of FlockerVolumeSourceBuilder.
// Provided as a convenience.
type FlockerVolumeSourceMap map[string]FlockerVolumeSourceBuilder

func (b *FlockerVolumeSourceBuilder) preMarshal() {
}
func (b *FlockerVolumeSourceBuilder) postUnmarshal() {
}
