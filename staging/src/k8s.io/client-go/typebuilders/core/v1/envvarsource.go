/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// EnvVarSourceBuilder represents an declarative configuration of the EnvVarSource type for use
// with apply.
type EnvVarSourceBuilder struct {
	fields *envVarSourceFields
}

// envVarSourceFields is used by EnvVarSourceBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in EnvVarSourceBuilder before marshalling, and
// are copied out to the builder type in EnvVarSourceBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type envVarSourceFields struct {
	FieldRef         *ObjectFieldSelectorBuilder   `json:"fieldRef,omitempty"`
	ResourceFieldRef *ResourceFieldSelectorBuilder `json:"resourceFieldRef,omitempty"`
	ConfigMapKeyRef  *ConfigMapKeySelectorBuilder  `json:"configMapKeyRef,omitempty"`
	SecretKeyRef     *SecretKeySelectorBuilder     `json:"secretKeyRef,omitempty"`
}

func (b *EnvVarSourceBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &envVarSourceFields{}
	}
}

// EnvVarSource constructs an declarative configuration of the EnvVarSource type for use with
// apply.
// Provided as a convenience.
func EnvVarSource() EnvVarSourceBuilder {
	return EnvVarSourceBuilder{fields: &envVarSourceFields{}}
}

// SetFieldRef sets the FieldRef field in the declarative configuration to the given value.
func (b EnvVarSourceBuilder) SetFieldRef(value ObjectFieldSelectorBuilder) EnvVarSourceBuilder {
	b.ensureInitialized()
	b.fields.FieldRef = &value
	return b
}

// RemoveFieldRef removes the FieldRef field from the declarative configuration.
func (b EnvVarSourceBuilder) RemoveFieldRef() EnvVarSourceBuilder {
	b.ensureInitialized()
	b.fields.FieldRef = nil
	return b
}

// GetFieldRef gets the FieldRef field from the declarative configuration.
func (b EnvVarSourceBuilder) GetFieldRef() (value ObjectFieldSelectorBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.FieldRef; v != nil {
		return *v, true
	}
	return value, false
}

// SetResourceFieldRef sets the ResourceFieldRef field in the declarative configuration to the given value.
func (b EnvVarSourceBuilder) SetResourceFieldRef(value ResourceFieldSelectorBuilder) EnvVarSourceBuilder {
	b.ensureInitialized()
	b.fields.ResourceFieldRef = &value
	return b
}

// RemoveResourceFieldRef removes the ResourceFieldRef field from the declarative configuration.
func (b EnvVarSourceBuilder) RemoveResourceFieldRef() EnvVarSourceBuilder {
	b.ensureInitialized()
	b.fields.ResourceFieldRef = nil
	return b
}

// GetResourceFieldRef gets the ResourceFieldRef field from the declarative configuration.
func (b EnvVarSourceBuilder) GetResourceFieldRef() (value ResourceFieldSelectorBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.ResourceFieldRef; v != nil {
		return *v, true
	}
	return value, false
}

// SetConfigMapKeyRef sets the ConfigMapKeyRef field in the declarative configuration to the given value.
func (b EnvVarSourceBuilder) SetConfigMapKeyRef(value ConfigMapKeySelectorBuilder) EnvVarSourceBuilder {
	b.ensureInitialized()
	b.fields.ConfigMapKeyRef = &value
	return b
}

// RemoveConfigMapKeyRef removes the ConfigMapKeyRef field from the declarative configuration.
func (b EnvVarSourceBuilder) RemoveConfigMapKeyRef() EnvVarSourceBuilder {
	b.ensureInitialized()
	b.fields.ConfigMapKeyRef = nil
	return b
}

// GetConfigMapKeyRef gets the ConfigMapKeyRef field from the declarative configuration.
func (b EnvVarSourceBuilder) GetConfigMapKeyRef() (value ConfigMapKeySelectorBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.ConfigMapKeyRef; v != nil {
		return *v, true
	}
	return value, false
}

// SetSecretKeyRef sets the SecretKeyRef field in the declarative configuration to the given value.
func (b EnvVarSourceBuilder) SetSecretKeyRef(value SecretKeySelectorBuilder) EnvVarSourceBuilder {
	b.ensureInitialized()
	b.fields.SecretKeyRef = &value
	return b
}

// RemoveSecretKeyRef removes the SecretKeyRef field from the declarative configuration.
func (b EnvVarSourceBuilder) RemoveSecretKeyRef() EnvVarSourceBuilder {
	b.ensureInitialized()
	b.fields.SecretKeyRef = nil
	return b
}

// GetSecretKeyRef gets the SecretKeyRef field from the declarative configuration.
func (b EnvVarSourceBuilder) GetSecretKeyRef() (value SecretKeySelectorBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.SecretKeyRef; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts EnvVarSourceBuilder to unstructured.
func (b *EnvVarSourceBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to EnvVarSourceBuilder, replacing the contents
// of EnvVarSourceBuilder.
func (b *EnvVarSourceBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &envVarSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals EnvVarSourceBuilder to JSON.
func (b *EnvVarSourceBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into EnvVarSourceBuilder, replacing the contents of
// EnvVarSourceBuilder.
func (b *EnvVarSourceBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// EnvVarSourceList represents a list of EnvVarSourceBuilder.
// Provided as a convenience.
type EnvVarSourceList []EnvVarSourceBuilder

// EnvVarSourceList represents a map of EnvVarSourceBuilder.
// Provided as a convenience.
type EnvVarSourceMap map[string]EnvVarSourceBuilder

func (b *EnvVarSourceBuilder) preMarshal() {
}
func (b *EnvVarSourceBuilder) postUnmarshal() {
}
