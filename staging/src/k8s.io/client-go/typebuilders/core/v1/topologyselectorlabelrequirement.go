/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// TopologySelectorLabelRequirementBuilder represents an declarative configuration of the TopologySelectorLabelRequirement type for use
// with apply.
type TopologySelectorLabelRequirementBuilder struct {
	fields *topologySelectorLabelRequirementFields
}

// topologySelectorLabelRequirementFields is used by TopologySelectorLabelRequirementBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in TopologySelectorLabelRequirementBuilder before marshalling, and
// are copied out to the builder type in TopologySelectorLabelRequirementBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type topologySelectorLabelRequirementFields struct {
	Key    *string   `json:"key,omitempty"`
	Values *[]string `json:"values,omitempty"`
}

func (b *TopologySelectorLabelRequirementBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &topologySelectorLabelRequirementFields{}
	}
}

// TopologySelectorLabelRequirement constructs an declarative configuration of the TopologySelectorLabelRequirement type for use with
// apply.
// Provided as a convenience.
func TopologySelectorLabelRequirement() TopologySelectorLabelRequirementBuilder {
	return TopologySelectorLabelRequirementBuilder{fields: &topologySelectorLabelRequirementFields{}}
}

// SetKey sets the Key field in the declarative configuration to the given value.
func (b TopologySelectorLabelRequirementBuilder) SetKey(value string) TopologySelectorLabelRequirementBuilder {
	b.ensureInitialized()
	b.fields.Key = &value
	return b
}

// RemoveKey removes the Key field from the declarative configuration.
func (b TopologySelectorLabelRequirementBuilder) RemoveKey() TopologySelectorLabelRequirementBuilder {
	b.ensureInitialized()
	b.fields.Key = nil
	return b
}

// GetKey gets the Key field from the declarative configuration.
func (b TopologySelectorLabelRequirementBuilder) GetKey() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Key; v != nil {
		return *v, true
	}
	return value, false
}

// SetValues sets the Values field in the declarative configuration to the given value.
func (b TopologySelectorLabelRequirementBuilder) SetValues(value []string) TopologySelectorLabelRequirementBuilder {
	b.ensureInitialized()
	b.fields.Values = &value
	return b
}

// RemoveValues removes the Values field from the declarative configuration.
func (b TopologySelectorLabelRequirementBuilder) RemoveValues() TopologySelectorLabelRequirementBuilder {
	b.ensureInitialized()
	b.fields.Values = nil
	return b
}

// GetValues gets the Values field from the declarative configuration.
func (b TopologySelectorLabelRequirementBuilder) GetValues() (value []string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Values; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts TopologySelectorLabelRequirementBuilder to unstructured.
func (b *TopologySelectorLabelRequirementBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to TopologySelectorLabelRequirementBuilder, replacing the contents
// of TopologySelectorLabelRequirementBuilder.
func (b *TopologySelectorLabelRequirementBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &topologySelectorLabelRequirementFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals TopologySelectorLabelRequirementBuilder to JSON.
func (b *TopologySelectorLabelRequirementBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into TopologySelectorLabelRequirementBuilder, replacing the contents of
// TopologySelectorLabelRequirementBuilder.
func (b *TopologySelectorLabelRequirementBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// TopologySelectorLabelRequirementList represents a list of TopologySelectorLabelRequirementBuilder.
// Provided as a convenience.
type TopologySelectorLabelRequirementList []TopologySelectorLabelRequirementBuilder

// TopologySelectorLabelRequirementList represents a map of TopologySelectorLabelRequirementBuilder.
// Provided as a convenience.
type TopologySelectorLabelRequirementMap map[string]TopologySelectorLabelRequirementBuilder

func (b *TopologySelectorLabelRequirementBuilder) preMarshal() {
}
func (b *TopologySelectorLabelRequirementBuilder) postUnmarshal() {
}
