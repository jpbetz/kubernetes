/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// PhotonPersistentDiskVolumeSourceBuilder represents an declarative configuration of the PhotonPersistentDiskVolumeSource type for use
// with apply.
type PhotonPersistentDiskVolumeSourceBuilder struct {
	fields *photonPersistentDiskVolumeSourceFields
}

// photonPersistentDiskVolumeSourceFields is used by PhotonPersistentDiskVolumeSourceBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in PhotonPersistentDiskVolumeSourceBuilder before marshalling, and
// are copied out to the builder type in PhotonPersistentDiskVolumeSourceBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type photonPersistentDiskVolumeSourceFields struct {
	PdID   *string `json:"pdID,omitempty"`
	FSType *string `json:"fsType,omitempty"`
}

func (b *PhotonPersistentDiskVolumeSourceBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &photonPersistentDiskVolumeSourceFields{}
	}
}

// PhotonPersistentDiskVolumeSource constructs an declarative configuration of the PhotonPersistentDiskVolumeSource type for use with
// apply.
// Provided as a convenience.
func PhotonPersistentDiskVolumeSource() PhotonPersistentDiskVolumeSourceBuilder {
	return PhotonPersistentDiskVolumeSourceBuilder{fields: &photonPersistentDiskVolumeSourceFields{}}
}

// SetPdID sets the PdID field in the declarative configuration to the given value.
func (b PhotonPersistentDiskVolumeSourceBuilder) SetPdID(value string) PhotonPersistentDiskVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.PdID = &value
	return b
}

// RemovePdID removes the PdID field from the declarative configuration.
func (b PhotonPersistentDiskVolumeSourceBuilder) RemovePdID() PhotonPersistentDiskVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.PdID = nil
	return b
}

// GetPdID gets the PdID field from the declarative configuration.
func (b PhotonPersistentDiskVolumeSourceBuilder) GetPdID() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.PdID; v != nil {
		return *v, true
	}
	return value, false
}

// SetFSType sets the FSType field in the declarative configuration to the given value.
func (b PhotonPersistentDiskVolumeSourceBuilder) SetFSType(value string) PhotonPersistentDiskVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.FSType = &value
	return b
}

// RemoveFSType removes the FSType field from the declarative configuration.
func (b PhotonPersistentDiskVolumeSourceBuilder) RemoveFSType() PhotonPersistentDiskVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.FSType = nil
	return b
}

// GetFSType gets the FSType field from the declarative configuration.
func (b PhotonPersistentDiskVolumeSourceBuilder) GetFSType() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.FSType; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts PhotonPersistentDiskVolumeSourceBuilder to unstructured.
func (b *PhotonPersistentDiskVolumeSourceBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to PhotonPersistentDiskVolumeSourceBuilder, replacing the contents
// of PhotonPersistentDiskVolumeSourceBuilder.
func (b *PhotonPersistentDiskVolumeSourceBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &photonPersistentDiskVolumeSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals PhotonPersistentDiskVolumeSourceBuilder to JSON.
func (b *PhotonPersistentDiskVolumeSourceBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into PhotonPersistentDiskVolumeSourceBuilder, replacing the contents of
// PhotonPersistentDiskVolumeSourceBuilder.
func (b *PhotonPersistentDiskVolumeSourceBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// PhotonPersistentDiskVolumeSourceList represents a list of PhotonPersistentDiskVolumeSourceBuilder.
// Provided as a convenience.
type PhotonPersistentDiskVolumeSourceList []PhotonPersistentDiskVolumeSourceBuilder

// PhotonPersistentDiskVolumeSourceList represents a map of PhotonPersistentDiskVolumeSourceBuilder.
// Provided as a convenience.
type PhotonPersistentDiskVolumeSourceMap map[string]PhotonPersistentDiskVolumeSourceBuilder

func (b *PhotonPersistentDiskVolumeSourceBuilder) preMarshal() {
}
func (b *PhotonPersistentDiskVolumeSourceBuilder) postUnmarshal() {
}
