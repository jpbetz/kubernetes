/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
	types "k8s.io/apimachinery/pkg/types"
)

// ConfigMapNodeConfigSourceApplyConfiguration represents an declarative configuration of the ConfigMapNodeConfigSource type for use
// with apply.
type ConfigMapNodeConfigSourceApplyConfiguration struct {
	fields configMapNodeConfigSourceFields
}

// ConfigMapNodeConfigSourceApplyConfiguration constructs an declarative configuration of the ConfigMapNodeConfigSource type for use with
// apply.
func ConfigMapNodeConfigSource() *ConfigMapNodeConfigSourceApplyConfiguration {
	return &ConfigMapNodeConfigSourceApplyConfiguration{}
}

// configMapNodeConfigSourceFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in ConfigMapNodeConfigSourceApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type configMapNodeConfigSourceFields struct {
	Namespace        *string    `json:"namespace,omitempty"`
	Name             *string    `json:"name,omitempty"`
	UID              *types.UID `json:"uid,omitempty"`
	ResourceVersion  *string    `json:"resourceVersion,omitempty"`
	KubeletConfigKey *string    `json:"kubeletConfigKey,omitempty"`
}

// SetNamespace sets the Namespace field in the declarative configuration to the given value.
func (b *ConfigMapNodeConfigSourceApplyConfiguration) SetNamespace(value string) *ConfigMapNodeConfigSourceApplyConfiguration {
	b.fields.Namespace = &value
	return b
}

// RemoveNamespace removes the Namespace field from the declarative configuration.
func (b *ConfigMapNodeConfigSourceApplyConfiguration) RemoveNamespace() *ConfigMapNodeConfigSourceApplyConfiguration {
	b.fields.Namespace = nil
	return b
}

// GetNamespace gets the Namespace field from the declarative configuration.
func (b *ConfigMapNodeConfigSourceApplyConfiguration) GetNamespace() (value string, ok bool) {
	if v := b.fields.Namespace; v != nil {
		return *v, true
	}
	return value, false
}

// SetName sets the Name field in the declarative configuration to the given value.
func (b *ConfigMapNodeConfigSourceApplyConfiguration) SetName(value string) *ConfigMapNodeConfigSourceApplyConfiguration {
	b.fields.Name = &value
	return b
}

// RemoveName removes the Name field from the declarative configuration.
func (b *ConfigMapNodeConfigSourceApplyConfiguration) RemoveName() *ConfigMapNodeConfigSourceApplyConfiguration {
	b.fields.Name = nil
	return b
}

// GetName gets the Name field from the declarative configuration.
func (b *ConfigMapNodeConfigSourceApplyConfiguration) GetName() (value string, ok bool) {
	if v := b.fields.Name; v != nil {
		return *v, true
	}
	return value, false
}

// SetUID sets the UID field in the declarative configuration to the given value.
func (b *ConfigMapNodeConfigSourceApplyConfiguration) SetUID(value types.UID) *ConfigMapNodeConfigSourceApplyConfiguration {
	b.fields.UID = &value
	return b
}

// RemoveUID removes the UID field from the declarative configuration.
func (b *ConfigMapNodeConfigSourceApplyConfiguration) RemoveUID() *ConfigMapNodeConfigSourceApplyConfiguration {
	b.fields.UID = nil
	return b
}

// GetUID gets the UID field from the declarative configuration.
func (b *ConfigMapNodeConfigSourceApplyConfiguration) GetUID() (value types.UID, ok bool) {
	if v := b.fields.UID; v != nil {
		return *v, true
	}
	return value, false
}

// SetResourceVersion sets the ResourceVersion field in the declarative configuration to the given value.
func (b *ConfigMapNodeConfigSourceApplyConfiguration) SetResourceVersion(value string) *ConfigMapNodeConfigSourceApplyConfiguration {
	b.fields.ResourceVersion = &value
	return b
}

// RemoveResourceVersion removes the ResourceVersion field from the declarative configuration.
func (b *ConfigMapNodeConfigSourceApplyConfiguration) RemoveResourceVersion() *ConfigMapNodeConfigSourceApplyConfiguration {
	b.fields.ResourceVersion = nil
	return b
}

// GetResourceVersion gets the ResourceVersion field from the declarative configuration.
func (b *ConfigMapNodeConfigSourceApplyConfiguration) GetResourceVersion() (value string, ok bool) {
	if v := b.fields.ResourceVersion; v != nil {
		return *v, true
	}
	return value, false
}

// SetKubeletConfigKey sets the KubeletConfigKey field in the declarative configuration to the given value.
func (b *ConfigMapNodeConfigSourceApplyConfiguration) SetKubeletConfigKey(value string) *ConfigMapNodeConfigSourceApplyConfiguration {
	b.fields.KubeletConfigKey = &value
	return b
}

// RemoveKubeletConfigKey removes the KubeletConfigKey field from the declarative configuration.
func (b *ConfigMapNodeConfigSourceApplyConfiguration) RemoveKubeletConfigKey() *ConfigMapNodeConfigSourceApplyConfiguration {
	b.fields.KubeletConfigKey = nil
	return b
}

// GetKubeletConfigKey gets the KubeletConfigKey field from the declarative configuration.
func (b *ConfigMapNodeConfigSourceApplyConfiguration) GetKubeletConfigKey() (value string, ok bool) {
	if v := b.fields.KubeletConfigKey; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ConfigMapNodeConfigSourceApplyConfiguration to unstructured.
func (b *ConfigMapNodeConfigSourceApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ConfigMapNodeConfigSourceApplyConfiguration, replacing the contents
// of ConfigMapNodeConfigSourceApplyConfiguration.
func (b *ConfigMapNodeConfigSourceApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &configMapNodeConfigSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ConfigMapNodeConfigSourceApplyConfiguration to JSON.
func (b *ConfigMapNodeConfigSourceApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into ConfigMapNodeConfigSourceApplyConfiguration, replacing the contents of
// ConfigMapNodeConfigSourceApplyConfiguration.
func (b *ConfigMapNodeConfigSourceApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ConfigMapNodeConfigSourceList represents a listAlias of ConfigMapNodeConfigSourceApplyConfiguration.
type ConfigMapNodeConfigSourceList []*ConfigMapNodeConfigSourceApplyConfiguration

// ConfigMapNodeConfigSourceList represents a map of ConfigMapNodeConfigSourceApplyConfiguration.
type ConfigMapNodeConfigSourceMap map[string]ConfigMapNodeConfigSourceApplyConfiguration

func (b *ConfigMapNodeConfigSourceApplyConfiguration) preMarshal() {
}
func (b *ConfigMapNodeConfigSourceApplyConfiguration) postUnmarshal() {
}
