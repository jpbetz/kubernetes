/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// QuobyteVolumeSourceBuilder represents an declarative configuration of the QuobyteVolumeSource type for use
// with apply.
type QuobyteVolumeSourceBuilder struct {
	fields quobyteVolumeSourceFields
}

// quobyteVolumeSourceFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in QuobyteVolumeSourceBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type quobyteVolumeSourceFields struct {
	Registry *string `json:"registry,omitempty"`
	Volume   *string `json:"volume,omitempty"`
	ReadOnly *bool   `json:"readOnly,omitempty"`
	User     *string `json:"user,omitempty"`
	Group    *string `json:"group,omitempty"`
	Tenant   *string `json:"tenant,omitempty"`
}

// QuobyteVolumeSource constructs an declarative configuration of the QuobyteVolumeSource type for use with
// apply.
func QuobyteVolumeSource() *QuobyteVolumeSourceBuilder {
	return &QuobyteVolumeSourceBuilder{}
}

// SetRegistry sets the Registry field in the declarative configuration to the given value.
func (b *QuobyteVolumeSourceBuilder) SetRegistry(value string) *QuobyteVolumeSourceBuilder {
	b.fields.Registry = &value
	return b
}

// RemoveRegistry removes the Registry field from the declarative configuration.
func (b *QuobyteVolumeSourceBuilder) RemoveRegistry() *QuobyteVolumeSourceBuilder {
	b.fields.Registry = nil
	return b
}

// GetRegistry gets the Registry field from the declarative configuration.
func (b *QuobyteVolumeSourceBuilder) GetRegistry() (value string, ok bool) {
	if v := b.fields.Registry; v != nil {
		return *v, true
	}
	return value, false
}

// SetVolume sets the Volume field in the declarative configuration to the given value.
func (b *QuobyteVolumeSourceBuilder) SetVolume(value string) *QuobyteVolumeSourceBuilder {
	b.fields.Volume = &value
	return b
}

// RemoveVolume removes the Volume field from the declarative configuration.
func (b *QuobyteVolumeSourceBuilder) RemoveVolume() *QuobyteVolumeSourceBuilder {
	b.fields.Volume = nil
	return b
}

// GetVolume gets the Volume field from the declarative configuration.
func (b *QuobyteVolumeSourceBuilder) GetVolume() (value string, ok bool) {
	if v := b.fields.Volume; v != nil {
		return *v, true
	}
	return value, false
}

// SetReadOnly sets the ReadOnly field in the declarative configuration to the given value.
func (b *QuobyteVolumeSourceBuilder) SetReadOnly(value bool) *QuobyteVolumeSourceBuilder {
	b.fields.ReadOnly = &value
	return b
}

// RemoveReadOnly removes the ReadOnly field from the declarative configuration.
func (b *QuobyteVolumeSourceBuilder) RemoveReadOnly() *QuobyteVolumeSourceBuilder {
	b.fields.ReadOnly = nil
	return b
}

// GetReadOnly gets the ReadOnly field from the declarative configuration.
func (b *QuobyteVolumeSourceBuilder) GetReadOnly() (value bool, ok bool) {
	if v := b.fields.ReadOnly; v != nil {
		return *v, true
	}
	return value, false
}

// SetUser sets the User field in the declarative configuration to the given value.
func (b *QuobyteVolumeSourceBuilder) SetUser(value string) *QuobyteVolumeSourceBuilder {
	b.fields.User = &value
	return b
}

// RemoveUser removes the User field from the declarative configuration.
func (b *QuobyteVolumeSourceBuilder) RemoveUser() *QuobyteVolumeSourceBuilder {
	b.fields.User = nil
	return b
}

// GetUser gets the User field from the declarative configuration.
func (b *QuobyteVolumeSourceBuilder) GetUser() (value string, ok bool) {
	if v := b.fields.User; v != nil {
		return *v, true
	}
	return value, false
}

// SetGroup sets the Group field in the declarative configuration to the given value.
func (b *QuobyteVolumeSourceBuilder) SetGroup(value string) *QuobyteVolumeSourceBuilder {
	b.fields.Group = &value
	return b
}

// RemoveGroup removes the Group field from the declarative configuration.
func (b *QuobyteVolumeSourceBuilder) RemoveGroup() *QuobyteVolumeSourceBuilder {
	b.fields.Group = nil
	return b
}

// GetGroup gets the Group field from the declarative configuration.
func (b *QuobyteVolumeSourceBuilder) GetGroup() (value string, ok bool) {
	if v := b.fields.Group; v != nil {
		return *v, true
	}
	return value, false
}

// SetTenant sets the Tenant field in the declarative configuration to the given value.
func (b *QuobyteVolumeSourceBuilder) SetTenant(value string) *QuobyteVolumeSourceBuilder {
	b.fields.Tenant = &value
	return b
}

// RemoveTenant removes the Tenant field from the declarative configuration.
func (b *QuobyteVolumeSourceBuilder) RemoveTenant() *QuobyteVolumeSourceBuilder {
	b.fields.Tenant = nil
	return b
}

// GetTenant gets the Tenant field from the declarative configuration.
func (b *QuobyteVolumeSourceBuilder) GetTenant() (value string, ok bool) {
	if v := b.fields.Tenant; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts QuobyteVolumeSourceBuilder to unstructured.
func (b *QuobyteVolumeSourceBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to QuobyteVolumeSourceBuilder, replacing the contents
// of QuobyteVolumeSourceBuilder.
func (b *QuobyteVolumeSourceBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &quobyteVolumeSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals QuobyteVolumeSourceBuilder to JSON.
func (b *QuobyteVolumeSourceBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into QuobyteVolumeSourceBuilder, replacing the contents of
// QuobyteVolumeSourceBuilder.
func (b *QuobyteVolumeSourceBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// QuobyteVolumeSourceList represents a list of QuobyteVolumeSourceBuilder.
type QuobyteVolumeSourceList []*QuobyteVolumeSourceBuilder

// QuobyteVolumeSourceList represents a map of QuobyteVolumeSourceBuilder.
type QuobyteVolumeSourceMap map[string]QuobyteVolumeSourceBuilder

func (b *QuobyteVolumeSourceBuilder) preMarshal() {
}
func (b *QuobyteVolumeSourceBuilder) postUnmarshal() {
}
