/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	v1 "k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// CapabilitiesBuilder represents an declarative configuration of the Capabilities type for use
// with apply.
type CapabilitiesBuilder struct {
	fields *capabilitiesFields
}

// capabilitiesFields is used by CapabilitiesBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in CapabilitiesBuilder before marshalling, and
// are copied out to the builder type in CapabilitiesBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type capabilitiesFields struct {
	Add  *[]v1.Capability `json:"add,omitempty"`
	Drop *[]v1.Capability `json:"drop,omitempty"`
}

func (b *CapabilitiesBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &capabilitiesFields{}
	}
}

// Capabilities constructs an declarative configuration of the Capabilities type for use with
// apply.
// Provided as a convenience.
func Capabilities() CapabilitiesBuilder {
	return CapabilitiesBuilder{fields: &capabilitiesFields{}}
}

// SetAdd sets the Add field in the declarative configuration to the given value.
func (b CapabilitiesBuilder) SetAdd(value []v1.Capability) CapabilitiesBuilder {
	b.ensureInitialized()
	b.fields.Add = &value
	return b
}

// RemoveAdd removes the Add field from the declarative configuration.
func (b CapabilitiesBuilder) RemoveAdd() CapabilitiesBuilder {
	b.ensureInitialized()
	b.fields.Add = nil
	return b
}

// GetAdd gets the Add field from the declarative configuration.
func (b CapabilitiesBuilder) GetAdd() (value []v1.Capability, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Add; v != nil {
		return *v, true
	}
	return value, false
}

// SetDrop sets the Drop field in the declarative configuration to the given value.
func (b CapabilitiesBuilder) SetDrop(value []v1.Capability) CapabilitiesBuilder {
	b.ensureInitialized()
	b.fields.Drop = &value
	return b
}

// RemoveDrop removes the Drop field from the declarative configuration.
func (b CapabilitiesBuilder) RemoveDrop() CapabilitiesBuilder {
	b.ensureInitialized()
	b.fields.Drop = nil
	return b
}

// GetDrop gets the Drop field from the declarative configuration.
func (b CapabilitiesBuilder) GetDrop() (value []v1.Capability, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Drop; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts CapabilitiesBuilder to unstructured.
func (b *CapabilitiesBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to CapabilitiesBuilder, replacing the contents
// of CapabilitiesBuilder.
func (b *CapabilitiesBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &capabilitiesFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals CapabilitiesBuilder to JSON.
func (b *CapabilitiesBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into CapabilitiesBuilder, replacing the contents of
// CapabilitiesBuilder.
func (b *CapabilitiesBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// CapabilitiesList represents a list of CapabilitiesBuilder.
// Provided as a convenience.
type CapabilitiesList []CapabilitiesBuilder

// CapabilitiesList represents a map of CapabilitiesBuilder.
// Provided as a convenience.
type CapabilitiesMap map[string]CapabilitiesBuilder

func (b *CapabilitiesBuilder) preMarshal() {
}
func (b *CapabilitiesBuilder) postUnmarshal() {
}
