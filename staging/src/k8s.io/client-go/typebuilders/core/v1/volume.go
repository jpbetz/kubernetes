/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// VolumeApplyConfiguration represents an declarative configuration of the Volume type for use
// with apply.
type VolumeApplyConfiguration struct {
	volumeSource *VolumeSourceApplyConfiguration // inlined type
	fields       volumeFields
}

// VolumeApplyConfiguration constructs an declarative configuration of the Volume type for use with
// apply.
func Volume() *VolumeApplyConfiguration {
	return &VolumeApplyConfiguration{}
}

// volumeFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in VolumeApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type volumeFields struct {
	Name                  *string                                              `json:"name,omitempty"`
	HostPath              *HostPathVolumeSourceApplyConfiguration              `json:"hostPath,omitempty"`              // inlined VolumeApplyConfiguration.volumeSource.HostPath field
	EmptyDir              *EmptyDirVolumeSourceApplyConfiguration              `json:"emptyDir,omitempty"`              // inlined VolumeApplyConfiguration.volumeSource.EmptyDir field
	GCEPersistentDisk     *GCEPersistentDiskVolumeSourceApplyConfiguration     `json:"gcePersistentDisk,omitempty"`     // inlined VolumeApplyConfiguration.volumeSource.GCEPersistentDisk field
	AWSElasticBlockStore  *AWSElasticBlockStoreVolumeSourceApplyConfiguration  `json:"awsElasticBlockStore,omitempty"`  // inlined VolumeApplyConfiguration.volumeSource.AWSElasticBlockStore field
	GitRepo               *GitRepoVolumeSourceApplyConfiguration               `json:"gitRepo,omitempty"`               // inlined VolumeApplyConfiguration.volumeSource.GitRepo field
	Secret                *SecretVolumeSourceApplyConfiguration                `json:"secret,omitempty"`                // inlined VolumeApplyConfiguration.volumeSource.Secret field
	NFS                   *NFSVolumeSourceApplyConfiguration                   `json:"nfs,omitempty"`                   // inlined VolumeApplyConfiguration.volumeSource.NFS field
	ISCSI                 *ISCSIVolumeSourceApplyConfiguration                 `json:"iscsi,omitempty"`                 // inlined VolumeApplyConfiguration.volumeSource.ISCSI field
	Glusterfs             *GlusterfsVolumeSourceApplyConfiguration             `json:"glusterfs,omitempty"`             // inlined VolumeApplyConfiguration.volumeSource.Glusterfs field
	PersistentVolumeClaim *PersistentVolumeClaimVolumeSourceApplyConfiguration `json:"persistentVolumeClaim,omitempty"` // inlined VolumeApplyConfiguration.volumeSource.PersistentVolumeClaim field
	RBD                   *RBDVolumeSourceApplyConfiguration                   `json:"rbd,omitempty"`                   // inlined VolumeApplyConfiguration.volumeSource.RBD field
	FlexVolume            *FlexVolumeSourceApplyConfiguration                  `json:"flexVolume,omitempty"`            // inlined VolumeApplyConfiguration.volumeSource.FlexVolume field
	Cinder                *CinderVolumeSourceApplyConfiguration                `json:"cinder,omitempty"`                // inlined VolumeApplyConfiguration.volumeSource.Cinder field
	CephFS                *CephFSVolumeSourceApplyConfiguration                `json:"cephfs,omitempty"`                // inlined VolumeApplyConfiguration.volumeSource.CephFS field
	Flocker               *FlockerVolumeSourceApplyConfiguration               `json:"flocker,omitempty"`               // inlined VolumeApplyConfiguration.volumeSource.Flocker field
	DownwardAPI           *DownwardAPIVolumeSourceApplyConfiguration           `json:"downwardAPI,omitempty"`           // inlined VolumeApplyConfiguration.volumeSource.DownwardAPI field
	FC                    *FCVolumeSourceApplyConfiguration                    `json:"fc,omitempty"`                    // inlined VolumeApplyConfiguration.volumeSource.FC field
	AzureFile             *AzureFileVolumeSourceApplyConfiguration             `json:"azureFile,omitempty"`             // inlined VolumeApplyConfiguration.volumeSource.AzureFile field
	ConfigMap             *ConfigMapVolumeSourceApplyConfiguration             `json:"configMap,omitempty"`             // inlined VolumeApplyConfiguration.volumeSource.ConfigMap field
	VsphereVolume         *VsphereVirtualDiskVolumeSourceApplyConfiguration    `json:"vsphereVolume,omitempty"`         // inlined VolumeApplyConfiguration.volumeSource.VsphereVolume field
	Quobyte               *QuobyteVolumeSourceApplyConfiguration               `json:"quobyte,omitempty"`               // inlined VolumeApplyConfiguration.volumeSource.Quobyte field
	AzureDisk             *AzureDiskVolumeSourceApplyConfiguration             `json:"azureDisk,omitempty"`             // inlined VolumeApplyConfiguration.volumeSource.AzureDisk field
	PhotonPersistentDisk  *PhotonPersistentDiskVolumeSourceApplyConfiguration  `json:"photonPersistentDisk,omitempty"`  // inlined VolumeApplyConfiguration.volumeSource.PhotonPersistentDisk field
	Projected             *ProjectedVolumeSourceApplyConfiguration             `json:"projected,omitempty"`             // inlined VolumeApplyConfiguration.volumeSource.Projected field
	PortworxVolume        *PortworxVolumeSourceApplyConfiguration              `json:"portworxVolume,omitempty"`        // inlined VolumeApplyConfiguration.volumeSource.PortworxVolume field
	ScaleIO               *ScaleIOVolumeSourceApplyConfiguration               `json:"scaleIO,omitempty"`               // inlined VolumeApplyConfiguration.volumeSource.ScaleIO field
	StorageOS             *StorageOSVolumeSourceApplyConfiguration             `json:"storageos,omitempty"`             // inlined VolumeApplyConfiguration.volumeSource.StorageOS field
	CSI                   *CSIVolumeSourceApplyConfiguration                   `json:"csi,omitempty"`                   // inlined VolumeApplyConfiguration.volumeSource.CSI field
	Ephemeral             *EphemeralVolumeSourceApplyConfiguration             `json:"ephemeral,omitempty"`             // inlined VolumeApplyConfiguration.volumeSource.Ephemeral field
}

// SetName sets the Name field in the declarative configuration to the given value.
func (b *VolumeApplyConfiguration) SetName(value string) *VolumeApplyConfiguration {
	b.fields.Name = &value
	return b
}

// RemoveName removes the Name field from the declarative configuration.
func (b *VolumeApplyConfiguration) RemoveName() *VolumeApplyConfiguration {
	b.fields.Name = nil
	return b
}

// GetName gets the Name field from the declarative configuration.
func (b *VolumeApplyConfiguration) GetName() (value string, ok bool) {
	if v := b.fields.Name; v != nil {
		return *v, true
	}
	return value, false
}

// SetVolumeSource sets the VolumeSource field in the declarative configuration to the given value.
func (b *VolumeApplyConfiguration) SetVolumeSource(value *VolumeSourceApplyConfiguration) *VolumeApplyConfiguration {
	b.volumeSource = value
	return b
}

// RemoveVolumeSource removes the VolumeSource field from the declarative configuration.
func (b *VolumeApplyConfiguration) RemoveVolumeSource() *VolumeApplyConfiguration {
	b.volumeSource = nil
	return b
}

// GetVolumeSource gets the VolumeSource field from the declarative configuration.
func (b *VolumeApplyConfiguration) GetVolumeSource() (value *VolumeSourceApplyConfiguration, ok bool) {
	return b.volumeSource, true
}

// ToUnstructured converts VolumeApplyConfiguration to unstructured.
func (b *VolumeApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to VolumeApplyConfiguration, replacing the contents
// of VolumeApplyConfiguration.
func (b *VolumeApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &volumeFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals VolumeApplyConfiguration to JSON.
func (b *VolumeApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into VolumeApplyConfiguration, replacing the contents of
// VolumeApplyConfiguration.
func (b *VolumeApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// VolumeList represents a listAlias of VolumeApplyConfiguration.
type VolumeList []*VolumeApplyConfiguration

// VolumeList represents a map of VolumeApplyConfiguration.
type VolumeMap map[string]VolumeApplyConfiguration

func (b *VolumeApplyConfiguration) preMarshal() {
	if b.volumeSource != nil {
		if v, ok := b.volumeSource.GetHostPath(); ok {
			b.fields.HostPath = v
		}
		if v, ok := b.volumeSource.GetEmptyDir(); ok {
			b.fields.EmptyDir = v
		}
		if v, ok := b.volumeSource.GetGCEPersistentDisk(); ok {
			b.fields.GCEPersistentDisk = v
		}
		if v, ok := b.volumeSource.GetAWSElasticBlockStore(); ok {
			b.fields.AWSElasticBlockStore = v
		}
		if v, ok := b.volumeSource.GetGitRepo(); ok {
			b.fields.GitRepo = v
		}
		if v, ok := b.volumeSource.GetSecret(); ok {
			b.fields.Secret = v
		}
		if v, ok := b.volumeSource.GetNFS(); ok {
			b.fields.NFS = v
		}
		if v, ok := b.volumeSource.GetISCSI(); ok {
			b.fields.ISCSI = v
		}
		if v, ok := b.volumeSource.GetGlusterfs(); ok {
			b.fields.Glusterfs = v
		}
		if v, ok := b.volumeSource.GetPersistentVolumeClaim(); ok {
			b.fields.PersistentVolumeClaim = v
		}
		if v, ok := b.volumeSource.GetRBD(); ok {
			b.fields.RBD = v
		}
		if v, ok := b.volumeSource.GetFlexVolume(); ok {
			b.fields.FlexVolume = v
		}
		if v, ok := b.volumeSource.GetCinder(); ok {
			b.fields.Cinder = v
		}
		if v, ok := b.volumeSource.GetCephFS(); ok {
			b.fields.CephFS = v
		}
		if v, ok := b.volumeSource.GetFlocker(); ok {
			b.fields.Flocker = v
		}
		if v, ok := b.volumeSource.GetDownwardAPI(); ok {
			b.fields.DownwardAPI = v
		}
		if v, ok := b.volumeSource.GetFC(); ok {
			b.fields.FC = v
		}
		if v, ok := b.volumeSource.GetAzureFile(); ok {
			b.fields.AzureFile = v
		}
		if v, ok := b.volumeSource.GetConfigMap(); ok {
			b.fields.ConfigMap = v
		}
		if v, ok := b.volumeSource.GetVsphereVolume(); ok {
			b.fields.VsphereVolume = v
		}
		if v, ok := b.volumeSource.GetQuobyte(); ok {
			b.fields.Quobyte = v
		}
		if v, ok := b.volumeSource.GetAzureDisk(); ok {
			b.fields.AzureDisk = v
		}
		if v, ok := b.volumeSource.GetPhotonPersistentDisk(); ok {
			b.fields.PhotonPersistentDisk = v
		}
		if v, ok := b.volumeSource.GetProjected(); ok {
			b.fields.Projected = v
		}
		if v, ok := b.volumeSource.GetPortworxVolume(); ok {
			b.fields.PortworxVolume = v
		}
		if v, ok := b.volumeSource.GetScaleIO(); ok {
			b.fields.ScaleIO = v
		}
		if v, ok := b.volumeSource.GetStorageOS(); ok {
			b.fields.StorageOS = v
		}
		if v, ok := b.volumeSource.GetCSI(); ok {
			b.fields.CSI = v
		}
		if v, ok := b.volumeSource.GetEphemeral(); ok {
			b.fields.Ephemeral = v
		}
	}
}
func (b *VolumeApplyConfiguration) postUnmarshal() {
	if b.volumeSource == nil {
		b.volumeSource = &VolumeSourceApplyConfiguration{}
	}
	if b.fields.HostPath != nil {
		b.volumeSource.SetHostPath(b.fields.HostPath)
	}
	if b.fields.EmptyDir != nil {
		b.volumeSource.SetEmptyDir(b.fields.EmptyDir)
	}
	if b.fields.GCEPersistentDisk != nil {
		b.volumeSource.SetGCEPersistentDisk(b.fields.GCEPersistentDisk)
	}
	if b.fields.AWSElasticBlockStore != nil {
		b.volumeSource.SetAWSElasticBlockStore(b.fields.AWSElasticBlockStore)
	}
	if b.fields.GitRepo != nil {
		b.volumeSource.SetGitRepo(b.fields.GitRepo)
	}
	if b.fields.Secret != nil {
		b.volumeSource.SetSecret(b.fields.Secret)
	}
	if b.fields.NFS != nil {
		b.volumeSource.SetNFS(b.fields.NFS)
	}
	if b.fields.ISCSI != nil {
		b.volumeSource.SetISCSI(b.fields.ISCSI)
	}
	if b.fields.Glusterfs != nil {
		b.volumeSource.SetGlusterfs(b.fields.Glusterfs)
	}
	if b.fields.PersistentVolumeClaim != nil {
		b.volumeSource.SetPersistentVolumeClaim(b.fields.PersistentVolumeClaim)
	}
	if b.fields.RBD != nil {
		b.volumeSource.SetRBD(b.fields.RBD)
	}
	if b.fields.FlexVolume != nil {
		b.volumeSource.SetFlexVolume(b.fields.FlexVolume)
	}
	if b.fields.Cinder != nil {
		b.volumeSource.SetCinder(b.fields.Cinder)
	}
	if b.fields.CephFS != nil {
		b.volumeSource.SetCephFS(b.fields.CephFS)
	}
	if b.fields.Flocker != nil {
		b.volumeSource.SetFlocker(b.fields.Flocker)
	}
	if b.fields.DownwardAPI != nil {
		b.volumeSource.SetDownwardAPI(b.fields.DownwardAPI)
	}
	if b.fields.FC != nil {
		b.volumeSource.SetFC(b.fields.FC)
	}
	if b.fields.AzureFile != nil {
		b.volumeSource.SetAzureFile(b.fields.AzureFile)
	}
	if b.fields.ConfigMap != nil {
		b.volumeSource.SetConfigMap(b.fields.ConfigMap)
	}
	if b.fields.VsphereVolume != nil {
		b.volumeSource.SetVsphereVolume(b.fields.VsphereVolume)
	}
	if b.fields.Quobyte != nil {
		b.volumeSource.SetQuobyte(b.fields.Quobyte)
	}
	if b.fields.AzureDisk != nil {
		b.volumeSource.SetAzureDisk(b.fields.AzureDisk)
	}
	if b.fields.PhotonPersistentDisk != nil {
		b.volumeSource.SetPhotonPersistentDisk(b.fields.PhotonPersistentDisk)
	}
	if b.fields.Projected != nil {
		b.volumeSource.SetProjected(b.fields.Projected)
	}
	if b.fields.PortworxVolume != nil {
		b.volumeSource.SetPortworxVolume(b.fields.PortworxVolume)
	}
	if b.fields.ScaleIO != nil {
		b.volumeSource.SetScaleIO(b.fields.ScaleIO)
	}
	if b.fields.StorageOS != nil {
		b.volumeSource.SetStorageOS(b.fields.StorageOS)
	}
	if b.fields.CSI != nil {
		b.volumeSource.SetCSI(b.fields.CSI)
	}
	if b.fields.Ephemeral != nil {
		b.volumeSource.SetEphemeral(b.fields.Ephemeral)
	}
}
