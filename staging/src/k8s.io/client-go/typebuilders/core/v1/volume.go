/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// VolumeBuilder represents an declarative configuration of the Volume type for use
// with apply.
type VolumeBuilder struct {
	volumeSource *VolumeSourceBuilder // inlined type
	fields       volumeFields
}

// volumeFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in VolumeBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type volumeFields struct {
	Name                  *string                                   `json:"name,omitempty"`
	HostPath              *HostPathVolumeSourceBuilder              `json:"hostPath,omitempty"`              // inlined VolumeBuilder.volumeSource.HostPath field
	EmptyDir              *EmptyDirVolumeSourceBuilder              `json:"emptyDir,omitempty"`              // inlined VolumeBuilder.volumeSource.EmptyDir field
	GCEPersistentDisk     *GCEPersistentDiskVolumeSourceBuilder     `json:"gcePersistentDisk,omitempty"`     // inlined VolumeBuilder.volumeSource.GCEPersistentDisk field
	AWSElasticBlockStore  *AWSElasticBlockStoreVolumeSourceBuilder  `json:"awsElasticBlockStore,omitempty"`  // inlined VolumeBuilder.volumeSource.AWSElasticBlockStore field
	GitRepo               *GitRepoVolumeSourceBuilder               `json:"gitRepo,omitempty"`               // inlined VolumeBuilder.volumeSource.GitRepo field
	Secret                *SecretVolumeSourceBuilder                `json:"secret,omitempty"`                // inlined VolumeBuilder.volumeSource.Secret field
	NFS                   *NFSVolumeSourceBuilder                   `json:"nfs,omitempty"`                   // inlined VolumeBuilder.volumeSource.NFS field
	ISCSI                 *ISCSIVolumeSourceBuilder                 `json:"iscsi,omitempty"`                 // inlined VolumeBuilder.volumeSource.ISCSI field
	Glusterfs             *GlusterfsVolumeSourceBuilder             `json:"glusterfs,omitempty"`             // inlined VolumeBuilder.volumeSource.Glusterfs field
	PersistentVolumeClaim *PersistentVolumeClaimVolumeSourceBuilder `json:"persistentVolumeClaim,omitempty"` // inlined VolumeBuilder.volumeSource.PersistentVolumeClaim field
	RBD                   *RBDVolumeSourceBuilder                   `json:"rbd,omitempty"`                   // inlined VolumeBuilder.volumeSource.RBD field
	FlexVolume            *FlexVolumeSourceBuilder                  `json:"flexVolume,omitempty"`            // inlined VolumeBuilder.volumeSource.FlexVolume field
	Cinder                *CinderVolumeSourceBuilder                `json:"cinder,omitempty"`                // inlined VolumeBuilder.volumeSource.Cinder field
	CephFS                *CephFSVolumeSourceBuilder                `json:"cephfs,omitempty"`                // inlined VolumeBuilder.volumeSource.CephFS field
	Flocker               *FlockerVolumeSourceBuilder               `json:"flocker,omitempty"`               // inlined VolumeBuilder.volumeSource.Flocker field
	DownwardAPI           *DownwardAPIVolumeSourceBuilder           `json:"downwardAPI,omitempty"`           // inlined VolumeBuilder.volumeSource.DownwardAPI field
	FC                    *FCVolumeSourceBuilder                    `json:"fc,omitempty"`                    // inlined VolumeBuilder.volumeSource.FC field
	AzureFile             *AzureFileVolumeSourceBuilder             `json:"azureFile,omitempty"`             // inlined VolumeBuilder.volumeSource.AzureFile field
	ConfigMap             *ConfigMapVolumeSourceBuilder             `json:"configMap,omitempty"`             // inlined VolumeBuilder.volumeSource.ConfigMap field
	VsphereVolume         *VsphereVirtualDiskVolumeSourceBuilder    `json:"vsphereVolume,omitempty"`         // inlined VolumeBuilder.volumeSource.VsphereVolume field
	Quobyte               *QuobyteVolumeSourceBuilder               `json:"quobyte,omitempty"`               // inlined VolumeBuilder.volumeSource.Quobyte field
	AzureDisk             *AzureDiskVolumeSourceBuilder             `json:"azureDisk,omitempty"`             // inlined VolumeBuilder.volumeSource.AzureDisk field
	PhotonPersistentDisk  *PhotonPersistentDiskVolumeSourceBuilder  `json:"photonPersistentDisk,omitempty"`  // inlined VolumeBuilder.volumeSource.PhotonPersistentDisk field
	Projected             *ProjectedVolumeSourceBuilder             `json:"projected,omitempty"`             // inlined VolumeBuilder.volumeSource.Projected field
	PortworxVolume        *PortworxVolumeSourceBuilder              `json:"portworxVolume,omitempty"`        // inlined VolumeBuilder.volumeSource.PortworxVolume field
	ScaleIO               *ScaleIOVolumeSourceBuilder               `json:"scaleIO,omitempty"`               // inlined VolumeBuilder.volumeSource.ScaleIO field
	StorageOS             *StorageOSVolumeSourceBuilder             `json:"storageos,omitempty"`             // inlined VolumeBuilder.volumeSource.StorageOS field
	CSI                   *CSIVolumeSourceBuilder                   `json:"csi,omitempty"`                   // inlined VolumeBuilder.volumeSource.CSI field
	Ephemeral             *EphemeralVolumeSourceBuilder             `json:"ephemeral,omitempty"`             // inlined VolumeBuilder.volumeSource.Ephemeral field
}

// Volume constructs an declarative configuration of the Volume type for use with
// apply.
func Volume() *VolumeBuilder {
	return &VolumeBuilder{}
}

// SetName sets the Name field in the declarative configuration to the given value.
func (b *VolumeBuilder) SetName(value string) *VolumeBuilder {
	b.fields.Name = &value
	return b
}

// RemoveName removes the Name field from the declarative configuration.
func (b *VolumeBuilder) RemoveName() *VolumeBuilder {
	b.fields.Name = nil
	return b
}

// GetName gets the Name field from the declarative configuration.
func (b *VolumeBuilder) GetName() (value string, ok bool) {
	if v := b.fields.Name; v != nil {
		return *v, true
	}
	return value, false
}

// SetVolumeSource sets the VolumeSource field in the declarative configuration to the given value.
func (b *VolumeBuilder) SetVolumeSource(value *VolumeSourceBuilder) *VolumeBuilder {
	b.volumeSource = value
	return b
}

// RemoveVolumeSource removes the VolumeSource field from the declarative configuration.
func (b *VolumeBuilder) RemoveVolumeSource() *VolumeBuilder {
	b.volumeSource = nil
	return b
}

// GetVolumeSource gets the VolumeSource field from the declarative configuration.
func (b *VolumeBuilder) GetVolumeSource() (value *VolumeSourceBuilder, ok bool) {
	return b.volumeSource, true
}

// ToUnstructured converts VolumeBuilder to unstructured.
func (b *VolumeBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to VolumeBuilder, replacing the contents
// of VolumeBuilder.
func (b *VolumeBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &volumeFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals VolumeBuilder to JSON.
func (b *VolumeBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into VolumeBuilder, replacing the contents of
// VolumeBuilder.
func (b *VolumeBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// VolumeList represents a list of VolumeBuilder.
type VolumeList []*VolumeBuilder

// VolumeList represents a map of VolumeBuilder.
type VolumeMap map[string]VolumeBuilder

func (b *VolumeBuilder) preMarshal() {
	if b.volumeSource != nil {
		if v, ok := b.volumeSource.GetHostPath(); ok {
			b.fields.HostPath = v
		}
		if v, ok := b.volumeSource.GetEmptyDir(); ok {
			b.fields.EmptyDir = v
		}
		if v, ok := b.volumeSource.GetGCEPersistentDisk(); ok {
			b.fields.GCEPersistentDisk = v
		}
		if v, ok := b.volumeSource.GetAWSElasticBlockStore(); ok {
			b.fields.AWSElasticBlockStore = v
		}
		if v, ok := b.volumeSource.GetGitRepo(); ok {
			b.fields.GitRepo = v
		}
		if v, ok := b.volumeSource.GetSecret(); ok {
			b.fields.Secret = v
		}
		if v, ok := b.volumeSource.GetNFS(); ok {
			b.fields.NFS = v
		}
		if v, ok := b.volumeSource.GetISCSI(); ok {
			b.fields.ISCSI = v
		}
		if v, ok := b.volumeSource.GetGlusterfs(); ok {
			b.fields.Glusterfs = v
		}
		if v, ok := b.volumeSource.GetPersistentVolumeClaim(); ok {
			b.fields.PersistentVolumeClaim = v
		}
		if v, ok := b.volumeSource.GetRBD(); ok {
			b.fields.RBD = v
		}
		if v, ok := b.volumeSource.GetFlexVolume(); ok {
			b.fields.FlexVolume = v
		}
		if v, ok := b.volumeSource.GetCinder(); ok {
			b.fields.Cinder = v
		}
		if v, ok := b.volumeSource.GetCephFS(); ok {
			b.fields.CephFS = v
		}
		if v, ok := b.volumeSource.GetFlocker(); ok {
			b.fields.Flocker = v
		}
		if v, ok := b.volumeSource.GetDownwardAPI(); ok {
			b.fields.DownwardAPI = v
		}
		if v, ok := b.volumeSource.GetFC(); ok {
			b.fields.FC = v
		}
		if v, ok := b.volumeSource.GetAzureFile(); ok {
			b.fields.AzureFile = v
		}
		if v, ok := b.volumeSource.GetConfigMap(); ok {
			b.fields.ConfigMap = v
		}
		if v, ok := b.volumeSource.GetVsphereVolume(); ok {
			b.fields.VsphereVolume = v
		}
		if v, ok := b.volumeSource.GetQuobyte(); ok {
			b.fields.Quobyte = v
		}
		if v, ok := b.volumeSource.GetAzureDisk(); ok {
			b.fields.AzureDisk = v
		}
		if v, ok := b.volumeSource.GetPhotonPersistentDisk(); ok {
			b.fields.PhotonPersistentDisk = v
		}
		if v, ok := b.volumeSource.GetProjected(); ok {
			b.fields.Projected = v
		}
		if v, ok := b.volumeSource.GetPortworxVolume(); ok {
			b.fields.PortworxVolume = v
		}
		if v, ok := b.volumeSource.GetScaleIO(); ok {
			b.fields.ScaleIO = v
		}
		if v, ok := b.volumeSource.GetStorageOS(); ok {
			b.fields.StorageOS = v
		}
		if v, ok := b.volumeSource.GetCSI(); ok {
			b.fields.CSI = v
		}
		if v, ok := b.volumeSource.GetEphemeral(); ok {
			b.fields.Ephemeral = v
		}
	}
}
func (b *VolumeBuilder) postUnmarshal() {
	if b.volumeSource == nil {
		b.volumeSource = &VolumeSourceBuilder{}
	}
	if b.fields.HostPath != nil {
		b.volumeSource.SetHostPath(b.fields.HostPath)
	}
	if b.fields.EmptyDir != nil {
		b.volumeSource.SetEmptyDir(b.fields.EmptyDir)
	}
	if b.fields.GCEPersistentDisk != nil {
		b.volumeSource.SetGCEPersistentDisk(b.fields.GCEPersistentDisk)
	}
	if b.fields.AWSElasticBlockStore != nil {
		b.volumeSource.SetAWSElasticBlockStore(b.fields.AWSElasticBlockStore)
	}
	if b.fields.GitRepo != nil {
		b.volumeSource.SetGitRepo(b.fields.GitRepo)
	}
	if b.fields.Secret != nil {
		b.volumeSource.SetSecret(b.fields.Secret)
	}
	if b.fields.NFS != nil {
		b.volumeSource.SetNFS(b.fields.NFS)
	}
	if b.fields.ISCSI != nil {
		b.volumeSource.SetISCSI(b.fields.ISCSI)
	}
	if b.fields.Glusterfs != nil {
		b.volumeSource.SetGlusterfs(b.fields.Glusterfs)
	}
	if b.fields.PersistentVolumeClaim != nil {
		b.volumeSource.SetPersistentVolumeClaim(b.fields.PersistentVolumeClaim)
	}
	if b.fields.RBD != nil {
		b.volumeSource.SetRBD(b.fields.RBD)
	}
	if b.fields.FlexVolume != nil {
		b.volumeSource.SetFlexVolume(b.fields.FlexVolume)
	}
	if b.fields.Cinder != nil {
		b.volumeSource.SetCinder(b.fields.Cinder)
	}
	if b.fields.CephFS != nil {
		b.volumeSource.SetCephFS(b.fields.CephFS)
	}
	if b.fields.Flocker != nil {
		b.volumeSource.SetFlocker(b.fields.Flocker)
	}
	if b.fields.DownwardAPI != nil {
		b.volumeSource.SetDownwardAPI(b.fields.DownwardAPI)
	}
	if b.fields.FC != nil {
		b.volumeSource.SetFC(b.fields.FC)
	}
	if b.fields.AzureFile != nil {
		b.volumeSource.SetAzureFile(b.fields.AzureFile)
	}
	if b.fields.ConfigMap != nil {
		b.volumeSource.SetConfigMap(b.fields.ConfigMap)
	}
	if b.fields.VsphereVolume != nil {
		b.volumeSource.SetVsphereVolume(b.fields.VsphereVolume)
	}
	if b.fields.Quobyte != nil {
		b.volumeSource.SetQuobyte(b.fields.Quobyte)
	}
	if b.fields.AzureDisk != nil {
		b.volumeSource.SetAzureDisk(b.fields.AzureDisk)
	}
	if b.fields.PhotonPersistentDisk != nil {
		b.volumeSource.SetPhotonPersistentDisk(b.fields.PhotonPersistentDisk)
	}
	if b.fields.Projected != nil {
		b.volumeSource.SetProjected(b.fields.Projected)
	}
	if b.fields.PortworxVolume != nil {
		b.volumeSource.SetPortworxVolume(b.fields.PortworxVolume)
	}
	if b.fields.ScaleIO != nil {
		b.volumeSource.SetScaleIO(b.fields.ScaleIO)
	}
	if b.fields.StorageOS != nil {
		b.volumeSource.SetStorageOS(b.fields.StorageOS)
	}
	if b.fields.CSI != nil {
		b.volumeSource.SetCSI(b.fields.CSI)
	}
	if b.fields.Ephemeral != nil {
		b.volumeSource.SetEphemeral(b.fields.Ephemeral)
	}
}
