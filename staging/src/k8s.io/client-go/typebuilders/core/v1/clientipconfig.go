/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ClientIPConfigBuilder represents an declarative configuration of the ClientIPConfig type for use
// with apply.
type ClientIPConfigBuilder struct {
	fields *clientIPConfigFields
}

// clientIPConfigFields is used by ClientIPConfigBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in ClientIPConfigBuilder before marshalling, and
// are copied out to the builder type in ClientIPConfigBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type clientIPConfigFields struct {
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

func (b *ClientIPConfigBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &clientIPConfigFields{}
	}
}

// ClientIPConfig constructs an declarative configuration of the ClientIPConfig type for use with
// apply.
// Provided as a convenience.
func ClientIPConfig() ClientIPConfigBuilder {
	return ClientIPConfigBuilder{fields: &clientIPConfigFields{}}
}

// SetTimeoutSeconds sets the TimeoutSeconds field in the declarative configuration to the given value.
func (b ClientIPConfigBuilder) SetTimeoutSeconds(value int32) ClientIPConfigBuilder {
	b.ensureInitialized()
	b.fields.TimeoutSeconds = &value
	return b
}

// RemoveTimeoutSeconds removes the TimeoutSeconds field from the declarative configuration.
func (b ClientIPConfigBuilder) RemoveTimeoutSeconds() ClientIPConfigBuilder {
	b.ensureInitialized()
	b.fields.TimeoutSeconds = nil
	return b
}

// GetTimeoutSeconds gets the TimeoutSeconds field from the declarative configuration.
func (b ClientIPConfigBuilder) GetTimeoutSeconds() (value int32, ok bool) {
	b.ensureInitialized()
	if v := b.fields.TimeoutSeconds; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ClientIPConfigBuilder to unstructured.
func (b *ClientIPConfigBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ClientIPConfigBuilder, replacing the contents
// of ClientIPConfigBuilder.
func (b *ClientIPConfigBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &clientIPConfigFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ClientIPConfigBuilder to JSON.
func (b *ClientIPConfigBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into ClientIPConfigBuilder, replacing the contents of
// ClientIPConfigBuilder.
func (b *ClientIPConfigBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ClientIPConfigList represents a list of ClientIPConfigBuilder.
// Provided as a convenience.
type ClientIPConfigList []ClientIPConfigBuilder

// ClientIPConfigList represents a map of ClientIPConfigBuilder.
// Provided as a convenience.
type ClientIPConfigMap map[string]ClientIPConfigBuilder

func (b *ClientIPConfigBuilder) preMarshal() {
}
func (b *ClientIPConfigBuilder) postUnmarshal() {
}
