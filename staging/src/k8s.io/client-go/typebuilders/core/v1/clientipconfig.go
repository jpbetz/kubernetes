/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ClientIPConfigApplyConfiguration represents an declarative configuration of the ClientIPConfig type for use
// with apply.
type ClientIPConfigApplyConfiguration struct {
	fields clientIPConfigFields
}

// ClientIPConfigApplyConfiguration constructs an declarative configuration of the ClientIPConfig type for use with
// apply.
func ClientIPConfig() *ClientIPConfigApplyConfiguration {
	return &ClientIPConfigApplyConfiguration{}
}

// clientIPConfigFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in ClientIPConfigApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type clientIPConfigFields struct {
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

// SetTimeoutSeconds sets the TimeoutSeconds field in the declarative configuration to the given value.
func (b *ClientIPConfigApplyConfiguration) SetTimeoutSeconds(value int32) *ClientIPConfigApplyConfiguration {
	b.fields.TimeoutSeconds = &value
	return b
}

// RemoveTimeoutSeconds removes the TimeoutSeconds field from the declarative configuration.
func (b *ClientIPConfigApplyConfiguration) RemoveTimeoutSeconds() *ClientIPConfigApplyConfiguration {
	b.fields.TimeoutSeconds = nil
	return b
}

// GetTimeoutSeconds gets the TimeoutSeconds field from the declarative configuration.
func (b *ClientIPConfigApplyConfiguration) GetTimeoutSeconds() (value int32, ok bool) {
	if v := b.fields.TimeoutSeconds; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ClientIPConfigApplyConfiguration to unstructured.
func (b *ClientIPConfigApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ClientIPConfigApplyConfiguration, replacing the contents
// of ClientIPConfigApplyConfiguration.
func (b *ClientIPConfigApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &clientIPConfigFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ClientIPConfigApplyConfiguration to JSON.
func (b *ClientIPConfigApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into ClientIPConfigApplyConfiguration, replacing the contents of
// ClientIPConfigApplyConfiguration.
func (b *ClientIPConfigApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ClientIPConfigList represents a listAlias of ClientIPConfigApplyConfiguration.
type ClientIPConfigList []*ClientIPConfigApplyConfiguration

// ClientIPConfigList represents a map of ClientIPConfigApplyConfiguration.
type ClientIPConfigMap map[string]ClientIPConfigApplyConfiguration

func (b *ClientIPConfigApplyConfiguration) preMarshal() {
}
func (b *ClientIPConfigApplyConfiguration) postUnmarshal() {
}
