/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/typebuilders/meta/v1"
)

// PodTemplateBuilder represents an declarative configuration of the PodTemplate type for use
// with apply.
type PodTemplateBuilder struct {
	typeMeta v1.TypeMetaBuilder // inlined type
	fields   *podTemplateFields
}

// podTemplateFields is used by PodTemplateBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in PodTemplateBuilder before marshalling, and
// are copied out to the builder type in PodTemplateBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type podTemplateFields struct {
	Kind       *string                 `json:"kind,omitempty"`       // inlined PodTemplateBuilder.typeMeta.Kind field
	APIVersion *string                 `json:"apiVersion,omitempty"` // inlined PodTemplateBuilder.typeMeta.APIVersion field
	ObjectMeta *v1.ObjectMetaBuilder   `json:"metadata,omitempty"`
	Template   *PodTemplateSpecBuilder `json:"template,omitempty"`
}

func (b *PodTemplateBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &podTemplateFields{}
	}
}

// PodTemplate constructs an declarative configuration of the PodTemplate type for use with
// apply.
// Provided as a convenience.
func PodTemplate() PodTemplateBuilder {
	return PodTemplateBuilder{fields: &podTemplateFields{}}
}

// SetTypeMeta sets the TypeMeta field in the declarative configuration to the given value.
func (b PodTemplateBuilder) SetTypeMeta(value v1.TypeMetaBuilder) PodTemplateBuilder {
	b.ensureInitialized()
	b.typeMeta = value
	return b
}

// RemoveTypeMeta removes the TypeMeta field from the declarative configuration.
func (b PodTemplateBuilder) RemoveTypeMeta() PodTemplateBuilder {
	b.ensureInitialized()
	b.typeMeta = v1.TypeMetaBuilder{}
	return b
}

// GetTypeMeta gets the TypeMeta field from the declarative configuration.
func (b PodTemplateBuilder) GetTypeMeta() (value v1.TypeMetaBuilder, ok bool) {
	b.ensureInitialized()
	return b.typeMeta, true
}

// SetObjectMeta sets the ObjectMeta field in the declarative configuration to the given value.
func (b PodTemplateBuilder) SetObjectMeta(value v1.ObjectMetaBuilder) PodTemplateBuilder {
	b.ensureInitialized()
	b.fields.ObjectMeta = &value
	return b
}

// RemoveObjectMeta removes the ObjectMeta field from the declarative configuration.
func (b PodTemplateBuilder) RemoveObjectMeta() PodTemplateBuilder {
	b.ensureInitialized()
	b.fields.ObjectMeta = nil
	return b
}

// GetObjectMeta gets the ObjectMeta field from the declarative configuration.
func (b PodTemplateBuilder) GetObjectMeta() (value v1.ObjectMetaBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.ObjectMeta; v != nil {
		return *v, true
	}
	return value, false
}

// SetTemplate sets the Template field in the declarative configuration to the given value.
func (b PodTemplateBuilder) SetTemplate(value PodTemplateSpecBuilder) PodTemplateBuilder {
	b.ensureInitialized()
	b.fields.Template = &value
	return b
}

// RemoveTemplate removes the Template field from the declarative configuration.
func (b PodTemplateBuilder) RemoveTemplate() PodTemplateBuilder {
	b.ensureInitialized()
	b.fields.Template = nil
	return b
}

// GetTemplate gets the Template field from the declarative configuration.
func (b PodTemplateBuilder) GetTemplate() (value PodTemplateSpecBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Template; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts PodTemplateBuilder to unstructured.
func (b *PodTemplateBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to PodTemplateBuilder, replacing the contents
// of PodTemplateBuilder.
func (b *PodTemplateBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &podTemplateFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals PodTemplateBuilder to JSON.
func (b *PodTemplateBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into PodTemplateBuilder, replacing the contents of
// PodTemplateBuilder.
func (b *PodTemplateBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// PodTemplateList represents a list of PodTemplateBuilder.
// Provided as a convenience.
type PodTemplateList []PodTemplateBuilder

// PodTemplateList represents a map of PodTemplateBuilder.
// Provided as a convenience.
type PodTemplateMap map[string]PodTemplateBuilder

func (b *PodTemplateBuilder) preMarshal() {
	if v, ok := b.typeMeta.GetKind(); ok {
		b.fields.Kind = &v
	}
	if v, ok := b.typeMeta.GetAPIVersion(); ok {
		b.fields.APIVersion = &v
	}
}
func (b *PodTemplateBuilder) postUnmarshal() {
	if b.fields.Kind != nil {
		b.typeMeta.SetKind(*b.fields.Kind)
	}
	if b.fields.APIVersion != nil {
		b.typeMeta.SetAPIVersion(*b.fields.APIVersion)
	}
}
