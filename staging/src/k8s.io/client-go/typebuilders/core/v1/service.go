/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/typebuilders/meta/v1"
)

// ServiceBuilder represents an declarative configuration of the Service type for use
// with apply.
type ServiceBuilder struct {
	typeMeta v1.TypeMetaBuilder // inlined type
	fields   *serviceFields
}

// serviceFields is used by ServiceBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in ServiceBuilder before marshalling, and
// are copied out to the builder type in ServiceBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type serviceFields struct {
	Kind       *string               `json:"kind,omitempty"`       // inlined ServiceBuilder.typeMeta.Kind field
	APIVersion *string               `json:"apiVersion,omitempty"` // inlined ServiceBuilder.typeMeta.APIVersion field
	ObjectMeta *v1.ObjectMetaBuilder `json:"metadata,omitempty"`
	Spec       *ServiceSpecBuilder   `json:"spec,omitempty"`
	Status     *ServiceStatusBuilder `json:"status,omitempty"`
}

func (b *ServiceBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &serviceFields{}
	}
}

// Service constructs an declarative configuration of the Service type for use with
// apply.
// Provided as a convenience.
func Service() ServiceBuilder {
	return ServiceBuilder{fields: &serviceFields{}}
}

// SetTypeMeta sets the TypeMeta field in the declarative configuration to the given value.
func (b ServiceBuilder) SetTypeMeta(value v1.TypeMetaBuilder) ServiceBuilder {
	b.ensureInitialized()
	b.typeMeta = value
	return b
}

// RemoveTypeMeta removes the TypeMeta field from the declarative configuration.
func (b ServiceBuilder) RemoveTypeMeta() ServiceBuilder {
	b.ensureInitialized()
	b.typeMeta = v1.TypeMetaBuilder{}
	return b
}

// GetTypeMeta gets the TypeMeta field from the declarative configuration.
func (b ServiceBuilder) GetTypeMeta() (value v1.TypeMetaBuilder, ok bool) {
	b.ensureInitialized()
	return b.typeMeta, true
}

// SetObjectMeta sets the ObjectMeta field in the declarative configuration to the given value.
func (b ServiceBuilder) SetObjectMeta(value v1.ObjectMetaBuilder) ServiceBuilder {
	b.ensureInitialized()
	b.fields.ObjectMeta = &value
	return b
}

// RemoveObjectMeta removes the ObjectMeta field from the declarative configuration.
func (b ServiceBuilder) RemoveObjectMeta() ServiceBuilder {
	b.ensureInitialized()
	b.fields.ObjectMeta = nil
	return b
}

// GetObjectMeta gets the ObjectMeta field from the declarative configuration.
func (b ServiceBuilder) GetObjectMeta() (value v1.ObjectMetaBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.ObjectMeta; v != nil {
		return *v, true
	}
	return value, false
}

// SetSpec sets the Spec field in the declarative configuration to the given value.
func (b ServiceBuilder) SetSpec(value ServiceSpecBuilder) ServiceBuilder {
	b.ensureInitialized()
	b.fields.Spec = &value
	return b
}

// RemoveSpec removes the Spec field from the declarative configuration.
func (b ServiceBuilder) RemoveSpec() ServiceBuilder {
	b.ensureInitialized()
	b.fields.Spec = nil
	return b
}

// GetSpec gets the Spec field from the declarative configuration.
func (b ServiceBuilder) GetSpec() (value ServiceSpecBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Spec; v != nil {
		return *v, true
	}
	return value, false
}

// SetStatus sets the Status field in the declarative configuration to the given value.
func (b ServiceBuilder) SetStatus(value ServiceStatusBuilder) ServiceBuilder {
	b.ensureInitialized()
	b.fields.Status = &value
	return b
}

// RemoveStatus removes the Status field from the declarative configuration.
func (b ServiceBuilder) RemoveStatus() ServiceBuilder {
	b.ensureInitialized()
	b.fields.Status = nil
	return b
}

// GetStatus gets the Status field from the declarative configuration.
func (b ServiceBuilder) GetStatus() (value ServiceStatusBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Status; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ServiceBuilder to unstructured.
func (b *ServiceBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ServiceBuilder, replacing the contents
// of ServiceBuilder.
func (b *ServiceBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &serviceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ServiceBuilder to JSON.
func (b *ServiceBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into ServiceBuilder, replacing the contents of
// ServiceBuilder.
func (b *ServiceBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ServiceList represents a list of ServiceBuilder.
// Provided as a convenience.
type ServiceList []ServiceBuilder

// ServiceList represents a map of ServiceBuilder.
// Provided as a convenience.
type ServiceMap map[string]ServiceBuilder

func (b *ServiceBuilder) preMarshal() {
	if v, ok := b.typeMeta.GetKind(); ok {
		b.fields.Kind = &v
	}
	if v, ok := b.typeMeta.GetAPIVersion(); ok {
		b.fields.APIVersion = &v
	}
}
func (b *ServiceBuilder) postUnmarshal() {
	if b.fields.Kind != nil {
		b.typeMeta.SetKind(*b.fields.Kind)
	}
	if b.fields.APIVersion != nil {
		b.typeMeta.SetAPIVersion(*b.fields.APIVersion)
	}
}
