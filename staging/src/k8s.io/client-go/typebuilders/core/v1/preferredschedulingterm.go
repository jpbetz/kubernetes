/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// PreferredSchedulingTermBuilder represents an declarative configuration of the PreferredSchedulingTerm type for use
// with apply.
type PreferredSchedulingTermBuilder struct {
	fields *preferredSchedulingTermFields
}

// preferredSchedulingTermFields is used by PreferredSchedulingTermBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in PreferredSchedulingTermBuilder before marshalling, and
// are copied out to the builder type in PreferredSchedulingTermBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type preferredSchedulingTermFields struct {
	Weight     *int32                   `json:"weight,omitempty"`
	Preference *NodeSelectorTermBuilder `json:"preference,omitempty"`
}

func (b *PreferredSchedulingTermBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &preferredSchedulingTermFields{}
	}
}

// PreferredSchedulingTerm constructs an declarative configuration of the PreferredSchedulingTerm type for use with
// apply.
// Provided as a convenience.
func PreferredSchedulingTerm() PreferredSchedulingTermBuilder {
	return PreferredSchedulingTermBuilder{fields: &preferredSchedulingTermFields{}}
}

// SetWeight sets the Weight field in the declarative configuration to the given value.
func (b PreferredSchedulingTermBuilder) SetWeight(value int32) PreferredSchedulingTermBuilder {
	b.ensureInitialized()
	b.fields.Weight = &value
	return b
}

// RemoveWeight removes the Weight field from the declarative configuration.
func (b PreferredSchedulingTermBuilder) RemoveWeight() PreferredSchedulingTermBuilder {
	b.ensureInitialized()
	b.fields.Weight = nil
	return b
}

// GetWeight gets the Weight field from the declarative configuration.
func (b PreferredSchedulingTermBuilder) GetWeight() (value int32, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Weight; v != nil {
		return *v, true
	}
	return value, false
}

// SetPreference sets the Preference field in the declarative configuration to the given value.
func (b PreferredSchedulingTermBuilder) SetPreference(value NodeSelectorTermBuilder) PreferredSchedulingTermBuilder {
	b.ensureInitialized()
	b.fields.Preference = &value
	return b
}

// RemovePreference removes the Preference field from the declarative configuration.
func (b PreferredSchedulingTermBuilder) RemovePreference() PreferredSchedulingTermBuilder {
	b.ensureInitialized()
	b.fields.Preference = nil
	return b
}

// GetPreference gets the Preference field from the declarative configuration.
func (b PreferredSchedulingTermBuilder) GetPreference() (value NodeSelectorTermBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Preference; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts PreferredSchedulingTermBuilder to unstructured.
func (b *PreferredSchedulingTermBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to PreferredSchedulingTermBuilder, replacing the contents
// of PreferredSchedulingTermBuilder.
func (b *PreferredSchedulingTermBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &preferredSchedulingTermFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals PreferredSchedulingTermBuilder to JSON.
func (b *PreferredSchedulingTermBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into PreferredSchedulingTermBuilder, replacing the contents of
// PreferredSchedulingTermBuilder.
func (b *PreferredSchedulingTermBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// PreferredSchedulingTermList represents a list of PreferredSchedulingTermBuilder.
// Provided as a convenience.
type PreferredSchedulingTermList []PreferredSchedulingTermBuilder

// PreferredSchedulingTermList represents a map of PreferredSchedulingTermBuilder.
// Provided as a convenience.
type PreferredSchedulingTermMap map[string]PreferredSchedulingTermBuilder

func (b *PreferredSchedulingTermBuilder) preMarshal() {
}
func (b *PreferredSchedulingTermBuilder) postUnmarshal() {
}
