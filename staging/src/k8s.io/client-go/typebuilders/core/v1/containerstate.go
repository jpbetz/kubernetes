/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ContainerStateBuilder represents an declarative configuration of the ContainerState type for use
// with apply.
type ContainerStateBuilder struct {
	fields *containerStateFields
}

// containerStateFields is used by ContainerStateBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in ContainerStateBuilder before marshalling, and
// are copied out to the builder type in ContainerStateBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type containerStateFields struct {
	Waiting    *ContainerStateWaitingBuilder    `json:"waiting,omitempty"`
	Running    *ContainerStateRunningBuilder    `json:"running,omitempty"`
	Terminated *ContainerStateTerminatedBuilder `json:"terminated,omitempty"`
}

func (b *ContainerStateBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &containerStateFields{}
	}
}

// ContainerState constructs an declarative configuration of the ContainerState type for use with
// apply.
// Provided as a convenience.
func ContainerState() ContainerStateBuilder {
	return ContainerStateBuilder{fields: &containerStateFields{}}
}

// SetWaiting sets the Waiting field in the declarative configuration to the given value.
func (b ContainerStateBuilder) SetWaiting(value ContainerStateWaitingBuilder) ContainerStateBuilder {
	b.ensureInitialized()
	b.fields.Waiting = &value
	return b
}

// RemoveWaiting removes the Waiting field from the declarative configuration.
func (b ContainerStateBuilder) RemoveWaiting() ContainerStateBuilder {
	b.ensureInitialized()
	b.fields.Waiting = nil
	return b
}

// GetWaiting gets the Waiting field from the declarative configuration.
func (b ContainerStateBuilder) GetWaiting() (value ContainerStateWaitingBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Waiting; v != nil {
		return *v, true
	}
	return value, false
}

// SetRunning sets the Running field in the declarative configuration to the given value.
func (b ContainerStateBuilder) SetRunning(value ContainerStateRunningBuilder) ContainerStateBuilder {
	b.ensureInitialized()
	b.fields.Running = &value
	return b
}

// RemoveRunning removes the Running field from the declarative configuration.
func (b ContainerStateBuilder) RemoveRunning() ContainerStateBuilder {
	b.ensureInitialized()
	b.fields.Running = nil
	return b
}

// GetRunning gets the Running field from the declarative configuration.
func (b ContainerStateBuilder) GetRunning() (value ContainerStateRunningBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Running; v != nil {
		return *v, true
	}
	return value, false
}

// SetTerminated sets the Terminated field in the declarative configuration to the given value.
func (b ContainerStateBuilder) SetTerminated(value ContainerStateTerminatedBuilder) ContainerStateBuilder {
	b.ensureInitialized()
	b.fields.Terminated = &value
	return b
}

// RemoveTerminated removes the Terminated field from the declarative configuration.
func (b ContainerStateBuilder) RemoveTerminated() ContainerStateBuilder {
	b.ensureInitialized()
	b.fields.Terminated = nil
	return b
}

// GetTerminated gets the Terminated field from the declarative configuration.
func (b ContainerStateBuilder) GetTerminated() (value ContainerStateTerminatedBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Terminated; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ContainerStateBuilder to unstructured.
func (b *ContainerStateBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ContainerStateBuilder, replacing the contents
// of ContainerStateBuilder.
func (b *ContainerStateBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &containerStateFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ContainerStateBuilder to JSON.
func (b *ContainerStateBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into ContainerStateBuilder, replacing the contents of
// ContainerStateBuilder.
func (b *ContainerStateBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ContainerStateList represents a list of ContainerStateBuilder.
// Provided as a convenience.
type ContainerStateList []ContainerStateBuilder

// ContainerStateList represents a map of ContainerStateBuilder.
// Provided as a convenience.
type ContainerStateMap map[string]ContainerStateBuilder

func (b *ContainerStateBuilder) preMarshal() {
}
func (b *ContainerStateBuilder) postUnmarshal() {
}
