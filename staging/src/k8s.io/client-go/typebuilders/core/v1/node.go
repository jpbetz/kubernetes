/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/typebuilders/meta/v1"
)

// NodeBuilder represents an declarative configuration of the Node type for use
// with apply.
type NodeBuilder struct {
	typeMeta v1.TypeMetaBuilder // inlined type
	fields   *nodeFields
}

// nodeFields is used by NodeBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in NodeBuilder before marshalling, and
// are copied out to the builder type in NodeBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type nodeFields struct {
	Kind       *string               `json:"kind,omitempty"`       // inlined NodeBuilder.typeMeta.Kind field
	APIVersion *string               `json:"apiVersion,omitempty"` // inlined NodeBuilder.typeMeta.APIVersion field
	ObjectMeta *v1.ObjectMetaBuilder `json:"metadata,omitempty"`
	Spec       *NodeSpecBuilder      `json:"spec,omitempty"`
	Status     *NodeStatusBuilder    `json:"status,omitempty"`
}

func (b *NodeBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &nodeFields{}
	}
}

// Node constructs an declarative configuration of the Node type for use with
// apply.
// Provided as a convenience.
func Node() NodeBuilder {
	return NodeBuilder{fields: &nodeFields{}}
}

// SetTypeMeta sets the TypeMeta field in the declarative configuration to the given value.
func (b NodeBuilder) SetTypeMeta(value v1.TypeMetaBuilder) NodeBuilder {
	b.ensureInitialized()
	b.typeMeta = value
	return b
}

// RemoveTypeMeta removes the TypeMeta field from the declarative configuration.
func (b NodeBuilder) RemoveTypeMeta() NodeBuilder {
	b.ensureInitialized()
	b.typeMeta = v1.TypeMetaBuilder{}
	return b
}

// GetTypeMeta gets the TypeMeta field from the declarative configuration.
func (b NodeBuilder) GetTypeMeta() (value v1.TypeMetaBuilder, ok bool) {
	b.ensureInitialized()
	return b.typeMeta, true
}

// SetObjectMeta sets the ObjectMeta field in the declarative configuration to the given value.
func (b NodeBuilder) SetObjectMeta(value v1.ObjectMetaBuilder) NodeBuilder {
	b.ensureInitialized()
	b.fields.ObjectMeta = &value
	return b
}

// RemoveObjectMeta removes the ObjectMeta field from the declarative configuration.
func (b NodeBuilder) RemoveObjectMeta() NodeBuilder {
	b.ensureInitialized()
	b.fields.ObjectMeta = nil
	return b
}

// GetObjectMeta gets the ObjectMeta field from the declarative configuration.
func (b NodeBuilder) GetObjectMeta() (value v1.ObjectMetaBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.ObjectMeta; v != nil {
		return *v, true
	}
	return value, false
}

// SetSpec sets the Spec field in the declarative configuration to the given value.
func (b NodeBuilder) SetSpec(value NodeSpecBuilder) NodeBuilder {
	b.ensureInitialized()
	b.fields.Spec = &value
	return b
}

// RemoveSpec removes the Spec field from the declarative configuration.
func (b NodeBuilder) RemoveSpec() NodeBuilder {
	b.ensureInitialized()
	b.fields.Spec = nil
	return b
}

// GetSpec gets the Spec field from the declarative configuration.
func (b NodeBuilder) GetSpec() (value NodeSpecBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Spec; v != nil {
		return *v, true
	}
	return value, false
}

// SetStatus sets the Status field in the declarative configuration to the given value.
func (b NodeBuilder) SetStatus(value NodeStatusBuilder) NodeBuilder {
	b.ensureInitialized()
	b.fields.Status = &value
	return b
}

// RemoveStatus removes the Status field from the declarative configuration.
func (b NodeBuilder) RemoveStatus() NodeBuilder {
	b.ensureInitialized()
	b.fields.Status = nil
	return b
}

// GetStatus gets the Status field from the declarative configuration.
func (b NodeBuilder) GetStatus() (value NodeStatusBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Status; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts NodeBuilder to unstructured.
func (b *NodeBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to NodeBuilder, replacing the contents
// of NodeBuilder.
func (b *NodeBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &nodeFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals NodeBuilder to JSON.
func (b *NodeBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into NodeBuilder, replacing the contents of
// NodeBuilder.
func (b *NodeBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// NodeList represents a list of NodeBuilder.
// Provided as a convenience.
type NodeList []NodeBuilder

// NodeList represents a map of NodeBuilder.
// Provided as a convenience.
type NodeMap map[string]NodeBuilder

func (b *NodeBuilder) preMarshal() {
	if v, ok := b.typeMeta.GetKind(); ok {
		b.fields.Kind = &v
	}
	if v, ok := b.typeMeta.GetAPIVersion(); ok {
		b.fields.APIVersion = &v
	}
}
func (b *NodeBuilder) postUnmarshal() {
	if b.fields.Kind != nil {
		b.typeMeta.SetKind(*b.fields.Kind)
	}
	if b.fields.APIVersion != nil {
		b.typeMeta.SetAPIVersion(*b.fields.APIVersion)
	}
}
