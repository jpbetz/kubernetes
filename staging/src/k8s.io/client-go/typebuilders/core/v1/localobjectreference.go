/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// LocalObjectReferenceBuilder represents an declarative configuration of the LocalObjectReference type for use
// with apply.
type LocalObjectReferenceBuilder struct {
	fields *localObjectReferenceFields
}

// localObjectReferenceFields is used by LocalObjectReferenceBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in LocalObjectReferenceBuilder before marshalling, and
// are copied out to the builder type in LocalObjectReferenceBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type localObjectReferenceFields struct {
	Name *string `json:"name,omitempty"`
}

func (b *LocalObjectReferenceBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &localObjectReferenceFields{}
	}
}

// LocalObjectReference constructs an declarative configuration of the LocalObjectReference type for use with
// apply.
// Provided as a convenience.
func LocalObjectReference() LocalObjectReferenceBuilder {
	return LocalObjectReferenceBuilder{fields: &localObjectReferenceFields{}}
}

// SetName sets the Name field in the declarative configuration to the given value.
func (b LocalObjectReferenceBuilder) SetName(value string) LocalObjectReferenceBuilder {
	b.ensureInitialized()
	b.fields.Name = &value
	return b
}

// RemoveName removes the Name field from the declarative configuration.
func (b LocalObjectReferenceBuilder) RemoveName() LocalObjectReferenceBuilder {
	b.ensureInitialized()
	b.fields.Name = nil
	return b
}

// GetName gets the Name field from the declarative configuration.
func (b LocalObjectReferenceBuilder) GetName() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Name; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts LocalObjectReferenceBuilder to unstructured.
func (b *LocalObjectReferenceBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to LocalObjectReferenceBuilder, replacing the contents
// of LocalObjectReferenceBuilder.
func (b *LocalObjectReferenceBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &localObjectReferenceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals LocalObjectReferenceBuilder to JSON.
func (b *LocalObjectReferenceBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into LocalObjectReferenceBuilder, replacing the contents of
// LocalObjectReferenceBuilder.
func (b *LocalObjectReferenceBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// LocalObjectReferenceList represents a list of LocalObjectReferenceBuilder.
// Provided as a convenience.
type LocalObjectReferenceList []LocalObjectReferenceBuilder

// LocalObjectReferenceList represents a map of LocalObjectReferenceBuilder.
// Provided as a convenience.
type LocalObjectReferenceMap map[string]LocalObjectReferenceBuilder

func (b *LocalObjectReferenceBuilder) preMarshal() {
}
func (b *LocalObjectReferenceBuilder) postUnmarshal() {
}
