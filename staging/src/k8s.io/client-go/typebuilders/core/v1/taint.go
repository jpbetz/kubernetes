/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	v1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// TaintBuilder represents an declarative configuration of the Taint type for use
// with apply.
type TaintBuilder struct {
	fields *taintFields
}

// taintFields is used by TaintBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in TaintBuilder before marshalling, and
// are copied out to the builder type in TaintBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type taintFields struct {
	Key       *string         `json:"key,omitempty"`
	Value     *string         `json:"value,omitempty"`
	Effect    *v1.TaintEffect `json:"effect,omitempty"`
	TimeAdded *metav1.Time    `json:"timeAdded,omitempty"`
}

func (b *TaintBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &taintFields{}
	}
}

// Taint constructs an declarative configuration of the Taint type for use with
// apply.
// Provided as a convenience.
func Taint() TaintBuilder {
	return TaintBuilder{fields: &taintFields{}}
}

// SetKey sets the Key field in the declarative configuration to the given value.
func (b TaintBuilder) SetKey(value string) TaintBuilder {
	b.ensureInitialized()
	b.fields.Key = &value
	return b
}

// RemoveKey removes the Key field from the declarative configuration.
func (b TaintBuilder) RemoveKey() TaintBuilder {
	b.ensureInitialized()
	b.fields.Key = nil
	return b
}

// GetKey gets the Key field from the declarative configuration.
func (b TaintBuilder) GetKey() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Key; v != nil {
		return *v, true
	}
	return value, false
}

// SetValue sets the Value field in the declarative configuration to the given value.
func (b TaintBuilder) SetValue(value string) TaintBuilder {
	b.ensureInitialized()
	b.fields.Value = &value
	return b
}

// RemoveValue removes the Value field from the declarative configuration.
func (b TaintBuilder) RemoveValue() TaintBuilder {
	b.ensureInitialized()
	b.fields.Value = nil
	return b
}

// GetValue gets the Value field from the declarative configuration.
func (b TaintBuilder) GetValue() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Value; v != nil {
		return *v, true
	}
	return value, false
}

// SetEffect sets the Effect field in the declarative configuration to the given value.
func (b TaintBuilder) SetEffect(value v1.TaintEffect) TaintBuilder {
	b.ensureInitialized()
	b.fields.Effect = &value
	return b
}

// RemoveEffect removes the Effect field from the declarative configuration.
func (b TaintBuilder) RemoveEffect() TaintBuilder {
	b.ensureInitialized()
	b.fields.Effect = nil
	return b
}

// GetEffect gets the Effect field from the declarative configuration.
func (b TaintBuilder) GetEffect() (value v1.TaintEffect, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Effect; v != nil {
		return *v, true
	}
	return value, false
}

// SetTimeAdded sets the TimeAdded field in the declarative configuration to the given value.
func (b TaintBuilder) SetTimeAdded(value metav1.Time) TaintBuilder {
	b.ensureInitialized()
	b.fields.TimeAdded = &value
	return b
}

// RemoveTimeAdded removes the TimeAdded field from the declarative configuration.
func (b TaintBuilder) RemoveTimeAdded() TaintBuilder {
	b.ensureInitialized()
	b.fields.TimeAdded = nil
	return b
}

// GetTimeAdded gets the TimeAdded field from the declarative configuration.
func (b TaintBuilder) GetTimeAdded() (value metav1.Time, ok bool) {
	b.ensureInitialized()
	if v := b.fields.TimeAdded; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts TaintBuilder to unstructured.
func (b *TaintBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to TaintBuilder, replacing the contents
// of TaintBuilder.
func (b *TaintBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &taintFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals TaintBuilder to JSON.
func (b *TaintBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into TaintBuilder, replacing the contents of
// TaintBuilder.
func (b *TaintBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// TaintList represents a list of TaintBuilder.
// Provided as a convenience.
type TaintList []TaintBuilder

// TaintList represents a map of TaintBuilder.
// Provided as a convenience.
type TaintMap map[string]TaintBuilder

func (b *TaintBuilder) preMarshal() {
}
func (b *TaintBuilder) postUnmarshal() {
}
