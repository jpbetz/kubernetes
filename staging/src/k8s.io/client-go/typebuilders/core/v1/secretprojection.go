/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// SecretProjectionApplyConfiguration represents an declarative configuration of the SecretProjection type for use
// with apply.
type SecretProjectionApplyConfiguration struct {
	localObjectReference *LocalObjectReferenceApplyConfiguration // inlined type
	fields               secretProjectionFields
}

// SecretProjectionApplyConfiguration constructs an declarative configuration of the SecretProjection type for use with
// apply.
func SecretProjection() *SecretProjectionApplyConfiguration {
	return &SecretProjectionApplyConfiguration{}
}

// secretProjectionFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in SecretProjectionApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type secretProjectionFields struct {
	Name     *string        `json:"name,omitempty"` // inlined SecretProjectionApplyConfiguration.localObjectReference.Name field
	Items    *KeyToPathList `json:"items,omitempty"`
	Optional *bool          `json:"optional,omitempty"`
}

// SetLocalObjectReference sets the LocalObjectReference field in the declarative configuration to the given value.
func (b *SecretProjectionApplyConfiguration) SetLocalObjectReference(value *LocalObjectReferenceApplyConfiguration) *SecretProjectionApplyConfiguration {
	b.localObjectReference = value
	return b
}

// RemoveLocalObjectReference removes the LocalObjectReference field from the declarative configuration.
func (b *SecretProjectionApplyConfiguration) RemoveLocalObjectReference() *SecretProjectionApplyConfiguration {
	b.localObjectReference = nil
	return b
}

// GetLocalObjectReference gets the LocalObjectReference field from the declarative configuration.
func (b *SecretProjectionApplyConfiguration) GetLocalObjectReference() (value *LocalObjectReferenceApplyConfiguration, ok bool) {
	return b.localObjectReference, true
}

// SetItems sets the Items field in the declarative configuration to the given value.
func (b *SecretProjectionApplyConfiguration) SetItems(value KeyToPathList) *SecretProjectionApplyConfiguration {
	b.fields.Items = &value
	return b
}

// RemoveItems removes the Items field from the declarative configuration.
func (b *SecretProjectionApplyConfiguration) RemoveItems() *SecretProjectionApplyConfiguration {
	b.fields.Items = nil
	return b
}

// GetItems gets the Items field from the declarative configuration.
func (b *SecretProjectionApplyConfiguration) GetItems() (value KeyToPathList, ok bool) {
	if v := b.fields.Items; v != nil {
		return *v, true
	}
	return value, false
}

// SetOptional sets the Optional field in the declarative configuration to the given value.
func (b *SecretProjectionApplyConfiguration) SetOptional(value bool) *SecretProjectionApplyConfiguration {
	b.fields.Optional = &value
	return b
}

// RemoveOptional removes the Optional field from the declarative configuration.
func (b *SecretProjectionApplyConfiguration) RemoveOptional() *SecretProjectionApplyConfiguration {
	b.fields.Optional = nil
	return b
}

// GetOptional gets the Optional field from the declarative configuration.
func (b *SecretProjectionApplyConfiguration) GetOptional() (value bool, ok bool) {
	if v := b.fields.Optional; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts SecretProjectionApplyConfiguration to unstructured.
func (b *SecretProjectionApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to SecretProjectionApplyConfiguration, replacing the contents
// of SecretProjectionApplyConfiguration.
func (b *SecretProjectionApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &secretProjectionFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals SecretProjectionApplyConfiguration to JSON.
func (b *SecretProjectionApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into SecretProjectionApplyConfiguration, replacing the contents of
// SecretProjectionApplyConfiguration.
func (b *SecretProjectionApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// SecretProjectionList represents a listAlias of SecretProjectionApplyConfiguration.
type SecretProjectionList []*SecretProjectionApplyConfiguration

// SecretProjectionList represents a map of SecretProjectionApplyConfiguration.
type SecretProjectionMap map[string]SecretProjectionApplyConfiguration

func (b *SecretProjectionApplyConfiguration) preMarshal() {
	if b.localObjectReference != nil {
		if v, ok := b.localObjectReference.GetName(); ok {
			b.fields.Name = &v
		}
	}
}
func (b *SecretProjectionApplyConfiguration) postUnmarshal() {
	if b.localObjectReference == nil {
		b.localObjectReference = &LocalObjectReferenceApplyConfiguration{}
	}
	if b.fields.Name != nil {
		b.localObjectReference.SetName(*b.fields.Name)
	}
}
