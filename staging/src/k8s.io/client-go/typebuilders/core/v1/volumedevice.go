/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// VolumeDeviceBuilder represents an declarative configuration of the VolumeDevice type for use
// with apply.
type VolumeDeviceBuilder struct {
	fields *volumeDeviceFields
}

// volumeDeviceFields is used by VolumeDeviceBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in VolumeDeviceBuilder before marshalling, and
// are copied out to the builder type in VolumeDeviceBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type volumeDeviceFields struct {
	Name       *string `json:"name,omitempty"`
	DevicePath *string `json:"devicePath,omitempty"`
}

func (b *VolumeDeviceBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &volumeDeviceFields{}
	}
}

// VolumeDevice constructs an declarative configuration of the VolumeDevice type for use with
// apply.
// Provided as a convenience.
func VolumeDevice() VolumeDeviceBuilder {
	return VolumeDeviceBuilder{fields: &volumeDeviceFields{}}
}

// SetName sets the Name field in the declarative configuration to the given value.
func (b VolumeDeviceBuilder) SetName(value string) VolumeDeviceBuilder {
	b.ensureInitialized()
	b.fields.Name = &value
	return b
}

// RemoveName removes the Name field from the declarative configuration.
func (b VolumeDeviceBuilder) RemoveName() VolumeDeviceBuilder {
	b.ensureInitialized()
	b.fields.Name = nil
	return b
}

// GetName gets the Name field from the declarative configuration.
func (b VolumeDeviceBuilder) GetName() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Name; v != nil {
		return *v, true
	}
	return value, false
}

// SetDevicePath sets the DevicePath field in the declarative configuration to the given value.
func (b VolumeDeviceBuilder) SetDevicePath(value string) VolumeDeviceBuilder {
	b.ensureInitialized()
	b.fields.DevicePath = &value
	return b
}

// RemoveDevicePath removes the DevicePath field from the declarative configuration.
func (b VolumeDeviceBuilder) RemoveDevicePath() VolumeDeviceBuilder {
	b.ensureInitialized()
	b.fields.DevicePath = nil
	return b
}

// GetDevicePath gets the DevicePath field from the declarative configuration.
func (b VolumeDeviceBuilder) GetDevicePath() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.DevicePath; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts VolumeDeviceBuilder to unstructured.
func (b *VolumeDeviceBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to VolumeDeviceBuilder, replacing the contents
// of VolumeDeviceBuilder.
func (b *VolumeDeviceBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &volumeDeviceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals VolumeDeviceBuilder to JSON.
func (b *VolumeDeviceBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into VolumeDeviceBuilder, replacing the contents of
// VolumeDeviceBuilder.
func (b *VolumeDeviceBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// VolumeDeviceList represents a list of VolumeDeviceBuilder.
// Provided as a convenience.
type VolumeDeviceList []VolumeDeviceBuilder

// VolumeDeviceList represents a map of VolumeDeviceBuilder.
// Provided as a convenience.
type VolumeDeviceMap map[string]VolumeDeviceBuilder

func (b *VolumeDeviceBuilder) preMarshal() {
}
func (b *VolumeDeviceBuilder) postUnmarshal() {
}
