/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// WeightedPodAffinityTermBuilder represents an declarative configuration of the WeightedPodAffinityTerm type for use
// with apply.
type WeightedPodAffinityTermBuilder struct {
	fields *weightedPodAffinityTermFields
}

// weightedPodAffinityTermFields is used by WeightedPodAffinityTermBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in WeightedPodAffinityTermBuilder before marshalling, and
// are copied out to the builder type in WeightedPodAffinityTermBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type weightedPodAffinityTermFields struct {
	Weight          *int32                  `json:"weight,omitempty"`
	PodAffinityTerm *PodAffinityTermBuilder `json:"podAffinityTerm,omitempty"`
}

func (b *WeightedPodAffinityTermBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &weightedPodAffinityTermFields{}
	}
}

// WeightedPodAffinityTerm constructs an declarative configuration of the WeightedPodAffinityTerm type for use with
// apply.
// Provided as a convenience.
func WeightedPodAffinityTerm() WeightedPodAffinityTermBuilder {
	return WeightedPodAffinityTermBuilder{fields: &weightedPodAffinityTermFields{}}
}

// SetWeight sets the Weight field in the declarative configuration to the given value.
func (b WeightedPodAffinityTermBuilder) SetWeight(value int32) WeightedPodAffinityTermBuilder {
	b.ensureInitialized()
	b.fields.Weight = &value
	return b
}

// RemoveWeight removes the Weight field from the declarative configuration.
func (b WeightedPodAffinityTermBuilder) RemoveWeight() WeightedPodAffinityTermBuilder {
	b.ensureInitialized()
	b.fields.Weight = nil
	return b
}

// GetWeight gets the Weight field from the declarative configuration.
func (b WeightedPodAffinityTermBuilder) GetWeight() (value int32, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Weight; v != nil {
		return *v, true
	}
	return value, false
}

// SetPodAffinityTerm sets the PodAffinityTerm field in the declarative configuration to the given value.
func (b WeightedPodAffinityTermBuilder) SetPodAffinityTerm(value PodAffinityTermBuilder) WeightedPodAffinityTermBuilder {
	b.ensureInitialized()
	b.fields.PodAffinityTerm = &value
	return b
}

// RemovePodAffinityTerm removes the PodAffinityTerm field from the declarative configuration.
func (b WeightedPodAffinityTermBuilder) RemovePodAffinityTerm() WeightedPodAffinityTermBuilder {
	b.ensureInitialized()
	b.fields.PodAffinityTerm = nil
	return b
}

// GetPodAffinityTerm gets the PodAffinityTerm field from the declarative configuration.
func (b WeightedPodAffinityTermBuilder) GetPodAffinityTerm() (value PodAffinityTermBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.PodAffinityTerm; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts WeightedPodAffinityTermBuilder to unstructured.
func (b *WeightedPodAffinityTermBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to WeightedPodAffinityTermBuilder, replacing the contents
// of WeightedPodAffinityTermBuilder.
func (b *WeightedPodAffinityTermBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &weightedPodAffinityTermFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals WeightedPodAffinityTermBuilder to JSON.
func (b *WeightedPodAffinityTermBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into WeightedPodAffinityTermBuilder, replacing the contents of
// WeightedPodAffinityTermBuilder.
func (b *WeightedPodAffinityTermBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// WeightedPodAffinityTermList represents a list of WeightedPodAffinityTermBuilder.
// Provided as a convenience.
type WeightedPodAffinityTermList []WeightedPodAffinityTermBuilder

// WeightedPodAffinityTermList represents a map of WeightedPodAffinityTermBuilder.
// Provided as a convenience.
type WeightedPodAffinityTermMap map[string]WeightedPodAffinityTermBuilder

func (b *WeightedPodAffinityTermBuilder) preMarshal() {
}
func (b *WeightedPodAffinityTermBuilder) postUnmarshal() {
}
