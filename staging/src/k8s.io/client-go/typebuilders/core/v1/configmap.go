/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/typebuilders/meta/v1"
)

// ConfigMapBuilder represents an declarative configuration of the ConfigMap type for use
// with apply.
type ConfigMapBuilder struct {
	typeMeta v1.TypeMetaBuilder // inlined type
	fields   *configMapFields
}

// configMapFields is used by ConfigMapBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in ConfigMapBuilder before marshalling, and
// are copied out to the builder type in ConfigMapBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type configMapFields struct {
	Kind       *string               `json:"kind,omitempty"`       // inlined ConfigMapBuilder.typeMeta.Kind field
	APIVersion *string               `json:"apiVersion,omitempty"` // inlined ConfigMapBuilder.typeMeta.APIVersion field
	ObjectMeta *v1.ObjectMetaBuilder `json:"metadata,omitempty"`
	Immutable  *bool                 `json:"immutable,omitempty"`
	Data       *map[string]string    `json:"data,omitempty"`
	BinaryData *map[string][]byte    `json:"binaryData,omitempty"`
}

func (b *ConfigMapBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &configMapFields{}
	}
}

// ConfigMap constructs an declarative configuration of the ConfigMap type for use with
// apply.
// Provided as a convenience.
func ConfigMap() ConfigMapBuilder {
	return ConfigMapBuilder{fields: &configMapFields{}}
}

// SetTypeMeta sets the TypeMeta field in the declarative configuration to the given value.
func (b ConfigMapBuilder) SetTypeMeta(value v1.TypeMetaBuilder) ConfigMapBuilder {
	b.ensureInitialized()
	b.typeMeta = value
	return b
}

// RemoveTypeMeta removes the TypeMeta field from the declarative configuration.
func (b ConfigMapBuilder) RemoveTypeMeta() ConfigMapBuilder {
	b.ensureInitialized()
	b.typeMeta = v1.TypeMetaBuilder{}
	return b
}

// GetTypeMeta gets the TypeMeta field from the declarative configuration.
func (b ConfigMapBuilder) GetTypeMeta() (value v1.TypeMetaBuilder, ok bool) {
	b.ensureInitialized()
	return b.typeMeta, true
}

// SetObjectMeta sets the ObjectMeta field in the declarative configuration to the given value.
func (b ConfigMapBuilder) SetObjectMeta(value v1.ObjectMetaBuilder) ConfigMapBuilder {
	b.ensureInitialized()
	b.fields.ObjectMeta = &value
	return b
}

// RemoveObjectMeta removes the ObjectMeta field from the declarative configuration.
func (b ConfigMapBuilder) RemoveObjectMeta() ConfigMapBuilder {
	b.ensureInitialized()
	b.fields.ObjectMeta = nil
	return b
}

// GetObjectMeta gets the ObjectMeta field from the declarative configuration.
func (b ConfigMapBuilder) GetObjectMeta() (value v1.ObjectMetaBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.ObjectMeta; v != nil {
		return *v, true
	}
	return value, false
}

// SetImmutable sets the Immutable field in the declarative configuration to the given value.
func (b ConfigMapBuilder) SetImmutable(value bool) ConfigMapBuilder {
	b.ensureInitialized()
	b.fields.Immutable = &value
	return b
}

// RemoveImmutable removes the Immutable field from the declarative configuration.
func (b ConfigMapBuilder) RemoveImmutable() ConfigMapBuilder {
	b.ensureInitialized()
	b.fields.Immutable = nil
	return b
}

// GetImmutable gets the Immutable field from the declarative configuration.
func (b ConfigMapBuilder) GetImmutable() (value bool, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Immutable; v != nil {
		return *v, true
	}
	return value, false
}

// SetData sets the Data field in the declarative configuration to the given value.
func (b ConfigMapBuilder) SetData(value map[string]string) ConfigMapBuilder {
	b.ensureInitialized()
	b.fields.Data = &value
	return b
}

// RemoveData removes the Data field from the declarative configuration.
func (b ConfigMapBuilder) RemoveData() ConfigMapBuilder {
	b.ensureInitialized()
	b.fields.Data = nil
	return b
}

// GetData gets the Data field from the declarative configuration.
func (b ConfigMapBuilder) GetData() (value map[string]string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Data; v != nil {
		return *v, true
	}
	return value, false
}

// SetBinaryData sets the BinaryData field in the declarative configuration to the given value.
func (b ConfigMapBuilder) SetBinaryData(value map[string][]byte) ConfigMapBuilder {
	b.ensureInitialized()
	b.fields.BinaryData = &value
	return b
}

// RemoveBinaryData removes the BinaryData field from the declarative configuration.
func (b ConfigMapBuilder) RemoveBinaryData() ConfigMapBuilder {
	b.ensureInitialized()
	b.fields.BinaryData = nil
	return b
}

// GetBinaryData gets the BinaryData field from the declarative configuration.
func (b ConfigMapBuilder) GetBinaryData() (value map[string][]byte, ok bool) {
	b.ensureInitialized()
	if v := b.fields.BinaryData; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ConfigMapBuilder to unstructured.
func (b *ConfigMapBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ConfigMapBuilder, replacing the contents
// of ConfigMapBuilder.
func (b *ConfigMapBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &configMapFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ConfigMapBuilder to JSON.
func (b *ConfigMapBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into ConfigMapBuilder, replacing the contents of
// ConfigMapBuilder.
func (b *ConfigMapBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ConfigMapList represents a list of ConfigMapBuilder.
// Provided as a convenience.
type ConfigMapList []ConfigMapBuilder

// ConfigMapList represents a map of ConfigMapBuilder.
// Provided as a convenience.
type ConfigMapMap map[string]ConfigMapBuilder

func (b *ConfigMapBuilder) preMarshal() {
	if v, ok := b.typeMeta.GetKind(); ok {
		b.fields.Kind = &v
	}
	if v, ok := b.typeMeta.GetAPIVersion(); ok {
		b.fields.APIVersion = &v
	}
}
func (b *ConfigMapBuilder) postUnmarshal() {
	if b.fields.Kind != nil {
		b.typeMeta.SetKind(*b.fields.Kind)
	}
	if b.fields.APIVersion != nil {
		b.typeMeta.SetAPIVersion(*b.fields.APIVersion)
	}
}
