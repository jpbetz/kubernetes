/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ContainerStateRunningBuilder represents an declarative configuration of the ContainerStateRunning type for use
// with apply.
type ContainerStateRunningBuilder struct {
	fields containerStateRunningFields
}

// containerStateRunningFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in ContainerStateRunningBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type containerStateRunningFields struct {
	StartedAt *v1.Time `json:"startedAt,omitempty"`
}

// ContainerStateRunning constructs an declarative configuration of the ContainerStateRunning type for use with
// apply.
func ContainerStateRunning() *ContainerStateRunningBuilder {
	return &ContainerStateRunningBuilder{}
}

// SetStartedAt sets the StartedAt field in the declarative configuration to the given value.
func (b *ContainerStateRunningBuilder) SetStartedAt(value v1.Time) *ContainerStateRunningBuilder {
	b.fields.StartedAt = &value
	return b
}

// RemoveStartedAt removes the StartedAt field from the declarative configuration.
func (b *ContainerStateRunningBuilder) RemoveStartedAt() *ContainerStateRunningBuilder {
	b.fields.StartedAt = nil
	return b
}

// GetStartedAt gets the StartedAt field from the declarative configuration.
func (b *ContainerStateRunningBuilder) GetStartedAt() (value v1.Time, ok bool) {
	if v := b.fields.StartedAt; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ContainerStateRunningBuilder to unstructured.
func (b *ContainerStateRunningBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ContainerStateRunningBuilder, replacing the contents
// of ContainerStateRunningBuilder.
func (b *ContainerStateRunningBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &containerStateRunningFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ContainerStateRunningBuilder to JSON.
func (b *ContainerStateRunningBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into ContainerStateRunningBuilder, replacing the contents of
// ContainerStateRunningBuilder.
func (b *ContainerStateRunningBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ContainerStateRunningList represents a list of ContainerStateRunningBuilder.
type ContainerStateRunningList []*ContainerStateRunningBuilder

// ContainerStateRunningList represents a map of ContainerStateRunningBuilder.
type ContainerStateRunningMap map[string]ContainerStateRunningBuilder

func (b *ContainerStateRunningBuilder) preMarshal() {
}
func (b *ContainerStateRunningBuilder) postUnmarshal() {
}
