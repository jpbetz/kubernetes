/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// LimitRangeSpecBuilder represents an declarative configuration of the LimitRangeSpec type for use
// with apply.
type LimitRangeSpecBuilder struct {
	fields limitRangeSpecFields
}

// limitRangeSpecFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in LimitRangeSpecBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type limitRangeSpecFields struct {
	Limits *LimitRangeItemList `json:"limits,omitempty"`
}

// LimitRangeSpec constructs an declarative configuration of the LimitRangeSpec type for use with
// apply.
func LimitRangeSpec() *LimitRangeSpecBuilder {
	return &LimitRangeSpecBuilder{}
}

// SetLimits sets the Limits field in the declarative configuration to the given value.
func (b *LimitRangeSpecBuilder) SetLimits(value LimitRangeItemList) *LimitRangeSpecBuilder {
	b.fields.Limits = &value
	return b
}

// RemoveLimits removes the Limits field from the declarative configuration.
func (b *LimitRangeSpecBuilder) RemoveLimits() *LimitRangeSpecBuilder {
	b.fields.Limits = nil
	return b
}

// GetLimits gets the Limits field from the declarative configuration.
func (b *LimitRangeSpecBuilder) GetLimits() (value LimitRangeItemList, ok bool) {
	if v := b.fields.Limits; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts LimitRangeSpecBuilder to unstructured.
func (b *LimitRangeSpecBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to LimitRangeSpecBuilder, replacing the contents
// of LimitRangeSpecBuilder.
func (b *LimitRangeSpecBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &limitRangeSpecFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals LimitRangeSpecBuilder to JSON.
func (b *LimitRangeSpecBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into LimitRangeSpecBuilder, replacing the contents of
// LimitRangeSpecBuilder.
func (b *LimitRangeSpecBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// LimitRangeSpecList represents a list of LimitRangeSpecBuilder.
type LimitRangeSpecList []*LimitRangeSpecBuilder

// LimitRangeSpecList represents a map of LimitRangeSpecBuilder.
type LimitRangeSpecMap map[string]LimitRangeSpecBuilder

func (b *LimitRangeSpecBuilder) preMarshal() {
}
func (b *LimitRangeSpecBuilder) postUnmarshal() {
}
