/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	corev1 "k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/typebuilders/meta/v1"
)

// SecretBuilder represents an declarative configuration of the Secret type for use
// with apply.
type SecretBuilder struct {
	typeMeta v1.TypeMetaBuilder // inlined type
	fields   *secretFields
}

// secretFields is used by SecretBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in SecretBuilder before marshalling, and
// are copied out to the builder type in SecretBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type secretFields struct {
	Kind       *string               `json:"kind,omitempty"`       // inlined SecretBuilder.typeMeta.Kind field
	APIVersion *string               `json:"apiVersion,omitempty"` // inlined SecretBuilder.typeMeta.APIVersion field
	ObjectMeta *v1.ObjectMetaBuilder `json:"metadata,omitempty"`
	Immutable  *bool                 `json:"immutable,omitempty"`
	Data       *map[string][]byte    `json:"data,omitempty"`
	StringData *map[string]string    `json:"stringData,omitempty"`
	Type       *corev1.SecretType    `json:"type,omitempty"`
}

func (b *SecretBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &secretFields{}
	}
}

// Secret constructs an declarative configuration of the Secret type for use with
// apply.
// Provided as a convenience.
func Secret() SecretBuilder {
	return SecretBuilder{fields: &secretFields{}}
}

// SetTypeMeta sets the TypeMeta field in the declarative configuration to the given value.
func (b SecretBuilder) SetTypeMeta(value v1.TypeMetaBuilder) SecretBuilder {
	b.ensureInitialized()
	b.typeMeta = value
	return b
}

// RemoveTypeMeta removes the TypeMeta field from the declarative configuration.
func (b SecretBuilder) RemoveTypeMeta() SecretBuilder {
	b.ensureInitialized()
	b.typeMeta = v1.TypeMetaBuilder{}
	return b
}

// GetTypeMeta gets the TypeMeta field from the declarative configuration.
func (b SecretBuilder) GetTypeMeta() (value v1.TypeMetaBuilder, ok bool) {
	b.ensureInitialized()
	return b.typeMeta, true
}

// SetObjectMeta sets the ObjectMeta field in the declarative configuration to the given value.
func (b SecretBuilder) SetObjectMeta(value v1.ObjectMetaBuilder) SecretBuilder {
	b.ensureInitialized()
	b.fields.ObjectMeta = &value
	return b
}

// RemoveObjectMeta removes the ObjectMeta field from the declarative configuration.
func (b SecretBuilder) RemoveObjectMeta() SecretBuilder {
	b.ensureInitialized()
	b.fields.ObjectMeta = nil
	return b
}

// GetObjectMeta gets the ObjectMeta field from the declarative configuration.
func (b SecretBuilder) GetObjectMeta() (value v1.ObjectMetaBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.ObjectMeta; v != nil {
		return *v, true
	}
	return value, false
}

// SetImmutable sets the Immutable field in the declarative configuration to the given value.
func (b SecretBuilder) SetImmutable(value bool) SecretBuilder {
	b.ensureInitialized()
	b.fields.Immutable = &value
	return b
}

// RemoveImmutable removes the Immutable field from the declarative configuration.
func (b SecretBuilder) RemoveImmutable() SecretBuilder {
	b.ensureInitialized()
	b.fields.Immutable = nil
	return b
}

// GetImmutable gets the Immutable field from the declarative configuration.
func (b SecretBuilder) GetImmutable() (value bool, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Immutable; v != nil {
		return *v, true
	}
	return value, false
}

// SetData sets the Data field in the declarative configuration to the given value.
func (b SecretBuilder) SetData(value map[string][]byte) SecretBuilder {
	b.ensureInitialized()
	b.fields.Data = &value
	return b
}

// RemoveData removes the Data field from the declarative configuration.
func (b SecretBuilder) RemoveData() SecretBuilder {
	b.ensureInitialized()
	b.fields.Data = nil
	return b
}

// GetData gets the Data field from the declarative configuration.
func (b SecretBuilder) GetData() (value map[string][]byte, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Data; v != nil {
		return *v, true
	}
	return value, false
}

// SetStringData sets the StringData field in the declarative configuration to the given value.
func (b SecretBuilder) SetStringData(value map[string]string) SecretBuilder {
	b.ensureInitialized()
	b.fields.StringData = &value
	return b
}

// RemoveStringData removes the StringData field from the declarative configuration.
func (b SecretBuilder) RemoveStringData() SecretBuilder {
	b.ensureInitialized()
	b.fields.StringData = nil
	return b
}

// GetStringData gets the StringData field from the declarative configuration.
func (b SecretBuilder) GetStringData() (value map[string]string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.StringData; v != nil {
		return *v, true
	}
	return value, false
}

// SetType sets the Type field in the declarative configuration to the given value.
func (b SecretBuilder) SetType(value corev1.SecretType) SecretBuilder {
	b.ensureInitialized()
	b.fields.Type = &value
	return b
}

// RemoveType removes the Type field from the declarative configuration.
func (b SecretBuilder) RemoveType() SecretBuilder {
	b.ensureInitialized()
	b.fields.Type = nil
	return b
}

// GetType gets the Type field from the declarative configuration.
func (b SecretBuilder) GetType() (value corev1.SecretType, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Type; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts SecretBuilder to unstructured.
func (b *SecretBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to SecretBuilder, replacing the contents
// of SecretBuilder.
func (b *SecretBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &secretFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals SecretBuilder to JSON.
func (b *SecretBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into SecretBuilder, replacing the contents of
// SecretBuilder.
func (b *SecretBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// SecretList represents a list of SecretBuilder.
// Provided as a convenience.
type SecretList []SecretBuilder

// SecretList represents a map of SecretBuilder.
// Provided as a convenience.
type SecretMap map[string]SecretBuilder

func (b *SecretBuilder) preMarshal() {
	if v, ok := b.typeMeta.GetKind(); ok {
		b.fields.Kind = &v
	}
	if v, ok := b.typeMeta.GetAPIVersion(); ok {
		b.fields.APIVersion = &v
	}
}
func (b *SecretBuilder) postUnmarshal() {
	if b.fields.Kind != nil {
		b.typeMeta.SetKind(*b.fields.Kind)
	}
	if b.fields.APIVersion != nil {
		b.typeMeta.SetAPIVersion(*b.fields.APIVersion)
	}
}
