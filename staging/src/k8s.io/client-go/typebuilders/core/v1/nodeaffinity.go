/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// NodeAffinityBuilder represents an declarative configuration of the NodeAffinity type for use
// with apply.
type NodeAffinityBuilder struct {
	fields *nodeAffinityFields
}

// nodeAffinityFields is used by NodeAffinityBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in NodeAffinityBuilder before marshalling, and
// are copied out to the builder type in NodeAffinityBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type nodeAffinityFields struct {
	RequiredDuringSchedulingIgnoredDuringExecution  *NodeSelectorBuilder         `json:"requiredDuringSchedulingIgnoredDuringExecution,omitempty"`
	PreferredDuringSchedulingIgnoredDuringExecution *PreferredSchedulingTermList `json:"preferredDuringSchedulingIgnoredDuringExecution,omitempty"`
}

func (b *NodeAffinityBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &nodeAffinityFields{}
	}
}

// NodeAffinity constructs an declarative configuration of the NodeAffinity type for use with
// apply.
// Provided as a convenience.
func NodeAffinity() NodeAffinityBuilder {
	return NodeAffinityBuilder{fields: &nodeAffinityFields{}}
}

// SetRequiredDuringSchedulingIgnoredDuringExecution sets the RequiredDuringSchedulingIgnoredDuringExecution field in the declarative configuration to the given value.
func (b NodeAffinityBuilder) SetRequiredDuringSchedulingIgnoredDuringExecution(value NodeSelectorBuilder) NodeAffinityBuilder {
	b.ensureInitialized()
	b.fields.RequiredDuringSchedulingIgnoredDuringExecution = &value
	return b
}

// RemoveRequiredDuringSchedulingIgnoredDuringExecution removes the RequiredDuringSchedulingIgnoredDuringExecution field from the declarative configuration.
func (b NodeAffinityBuilder) RemoveRequiredDuringSchedulingIgnoredDuringExecution() NodeAffinityBuilder {
	b.ensureInitialized()
	b.fields.RequiredDuringSchedulingIgnoredDuringExecution = nil
	return b
}

// GetRequiredDuringSchedulingIgnoredDuringExecution gets the RequiredDuringSchedulingIgnoredDuringExecution field from the declarative configuration.
func (b NodeAffinityBuilder) GetRequiredDuringSchedulingIgnoredDuringExecution() (value NodeSelectorBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.RequiredDuringSchedulingIgnoredDuringExecution; v != nil {
		return *v, true
	}
	return value, false
}

// SetPreferredDuringSchedulingIgnoredDuringExecution sets the PreferredDuringSchedulingIgnoredDuringExecution field in the declarative configuration to the given value.
func (b NodeAffinityBuilder) SetPreferredDuringSchedulingIgnoredDuringExecution(value PreferredSchedulingTermList) NodeAffinityBuilder {
	b.ensureInitialized()
	b.fields.PreferredDuringSchedulingIgnoredDuringExecution = &value
	return b
}

// RemovePreferredDuringSchedulingIgnoredDuringExecution removes the PreferredDuringSchedulingIgnoredDuringExecution field from the declarative configuration.
func (b NodeAffinityBuilder) RemovePreferredDuringSchedulingIgnoredDuringExecution() NodeAffinityBuilder {
	b.ensureInitialized()
	b.fields.PreferredDuringSchedulingIgnoredDuringExecution = nil
	return b
}

// GetPreferredDuringSchedulingIgnoredDuringExecution gets the PreferredDuringSchedulingIgnoredDuringExecution field from the declarative configuration.
func (b NodeAffinityBuilder) GetPreferredDuringSchedulingIgnoredDuringExecution() (value PreferredSchedulingTermList, ok bool) {
	b.ensureInitialized()
	if v := b.fields.PreferredDuringSchedulingIgnoredDuringExecution; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts NodeAffinityBuilder to unstructured.
func (b *NodeAffinityBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to NodeAffinityBuilder, replacing the contents
// of NodeAffinityBuilder.
func (b *NodeAffinityBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &nodeAffinityFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals NodeAffinityBuilder to JSON.
func (b *NodeAffinityBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into NodeAffinityBuilder, replacing the contents of
// NodeAffinityBuilder.
func (b *NodeAffinityBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// NodeAffinityList represents a list of NodeAffinityBuilder.
// Provided as a convenience.
type NodeAffinityList []NodeAffinityBuilder

// NodeAffinityList represents a map of NodeAffinityBuilder.
// Provided as a convenience.
type NodeAffinityMap map[string]NodeAffinityBuilder

func (b *NodeAffinityBuilder) preMarshal() {
}
func (b *NodeAffinityBuilder) postUnmarshal() {
}
