/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// NFSVolumeSourceBuilder represents an declarative configuration of the NFSVolumeSource type for use
// with apply.
type NFSVolumeSourceBuilder struct {
	fields *nFSVolumeSourceFields
}

// nFSVolumeSourceFields is used by NFSVolumeSourceBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in NFSVolumeSourceBuilder before marshalling, and
// are copied out to the builder type in NFSVolumeSourceBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type nFSVolumeSourceFields struct {
	Server   *string `json:"server,omitempty"`
	Path     *string `json:"path,omitempty"`
	ReadOnly *bool   `json:"readOnly,omitempty"`
}

func (b *NFSVolumeSourceBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &nFSVolumeSourceFields{}
	}
}

// NFSVolumeSource constructs an declarative configuration of the NFSVolumeSource type for use with
// apply.
// Provided as a convenience.
func NFSVolumeSource() NFSVolumeSourceBuilder {
	return NFSVolumeSourceBuilder{fields: &nFSVolumeSourceFields{}}
}

// SetServer sets the Server field in the declarative configuration to the given value.
func (b NFSVolumeSourceBuilder) SetServer(value string) NFSVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.Server = &value
	return b
}

// RemoveServer removes the Server field from the declarative configuration.
func (b NFSVolumeSourceBuilder) RemoveServer() NFSVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.Server = nil
	return b
}

// GetServer gets the Server field from the declarative configuration.
func (b NFSVolumeSourceBuilder) GetServer() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Server; v != nil {
		return *v, true
	}
	return value, false
}

// SetPath sets the Path field in the declarative configuration to the given value.
func (b NFSVolumeSourceBuilder) SetPath(value string) NFSVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.Path = &value
	return b
}

// RemovePath removes the Path field from the declarative configuration.
func (b NFSVolumeSourceBuilder) RemovePath() NFSVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.Path = nil
	return b
}

// GetPath gets the Path field from the declarative configuration.
func (b NFSVolumeSourceBuilder) GetPath() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Path; v != nil {
		return *v, true
	}
	return value, false
}

// SetReadOnly sets the ReadOnly field in the declarative configuration to the given value.
func (b NFSVolumeSourceBuilder) SetReadOnly(value bool) NFSVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.ReadOnly = &value
	return b
}

// RemoveReadOnly removes the ReadOnly field from the declarative configuration.
func (b NFSVolumeSourceBuilder) RemoveReadOnly() NFSVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.ReadOnly = nil
	return b
}

// GetReadOnly gets the ReadOnly field from the declarative configuration.
func (b NFSVolumeSourceBuilder) GetReadOnly() (value bool, ok bool) {
	b.ensureInitialized()
	if v := b.fields.ReadOnly; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts NFSVolumeSourceBuilder to unstructured.
func (b *NFSVolumeSourceBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to NFSVolumeSourceBuilder, replacing the contents
// of NFSVolumeSourceBuilder.
func (b *NFSVolumeSourceBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &nFSVolumeSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals NFSVolumeSourceBuilder to JSON.
func (b *NFSVolumeSourceBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into NFSVolumeSourceBuilder, replacing the contents of
// NFSVolumeSourceBuilder.
func (b *NFSVolumeSourceBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// NFSVolumeSourceList represents a list of NFSVolumeSourceBuilder.
// Provided as a convenience.
type NFSVolumeSourceList []NFSVolumeSourceBuilder

// NFSVolumeSourceList represents a map of NFSVolumeSourceBuilder.
// Provided as a convenience.
type NFSVolumeSourceMap map[string]NFSVolumeSourceBuilder

func (b *NFSVolumeSourceBuilder) preMarshal() {
}
func (b *NFSVolumeSourceBuilder) postUnmarshal() {
}
