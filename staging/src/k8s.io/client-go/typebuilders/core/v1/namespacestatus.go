/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	v1 "k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// NamespaceStatusBuilder represents an declarative configuration of the NamespaceStatus type for use
// with apply.
type NamespaceStatusBuilder struct {
	fields *namespaceStatusFields
}

// namespaceStatusFields is used by NamespaceStatusBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in NamespaceStatusBuilder before marshalling, and
// are copied out to the builder type in NamespaceStatusBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type namespaceStatusFields struct {
	Phase      *v1.NamespacePhase      `json:"phase,omitempty"`
	Conditions *NamespaceConditionList `json:"conditions,omitempty"`
}

func (b *NamespaceStatusBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &namespaceStatusFields{}
	}
}

// NamespaceStatus constructs an declarative configuration of the NamespaceStatus type for use with
// apply.
// Provided as a convenience.
func NamespaceStatus() NamespaceStatusBuilder {
	return NamespaceStatusBuilder{fields: &namespaceStatusFields{}}
}

// SetPhase sets the Phase field in the declarative configuration to the given value.
func (b NamespaceStatusBuilder) SetPhase(value v1.NamespacePhase) NamespaceStatusBuilder {
	b.ensureInitialized()
	b.fields.Phase = &value
	return b
}

// RemovePhase removes the Phase field from the declarative configuration.
func (b NamespaceStatusBuilder) RemovePhase() NamespaceStatusBuilder {
	b.ensureInitialized()
	b.fields.Phase = nil
	return b
}

// GetPhase gets the Phase field from the declarative configuration.
func (b NamespaceStatusBuilder) GetPhase() (value v1.NamespacePhase, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Phase; v != nil {
		return *v, true
	}
	return value, false
}

// SetConditions sets the Conditions field in the declarative configuration to the given value.
func (b NamespaceStatusBuilder) SetConditions(value NamespaceConditionList) NamespaceStatusBuilder {
	b.ensureInitialized()
	b.fields.Conditions = &value
	return b
}

// RemoveConditions removes the Conditions field from the declarative configuration.
func (b NamespaceStatusBuilder) RemoveConditions() NamespaceStatusBuilder {
	b.ensureInitialized()
	b.fields.Conditions = nil
	return b
}

// GetConditions gets the Conditions field from the declarative configuration.
func (b NamespaceStatusBuilder) GetConditions() (value NamespaceConditionList, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Conditions; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts NamespaceStatusBuilder to unstructured.
func (b *NamespaceStatusBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to NamespaceStatusBuilder, replacing the contents
// of NamespaceStatusBuilder.
func (b *NamespaceStatusBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &namespaceStatusFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals NamespaceStatusBuilder to JSON.
func (b *NamespaceStatusBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into NamespaceStatusBuilder, replacing the contents of
// NamespaceStatusBuilder.
func (b *NamespaceStatusBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// NamespaceStatusList represents a list of NamespaceStatusBuilder.
// Provided as a convenience.
type NamespaceStatusList []NamespaceStatusBuilder

// NamespaceStatusList represents a map of NamespaceStatusBuilder.
// Provided as a convenience.
type NamespaceStatusMap map[string]NamespaceStatusBuilder

func (b *NamespaceStatusBuilder) preMarshal() {
}
func (b *NamespaceStatusBuilder) postUnmarshal() {
}
