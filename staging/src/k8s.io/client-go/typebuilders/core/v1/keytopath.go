/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// KeyToPathBuilder represents an declarative configuration of the KeyToPath type for use
// with apply.
type KeyToPathBuilder struct {
	fields *keyToPathFields
}

// keyToPathFields is used by KeyToPathBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in KeyToPathBuilder before marshalling, and
// are copied out to the builder type in KeyToPathBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type keyToPathFields struct {
	Key  *string `json:"key,omitempty"`
	Path *string `json:"path,omitempty"`
	Mode *int32  `json:"mode,omitempty"`
}

func (b *KeyToPathBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &keyToPathFields{}
	}
}

// KeyToPath constructs an declarative configuration of the KeyToPath type for use with
// apply.
// Provided as a convenience.
func KeyToPath() KeyToPathBuilder {
	return KeyToPathBuilder{fields: &keyToPathFields{}}
}

// SetKey sets the Key field in the declarative configuration to the given value.
func (b KeyToPathBuilder) SetKey(value string) KeyToPathBuilder {
	b.ensureInitialized()
	b.fields.Key = &value
	return b
}

// RemoveKey removes the Key field from the declarative configuration.
func (b KeyToPathBuilder) RemoveKey() KeyToPathBuilder {
	b.ensureInitialized()
	b.fields.Key = nil
	return b
}

// GetKey gets the Key field from the declarative configuration.
func (b KeyToPathBuilder) GetKey() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Key; v != nil {
		return *v, true
	}
	return value, false
}

// SetPath sets the Path field in the declarative configuration to the given value.
func (b KeyToPathBuilder) SetPath(value string) KeyToPathBuilder {
	b.ensureInitialized()
	b.fields.Path = &value
	return b
}

// RemovePath removes the Path field from the declarative configuration.
func (b KeyToPathBuilder) RemovePath() KeyToPathBuilder {
	b.ensureInitialized()
	b.fields.Path = nil
	return b
}

// GetPath gets the Path field from the declarative configuration.
func (b KeyToPathBuilder) GetPath() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Path; v != nil {
		return *v, true
	}
	return value, false
}

// SetMode sets the Mode field in the declarative configuration to the given value.
func (b KeyToPathBuilder) SetMode(value int32) KeyToPathBuilder {
	b.ensureInitialized()
	b.fields.Mode = &value
	return b
}

// RemoveMode removes the Mode field from the declarative configuration.
func (b KeyToPathBuilder) RemoveMode() KeyToPathBuilder {
	b.ensureInitialized()
	b.fields.Mode = nil
	return b
}

// GetMode gets the Mode field from the declarative configuration.
func (b KeyToPathBuilder) GetMode() (value int32, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Mode; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts KeyToPathBuilder to unstructured.
func (b *KeyToPathBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to KeyToPathBuilder, replacing the contents
// of KeyToPathBuilder.
func (b *KeyToPathBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &keyToPathFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals KeyToPathBuilder to JSON.
func (b *KeyToPathBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into KeyToPathBuilder, replacing the contents of
// KeyToPathBuilder.
func (b *KeyToPathBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// KeyToPathList represents a list of KeyToPathBuilder.
// Provided as a convenience.
type KeyToPathList []KeyToPathBuilder

// KeyToPathList represents a map of KeyToPathBuilder.
// Provided as a convenience.
type KeyToPathMap map[string]KeyToPathBuilder

func (b *KeyToPathBuilder) preMarshal() {
}
func (b *KeyToPathBuilder) postUnmarshal() {
}
