/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// CSIVolumeSourceBuilder represents an declarative configuration of the CSIVolumeSource type for use
// with apply.
type CSIVolumeSourceBuilder struct {
	fields cSIVolumeSourceFields
}

// cSIVolumeSourceFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in CSIVolumeSourceBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type cSIVolumeSourceFields struct {
	Driver               *string                      `json:"driver,omitempty"`
	ReadOnly             *bool                        `json:"readOnly,omitempty"`
	FSType               *string                      `json:"fsType,omitempty"`
	VolumeAttributes     *map[string]string           `json:"volumeAttributes,omitempty"`
	NodePublishSecretRef *LocalObjectReferenceBuilder `json:"nodePublishSecretRef,omitempty"`
}

// CSIVolumeSource constructs an declarative configuration of the CSIVolumeSource type for use with
// apply.
func CSIVolumeSource() *CSIVolumeSourceBuilder {
	return &CSIVolumeSourceBuilder{}
}

// SetDriver sets the Driver field in the declarative configuration to the given value.
func (b *CSIVolumeSourceBuilder) SetDriver(value string) *CSIVolumeSourceBuilder {
	b.fields.Driver = &value
	return b
}

// RemoveDriver removes the Driver field from the declarative configuration.
func (b *CSIVolumeSourceBuilder) RemoveDriver() *CSIVolumeSourceBuilder {
	b.fields.Driver = nil
	return b
}

// GetDriver gets the Driver field from the declarative configuration.
func (b *CSIVolumeSourceBuilder) GetDriver() (value string, ok bool) {
	if v := b.fields.Driver; v != nil {
		return *v, true
	}
	return value, false
}

// SetReadOnly sets the ReadOnly field in the declarative configuration to the given value.
func (b *CSIVolumeSourceBuilder) SetReadOnly(value bool) *CSIVolumeSourceBuilder {
	b.fields.ReadOnly = &value
	return b
}

// RemoveReadOnly removes the ReadOnly field from the declarative configuration.
func (b *CSIVolumeSourceBuilder) RemoveReadOnly() *CSIVolumeSourceBuilder {
	b.fields.ReadOnly = nil
	return b
}

// GetReadOnly gets the ReadOnly field from the declarative configuration.
func (b *CSIVolumeSourceBuilder) GetReadOnly() (value bool, ok bool) {
	if v := b.fields.ReadOnly; v != nil {
		return *v, true
	}
	return value, false
}

// SetFSType sets the FSType field in the declarative configuration to the given value.
func (b *CSIVolumeSourceBuilder) SetFSType(value string) *CSIVolumeSourceBuilder {
	b.fields.FSType = &value
	return b
}

// RemoveFSType removes the FSType field from the declarative configuration.
func (b *CSIVolumeSourceBuilder) RemoveFSType() *CSIVolumeSourceBuilder {
	b.fields.FSType = nil
	return b
}

// GetFSType gets the FSType field from the declarative configuration.
func (b *CSIVolumeSourceBuilder) GetFSType() (value string, ok bool) {
	if v := b.fields.FSType; v != nil {
		return *v, true
	}
	return value, false
}

// SetVolumeAttributes sets the VolumeAttributes field in the declarative configuration to the given value.
func (b *CSIVolumeSourceBuilder) SetVolumeAttributes(value map[string]string) *CSIVolumeSourceBuilder {
	b.fields.VolumeAttributes = &value
	return b
}

// RemoveVolumeAttributes removes the VolumeAttributes field from the declarative configuration.
func (b *CSIVolumeSourceBuilder) RemoveVolumeAttributes() *CSIVolumeSourceBuilder {
	b.fields.VolumeAttributes = nil
	return b
}

// GetVolumeAttributes gets the VolumeAttributes field from the declarative configuration.
func (b *CSIVolumeSourceBuilder) GetVolumeAttributes() (value map[string]string, ok bool) {
	if v := b.fields.VolumeAttributes; v != nil {
		return *v, true
	}
	return value, false
}

// SetNodePublishSecretRef sets the NodePublishSecretRef field in the declarative configuration to the given value.
func (b *CSIVolumeSourceBuilder) SetNodePublishSecretRef(value *LocalObjectReferenceBuilder) *CSIVolumeSourceBuilder {
	b.fields.NodePublishSecretRef = value
	return b
}

// RemoveNodePublishSecretRef removes the NodePublishSecretRef field from the declarative configuration.
func (b *CSIVolumeSourceBuilder) RemoveNodePublishSecretRef() *CSIVolumeSourceBuilder {
	b.fields.NodePublishSecretRef = nil
	return b
}

// GetNodePublishSecretRef gets the NodePublishSecretRef field from the declarative configuration.
func (b *CSIVolumeSourceBuilder) GetNodePublishSecretRef() (value *LocalObjectReferenceBuilder, ok bool) {
	return b.fields.NodePublishSecretRef, b.fields.NodePublishSecretRef != nil
}

// ToUnstructured converts CSIVolumeSourceBuilder to unstructured.
func (b *CSIVolumeSourceBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to CSIVolumeSourceBuilder, replacing the contents
// of CSIVolumeSourceBuilder.
func (b *CSIVolumeSourceBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &cSIVolumeSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals CSIVolumeSourceBuilder to JSON.
func (b *CSIVolumeSourceBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into CSIVolumeSourceBuilder, replacing the contents of
// CSIVolumeSourceBuilder.
func (b *CSIVolumeSourceBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// CSIVolumeSourceList represents a list of CSIVolumeSourceBuilder.
type CSIVolumeSourceList []*CSIVolumeSourceBuilder

// CSIVolumeSourceList represents a map of CSIVolumeSourceBuilder.
type CSIVolumeSourceMap map[string]CSIVolumeSourceBuilder

func (b *CSIVolumeSourceBuilder) preMarshal() {
}
func (b *CSIVolumeSourceBuilder) postUnmarshal() {
}
