/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/typebuilders/meta/v1"
)

// PodTemplateSpecBuilder represents an declarative configuration of the PodTemplateSpec type for use
// with apply.
type PodTemplateSpecBuilder struct {
	fields *podTemplateSpecFields
}

// podTemplateSpecFields is used by PodTemplateSpecBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in PodTemplateSpecBuilder before marshalling, and
// are copied out to the builder type in PodTemplateSpecBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type podTemplateSpecFields struct {
	ObjectMeta *v1.ObjectMetaBuilder `json:"metadata,omitempty"`
	Spec       *PodSpecBuilder       `json:"spec,omitempty"`
}

func (b *PodTemplateSpecBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &podTemplateSpecFields{}
	}
}

// PodTemplateSpec constructs an declarative configuration of the PodTemplateSpec type for use with
// apply.
// Provided as a convenience.
func PodTemplateSpec() PodTemplateSpecBuilder {
	return PodTemplateSpecBuilder{fields: &podTemplateSpecFields{}}
}

// SetObjectMeta sets the ObjectMeta field in the declarative configuration to the given value.
func (b PodTemplateSpecBuilder) SetObjectMeta(value v1.ObjectMetaBuilder) PodTemplateSpecBuilder {
	b.ensureInitialized()
	b.fields.ObjectMeta = &value
	return b
}

// RemoveObjectMeta removes the ObjectMeta field from the declarative configuration.
func (b PodTemplateSpecBuilder) RemoveObjectMeta() PodTemplateSpecBuilder {
	b.ensureInitialized()
	b.fields.ObjectMeta = nil
	return b
}

// GetObjectMeta gets the ObjectMeta field from the declarative configuration.
func (b PodTemplateSpecBuilder) GetObjectMeta() (value v1.ObjectMetaBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.ObjectMeta; v != nil {
		return *v, true
	}
	return value, false
}

// SetSpec sets the Spec field in the declarative configuration to the given value.
func (b PodTemplateSpecBuilder) SetSpec(value PodSpecBuilder) PodTemplateSpecBuilder {
	b.ensureInitialized()
	b.fields.Spec = &value
	return b
}

// RemoveSpec removes the Spec field from the declarative configuration.
func (b PodTemplateSpecBuilder) RemoveSpec() PodTemplateSpecBuilder {
	b.ensureInitialized()
	b.fields.Spec = nil
	return b
}

// GetSpec gets the Spec field from the declarative configuration.
func (b PodTemplateSpecBuilder) GetSpec() (value PodSpecBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Spec; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts PodTemplateSpecBuilder to unstructured.
func (b *PodTemplateSpecBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to PodTemplateSpecBuilder, replacing the contents
// of PodTemplateSpecBuilder.
func (b *PodTemplateSpecBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &podTemplateSpecFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals PodTemplateSpecBuilder to JSON.
func (b *PodTemplateSpecBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into PodTemplateSpecBuilder, replacing the contents of
// PodTemplateSpecBuilder.
func (b *PodTemplateSpecBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// PodTemplateSpecList represents a list of PodTemplateSpecBuilder.
// Provided as a convenience.
type PodTemplateSpecList []PodTemplateSpecBuilder

// PodTemplateSpecList represents a map of PodTemplateSpecBuilder.
// Provided as a convenience.
type PodTemplateSpecMap map[string]PodTemplateSpecBuilder

func (b *PodTemplateSpecBuilder) preMarshal() {
}
func (b *PodTemplateSpecBuilder) postUnmarshal() {
}
