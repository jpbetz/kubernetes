/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	v1 "k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// PersistentVolumeStatusBuilder represents an declarative configuration of the PersistentVolumeStatus type for use
// with apply.
type PersistentVolumeStatusBuilder struct {
	fields persistentVolumeStatusFields
}

// persistentVolumeStatusFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in PersistentVolumeStatusBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type persistentVolumeStatusFields struct {
	Phase   *v1.PersistentVolumePhase `json:"phase,omitempty"`
	Message *string                   `json:"message,omitempty"`
	Reason  *string                   `json:"reason,omitempty"`
}

// PersistentVolumeStatus constructs an declarative configuration of the PersistentVolumeStatus type for use with
// apply.
func PersistentVolumeStatus() *PersistentVolumeStatusBuilder {
	return &PersistentVolumeStatusBuilder{}
}

// SetPhase sets the Phase field in the declarative configuration to the given value.
func (b *PersistentVolumeStatusBuilder) SetPhase(value v1.PersistentVolumePhase) *PersistentVolumeStatusBuilder {
	b.fields.Phase = &value
	return b
}

// RemovePhase removes the Phase field from the declarative configuration.
func (b *PersistentVolumeStatusBuilder) RemovePhase() *PersistentVolumeStatusBuilder {
	b.fields.Phase = nil
	return b
}

// GetPhase gets the Phase field from the declarative configuration.
func (b *PersistentVolumeStatusBuilder) GetPhase() (value v1.PersistentVolumePhase, ok bool) {
	if v := b.fields.Phase; v != nil {
		return *v, true
	}
	return value, false
}

// SetMessage sets the Message field in the declarative configuration to the given value.
func (b *PersistentVolumeStatusBuilder) SetMessage(value string) *PersistentVolumeStatusBuilder {
	b.fields.Message = &value
	return b
}

// RemoveMessage removes the Message field from the declarative configuration.
func (b *PersistentVolumeStatusBuilder) RemoveMessage() *PersistentVolumeStatusBuilder {
	b.fields.Message = nil
	return b
}

// GetMessage gets the Message field from the declarative configuration.
func (b *PersistentVolumeStatusBuilder) GetMessage() (value string, ok bool) {
	if v := b.fields.Message; v != nil {
		return *v, true
	}
	return value, false
}

// SetReason sets the Reason field in the declarative configuration to the given value.
func (b *PersistentVolumeStatusBuilder) SetReason(value string) *PersistentVolumeStatusBuilder {
	b.fields.Reason = &value
	return b
}

// RemoveReason removes the Reason field from the declarative configuration.
func (b *PersistentVolumeStatusBuilder) RemoveReason() *PersistentVolumeStatusBuilder {
	b.fields.Reason = nil
	return b
}

// GetReason gets the Reason field from the declarative configuration.
func (b *PersistentVolumeStatusBuilder) GetReason() (value string, ok bool) {
	if v := b.fields.Reason; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts PersistentVolumeStatusBuilder to unstructured.
func (b *PersistentVolumeStatusBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to PersistentVolumeStatusBuilder, replacing the contents
// of PersistentVolumeStatusBuilder.
func (b *PersistentVolumeStatusBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &persistentVolumeStatusFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals PersistentVolumeStatusBuilder to JSON.
func (b *PersistentVolumeStatusBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into PersistentVolumeStatusBuilder, replacing the contents of
// PersistentVolumeStatusBuilder.
func (b *PersistentVolumeStatusBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// PersistentVolumeStatusList represents a list of PersistentVolumeStatusBuilder.
type PersistentVolumeStatusList []*PersistentVolumeStatusBuilder

// PersistentVolumeStatusList represents a map of PersistentVolumeStatusBuilder.
type PersistentVolumeStatusMap map[string]PersistentVolumeStatusBuilder

func (b *PersistentVolumeStatusBuilder) preMarshal() {
}
func (b *PersistentVolumeStatusBuilder) postUnmarshal() {
}
