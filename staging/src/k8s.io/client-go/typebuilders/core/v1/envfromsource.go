/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// EnvFromSourceBuilder represents an declarative configuration of the EnvFromSource type for use
// with apply.
type EnvFromSourceBuilder struct {
	fields envFromSourceFields
}

// envFromSourceFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in EnvFromSourceBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type envFromSourceFields struct {
	Prefix       *string                    `json:"prefix,omitempty"`
	ConfigMapRef *ConfigMapEnvSourceBuilder `json:"configMapRef,omitempty"`
	SecretRef    *SecretEnvSourceBuilder    `json:"secretRef,omitempty"`
}

// EnvFromSource constructs an declarative configuration of the EnvFromSource type for use with
// apply.
func EnvFromSource() *EnvFromSourceBuilder {
	return &EnvFromSourceBuilder{}
}

// SetPrefix sets the Prefix field in the declarative configuration to the given value.
func (b *EnvFromSourceBuilder) SetPrefix(value string) *EnvFromSourceBuilder {
	b.fields.Prefix = &value
	return b
}

// RemovePrefix removes the Prefix field from the declarative configuration.
func (b *EnvFromSourceBuilder) RemovePrefix() *EnvFromSourceBuilder {
	b.fields.Prefix = nil
	return b
}

// GetPrefix gets the Prefix field from the declarative configuration.
func (b *EnvFromSourceBuilder) GetPrefix() (value string, ok bool) {
	if v := b.fields.Prefix; v != nil {
		return *v, true
	}
	return value, false
}

// SetConfigMapRef sets the ConfigMapRef field in the declarative configuration to the given value.
func (b *EnvFromSourceBuilder) SetConfigMapRef(value *ConfigMapEnvSourceBuilder) *EnvFromSourceBuilder {
	b.fields.ConfigMapRef = value
	return b
}

// RemoveConfigMapRef removes the ConfigMapRef field from the declarative configuration.
func (b *EnvFromSourceBuilder) RemoveConfigMapRef() *EnvFromSourceBuilder {
	b.fields.ConfigMapRef = nil
	return b
}

// GetConfigMapRef gets the ConfigMapRef field from the declarative configuration.
func (b *EnvFromSourceBuilder) GetConfigMapRef() (value *ConfigMapEnvSourceBuilder, ok bool) {
	return b.fields.ConfigMapRef, b.fields.ConfigMapRef != nil
}

// SetSecretRef sets the SecretRef field in the declarative configuration to the given value.
func (b *EnvFromSourceBuilder) SetSecretRef(value *SecretEnvSourceBuilder) *EnvFromSourceBuilder {
	b.fields.SecretRef = value
	return b
}

// RemoveSecretRef removes the SecretRef field from the declarative configuration.
func (b *EnvFromSourceBuilder) RemoveSecretRef() *EnvFromSourceBuilder {
	b.fields.SecretRef = nil
	return b
}

// GetSecretRef gets the SecretRef field from the declarative configuration.
func (b *EnvFromSourceBuilder) GetSecretRef() (value *SecretEnvSourceBuilder, ok bool) {
	return b.fields.SecretRef, b.fields.SecretRef != nil
}

// ToUnstructured converts EnvFromSourceBuilder to unstructured.
func (b *EnvFromSourceBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to EnvFromSourceBuilder, replacing the contents
// of EnvFromSourceBuilder.
func (b *EnvFromSourceBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &envFromSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals EnvFromSourceBuilder to JSON.
func (b *EnvFromSourceBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into EnvFromSourceBuilder, replacing the contents of
// EnvFromSourceBuilder.
func (b *EnvFromSourceBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// EnvFromSourceList represents a list of EnvFromSourceBuilder.
type EnvFromSourceList []*EnvFromSourceBuilder

// EnvFromSourceList represents a map of EnvFromSourceBuilder.
type EnvFromSourceMap map[string]EnvFromSourceBuilder

func (b *EnvFromSourceBuilder) preMarshal() {
}
func (b *EnvFromSourceBuilder) postUnmarshal() {
}
