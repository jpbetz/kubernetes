/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/typebuilders/meta/v1"
)

// EventBuilder represents an declarative configuration of the Event type for use
// with apply.
type EventBuilder struct {
	typeMeta v1.TypeMetaBuilder // inlined type
	fields   *eventFields
}

// eventFields is used by EventBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in EventBuilder before marshalling, and
// are copied out to the builder type in EventBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type eventFields struct {
	Kind                *string                 `json:"kind,omitempty"`       // inlined EventBuilder.typeMeta.Kind field
	APIVersion          *string                 `json:"apiVersion,omitempty"` // inlined EventBuilder.typeMeta.APIVersion field
	ObjectMeta          *v1.ObjectMetaBuilder   `json:"metadata,omitempty"`
	InvolvedObject      *ObjectReferenceBuilder `json:"involvedObject,omitempty"`
	Reason              *string                 `json:"reason,omitempty"`
	Message             *string                 `json:"message,omitempty"`
	Source              *EventSourceBuilder     `json:"source,omitempty"`
	FirstTimestamp      *metav1.Time            `json:"firstTimestamp,omitempty"`
	LastTimestamp       *metav1.Time            `json:"lastTimestamp,omitempty"`
	Count               *int32                  `json:"count,omitempty"`
	Type                *string                 `json:"type,omitempty"`
	EventTime           *metav1.MicroTime       `json:"eventTime,omitempty"`
	Series              *EventSeriesBuilder     `json:"series,omitempty"`
	Action              *string                 `json:"action,omitempty"`
	Related             *ObjectReferenceBuilder `json:"related,omitempty"`
	ReportingController *string                 `json:"reportingComponent,omitempty"`
	ReportingInstance   *string                 `json:"reportingInstance,omitempty"`
}

func (b *EventBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &eventFields{}
	}
}

// Event constructs an declarative configuration of the Event type for use with
// apply.
// Provided as a convenience.
func Event() EventBuilder {
	return EventBuilder{fields: &eventFields{}}
}

// SetTypeMeta sets the TypeMeta field in the declarative configuration to the given value.
func (b EventBuilder) SetTypeMeta(value v1.TypeMetaBuilder) EventBuilder {
	b.ensureInitialized()
	b.typeMeta = value
	return b
}

// RemoveTypeMeta removes the TypeMeta field from the declarative configuration.
func (b EventBuilder) RemoveTypeMeta() EventBuilder {
	b.ensureInitialized()
	b.typeMeta = v1.TypeMetaBuilder{}
	return b
}

// GetTypeMeta gets the TypeMeta field from the declarative configuration.
func (b EventBuilder) GetTypeMeta() (value v1.TypeMetaBuilder, ok bool) {
	b.ensureInitialized()
	return b.typeMeta, true
}

// SetObjectMeta sets the ObjectMeta field in the declarative configuration to the given value.
func (b EventBuilder) SetObjectMeta(value v1.ObjectMetaBuilder) EventBuilder {
	b.ensureInitialized()
	b.fields.ObjectMeta = &value
	return b
}

// RemoveObjectMeta removes the ObjectMeta field from the declarative configuration.
func (b EventBuilder) RemoveObjectMeta() EventBuilder {
	b.ensureInitialized()
	b.fields.ObjectMeta = nil
	return b
}

// GetObjectMeta gets the ObjectMeta field from the declarative configuration.
func (b EventBuilder) GetObjectMeta() (value v1.ObjectMetaBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.ObjectMeta; v != nil {
		return *v, true
	}
	return value, false
}

// SetInvolvedObject sets the InvolvedObject field in the declarative configuration to the given value.
func (b EventBuilder) SetInvolvedObject(value ObjectReferenceBuilder) EventBuilder {
	b.ensureInitialized()
	b.fields.InvolvedObject = &value
	return b
}

// RemoveInvolvedObject removes the InvolvedObject field from the declarative configuration.
func (b EventBuilder) RemoveInvolvedObject() EventBuilder {
	b.ensureInitialized()
	b.fields.InvolvedObject = nil
	return b
}

// GetInvolvedObject gets the InvolvedObject field from the declarative configuration.
func (b EventBuilder) GetInvolvedObject() (value ObjectReferenceBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.InvolvedObject; v != nil {
		return *v, true
	}
	return value, false
}

// SetReason sets the Reason field in the declarative configuration to the given value.
func (b EventBuilder) SetReason(value string) EventBuilder {
	b.ensureInitialized()
	b.fields.Reason = &value
	return b
}

// RemoveReason removes the Reason field from the declarative configuration.
func (b EventBuilder) RemoveReason() EventBuilder {
	b.ensureInitialized()
	b.fields.Reason = nil
	return b
}

// GetReason gets the Reason field from the declarative configuration.
func (b EventBuilder) GetReason() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Reason; v != nil {
		return *v, true
	}
	return value, false
}

// SetMessage sets the Message field in the declarative configuration to the given value.
func (b EventBuilder) SetMessage(value string) EventBuilder {
	b.ensureInitialized()
	b.fields.Message = &value
	return b
}

// RemoveMessage removes the Message field from the declarative configuration.
func (b EventBuilder) RemoveMessage() EventBuilder {
	b.ensureInitialized()
	b.fields.Message = nil
	return b
}

// GetMessage gets the Message field from the declarative configuration.
func (b EventBuilder) GetMessage() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Message; v != nil {
		return *v, true
	}
	return value, false
}

// SetSource sets the Source field in the declarative configuration to the given value.
func (b EventBuilder) SetSource(value EventSourceBuilder) EventBuilder {
	b.ensureInitialized()
	b.fields.Source = &value
	return b
}

// RemoveSource removes the Source field from the declarative configuration.
func (b EventBuilder) RemoveSource() EventBuilder {
	b.ensureInitialized()
	b.fields.Source = nil
	return b
}

// GetSource gets the Source field from the declarative configuration.
func (b EventBuilder) GetSource() (value EventSourceBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Source; v != nil {
		return *v, true
	}
	return value, false
}

// SetFirstTimestamp sets the FirstTimestamp field in the declarative configuration to the given value.
func (b EventBuilder) SetFirstTimestamp(value metav1.Time) EventBuilder {
	b.ensureInitialized()
	b.fields.FirstTimestamp = &value
	return b
}

// RemoveFirstTimestamp removes the FirstTimestamp field from the declarative configuration.
func (b EventBuilder) RemoveFirstTimestamp() EventBuilder {
	b.ensureInitialized()
	b.fields.FirstTimestamp = nil
	return b
}

// GetFirstTimestamp gets the FirstTimestamp field from the declarative configuration.
func (b EventBuilder) GetFirstTimestamp() (value metav1.Time, ok bool) {
	b.ensureInitialized()
	if v := b.fields.FirstTimestamp; v != nil {
		return *v, true
	}
	return value, false
}

// SetLastTimestamp sets the LastTimestamp field in the declarative configuration to the given value.
func (b EventBuilder) SetLastTimestamp(value metav1.Time) EventBuilder {
	b.ensureInitialized()
	b.fields.LastTimestamp = &value
	return b
}

// RemoveLastTimestamp removes the LastTimestamp field from the declarative configuration.
func (b EventBuilder) RemoveLastTimestamp() EventBuilder {
	b.ensureInitialized()
	b.fields.LastTimestamp = nil
	return b
}

// GetLastTimestamp gets the LastTimestamp field from the declarative configuration.
func (b EventBuilder) GetLastTimestamp() (value metav1.Time, ok bool) {
	b.ensureInitialized()
	if v := b.fields.LastTimestamp; v != nil {
		return *v, true
	}
	return value, false
}

// SetCount sets the Count field in the declarative configuration to the given value.
func (b EventBuilder) SetCount(value int32) EventBuilder {
	b.ensureInitialized()
	b.fields.Count = &value
	return b
}

// RemoveCount removes the Count field from the declarative configuration.
func (b EventBuilder) RemoveCount() EventBuilder {
	b.ensureInitialized()
	b.fields.Count = nil
	return b
}

// GetCount gets the Count field from the declarative configuration.
func (b EventBuilder) GetCount() (value int32, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Count; v != nil {
		return *v, true
	}
	return value, false
}

// SetType sets the Type field in the declarative configuration to the given value.
func (b EventBuilder) SetType(value string) EventBuilder {
	b.ensureInitialized()
	b.fields.Type = &value
	return b
}

// RemoveType removes the Type field from the declarative configuration.
func (b EventBuilder) RemoveType() EventBuilder {
	b.ensureInitialized()
	b.fields.Type = nil
	return b
}

// GetType gets the Type field from the declarative configuration.
func (b EventBuilder) GetType() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Type; v != nil {
		return *v, true
	}
	return value, false
}

// SetEventTime sets the EventTime field in the declarative configuration to the given value.
func (b EventBuilder) SetEventTime(value metav1.MicroTime) EventBuilder {
	b.ensureInitialized()
	b.fields.EventTime = &value
	return b
}

// RemoveEventTime removes the EventTime field from the declarative configuration.
func (b EventBuilder) RemoveEventTime() EventBuilder {
	b.ensureInitialized()
	b.fields.EventTime = nil
	return b
}

// GetEventTime gets the EventTime field from the declarative configuration.
func (b EventBuilder) GetEventTime() (value metav1.MicroTime, ok bool) {
	b.ensureInitialized()
	if v := b.fields.EventTime; v != nil {
		return *v, true
	}
	return value, false
}

// SetSeries sets the Series field in the declarative configuration to the given value.
func (b EventBuilder) SetSeries(value EventSeriesBuilder) EventBuilder {
	b.ensureInitialized()
	b.fields.Series = &value
	return b
}

// RemoveSeries removes the Series field from the declarative configuration.
func (b EventBuilder) RemoveSeries() EventBuilder {
	b.ensureInitialized()
	b.fields.Series = nil
	return b
}

// GetSeries gets the Series field from the declarative configuration.
func (b EventBuilder) GetSeries() (value EventSeriesBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Series; v != nil {
		return *v, true
	}
	return value, false
}

// SetAction sets the Action field in the declarative configuration to the given value.
func (b EventBuilder) SetAction(value string) EventBuilder {
	b.ensureInitialized()
	b.fields.Action = &value
	return b
}

// RemoveAction removes the Action field from the declarative configuration.
func (b EventBuilder) RemoveAction() EventBuilder {
	b.ensureInitialized()
	b.fields.Action = nil
	return b
}

// GetAction gets the Action field from the declarative configuration.
func (b EventBuilder) GetAction() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Action; v != nil {
		return *v, true
	}
	return value, false
}

// SetRelated sets the Related field in the declarative configuration to the given value.
func (b EventBuilder) SetRelated(value ObjectReferenceBuilder) EventBuilder {
	b.ensureInitialized()
	b.fields.Related = &value
	return b
}

// RemoveRelated removes the Related field from the declarative configuration.
func (b EventBuilder) RemoveRelated() EventBuilder {
	b.ensureInitialized()
	b.fields.Related = nil
	return b
}

// GetRelated gets the Related field from the declarative configuration.
func (b EventBuilder) GetRelated() (value ObjectReferenceBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Related; v != nil {
		return *v, true
	}
	return value, false
}

// SetReportingController sets the ReportingController field in the declarative configuration to the given value.
func (b EventBuilder) SetReportingController(value string) EventBuilder {
	b.ensureInitialized()
	b.fields.ReportingController = &value
	return b
}

// RemoveReportingController removes the ReportingController field from the declarative configuration.
func (b EventBuilder) RemoveReportingController() EventBuilder {
	b.ensureInitialized()
	b.fields.ReportingController = nil
	return b
}

// GetReportingController gets the ReportingController field from the declarative configuration.
func (b EventBuilder) GetReportingController() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.ReportingController; v != nil {
		return *v, true
	}
	return value, false
}

// SetReportingInstance sets the ReportingInstance field in the declarative configuration to the given value.
func (b EventBuilder) SetReportingInstance(value string) EventBuilder {
	b.ensureInitialized()
	b.fields.ReportingInstance = &value
	return b
}

// RemoveReportingInstance removes the ReportingInstance field from the declarative configuration.
func (b EventBuilder) RemoveReportingInstance() EventBuilder {
	b.ensureInitialized()
	b.fields.ReportingInstance = nil
	return b
}

// GetReportingInstance gets the ReportingInstance field from the declarative configuration.
func (b EventBuilder) GetReportingInstance() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.ReportingInstance; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts EventBuilder to unstructured.
func (b *EventBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to EventBuilder, replacing the contents
// of EventBuilder.
func (b *EventBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &eventFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals EventBuilder to JSON.
func (b *EventBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into EventBuilder, replacing the contents of
// EventBuilder.
func (b *EventBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// EventList represents a list of EventBuilder.
// Provided as a convenience.
type EventList []EventBuilder

// EventList represents a map of EventBuilder.
// Provided as a convenience.
type EventMap map[string]EventBuilder

func (b *EventBuilder) preMarshal() {
	if v, ok := b.typeMeta.GetKind(); ok {
		b.fields.Kind = &v
	}
	if v, ok := b.typeMeta.GetAPIVersion(); ok {
		b.fields.APIVersion = &v
	}
}
func (b *EventBuilder) postUnmarshal() {
	if b.fields.Kind != nil {
		b.typeMeta.SetKind(*b.fields.Kind)
	}
	if b.fields.APIVersion != nil {
		b.typeMeta.SetAPIVersion(*b.fields.APIVersion)
	}
}
