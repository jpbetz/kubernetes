/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ObjectFieldSelectorBuilder represents an declarative configuration of the ObjectFieldSelector type for use
// with apply.
type ObjectFieldSelectorBuilder struct {
	fields *objectFieldSelectorFields
}

// objectFieldSelectorFields is used by ObjectFieldSelectorBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in ObjectFieldSelectorBuilder before marshalling, and
// are copied out to the builder type in ObjectFieldSelectorBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type objectFieldSelectorFields struct {
	APIVersion *string `json:"apiVersion,omitempty"`
	FieldPath  *string `json:"fieldPath,omitempty"`
}

func (b *ObjectFieldSelectorBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &objectFieldSelectorFields{}
	}
}

// ObjectFieldSelector constructs an declarative configuration of the ObjectFieldSelector type for use with
// apply.
// Provided as a convenience.
func ObjectFieldSelector() ObjectFieldSelectorBuilder {
	return ObjectFieldSelectorBuilder{fields: &objectFieldSelectorFields{}}
}

// SetAPIVersion sets the APIVersion field in the declarative configuration to the given value.
func (b ObjectFieldSelectorBuilder) SetAPIVersion(value string) ObjectFieldSelectorBuilder {
	b.ensureInitialized()
	b.fields.APIVersion = &value
	return b
}

// RemoveAPIVersion removes the APIVersion field from the declarative configuration.
func (b ObjectFieldSelectorBuilder) RemoveAPIVersion() ObjectFieldSelectorBuilder {
	b.ensureInitialized()
	b.fields.APIVersion = nil
	return b
}

// GetAPIVersion gets the APIVersion field from the declarative configuration.
func (b ObjectFieldSelectorBuilder) GetAPIVersion() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.APIVersion; v != nil {
		return *v, true
	}
	return value, false
}

// SetFieldPath sets the FieldPath field in the declarative configuration to the given value.
func (b ObjectFieldSelectorBuilder) SetFieldPath(value string) ObjectFieldSelectorBuilder {
	b.ensureInitialized()
	b.fields.FieldPath = &value
	return b
}

// RemoveFieldPath removes the FieldPath field from the declarative configuration.
func (b ObjectFieldSelectorBuilder) RemoveFieldPath() ObjectFieldSelectorBuilder {
	b.ensureInitialized()
	b.fields.FieldPath = nil
	return b
}

// GetFieldPath gets the FieldPath field from the declarative configuration.
func (b ObjectFieldSelectorBuilder) GetFieldPath() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.FieldPath; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ObjectFieldSelectorBuilder to unstructured.
func (b *ObjectFieldSelectorBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ObjectFieldSelectorBuilder, replacing the contents
// of ObjectFieldSelectorBuilder.
func (b *ObjectFieldSelectorBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &objectFieldSelectorFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ObjectFieldSelectorBuilder to JSON.
func (b *ObjectFieldSelectorBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into ObjectFieldSelectorBuilder, replacing the contents of
// ObjectFieldSelectorBuilder.
func (b *ObjectFieldSelectorBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ObjectFieldSelectorList represents a list of ObjectFieldSelectorBuilder.
// Provided as a convenience.
type ObjectFieldSelectorList []ObjectFieldSelectorBuilder

// ObjectFieldSelectorList represents a map of ObjectFieldSelectorBuilder.
// Provided as a convenience.
type ObjectFieldSelectorMap map[string]ObjectFieldSelectorBuilder

func (b *ObjectFieldSelectorBuilder) preMarshal() {
}
func (b *ObjectFieldSelectorBuilder) postUnmarshal() {
}
