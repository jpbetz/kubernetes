/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/typebuilders/meta/v1"
)

// PersistentVolumeClaimBuilder represents an declarative configuration of the PersistentVolumeClaim type for use
// with apply.
type PersistentVolumeClaimBuilder struct {
	typeMeta v1.TypeMetaBuilder // inlined type
	fields   *persistentVolumeClaimFields
}

// persistentVolumeClaimFields is used by PersistentVolumeClaimBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in PersistentVolumeClaimBuilder before marshalling, and
// are copied out to the builder type in PersistentVolumeClaimBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type persistentVolumeClaimFields struct {
	Kind       *string                             `json:"kind,omitempty"`       // inlined PersistentVolumeClaimBuilder.typeMeta.Kind field
	APIVersion *string                             `json:"apiVersion,omitempty"` // inlined PersistentVolumeClaimBuilder.typeMeta.APIVersion field
	ObjectMeta *v1.ObjectMetaBuilder               `json:"metadata,omitempty"`
	Spec       *PersistentVolumeClaimSpecBuilder   `json:"spec,omitempty"`
	Status     *PersistentVolumeClaimStatusBuilder `json:"status,omitempty"`
}

func (b *PersistentVolumeClaimBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &persistentVolumeClaimFields{}
	}
}

// PersistentVolumeClaim constructs an declarative configuration of the PersistentVolumeClaim type for use with
// apply.
// Provided as a convenience.
func PersistentVolumeClaim() PersistentVolumeClaimBuilder {
	return PersistentVolumeClaimBuilder{fields: &persistentVolumeClaimFields{}}
}

// SetTypeMeta sets the TypeMeta field in the declarative configuration to the given value.
func (b PersistentVolumeClaimBuilder) SetTypeMeta(value v1.TypeMetaBuilder) PersistentVolumeClaimBuilder {
	b.ensureInitialized()
	b.typeMeta = value
	return b
}

// RemoveTypeMeta removes the TypeMeta field from the declarative configuration.
func (b PersistentVolumeClaimBuilder) RemoveTypeMeta() PersistentVolumeClaimBuilder {
	b.ensureInitialized()
	b.typeMeta = v1.TypeMetaBuilder{}
	return b
}

// GetTypeMeta gets the TypeMeta field from the declarative configuration.
func (b PersistentVolumeClaimBuilder) GetTypeMeta() (value v1.TypeMetaBuilder, ok bool) {
	b.ensureInitialized()
	return b.typeMeta, true
}

// SetObjectMeta sets the ObjectMeta field in the declarative configuration to the given value.
func (b PersistentVolumeClaimBuilder) SetObjectMeta(value v1.ObjectMetaBuilder) PersistentVolumeClaimBuilder {
	b.ensureInitialized()
	b.fields.ObjectMeta = &value
	return b
}

// RemoveObjectMeta removes the ObjectMeta field from the declarative configuration.
func (b PersistentVolumeClaimBuilder) RemoveObjectMeta() PersistentVolumeClaimBuilder {
	b.ensureInitialized()
	b.fields.ObjectMeta = nil
	return b
}

// GetObjectMeta gets the ObjectMeta field from the declarative configuration.
func (b PersistentVolumeClaimBuilder) GetObjectMeta() (value v1.ObjectMetaBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.ObjectMeta; v != nil {
		return *v, true
	}
	return value, false
}

// SetSpec sets the Spec field in the declarative configuration to the given value.
func (b PersistentVolumeClaimBuilder) SetSpec(value PersistentVolumeClaimSpecBuilder) PersistentVolumeClaimBuilder {
	b.ensureInitialized()
	b.fields.Spec = &value
	return b
}

// RemoveSpec removes the Spec field from the declarative configuration.
func (b PersistentVolumeClaimBuilder) RemoveSpec() PersistentVolumeClaimBuilder {
	b.ensureInitialized()
	b.fields.Spec = nil
	return b
}

// GetSpec gets the Spec field from the declarative configuration.
func (b PersistentVolumeClaimBuilder) GetSpec() (value PersistentVolumeClaimSpecBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Spec; v != nil {
		return *v, true
	}
	return value, false
}

// SetStatus sets the Status field in the declarative configuration to the given value.
func (b PersistentVolumeClaimBuilder) SetStatus(value PersistentVolumeClaimStatusBuilder) PersistentVolumeClaimBuilder {
	b.ensureInitialized()
	b.fields.Status = &value
	return b
}

// RemoveStatus removes the Status field from the declarative configuration.
func (b PersistentVolumeClaimBuilder) RemoveStatus() PersistentVolumeClaimBuilder {
	b.ensureInitialized()
	b.fields.Status = nil
	return b
}

// GetStatus gets the Status field from the declarative configuration.
func (b PersistentVolumeClaimBuilder) GetStatus() (value PersistentVolumeClaimStatusBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Status; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts PersistentVolumeClaimBuilder to unstructured.
func (b *PersistentVolumeClaimBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to PersistentVolumeClaimBuilder, replacing the contents
// of PersistentVolumeClaimBuilder.
func (b *PersistentVolumeClaimBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &persistentVolumeClaimFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals PersistentVolumeClaimBuilder to JSON.
func (b *PersistentVolumeClaimBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into PersistentVolumeClaimBuilder, replacing the contents of
// PersistentVolumeClaimBuilder.
func (b *PersistentVolumeClaimBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// PersistentVolumeClaimList represents a list of PersistentVolumeClaimBuilder.
// Provided as a convenience.
type PersistentVolumeClaimList []PersistentVolumeClaimBuilder

// PersistentVolumeClaimList represents a map of PersistentVolumeClaimBuilder.
// Provided as a convenience.
type PersistentVolumeClaimMap map[string]PersistentVolumeClaimBuilder

func (b *PersistentVolumeClaimBuilder) preMarshal() {
	if v, ok := b.typeMeta.GetKind(); ok {
		b.fields.Kind = &v
	}
	if v, ok := b.typeMeta.GetAPIVersion(); ok {
		b.fields.APIVersion = &v
	}
}
func (b *PersistentVolumeClaimBuilder) postUnmarshal() {
	if b.fields.Kind != nil {
		b.typeMeta.SetKind(*b.fields.Kind)
	}
	if b.fields.APIVersion != nil {
		b.typeMeta.SetAPIVersion(*b.fields.APIVersion)
	}
}
