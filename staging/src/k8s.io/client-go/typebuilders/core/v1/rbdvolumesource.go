/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// RBDVolumeSourceBuilder represents an declarative configuration of the RBDVolumeSource type for use
// with apply.
type RBDVolumeSourceBuilder struct {
	fields rBDVolumeSourceFields
}

// rBDVolumeSourceFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in RBDVolumeSourceBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type rBDVolumeSourceFields struct {
	CephMonitors *[]string                    `json:"monitors,omitempty"`
	RBDImage     *string                      `json:"image,omitempty"`
	FSType       *string                      `json:"fsType,omitempty"`
	RBDPool      *string                      `json:"pool,omitempty"`
	RadosUser    *string                      `json:"user,omitempty"`
	Keyring      *string                      `json:"keyring,omitempty"`
	SecretRef    *LocalObjectReferenceBuilder `json:"secretRef,omitempty"`
	ReadOnly     *bool                        `json:"readOnly,omitempty"`
}

// RBDVolumeSource constructs an declarative configuration of the RBDVolumeSource type for use with
// apply.
func RBDVolumeSource() *RBDVolumeSourceBuilder {
	return &RBDVolumeSourceBuilder{}
}

// SetCephMonitors sets the CephMonitors field in the declarative configuration to the given value.
func (b *RBDVolumeSourceBuilder) SetCephMonitors(value []string) *RBDVolumeSourceBuilder {
	b.fields.CephMonitors = &value
	return b
}

// RemoveCephMonitors removes the CephMonitors field from the declarative configuration.
func (b *RBDVolumeSourceBuilder) RemoveCephMonitors() *RBDVolumeSourceBuilder {
	b.fields.CephMonitors = nil
	return b
}

// GetCephMonitors gets the CephMonitors field from the declarative configuration.
func (b *RBDVolumeSourceBuilder) GetCephMonitors() (value []string, ok bool) {
	if v := b.fields.CephMonitors; v != nil {
		return *v, true
	}
	return value, false
}

// SetRBDImage sets the RBDImage field in the declarative configuration to the given value.
func (b *RBDVolumeSourceBuilder) SetRBDImage(value string) *RBDVolumeSourceBuilder {
	b.fields.RBDImage = &value
	return b
}

// RemoveRBDImage removes the RBDImage field from the declarative configuration.
func (b *RBDVolumeSourceBuilder) RemoveRBDImage() *RBDVolumeSourceBuilder {
	b.fields.RBDImage = nil
	return b
}

// GetRBDImage gets the RBDImage field from the declarative configuration.
func (b *RBDVolumeSourceBuilder) GetRBDImage() (value string, ok bool) {
	if v := b.fields.RBDImage; v != nil {
		return *v, true
	}
	return value, false
}

// SetFSType sets the FSType field in the declarative configuration to the given value.
func (b *RBDVolumeSourceBuilder) SetFSType(value string) *RBDVolumeSourceBuilder {
	b.fields.FSType = &value
	return b
}

// RemoveFSType removes the FSType field from the declarative configuration.
func (b *RBDVolumeSourceBuilder) RemoveFSType() *RBDVolumeSourceBuilder {
	b.fields.FSType = nil
	return b
}

// GetFSType gets the FSType field from the declarative configuration.
func (b *RBDVolumeSourceBuilder) GetFSType() (value string, ok bool) {
	if v := b.fields.FSType; v != nil {
		return *v, true
	}
	return value, false
}

// SetRBDPool sets the RBDPool field in the declarative configuration to the given value.
func (b *RBDVolumeSourceBuilder) SetRBDPool(value string) *RBDVolumeSourceBuilder {
	b.fields.RBDPool = &value
	return b
}

// RemoveRBDPool removes the RBDPool field from the declarative configuration.
func (b *RBDVolumeSourceBuilder) RemoveRBDPool() *RBDVolumeSourceBuilder {
	b.fields.RBDPool = nil
	return b
}

// GetRBDPool gets the RBDPool field from the declarative configuration.
func (b *RBDVolumeSourceBuilder) GetRBDPool() (value string, ok bool) {
	if v := b.fields.RBDPool; v != nil {
		return *v, true
	}
	return value, false
}

// SetRadosUser sets the RadosUser field in the declarative configuration to the given value.
func (b *RBDVolumeSourceBuilder) SetRadosUser(value string) *RBDVolumeSourceBuilder {
	b.fields.RadosUser = &value
	return b
}

// RemoveRadosUser removes the RadosUser field from the declarative configuration.
func (b *RBDVolumeSourceBuilder) RemoveRadosUser() *RBDVolumeSourceBuilder {
	b.fields.RadosUser = nil
	return b
}

// GetRadosUser gets the RadosUser field from the declarative configuration.
func (b *RBDVolumeSourceBuilder) GetRadosUser() (value string, ok bool) {
	if v := b.fields.RadosUser; v != nil {
		return *v, true
	}
	return value, false
}

// SetKeyring sets the Keyring field in the declarative configuration to the given value.
func (b *RBDVolumeSourceBuilder) SetKeyring(value string) *RBDVolumeSourceBuilder {
	b.fields.Keyring = &value
	return b
}

// RemoveKeyring removes the Keyring field from the declarative configuration.
func (b *RBDVolumeSourceBuilder) RemoveKeyring() *RBDVolumeSourceBuilder {
	b.fields.Keyring = nil
	return b
}

// GetKeyring gets the Keyring field from the declarative configuration.
func (b *RBDVolumeSourceBuilder) GetKeyring() (value string, ok bool) {
	if v := b.fields.Keyring; v != nil {
		return *v, true
	}
	return value, false
}

// SetSecretRef sets the SecretRef field in the declarative configuration to the given value.
func (b *RBDVolumeSourceBuilder) SetSecretRef(value *LocalObjectReferenceBuilder) *RBDVolumeSourceBuilder {
	b.fields.SecretRef = value
	return b
}

// RemoveSecretRef removes the SecretRef field from the declarative configuration.
func (b *RBDVolumeSourceBuilder) RemoveSecretRef() *RBDVolumeSourceBuilder {
	b.fields.SecretRef = nil
	return b
}

// GetSecretRef gets the SecretRef field from the declarative configuration.
func (b *RBDVolumeSourceBuilder) GetSecretRef() (value *LocalObjectReferenceBuilder, ok bool) {
	return b.fields.SecretRef, b.fields.SecretRef != nil
}

// SetReadOnly sets the ReadOnly field in the declarative configuration to the given value.
func (b *RBDVolumeSourceBuilder) SetReadOnly(value bool) *RBDVolumeSourceBuilder {
	b.fields.ReadOnly = &value
	return b
}

// RemoveReadOnly removes the ReadOnly field from the declarative configuration.
func (b *RBDVolumeSourceBuilder) RemoveReadOnly() *RBDVolumeSourceBuilder {
	b.fields.ReadOnly = nil
	return b
}

// GetReadOnly gets the ReadOnly field from the declarative configuration.
func (b *RBDVolumeSourceBuilder) GetReadOnly() (value bool, ok bool) {
	if v := b.fields.ReadOnly; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts RBDVolumeSourceBuilder to unstructured.
func (b *RBDVolumeSourceBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to RBDVolumeSourceBuilder, replacing the contents
// of RBDVolumeSourceBuilder.
func (b *RBDVolumeSourceBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &rBDVolumeSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals RBDVolumeSourceBuilder to JSON.
func (b *RBDVolumeSourceBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into RBDVolumeSourceBuilder, replacing the contents of
// RBDVolumeSourceBuilder.
func (b *RBDVolumeSourceBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// RBDVolumeSourceList represents a list of RBDVolumeSourceBuilder.
type RBDVolumeSourceList []*RBDVolumeSourceBuilder

// RBDVolumeSourceList represents a map of RBDVolumeSourceBuilder.
type RBDVolumeSourceMap map[string]RBDVolumeSourceBuilder

func (b *RBDVolumeSourceBuilder) preMarshal() {
}
func (b *RBDVolumeSourceBuilder) postUnmarshal() {
}
