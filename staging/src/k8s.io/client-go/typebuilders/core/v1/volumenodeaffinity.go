/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// VolumeNodeAffinityBuilder represents an declarative configuration of the VolumeNodeAffinity type for use
// with apply.
type VolumeNodeAffinityBuilder struct {
	fields *volumeNodeAffinityFields
}

// volumeNodeAffinityFields is used by VolumeNodeAffinityBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in VolumeNodeAffinityBuilder before marshalling, and
// are copied out to the builder type in VolumeNodeAffinityBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type volumeNodeAffinityFields struct {
	Required *NodeSelectorBuilder `json:"required,omitempty"`
}

func (b *VolumeNodeAffinityBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &volumeNodeAffinityFields{}
	}
}

// VolumeNodeAffinity constructs an declarative configuration of the VolumeNodeAffinity type for use with
// apply.
// Provided as a convenience.
func VolumeNodeAffinity() VolumeNodeAffinityBuilder {
	return VolumeNodeAffinityBuilder{fields: &volumeNodeAffinityFields{}}
}

// SetRequired sets the Required field in the declarative configuration to the given value.
func (b VolumeNodeAffinityBuilder) SetRequired(value NodeSelectorBuilder) VolumeNodeAffinityBuilder {
	b.ensureInitialized()
	b.fields.Required = &value
	return b
}

// RemoveRequired removes the Required field from the declarative configuration.
func (b VolumeNodeAffinityBuilder) RemoveRequired() VolumeNodeAffinityBuilder {
	b.ensureInitialized()
	b.fields.Required = nil
	return b
}

// GetRequired gets the Required field from the declarative configuration.
func (b VolumeNodeAffinityBuilder) GetRequired() (value NodeSelectorBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Required; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts VolumeNodeAffinityBuilder to unstructured.
func (b *VolumeNodeAffinityBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to VolumeNodeAffinityBuilder, replacing the contents
// of VolumeNodeAffinityBuilder.
func (b *VolumeNodeAffinityBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &volumeNodeAffinityFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals VolumeNodeAffinityBuilder to JSON.
func (b *VolumeNodeAffinityBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into VolumeNodeAffinityBuilder, replacing the contents of
// VolumeNodeAffinityBuilder.
func (b *VolumeNodeAffinityBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// VolumeNodeAffinityList represents a list of VolumeNodeAffinityBuilder.
// Provided as a convenience.
type VolumeNodeAffinityList []VolumeNodeAffinityBuilder

// VolumeNodeAffinityList represents a map of VolumeNodeAffinityBuilder.
// Provided as a convenience.
type VolumeNodeAffinityMap map[string]VolumeNodeAffinityBuilder

func (b *VolumeNodeAffinityBuilder) preMarshal() {
}
func (b *VolumeNodeAffinityBuilder) postUnmarshal() {
}
