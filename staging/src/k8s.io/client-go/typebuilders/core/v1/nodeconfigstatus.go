/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// NodeConfigStatusBuilder represents an declarative configuration of the NodeConfigStatus type for use
// with apply.
type NodeConfigStatusBuilder struct {
	fields *nodeConfigStatusFields
}

// nodeConfigStatusFields is used by NodeConfigStatusBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in NodeConfigStatusBuilder before marshalling, and
// are copied out to the builder type in NodeConfigStatusBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type nodeConfigStatusFields struct {
	Assigned      *NodeConfigSourceBuilder `json:"assigned,omitempty"`
	Active        *NodeConfigSourceBuilder `json:"active,omitempty"`
	LastKnownGood *NodeConfigSourceBuilder `json:"lastKnownGood,omitempty"`
	Error         *string                  `json:"error,omitempty"`
}

func (b *NodeConfigStatusBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &nodeConfigStatusFields{}
	}
}

// NodeConfigStatus constructs an declarative configuration of the NodeConfigStatus type for use with
// apply.
// Provided as a convenience.
func NodeConfigStatus() NodeConfigStatusBuilder {
	return NodeConfigStatusBuilder{fields: &nodeConfigStatusFields{}}
}

// SetAssigned sets the Assigned field in the declarative configuration to the given value.
func (b NodeConfigStatusBuilder) SetAssigned(value NodeConfigSourceBuilder) NodeConfigStatusBuilder {
	b.ensureInitialized()
	b.fields.Assigned = &value
	return b
}

// RemoveAssigned removes the Assigned field from the declarative configuration.
func (b NodeConfigStatusBuilder) RemoveAssigned() NodeConfigStatusBuilder {
	b.ensureInitialized()
	b.fields.Assigned = nil
	return b
}

// GetAssigned gets the Assigned field from the declarative configuration.
func (b NodeConfigStatusBuilder) GetAssigned() (value NodeConfigSourceBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Assigned; v != nil {
		return *v, true
	}
	return value, false
}

// SetActive sets the Active field in the declarative configuration to the given value.
func (b NodeConfigStatusBuilder) SetActive(value NodeConfigSourceBuilder) NodeConfigStatusBuilder {
	b.ensureInitialized()
	b.fields.Active = &value
	return b
}

// RemoveActive removes the Active field from the declarative configuration.
func (b NodeConfigStatusBuilder) RemoveActive() NodeConfigStatusBuilder {
	b.ensureInitialized()
	b.fields.Active = nil
	return b
}

// GetActive gets the Active field from the declarative configuration.
func (b NodeConfigStatusBuilder) GetActive() (value NodeConfigSourceBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Active; v != nil {
		return *v, true
	}
	return value, false
}

// SetLastKnownGood sets the LastKnownGood field in the declarative configuration to the given value.
func (b NodeConfigStatusBuilder) SetLastKnownGood(value NodeConfigSourceBuilder) NodeConfigStatusBuilder {
	b.ensureInitialized()
	b.fields.LastKnownGood = &value
	return b
}

// RemoveLastKnownGood removes the LastKnownGood field from the declarative configuration.
func (b NodeConfigStatusBuilder) RemoveLastKnownGood() NodeConfigStatusBuilder {
	b.ensureInitialized()
	b.fields.LastKnownGood = nil
	return b
}

// GetLastKnownGood gets the LastKnownGood field from the declarative configuration.
func (b NodeConfigStatusBuilder) GetLastKnownGood() (value NodeConfigSourceBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.LastKnownGood; v != nil {
		return *v, true
	}
	return value, false
}

// SetError sets the Error field in the declarative configuration to the given value.
func (b NodeConfigStatusBuilder) SetError(value string) NodeConfigStatusBuilder {
	b.ensureInitialized()
	b.fields.Error = &value
	return b
}

// RemoveError removes the Error field from the declarative configuration.
func (b NodeConfigStatusBuilder) RemoveError() NodeConfigStatusBuilder {
	b.ensureInitialized()
	b.fields.Error = nil
	return b
}

// GetError gets the Error field from the declarative configuration.
func (b NodeConfigStatusBuilder) GetError() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Error; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts NodeConfigStatusBuilder to unstructured.
func (b *NodeConfigStatusBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to NodeConfigStatusBuilder, replacing the contents
// of NodeConfigStatusBuilder.
func (b *NodeConfigStatusBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &nodeConfigStatusFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals NodeConfigStatusBuilder to JSON.
func (b *NodeConfigStatusBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into NodeConfigStatusBuilder, replacing the contents of
// NodeConfigStatusBuilder.
func (b *NodeConfigStatusBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// NodeConfigStatusList represents a list of NodeConfigStatusBuilder.
// Provided as a convenience.
type NodeConfigStatusList []NodeConfigStatusBuilder

// NodeConfigStatusList represents a map of NodeConfigStatusBuilder.
// Provided as a convenience.
type NodeConfigStatusMap map[string]NodeConfigStatusBuilder

func (b *NodeConfigStatusBuilder) preMarshal() {
}
func (b *NodeConfigStatusBuilder) postUnmarshal() {
}
