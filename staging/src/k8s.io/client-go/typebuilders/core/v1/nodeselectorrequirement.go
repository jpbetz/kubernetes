/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	v1 "k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// NodeSelectorRequirementBuilder represents an declarative configuration of the NodeSelectorRequirement type for use
// with apply.
type NodeSelectorRequirementBuilder struct {
	fields *nodeSelectorRequirementFields
}

// nodeSelectorRequirementFields is used by NodeSelectorRequirementBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in NodeSelectorRequirementBuilder before marshalling, and
// are copied out to the builder type in NodeSelectorRequirementBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type nodeSelectorRequirementFields struct {
	Key      *string                  `json:"key,omitempty"`
	Operator *v1.NodeSelectorOperator `json:"operator,omitempty"`
	Values   *[]string                `json:"values,omitempty"`
}

func (b *NodeSelectorRequirementBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &nodeSelectorRequirementFields{}
	}
}

// NodeSelectorRequirement constructs an declarative configuration of the NodeSelectorRequirement type for use with
// apply.
// Provided as a convenience.
func NodeSelectorRequirement() NodeSelectorRequirementBuilder {
	return NodeSelectorRequirementBuilder{fields: &nodeSelectorRequirementFields{}}
}

// SetKey sets the Key field in the declarative configuration to the given value.
func (b NodeSelectorRequirementBuilder) SetKey(value string) NodeSelectorRequirementBuilder {
	b.ensureInitialized()
	b.fields.Key = &value
	return b
}

// RemoveKey removes the Key field from the declarative configuration.
func (b NodeSelectorRequirementBuilder) RemoveKey() NodeSelectorRequirementBuilder {
	b.ensureInitialized()
	b.fields.Key = nil
	return b
}

// GetKey gets the Key field from the declarative configuration.
func (b NodeSelectorRequirementBuilder) GetKey() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Key; v != nil {
		return *v, true
	}
	return value, false
}

// SetOperator sets the Operator field in the declarative configuration to the given value.
func (b NodeSelectorRequirementBuilder) SetOperator(value v1.NodeSelectorOperator) NodeSelectorRequirementBuilder {
	b.ensureInitialized()
	b.fields.Operator = &value
	return b
}

// RemoveOperator removes the Operator field from the declarative configuration.
func (b NodeSelectorRequirementBuilder) RemoveOperator() NodeSelectorRequirementBuilder {
	b.ensureInitialized()
	b.fields.Operator = nil
	return b
}

// GetOperator gets the Operator field from the declarative configuration.
func (b NodeSelectorRequirementBuilder) GetOperator() (value v1.NodeSelectorOperator, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Operator; v != nil {
		return *v, true
	}
	return value, false
}

// SetValues sets the Values field in the declarative configuration to the given value.
func (b NodeSelectorRequirementBuilder) SetValues(value []string) NodeSelectorRequirementBuilder {
	b.ensureInitialized()
	b.fields.Values = &value
	return b
}

// RemoveValues removes the Values field from the declarative configuration.
func (b NodeSelectorRequirementBuilder) RemoveValues() NodeSelectorRequirementBuilder {
	b.ensureInitialized()
	b.fields.Values = nil
	return b
}

// GetValues gets the Values field from the declarative configuration.
func (b NodeSelectorRequirementBuilder) GetValues() (value []string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Values; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts NodeSelectorRequirementBuilder to unstructured.
func (b *NodeSelectorRequirementBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to NodeSelectorRequirementBuilder, replacing the contents
// of NodeSelectorRequirementBuilder.
func (b *NodeSelectorRequirementBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &nodeSelectorRequirementFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals NodeSelectorRequirementBuilder to JSON.
func (b *NodeSelectorRequirementBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into NodeSelectorRequirementBuilder, replacing the contents of
// NodeSelectorRequirementBuilder.
func (b *NodeSelectorRequirementBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// NodeSelectorRequirementList represents a list of NodeSelectorRequirementBuilder.
// Provided as a convenience.
type NodeSelectorRequirementList []NodeSelectorRequirementBuilder

// NodeSelectorRequirementList represents a map of NodeSelectorRequirementBuilder.
// Provided as a convenience.
type NodeSelectorRequirementMap map[string]NodeSelectorRequirementBuilder

func (b *NodeSelectorRequirementBuilder) preMarshal() {
}
func (b *NodeSelectorRequirementBuilder) postUnmarshal() {
}
