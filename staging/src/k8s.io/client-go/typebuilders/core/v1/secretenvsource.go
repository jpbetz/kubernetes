/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// SecretEnvSourceBuilder represents an declarative configuration of the SecretEnvSource type for use
// with apply.
type SecretEnvSourceBuilder struct {
	localObjectReference LocalObjectReferenceBuilder // inlined type
	fields               *secretEnvSourceFields
}

// secretEnvSourceFields is used by SecretEnvSourceBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in SecretEnvSourceBuilder before marshalling, and
// are copied out to the builder type in SecretEnvSourceBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type secretEnvSourceFields struct {
	Name     *string `json:"name,omitempty"` // inlined SecretEnvSourceBuilder.localObjectReference.Name field
	Optional *bool   `json:"optional,omitempty"`
}

func (b *SecretEnvSourceBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &secretEnvSourceFields{}
	}
}

// SecretEnvSource constructs an declarative configuration of the SecretEnvSource type for use with
// apply.
// Provided as a convenience.
func SecretEnvSource() SecretEnvSourceBuilder {
	return SecretEnvSourceBuilder{fields: &secretEnvSourceFields{}}
}

// SetLocalObjectReference sets the LocalObjectReference field in the declarative configuration to the given value.
func (b SecretEnvSourceBuilder) SetLocalObjectReference(value LocalObjectReferenceBuilder) SecretEnvSourceBuilder {
	b.ensureInitialized()
	b.localObjectReference = value
	return b
}

// RemoveLocalObjectReference removes the LocalObjectReference field from the declarative configuration.
func (b SecretEnvSourceBuilder) RemoveLocalObjectReference() SecretEnvSourceBuilder {
	b.ensureInitialized()
	b.localObjectReference = LocalObjectReferenceBuilder{}
	return b
}

// GetLocalObjectReference gets the LocalObjectReference field from the declarative configuration.
func (b SecretEnvSourceBuilder) GetLocalObjectReference() (value LocalObjectReferenceBuilder, ok bool) {
	b.ensureInitialized()
	return b.localObjectReference, true
}

// SetOptional sets the Optional field in the declarative configuration to the given value.
func (b SecretEnvSourceBuilder) SetOptional(value bool) SecretEnvSourceBuilder {
	b.ensureInitialized()
	b.fields.Optional = &value
	return b
}

// RemoveOptional removes the Optional field from the declarative configuration.
func (b SecretEnvSourceBuilder) RemoveOptional() SecretEnvSourceBuilder {
	b.ensureInitialized()
	b.fields.Optional = nil
	return b
}

// GetOptional gets the Optional field from the declarative configuration.
func (b SecretEnvSourceBuilder) GetOptional() (value bool, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Optional; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts SecretEnvSourceBuilder to unstructured.
func (b *SecretEnvSourceBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to SecretEnvSourceBuilder, replacing the contents
// of SecretEnvSourceBuilder.
func (b *SecretEnvSourceBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &secretEnvSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals SecretEnvSourceBuilder to JSON.
func (b *SecretEnvSourceBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into SecretEnvSourceBuilder, replacing the contents of
// SecretEnvSourceBuilder.
func (b *SecretEnvSourceBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// SecretEnvSourceList represents a list of SecretEnvSourceBuilder.
// Provided as a convenience.
type SecretEnvSourceList []SecretEnvSourceBuilder

// SecretEnvSourceList represents a map of SecretEnvSourceBuilder.
// Provided as a convenience.
type SecretEnvSourceMap map[string]SecretEnvSourceBuilder

func (b *SecretEnvSourceBuilder) preMarshal() {
	if v, ok := b.localObjectReference.GetName(); ok {
		b.fields.Name = &v
	}
}
func (b *SecretEnvSourceBuilder) postUnmarshal() {
	if b.fields.Name != nil {
		b.localObjectReference.SetName(*b.fields.Name)
	}
}
