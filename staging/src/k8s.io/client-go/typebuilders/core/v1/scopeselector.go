/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ScopeSelectorBuilder represents an declarative configuration of the ScopeSelector type for use
// with apply.
type ScopeSelectorBuilder struct {
	fields *scopeSelectorFields
}

// scopeSelectorFields is used by ScopeSelectorBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in ScopeSelectorBuilder before marshalling, and
// are copied out to the builder type in ScopeSelectorBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type scopeSelectorFields struct {
	MatchExpressions *ScopedResourceSelectorRequirementList `json:"matchExpressions,omitempty"`
}

func (b *ScopeSelectorBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &scopeSelectorFields{}
	}
}

// ScopeSelector constructs an declarative configuration of the ScopeSelector type for use with
// apply.
// Provided as a convenience.
func ScopeSelector() ScopeSelectorBuilder {
	return ScopeSelectorBuilder{fields: &scopeSelectorFields{}}
}

// SetMatchExpressions sets the MatchExpressions field in the declarative configuration to the given value.
func (b ScopeSelectorBuilder) SetMatchExpressions(value ScopedResourceSelectorRequirementList) ScopeSelectorBuilder {
	b.ensureInitialized()
	b.fields.MatchExpressions = &value
	return b
}

// RemoveMatchExpressions removes the MatchExpressions field from the declarative configuration.
func (b ScopeSelectorBuilder) RemoveMatchExpressions() ScopeSelectorBuilder {
	b.ensureInitialized()
	b.fields.MatchExpressions = nil
	return b
}

// GetMatchExpressions gets the MatchExpressions field from the declarative configuration.
func (b ScopeSelectorBuilder) GetMatchExpressions() (value ScopedResourceSelectorRequirementList, ok bool) {
	b.ensureInitialized()
	if v := b.fields.MatchExpressions; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ScopeSelectorBuilder to unstructured.
func (b *ScopeSelectorBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ScopeSelectorBuilder, replacing the contents
// of ScopeSelectorBuilder.
func (b *ScopeSelectorBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &scopeSelectorFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ScopeSelectorBuilder to JSON.
func (b *ScopeSelectorBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into ScopeSelectorBuilder, replacing the contents of
// ScopeSelectorBuilder.
func (b *ScopeSelectorBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ScopeSelectorList represents a list of ScopeSelectorBuilder.
// Provided as a convenience.
type ScopeSelectorList []ScopeSelectorBuilder

// ScopeSelectorList represents a map of ScopeSelectorBuilder.
// Provided as a convenience.
type ScopeSelectorMap map[string]ScopeSelectorBuilder

func (b *ScopeSelectorBuilder) preMarshal() {
}
func (b *ScopeSelectorBuilder) postUnmarshal() {
}
