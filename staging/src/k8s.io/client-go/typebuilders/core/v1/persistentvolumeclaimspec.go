/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	v1 "k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	metav1 "k8s.io/client-go/typebuilders/meta/v1"
)

// PersistentVolumeClaimSpecBuilder represents an declarative configuration of the PersistentVolumeClaimSpec type for use
// with apply.
type PersistentVolumeClaimSpecBuilder struct {
	fields persistentVolumeClaimSpecFields
}

// persistentVolumeClaimSpecFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in PersistentVolumeClaimSpecBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type persistentVolumeClaimSpecFields struct {
	AccessModes      *[]v1.PersistentVolumeAccessMode  `json:"accessModes,omitempty"`
	Selector         *metav1.LabelSelectorBuilder      `json:"selector,omitempty"`
	Resources        *ResourceRequirementsBuilder      `json:"resources,omitempty"`
	VolumeName       *string                           `json:"volumeName,omitempty"`
	StorageClassName *string                           `json:"storageClassName,omitempty"`
	VolumeMode       *v1.PersistentVolumeMode          `json:"volumeMode,omitempty"`
	DataSource       *TypedLocalObjectReferenceBuilder `json:"dataSource,omitempty"`
}

// PersistentVolumeClaimSpec constructs an declarative configuration of the PersistentVolumeClaimSpec type for use with
// apply.
func PersistentVolumeClaimSpec() *PersistentVolumeClaimSpecBuilder {
	return &PersistentVolumeClaimSpecBuilder{}
}

// SetAccessModes sets the AccessModes field in the declarative configuration to the given value.
func (b *PersistentVolumeClaimSpecBuilder) SetAccessModes(value []v1.PersistentVolumeAccessMode) *PersistentVolumeClaimSpecBuilder {
	b.fields.AccessModes = &value
	return b
}

// RemoveAccessModes removes the AccessModes field from the declarative configuration.
func (b *PersistentVolumeClaimSpecBuilder) RemoveAccessModes() *PersistentVolumeClaimSpecBuilder {
	b.fields.AccessModes = nil
	return b
}

// GetAccessModes gets the AccessModes field from the declarative configuration.
func (b *PersistentVolumeClaimSpecBuilder) GetAccessModes() (value []v1.PersistentVolumeAccessMode, ok bool) {
	if v := b.fields.AccessModes; v != nil {
		return *v, true
	}
	return value, false
}

// SetSelector sets the Selector field in the declarative configuration to the given value.
func (b *PersistentVolumeClaimSpecBuilder) SetSelector(value *metav1.LabelSelectorBuilder) *PersistentVolumeClaimSpecBuilder {
	b.fields.Selector = value
	return b
}

// RemoveSelector removes the Selector field from the declarative configuration.
func (b *PersistentVolumeClaimSpecBuilder) RemoveSelector() *PersistentVolumeClaimSpecBuilder {
	b.fields.Selector = nil
	return b
}

// GetSelector gets the Selector field from the declarative configuration.
func (b *PersistentVolumeClaimSpecBuilder) GetSelector() (value *metav1.LabelSelectorBuilder, ok bool) {
	return b.fields.Selector, b.fields.Selector != nil
}

// SetResources sets the Resources field in the declarative configuration to the given value.
func (b *PersistentVolumeClaimSpecBuilder) SetResources(value *ResourceRequirementsBuilder) *PersistentVolumeClaimSpecBuilder {
	b.fields.Resources = value
	return b
}

// RemoveResources removes the Resources field from the declarative configuration.
func (b *PersistentVolumeClaimSpecBuilder) RemoveResources() *PersistentVolumeClaimSpecBuilder {
	b.fields.Resources = nil
	return b
}

// GetResources gets the Resources field from the declarative configuration.
func (b *PersistentVolumeClaimSpecBuilder) GetResources() (value *ResourceRequirementsBuilder, ok bool) {
	return b.fields.Resources, b.fields.Resources != nil
}

// SetVolumeName sets the VolumeName field in the declarative configuration to the given value.
func (b *PersistentVolumeClaimSpecBuilder) SetVolumeName(value string) *PersistentVolumeClaimSpecBuilder {
	b.fields.VolumeName = &value
	return b
}

// RemoveVolumeName removes the VolumeName field from the declarative configuration.
func (b *PersistentVolumeClaimSpecBuilder) RemoveVolumeName() *PersistentVolumeClaimSpecBuilder {
	b.fields.VolumeName = nil
	return b
}

// GetVolumeName gets the VolumeName field from the declarative configuration.
func (b *PersistentVolumeClaimSpecBuilder) GetVolumeName() (value string, ok bool) {
	if v := b.fields.VolumeName; v != nil {
		return *v, true
	}
	return value, false
}

// SetStorageClassName sets the StorageClassName field in the declarative configuration to the given value.
func (b *PersistentVolumeClaimSpecBuilder) SetStorageClassName(value string) *PersistentVolumeClaimSpecBuilder {
	b.fields.StorageClassName = &value
	return b
}

// RemoveStorageClassName removes the StorageClassName field from the declarative configuration.
func (b *PersistentVolumeClaimSpecBuilder) RemoveStorageClassName() *PersistentVolumeClaimSpecBuilder {
	b.fields.StorageClassName = nil
	return b
}

// GetStorageClassName gets the StorageClassName field from the declarative configuration.
func (b *PersistentVolumeClaimSpecBuilder) GetStorageClassName() (value string, ok bool) {
	if v := b.fields.StorageClassName; v != nil {
		return *v, true
	}
	return value, false
}

// SetVolumeMode sets the VolumeMode field in the declarative configuration to the given value.
func (b *PersistentVolumeClaimSpecBuilder) SetVolumeMode(value v1.PersistentVolumeMode) *PersistentVolumeClaimSpecBuilder {
	b.fields.VolumeMode = &value
	return b
}

// RemoveVolumeMode removes the VolumeMode field from the declarative configuration.
func (b *PersistentVolumeClaimSpecBuilder) RemoveVolumeMode() *PersistentVolumeClaimSpecBuilder {
	b.fields.VolumeMode = nil
	return b
}

// GetVolumeMode gets the VolumeMode field from the declarative configuration.
func (b *PersistentVolumeClaimSpecBuilder) GetVolumeMode() (value v1.PersistentVolumeMode, ok bool) {
	if v := b.fields.VolumeMode; v != nil {
		return *v, true
	}
	return value, false
}

// SetDataSource sets the DataSource field in the declarative configuration to the given value.
func (b *PersistentVolumeClaimSpecBuilder) SetDataSource(value *TypedLocalObjectReferenceBuilder) *PersistentVolumeClaimSpecBuilder {
	b.fields.DataSource = value
	return b
}

// RemoveDataSource removes the DataSource field from the declarative configuration.
func (b *PersistentVolumeClaimSpecBuilder) RemoveDataSource() *PersistentVolumeClaimSpecBuilder {
	b.fields.DataSource = nil
	return b
}

// GetDataSource gets the DataSource field from the declarative configuration.
func (b *PersistentVolumeClaimSpecBuilder) GetDataSource() (value *TypedLocalObjectReferenceBuilder, ok bool) {
	return b.fields.DataSource, b.fields.DataSource != nil
}

// ToUnstructured converts PersistentVolumeClaimSpecBuilder to unstructured.
func (b *PersistentVolumeClaimSpecBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to PersistentVolumeClaimSpecBuilder, replacing the contents
// of PersistentVolumeClaimSpecBuilder.
func (b *PersistentVolumeClaimSpecBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &persistentVolumeClaimSpecFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals PersistentVolumeClaimSpecBuilder to JSON.
func (b *PersistentVolumeClaimSpecBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into PersistentVolumeClaimSpecBuilder, replacing the contents of
// PersistentVolumeClaimSpecBuilder.
func (b *PersistentVolumeClaimSpecBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// PersistentVolumeClaimSpecList represents a list of PersistentVolumeClaimSpecBuilder.
type PersistentVolumeClaimSpecList []*PersistentVolumeClaimSpecBuilder

// PersistentVolumeClaimSpecList represents a map of PersistentVolumeClaimSpecBuilder.
type PersistentVolumeClaimSpecMap map[string]PersistentVolumeClaimSpecBuilder

func (b *PersistentVolumeClaimSpecBuilder) preMarshal() {
}
func (b *PersistentVolumeClaimSpecBuilder) postUnmarshal() {
}
