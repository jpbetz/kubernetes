/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// GitRepoVolumeSourceBuilder represents an declarative configuration of the GitRepoVolumeSource type for use
// with apply.
type GitRepoVolumeSourceBuilder struct {
	fields gitRepoVolumeSourceFields
}

// gitRepoVolumeSourceFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in GitRepoVolumeSourceBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type gitRepoVolumeSourceFields struct {
	Repository *string `json:"repository,omitempty"`
	Revision   *string `json:"revision,omitempty"`
	Directory  *string `json:"directory,omitempty"`
}

// GitRepoVolumeSource constructs an declarative configuration of the GitRepoVolumeSource type for use with
// apply.
func GitRepoVolumeSource() *GitRepoVolumeSourceBuilder {
	return &GitRepoVolumeSourceBuilder{}
}

// SetRepository sets the Repository field in the declarative configuration to the given value.
func (b *GitRepoVolumeSourceBuilder) SetRepository(value string) *GitRepoVolumeSourceBuilder {
	b.fields.Repository = &value
	return b
}

// RemoveRepository removes the Repository field from the declarative configuration.
func (b *GitRepoVolumeSourceBuilder) RemoveRepository() *GitRepoVolumeSourceBuilder {
	b.fields.Repository = nil
	return b
}

// GetRepository gets the Repository field from the declarative configuration.
func (b *GitRepoVolumeSourceBuilder) GetRepository() (value string, ok bool) {
	if v := b.fields.Repository; v != nil {
		return *v, true
	}
	return value, false
}

// SetRevision sets the Revision field in the declarative configuration to the given value.
func (b *GitRepoVolumeSourceBuilder) SetRevision(value string) *GitRepoVolumeSourceBuilder {
	b.fields.Revision = &value
	return b
}

// RemoveRevision removes the Revision field from the declarative configuration.
func (b *GitRepoVolumeSourceBuilder) RemoveRevision() *GitRepoVolumeSourceBuilder {
	b.fields.Revision = nil
	return b
}

// GetRevision gets the Revision field from the declarative configuration.
func (b *GitRepoVolumeSourceBuilder) GetRevision() (value string, ok bool) {
	if v := b.fields.Revision; v != nil {
		return *v, true
	}
	return value, false
}

// SetDirectory sets the Directory field in the declarative configuration to the given value.
func (b *GitRepoVolumeSourceBuilder) SetDirectory(value string) *GitRepoVolumeSourceBuilder {
	b.fields.Directory = &value
	return b
}

// RemoveDirectory removes the Directory field from the declarative configuration.
func (b *GitRepoVolumeSourceBuilder) RemoveDirectory() *GitRepoVolumeSourceBuilder {
	b.fields.Directory = nil
	return b
}

// GetDirectory gets the Directory field from the declarative configuration.
func (b *GitRepoVolumeSourceBuilder) GetDirectory() (value string, ok bool) {
	if v := b.fields.Directory; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts GitRepoVolumeSourceBuilder to unstructured.
func (b *GitRepoVolumeSourceBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to GitRepoVolumeSourceBuilder, replacing the contents
// of GitRepoVolumeSourceBuilder.
func (b *GitRepoVolumeSourceBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &gitRepoVolumeSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals GitRepoVolumeSourceBuilder to JSON.
func (b *GitRepoVolumeSourceBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into GitRepoVolumeSourceBuilder, replacing the contents of
// GitRepoVolumeSourceBuilder.
func (b *GitRepoVolumeSourceBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// GitRepoVolumeSourceList represents a list of GitRepoVolumeSourceBuilder.
type GitRepoVolumeSourceList []*GitRepoVolumeSourceBuilder

// GitRepoVolumeSourceList represents a map of GitRepoVolumeSourceBuilder.
type GitRepoVolumeSourceMap map[string]GitRepoVolumeSourceBuilder

func (b *GitRepoVolumeSourceBuilder) preMarshal() {
}
func (b *GitRepoVolumeSourceBuilder) postUnmarshal() {
}
