/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	v1 "k8s.io/api/core/v1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ComponentConditionBuilder represents an declarative configuration of the ComponentCondition type for use
// with apply.
type ComponentConditionBuilder struct {
	fields *componentConditionFields
}

// componentConditionFields is used by ComponentConditionBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in ComponentConditionBuilder before marshalling, and
// are copied out to the builder type in ComponentConditionBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type componentConditionFields struct {
	Type    *v1.ComponentConditionType `json:"type,omitempty"`
	Status  *v1.ConditionStatus        `json:"status,omitempty"`
	Message *string                    `json:"message,omitempty"`
	Error   *string                    `json:"error,omitempty"`
}

func (b *ComponentConditionBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &componentConditionFields{}
	}
}

// ComponentCondition constructs an declarative configuration of the ComponentCondition type for use with
// apply.
// Provided as a convenience.
func ComponentCondition() ComponentConditionBuilder {
	return ComponentConditionBuilder{fields: &componentConditionFields{}}
}

// SetType sets the Type field in the declarative configuration to the given value.
func (b ComponentConditionBuilder) SetType(value v1.ComponentConditionType) ComponentConditionBuilder {
	b.ensureInitialized()
	b.fields.Type = &value
	return b
}

// RemoveType removes the Type field from the declarative configuration.
func (b ComponentConditionBuilder) RemoveType() ComponentConditionBuilder {
	b.ensureInitialized()
	b.fields.Type = nil
	return b
}

// GetType gets the Type field from the declarative configuration.
func (b ComponentConditionBuilder) GetType() (value v1.ComponentConditionType, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Type; v != nil {
		return *v, true
	}
	return value, false
}

// SetStatus sets the Status field in the declarative configuration to the given value.
func (b ComponentConditionBuilder) SetStatus(value v1.ConditionStatus) ComponentConditionBuilder {
	b.ensureInitialized()
	b.fields.Status = &value
	return b
}

// RemoveStatus removes the Status field from the declarative configuration.
func (b ComponentConditionBuilder) RemoveStatus() ComponentConditionBuilder {
	b.ensureInitialized()
	b.fields.Status = nil
	return b
}

// GetStatus gets the Status field from the declarative configuration.
func (b ComponentConditionBuilder) GetStatus() (value v1.ConditionStatus, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Status; v != nil {
		return *v, true
	}
	return value, false
}

// SetMessage sets the Message field in the declarative configuration to the given value.
func (b ComponentConditionBuilder) SetMessage(value string) ComponentConditionBuilder {
	b.ensureInitialized()
	b.fields.Message = &value
	return b
}

// RemoveMessage removes the Message field from the declarative configuration.
func (b ComponentConditionBuilder) RemoveMessage() ComponentConditionBuilder {
	b.ensureInitialized()
	b.fields.Message = nil
	return b
}

// GetMessage gets the Message field from the declarative configuration.
func (b ComponentConditionBuilder) GetMessage() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Message; v != nil {
		return *v, true
	}
	return value, false
}

// SetError sets the Error field in the declarative configuration to the given value.
func (b ComponentConditionBuilder) SetError(value string) ComponentConditionBuilder {
	b.ensureInitialized()
	b.fields.Error = &value
	return b
}

// RemoveError removes the Error field from the declarative configuration.
func (b ComponentConditionBuilder) RemoveError() ComponentConditionBuilder {
	b.ensureInitialized()
	b.fields.Error = nil
	return b
}

// GetError gets the Error field from the declarative configuration.
func (b ComponentConditionBuilder) GetError() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Error; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ComponentConditionBuilder to unstructured.
func (b *ComponentConditionBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ComponentConditionBuilder, replacing the contents
// of ComponentConditionBuilder.
func (b *ComponentConditionBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &componentConditionFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ComponentConditionBuilder to JSON.
func (b *ComponentConditionBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into ComponentConditionBuilder, replacing the contents of
// ComponentConditionBuilder.
func (b *ComponentConditionBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ComponentConditionList represents a list of ComponentConditionBuilder.
// Provided as a convenience.
type ComponentConditionList []ComponentConditionBuilder

// ComponentConditionList represents a map of ComponentConditionBuilder.
// Provided as a convenience.
type ComponentConditionMap map[string]ComponentConditionBuilder

func (b *ComponentConditionBuilder) preMarshal() {
}
func (b *ComponentConditionBuilder) postUnmarshal() {
}
