/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// NodeSpecApplyConfiguration represents an declarative configuration of the NodeSpec type for use
// with apply.
type NodeSpecApplyConfiguration struct {
	fields nodeSpecFields
}

// NodeSpecApplyConfiguration constructs an declarative configuration of the NodeSpec type for use with
// apply.
func NodeSpec() *NodeSpecApplyConfiguration {
	return &NodeSpecApplyConfiguration{}
}

// nodeSpecFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in NodeSpecApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type nodeSpecFields struct {
	PodCIDR            *string                             `json:"podCIDR,omitempty"`
	PodCIDRs           *[]string                           `json:"podCIDRs,omitempty"`
	ProviderID         *string                             `json:"providerID,omitempty"`
	Unschedulable      *bool                               `json:"unschedulable,omitempty"`
	Taints             *TaintList                          `json:"taints,omitempty"`
	ConfigSource       *NodeConfigSourceApplyConfiguration `json:"configSource,omitempty"`
	DoNotUseExternalID *string                             `json:"externalID,omitempty"`
}

// SetPodCIDR sets the PodCIDR field in the declarative configuration to the given value.
func (b *NodeSpecApplyConfiguration) SetPodCIDR(value string) *NodeSpecApplyConfiguration {
	b.fields.PodCIDR = &value
	return b
}

// RemovePodCIDR removes the PodCIDR field from the declarative configuration.
func (b *NodeSpecApplyConfiguration) RemovePodCIDR() *NodeSpecApplyConfiguration {
	b.fields.PodCIDR = nil
	return b
}

// GetPodCIDR gets the PodCIDR field from the declarative configuration.
func (b *NodeSpecApplyConfiguration) GetPodCIDR() (value string, ok bool) {
	if v := b.fields.PodCIDR; v != nil {
		return *v, true
	}
	return value, false
}

// SetPodCIDRs sets the PodCIDRs field in the declarative configuration to the given value.
func (b *NodeSpecApplyConfiguration) SetPodCIDRs(value []string) *NodeSpecApplyConfiguration {
	b.fields.PodCIDRs = &value
	return b
}

// RemovePodCIDRs removes the PodCIDRs field from the declarative configuration.
func (b *NodeSpecApplyConfiguration) RemovePodCIDRs() *NodeSpecApplyConfiguration {
	b.fields.PodCIDRs = nil
	return b
}

// GetPodCIDRs gets the PodCIDRs field from the declarative configuration.
func (b *NodeSpecApplyConfiguration) GetPodCIDRs() (value []string, ok bool) {
	if v := b.fields.PodCIDRs; v != nil {
		return *v, true
	}
	return value, false
}

// SetProviderID sets the ProviderID field in the declarative configuration to the given value.
func (b *NodeSpecApplyConfiguration) SetProviderID(value string) *NodeSpecApplyConfiguration {
	b.fields.ProviderID = &value
	return b
}

// RemoveProviderID removes the ProviderID field from the declarative configuration.
func (b *NodeSpecApplyConfiguration) RemoveProviderID() *NodeSpecApplyConfiguration {
	b.fields.ProviderID = nil
	return b
}

// GetProviderID gets the ProviderID field from the declarative configuration.
func (b *NodeSpecApplyConfiguration) GetProviderID() (value string, ok bool) {
	if v := b.fields.ProviderID; v != nil {
		return *v, true
	}
	return value, false
}

// SetUnschedulable sets the Unschedulable field in the declarative configuration to the given value.
func (b *NodeSpecApplyConfiguration) SetUnschedulable(value bool) *NodeSpecApplyConfiguration {
	b.fields.Unschedulable = &value
	return b
}

// RemoveUnschedulable removes the Unschedulable field from the declarative configuration.
func (b *NodeSpecApplyConfiguration) RemoveUnschedulable() *NodeSpecApplyConfiguration {
	b.fields.Unschedulable = nil
	return b
}

// GetUnschedulable gets the Unschedulable field from the declarative configuration.
func (b *NodeSpecApplyConfiguration) GetUnschedulable() (value bool, ok bool) {
	if v := b.fields.Unschedulable; v != nil {
		return *v, true
	}
	return value, false
}

// SetTaints sets the Taints field in the declarative configuration to the given value.
func (b *NodeSpecApplyConfiguration) SetTaints(value TaintList) *NodeSpecApplyConfiguration {
	b.fields.Taints = &value
	return b
}

// RemoveTaints removes the Taints field from the declarative configuration.
func (b *NodeSpecApplyConfiguration) RemoveTaints() *NodeSpecApplyConfiguration {
	b.fields.Taints = nil
	return b
}

// GetTaints gets the Taints field from the declarative configuration.
func (b *NodeSpecApplyConfiguration) GetTaints() (value TaintList, ok bool) {
	if v := b.fields.Taints; v != nil {
		return *v, true
	}
	return value, false
}

// SetConfigSource sets the ConfigSource field in the declarative configuration to the given value.
func (b *NodeSpecApplyConfiguration) SetConfigSource(value *NodeConfigSourceApplyConfiguration) *NodeSpecApplyConfiguration {
	b.fields.ConfigSource = value
	return b
}

// RemoveConfigSource removes the ConfigSource field from the declarative configuration.
func (b *NodeSpecApplyConfiguration) RemoveConfigSource() *NodeSpecApplyConfiguration {
	b.fields.ConfigSource = nil
	return b
}

// GetConfigSource gets the ConfigSource field from the declarative configuration.
func (b *NodeSpecApplyConfiguration) GetConfigSource() (value *NodeConfigSourceApplyConfiguration, ok bool) {
	return b.fields.ConfigSource, b.fields.ConfigSource != nil
}

// SetDoNotUseExternalID sets the DoNotUseExternalID field in the declarative configuration to the given value.
func (b *NodeSpecApplyConfiguration) SetDoNotUseExternalID(value string) *NodeSpecApplyConfiguration {
	b.fields.DoNotUseExternalID = &value
	return b
}

// RemoveDoNotUseExternalID removes the DoNotUseExternalID field from the declarative configuration.
func (b *NodeSpecApplyConfiguration) RemoveDoNotUseExternalID() *NodeSpecApplyConfiguration {
	b.fields.DoNotUseExternalID = nil
	return b
}

// GetDoNotUseExternalID gets the DoNotUseExternalID field from the declarative configuration.
func (b *NodeSpecApplyConfiguration) GetDoNotUseExternalID() (value string, ok bool) {
	if v := b.fields.DoNotUseExternalID; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts NodeSpecApplyConfiguration to unstructured.
func (b *NodeSpecApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to NodeSpecApplyConfiguration, replacing the contents
// of NodeSpecApplyConfiguration.
func (b *NodeSpecApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &nodeSpecFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals NodeSpecApplyConfiguration to JSON.
func (b *NodeSpecApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into NodeSpecApplyConfiguration, replacing the contents of
// NodeSpecApplyConfiguration.
func (b *NodeSpecApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// NodeSpecList represents a listAlias of NodeSpecApplyConfiguration.
type NodeSpecList []*NodeSpecApplyConfiguration

// NodeSpecList represents a map of NodeSpecApplyConfiguration.
type NodeSpecMap map[string]NodeSpecApplyConfiguration

func (b *NodeSpecApplyConfiguration) preMarshal() {
}
func (b *NodeSpecApplyConfiguration) postUnmarshal() {
}
