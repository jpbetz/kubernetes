/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// NodeSpecBuilder represents an declarative configuration of the NodeSpec type for use
// with apply.
type NodeSpecBuilder struct {
	fields *nodeSpecFields
}

// nodeSpecFields is used by NodeSpecBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in NodeSpecBuilder before marshalling, and
// are copied out to the builder type in NodeSpecBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type nodeSpecFields struct {
	PodCIDR            *string                  `json:"podCIDR,omitempty"`
	PodCIDRs           *[]string                `json:"podCIDRs,omitempty"`
	ProviderID         *string                  `json:"providerID,omitempty"`
	Unschedulable      *bool                    `json:"unschedulable,omitempty"`
	Taints             *TaintList               `json:"taints,omitempty"`
	ConfigSource       *NodeConfigSourceBuilder `json:"configSource,omitempty"`
	DoNotUseExternalID *string                  `json:"externalID,omitempty"`
}

func (b *NodeSpecBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &nodeSpecFields{}
	}
}

// NodeSpec constructs an declarative configuration of the NodeSpec type for use with
// apply.
// Provided as a convenience.
func NodeSpec() NodeSpecBuilder {
	return NodeSpecBuilder{fields: &nodeSpecFields{}}
}

// SetPodCIDR sets the PodCIDR field in the declarative configuration to the given value.
func (b NodeSpecBuilder) SetPodCIDR(value string) NodeSpecBuilder {
	b.ensureInitialized()
	b.fields.PodCIDR = &value
	return b
}

// RemovePodCIDR removes the PodCIDR field from the declarative configuration.
func (b NodeSpecBuilder) RemovePodCIDR() NodeSpecBuilder {
	b.ensureInitialized()
	b.fields.PodCIDR = nil
	return b
}

// GetPodCIDR gets the PodCIDR field from the declarative configuration.
func (b NodeSpecBuilder) GetPodCIDR() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.PodCIDR; v != nil {
		return *v, true
	}
	return value, false
}

// SetPodCIDRs sets the PodCIDRs field in the declarative configuration to the given value.
func (b NodeSpecBuilder) SetPodCIDRs(value []string) NodeSpecBuilder {
	b.ensureInitialized()
	b.fields.PodCIDRs = &value
	return b
}

// RemovePodCIDRs removes the PodCIDRs field from the declarative configuration.
func (b NodeSpecBuilder) RemovePodCIDRs() NodeSpecBuilder {
	b.ensureInitialized()
	b.fields.PodCIDRs = nil
	return b
}

// GetPodCIDRs gets the PodCIDRs field from the declarative configuration.
func (b NodeSpecBuilder) GetPodCIDRs() (value []string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.PodCIDRs; v != nil {
		return *v, true
	}
	return value, false
}

// SetProviderID sets the ProviderID field in the declarative configuration to the given value.
func (b NodeSpecBuilder) SetProviderID(value string) NodeSpecBuilder {
	b.ensureInitialized()
	b.fields.ProviderID = &value
	return b
}

// RemoveProviderID removes the ProviderID field from the declarative configuration.
func (b NodeSpecBuilder) RemoveProviderID() NodeSpecBuilder {
	b.ensureInitialized()
	b.fields.ProviderID = nil
	return b
}

// GetProviderID gets the ProviderID field from the declarative configuration.
func (b NodeSpecBuilder) GetProviderID() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.ProviderID; v != nil {
		return *v, true
	}
	return value, false
}

// SetUnschedulable sets the Unschedulable field in the declarative configuration to the given value.
func (b NodeSpecBuilder) SetUnschedulable(value bool) NodeSpecBuilder {
	b.ensureInitialized()
	b.fields.Unschedulable = &value
	return b
}

// RemoveUnschedulable removes the Unschedulable field from the declarative configuration.
func (b NodeSpecBuilder) RemoveUnschedulable() NodeSpecBuilder {
	b.ensureInitialized()
	b.fields.Unschedulable = nil
	return b
}

// GetUnschedulable gets the Unschedulable field from the declarative configuration.
func (b NodeSpecBuilder) GetUnschedulable() (value bool, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Unschedulable; v != nil {
		return *v, true
	}
	return value, false
}

// SetTaints sets the Taints field in the declarative configuration to the given value.
func (b NodeSpecBuilder) SetTaints(value TaintList) NodeSpecBuilder {
	b.ensureInitialized()
	b.fields.Taints = &value
	return b
}

// RemoveTaints removes the Taints field from the declarative configuration.
func (b NodeSpecBuilder) RemoveTaints() NodeSpecBuilder {
	b.ensureInitialized()
	b.fields.Taints = nil
	return b
}

// GetTaints gets the Taints field from the declarative configuration.
func (b NodeSpecBuilder) GetTaints() (value TaintList, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Taints; v != nil {
		return *v, true
	}
	return value, false
}

// SetConfigSource sets the ConfigSource field in the declarative configuration to the given value.
func (b NodeSpecBuilder) SetConfigSource(value NodeConfigSourceBuilder) NodeSpecBuilder {
	b.ensureInitialized()
	b.fields.ConfigSource = &value
	return b
}

// RemoveConfigSource removes the ConfigSource field from the declarative configuration.
func (b NodeSpecBuilder) RemoveConfigSource() NodeSpecBuilder {
	b.ensureInitialized()
	b.fields.ConfigSource = nil
	return b
}

// GetConfigSource gets the ConfigSource field from the declarative configuration.
func (b NodeSpecBuilder) GetConfigSource() (value NodeConfigSourceBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.ConfigSource; v != nil {
		return *v, true
	}
	return value, false
}

// SetDoNotUseExternalID sets the DoNotUseExternalID field in the declarative configuration to the given value.
func (b NodeSpecBuilder) SetDoNotUseExternalID(value string) NodeSpecBuilder {
	b.ensureInitialized()
	b.fields.DoNotUseExternalID = &value
	return b
}

// RemoveDoNotUseExternalID removes the DoNotUseExternalID field from the declarative configuration.
func (b NodeSpecBuilder) RemoveDoNotUseExternalID() NodeSpecBuilder {
	b.ensureInitialized()
	b.fields.DoNotUseExternalID = nil
	return b
}

// GetDoNotUseExternalID gets the DoNotUseExternalID field from the declarative configuration.
func (b NodeSpecBuilder) GetDoNotUseExternalID() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.DoNotUseExternalID; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts NodeSpecBuilder to unstructured.
func (b *NodeSpecBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to NodeSpecBuilder, replacing the contents
// of NodeSpecBuilder.
func (b *NodeSpecBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &nodeSpecFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals NodeSpecBuilder to JSON.
func (b *NodeSpecBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into NodeSpecBuilder, replacing the contents of
// NodeSpecBuilder.
func (b *NodeSpecBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// NodeSpecList represents a list of NodeSpecBuilder.
// Provided as a convenience.
type NodeSpecList []NodeSpecBuilder

// NodeSpecList represents a map of NodeSpecBuilder.
// Provided as a convenience.
type NodeSpecMap map[string]NodeSpecBuilder

func (b *NodeSpecBuilder) preMarshal() {
}
func (b *NodeSpecBuilder) postUnmarshal() {
}
