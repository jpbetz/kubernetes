/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	corev1 "k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// SecurityContextBuilder represents an declarative configuration of the SecurityContext type for use
// with apply.
type SecurityContextBuilder struct {
	fields securityContextFields
}

// securityContextFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in SecurityContextBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type securityContextFields struct {
	Capabilities             *CapabilitiesBuilder                  `json:"capabilities,omitempty"`
	Privileged               *bool                                 `json:"privileged,omitempty"`
	SELinuxOptions           *SELinuxOptionsBuilder                `json:"seLinuxOptions,omitempty"`
	WindowsOptions           *WindowsSecurityContextOptionsBuilder `json:"windowsOptions,omitempty"`
	RunAsUser                *int64                                `json:"runAsUser,omitempty"`
	RunAsGroup               *int64                                `json:"runAsGroup,omitempty"`
	RunAsNonRoot             *bool                                 `json:"runAsNonRoot,omitempty"`
	ReadOnlyRootFilesystem   *bool                                 `json:"readOnlyRootFilesystem,omitempty"`
	AllowPrivilegeEscalation *bool                                 `json:"allowPrivilegeEscalation,omitempty"`
	ProcMount                *corev1.ProcMountType                 `json:"procMount,omitempty"`
	SeccompProfile           *SeccompProfileBuilder                `json:"seccompProfile,omitempty"`
}

// SecurityContext constructs an declarative configuration of the SecurityContext type for use with
// apply.
func SecurityContext() *SecurityContextBuilder {
	return &SecurityContextBuilder{}
}

// SetCapabilities sets the Capabilities field in the declarative configuration to the given value.
func (b *SecurityContextBuilder) SetCapabilities(value *CapabilitiesBuilder) *SecurityContextBuilder {
	b.fields.Capabilities = value
	return b
}

// RemoveCapabilities removes the Capabilities field from the declarative configuration.
func (b *SecurityContextBuilder) RemoveCapabilities() *SecurityContextBuilder {
	b.fields.Capabilities = nil
	return b
}

// GetCapabilities gets the Capabilities field from the declarative configuration.
func (b *SecurityContextBuilder) GetCapabilities() (value *CapabilitiesBuilder, ok bool) {
	return b.fields.Capabilities, b.fields.Capabilities != nil
}

// SetPrivileged sets the Privileged field in the declarative configuration to the given value.
func (b *SecurityContextBuilder) SetPrivileged(value bool) *SecurityContextBuilder {
	b.fields.Privileged = &value
	return b
}

// RemovePrivileged removes the Privileged field from the declarative configuration.
func (b *SecurityContextBuilder) RemovePrivileged() *SecurityContextBuilder {
	b.fields.Privileged = nil
	return b
}

// GetPrivileged gets the Privileged field from the declarative configuration.
func (b *SecurityContextBuilder) GetPrivileged() (value bool, ok bool) {
	if v := b.fields.Privileged; v != nil {
		return *v, true
	}
	return value, false
}

// SetSELinuxOptions sets the SELinuxOptions field in the declarative configuration to the given value.
func (b *SecurityContextBuilder) SetSELinuxOptions(value *SELinuxOptionsBuilder) *SecurityContextBuilder {
	b.fields.SELinuxOptions = value
	return b
}

// RemoveSELinuxOptions removes the SELinuxOptions field from the declarative configuration.
func (b *SecurityContextBuilder) RemoveSELinuxOptions() *SecurityContextBuilder {
	b.fields.SELinuxOptions = nil
	return b
}

// GetSELinuxOptions gets the SELinuxOptions field from the declarative configuration.
func (b *SecurityContextBuilder) GetSELinuxOptions() (value *SELinuxOptionsBuilder, ok bool) {
	return b.fields.SELinuxOptions, b.fields.SELinuxOptions != nil
}

// SetWindowsOptions sets the WindowsOptions field in the declarative configuration to the given value.
func (b *SecurityContextBuilder) SetWindowsOptions(value *WindowsSecurityContextOptionsBuilder) *SecurityContextBuilder {
	b.fields.WindowsOptions = value
	return b
}

// RemoveWindowsOptions removes the WindowsOptions field from the declarative configuration.
func (b *SecurityContextBuilder) RemoveWindowsOptions() *SecurityContextBuilder {
	b.fields.WindowsOptions = nil
	return b
}

// GetWindowsOptions gets the WindowsOptions field from the declarative configuration.
func (b *SecurityContextBuilder) GetWindowsOptions() (value *WindowsSecurityContextOptionsBuilder, ok bool) {
	return b.fields.WindowsOptions, b.fields.WindowsOptions != nil
}

// SetRunAsUser sets the RunAsUser field in the declarative configuration to the given value.
func (b *SecurityContextBuilder) SetRunAsUser(value int64) *SecurityContextBuilder {
	b.fields.RunAsUser = &value
	return b
}

// RemoveRunAsUser removes the RunAsUser field from the declarative configuration.
func (b *SecurityContextBuilder) RemoveRunAsUser() *SecurityContextBuilder {
	b.fields.RunAsUser = nil
	return b
}

// GetRunAsUser gets the RunAsUser field from the declarative configuration.
func (b *SecurityContextBuilder) GetRunAsUser() (value int64, ok bool) {
	if v := b.fields.RunAsUser; v != nil {
		return *v, true
	}
	return value, false
}

// SetRunAsGroup sets the RunAsGroup field in the declarative configuration to the given value.
func (b *SecurityContextBuilder) SetRunAsGroup(value int64) *SecurityContextBuilder {
	b.fields.RunAsGroup = &value
	return b
}

// RemoveRunAsGroup removes the RunAsGroup field from the declarative configuration.
func (b *SecurityContextBuilder) RemoveRunAsGroup() *SecurityContextBuilder {
	b.fields.RunAsGroup = nil
	return b
}

// GetRunAsGroup gets the RunAsGroup field from the declarative configuration.
func (b *SecurityContextBuilder) GetRunAsGroup() (value int64, ok bool) {
	if v := b.fields.RunAsGroup; v != nil {
		return *v, true
	}
	return value, false
}

// SetRunAsNonRoot sets the RunAsNonRoot field in the declarative configuration to the given value.
func (b *SecurityContextBuilder) SetRunAsNonRoot(value bool) *SecurityContextBuilder {
	b.fields.RunAsNonRoot = &value
	return b
}

// RemoveRunAsNonRoot removes the RunAsNonRoot field from the declarative configuration.
func (b *SecurityContextBuilder) RemoveRunAsNonRoot() *SecurityContextBuilder {
	b.fields.RunAsNonRoot = nil
	return b
}

// GetRunAsNonRoot gets the RunAsNonRoot field from the declarative configuration.
func (b *SecurityContextBuilder) GetRunAsNonRoot() (value bool, ok bool) {
	if v := b.fields.RunAsNonRoot; v != nil {
		return *v, true
	}
	return value, false
}

// SetReadOnlyRootFilesystem sets the ReadOnlyRootFilesystem field in the declarative configuration to the given value.
func (b *SecurityContextBuilder) SetReadOnlyRootFilesystem(value bool) *SecurityContextBuilder {
	b.fields.ReadOnlyRootFilesystem = &value
	return b
}

// RemoveReadOnlyRootFilesystem removes the ReadOnlyRootFilesystem field from the declarative configuration.
func (b *SecurityContextBuilder) RemoveReadOnlyRootFilesystem() *SecurityContextBuilder {
	b.fields.ReadOnlyRootFilesystem = nil
	return b
}

// GetReadOnlyRootFilesystem gets the ReadOnlyRootFilesystem field from the declarative configuration.
func (b *SecurityContextBuilder) GetReadOnlyRootFilesystem() (value bool, ok bool) {
	if v := b.fields.ReadOnlyRootFilesystem; v != nil {
		return *v, true
	}
	return value, false
}

// SetAllowPrivilegeEscalation sets the AllowPrivilegeEscalation field in the declarative configuration to the given value.
func (b *SecurityContextBuilder) SetAllowPrivilegeEscalation(value bool) *SecurityContextBuilder {
	b.fields.AllowPrivilegeEscalation = &value
	return b
}

// RemoveAllowPrivilegeEscalation removes the AllowPrivilegeEscalation field from the declarative configuration.
func (b *SecurityContextBuilder) RemoveAllowPrivilegeEscalation() *SecurityContextBuilder {
	b.fields.AllowPrivilegeEscalation = nil
	return b
}

// GetAllowPrivilegeEscalation gets the AllowPrivilegeEscalation field from the declarative configuration.
func (b *SecurityContextBuilder) GetAllowPrivilegeEscalation() (value bool, ok bool) {
	if v := b.fields.AllowPrivilegeEscalation; v != nil {
		return *v, true
	}
	return value, false
}

// SetProcMount sets the ProcMount field in the declarative configuration to the given value.
func (b *SecurityContextBuilder) SetProcMount(value corev1.ProcMountType) *SecurityContextBuilder {
	b.fields.ProcMount = &value
	return b
}

// RemoveProcMount removes the ProcMount field from the declarative configuration.
func (b *SecurityContextBuilder) RemoveProcMount() *SecurityContextBuilder {
	b.fields.ProcMount = nil
	return b
}

// GetProcMount gets the ProcMount field from the declarative configuration.
func (b *SecurityContextBuilder) GetProcMount() (value corev1.ProcMountType, ok bool) {
	if v := b.fields.ProcMount; v != nil {
		return *v, true
	}
	return value, false
}

// SetSeccompProfile sets the SeccompProfile field in the declarative configuration to the given value.
func (b *SecurityContextBuilder) SetSeccompProfile(value *SeccompProfileBuilder) *SecurityContextBuilder {
	b.fields.SeccompProfile = value
	return b
}

// RemoveSeccompProfile removes the SeccompProfile field from the declarative configuration.
func (b *SecurityContextBuilder) RemoveSeccompProfile() *SecurityContextBuilder {
	b.fields.SeccompProfile = nil
	return b
}

// GetSeccompProfile gets the SeccompProfile field from the declarative configuration.
func (b *SecurityContextBuilder) GetSeccompProfile() (value *SeccompProfileBuilder, ok bool) {
	return b.fields.SeccompProfile, b.fields.SeccompProfile != nil
}

// ToUnstructured converts SecurityContextBuilder to unstructured.
func (b *SecurityContextBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to SecurityContextBuilder, replacing the contents
// of SecurityContextBuilder.
func (b *SecurityContextBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &securityContextFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals SecurityContextBuilder to JSON.
func (b *SecurityContextBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into SecurityContextBuilder, replacing the contents of
// SecurityContextBuilder.
func (b *SecurityContextBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// SecurityContextList represents a list of SecurityContextBuilder.
type SecurityContextList []*SecurityContextBuilder

// SecurityContextList represents a map of SecurityContextBuilder.
type SecurityContextMap map[string]SecurityContextBuilder

func (b *SecurityContextBuilder) preMarshal() {
}
func (b *SecurityContextBuilder) postUnmarshal() {
}
