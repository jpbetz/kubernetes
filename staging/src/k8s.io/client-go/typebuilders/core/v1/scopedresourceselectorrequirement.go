/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	v1 "k8s.io/api/core/v1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ScopedResourceSelectorRequirementBuilder represents an declarative configuration of the ScopedResourceSelectorRequirement type for use
// with apply.
type ScopedResourceSelectorRequirementBuilder struct {
	fields *scopedResourceSelectorRequirementFields
}

// scopedResourceSelectorRequirementFields is used by ScopedResourceSelectorRequirementBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in ScopedResourceSelectorRequirementBuilder before marshalling, and
// are copied out to the builder type in ScopedResourceSelectorRequirementBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type scopedResourceSelectorRequirementFields struct {
	ScopeName *v1.ResourceQuotaScope    `json:"scopeName,omitempty"`
	Operator  *v1.ScopeSelectorOperator `json:"operator,omitempty"`
	Values    *[]string                 `json:"values,omitempty"`
}

func (b *ScopedResourceSelectorRequirementBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &scopedResourceSelectorRequirementFields{}
	}
}

// ScopedResourceSelectorRequirement constructs an declarative configuration of the ScopedResourceSelectorRequirement type for use with
// apply.
// Provided as a convenience.
func ScopedResourceSelectorRequirement() ScopedResourceSelectorRequirementBuilder {
	return ScopedResourceSelectorRequirementBuilder{fields: &scopedResourceSelectorRequirementFields{}}
}

// SetScopeName sets the ScopeName field in the declarative configuration to the given value.
func (b ScopedResourceSelectorRequirementBuilder) SetScopeName(value v1.ResourceQuotaScope) ScopedResourceSelectorRequirementBuilder {
	b.ensureInitialized()
	b.fields.ScopeName = &value
	return b
}

// RemoveScopeName removes the ScopeName field from the declarative configuration.
func (b ScopedResourceSelectorRequirementBuilder) RemoveScopeName() ScopedResourceSelectorRequirementBuilder {
	b.ensureInitialized()
	b.fields.ScopeName = nil
	return b
}

// GetScopeName gets the ScopeName field from the declarative configuration.
func (b ScopedResourceSelectorRequirementBuilder) GetScopeName() (value v1.ResourceQuotaScope, ok bool) {
	b.ensureInitialized()
	if v := b.fields.ScopeName; v != nil {
		return *v, true
	}
	return value, false
}

// SetOperator sets the Operator field in the declarative configuration to the given value.
func (b ScopedResourceSelectorRequirementBuilder) SetOperator(value v1.ScopeSelectorOperator) ScopedResourceSelectorRequirementBuilder {
	b.ensureInitialized()
	b.fields.Operator = &value
	return b
}

// RemoveOperator removes the Operator field from the declarative configuration.
func (b ScopedResourceSelectorRequirementBuilder) RemoveOperator() ScopedResourceSelectorRequirementBuilder {
	b.ensureInitialized()
	b.fields.Operator = nil
	return b
}

// GetOperator gets the Operator field from the declarative configuration.
func (b ScopedResourceSelectorRequirementBuilder) GetOperator() (value v1.ScopeSelectorOperator, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Operator; v != nil {
		return *v, true
	}
	return value, false
}

// SetValues sets the Values field in the declarative configuration to the given value.
func (b ScopedResourceSelectorRequirementBuilder) SetValues(value []string) ScopedResourceSelectorRequirementBuilder {
	b.ensureInitialized()
	b.fields.Values = &value
	return b
}

// RemoveValues removes the Values field from the declarative configuration.
func (b ScopedResourceSelectorRequirementBuilder) RemoveValues() ScopedResourceSelectorRequirementBuilder {
	b.ensureInitialized()
	b.fields.Values = nil
	return b
}

// GetValues gets the Values field from the declarative configuration.
func (b ScopedResourceSelectorRequirementBuilder) GetValues() (value []string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Values; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ScopedResourceSelectorRequirementBuilder to unstructured.
func (b *ScopedResourceSelectorRequirementBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ScopedResourceSelectorRequirementBuilder, replacing the contents
// of ScopedResourceSelectorRequirementBuilder.
func (b *ScopedResourceSelectorRequirementBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &scopedResourceSelectorRequirementFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ScopedResourceSelectorRequirementBuilder to JSON.
func (b *ScopedResourceSelectorRequirementBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into ScopedResourceSelectorRequirementBuilder, replacing the contents of
// ScopedResourceSelectorRequirementBuilder.
func (b *ScopedResourceSelectorRequirementBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ScopedResourceSelectorRequirementList represents a list of ScopedResourceSelectorRequirementBuilder.
// Provided as a convenience.
type ScopedResourceSelectorRequirementList []ScopedResourceSelectorRequirementBuilder

// ScopedResourceSelectorRequirementList represents a map of ScopedResourceSelectorRequirementBuilder.
// Provided as a convenience.
type ScopedResourceSelectorRequirementMap map[string]ScopedResourceSelectorRequirementBuilder

func (b *ScopedResourceSelectorRequirementBuilder) preMarshal() {
}
func (b *ScopedResourceSelectorRequirementBuilder) postUnmarshal() {
}
