/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// SecretReferenceBuilder represents an declarative configuration of the SecretReference type for use
// with apply.
type SecretReferenceBuilder struct {
	fields *secretReferenceFields
}

// secretReferenceFields is used by SecretReferenceBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in SecretReferenceBuilder before marshalling, and
// are copied out to the builder type in SecretReferenceBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type secretReferenceFields struct {
	Name      *string `json:"name,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
}

func (b *SecretReferenceBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &secretReferenceFields{}
	}
}

// SecretReference constructs an declarative configuration of the SecretReference type for use with
// apply.
// Provided as a convenience.
func SecretReference() SecretReferenceBuilder {
	return SecretReferenceBuilder{fields: &secretReferenceFields{}}
}

// SetName sets the Name field in the declarative configuration to the given value.
func (b SecretReferenceBuilder) SetName(value string) SecretReferenceBuilder {
	b.ensureInitialized()
	b.fields.Name = &value
	return b
}

// RemoveName removes the Name field from the declarative configuration.
func (b SecretReferenceBuilder) RemoveName() SecretReferenceBuilder {
	b.ensureInitialized()
	b.fields.Name = nil
	return b
}

// GetName gets the Name field from the declarative configuration.
func (b SecretReferenceBuilder) GetName() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Name; v != nil {
		return *v, true
	}
	return value, false
}

// SetNamespace sets the Namespace field in the declarative configuration to the given value.
func (b SecretReferenceBuilder) SetNamespace(value string) SecretReferenceBuilder {
	b.ensureInitialized()
	b.fields.Namespace = &value
	return b
}

// RemoveNamespace removes the Namespace field from the declarative configuration.
func (b SecretReferenceBuilder) RemoveNamespace() SecretReferenceBuilder {
	b.ensureInitialized()
	b.fields.Namespace = nil
	return b
}

// GetNamespace gets the Namespace field from the declarative configuration.
func (b SecretReferenceBuilder) GetNamespace() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Namespace; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts SecretReferenceBuilder to unstructured.
func (b *SecretReferenceBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to SecretReferenceBuilder, replacing the contents
// of SecretReferenceBuilder.
func (b *SecretReferenceBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &secretReferenceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals SecretReferenceBuilder to JSON.
func (b *SecretReferenceBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into SecretReferenceBuilder, replacing the contents of
// SecretReferenceBuilder.
func (b *SecretReferenceBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// SecretReferenceList represents a list of SecretReferenceBuilder.
// Provided as a convenience.
type SecretReferenceList []SecretReferenceBuilder

// SecretReferenceList represents a map of SecretReferenceBuilder.
// Provided as a convenience.
type SecretReferenceMap map[string]SecretReferenceBuilder

func (b *SecretReferenceBuilder) preMarshal() {
}
func (b *SecretReferenceBuilder) postUnmarshal() {
}
