/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// AzureFileVolumeSourceBuilder represents an declarative configuration of the AzureFileVolumeSource type for use
// with apply.
type AzureFileVolumeSourceBuilder struct {
	fields *azureFileVolumeSourceFields
}

// azureFileVolumeSourceFields is used by AzureFileVolumeSourceBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in AzureFileVolumeSourceBuilder before marshalling, and
// are copied out to the builder type in AzureFileVolumeSourceBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type azureFileVolumeSourceFields struct {
	SecretName *string `json:"secretName,omitempty"`
	ShareName  *string `json:"shareName,omitempty"`
	ReadOnly   *bool   `json:"readOnly,omitempty"`
}

func (b *AzureFileVolumeSourceBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &azureFileVolumeSourceFields{}
	}
}

// AzureFileVolumeSource constructs an declarative configuration of the AzureFileVolumeSource type for use with
// apply.
// Provided as a convenience.
func AzureFileVolumeSource() AzureFileVolumeSourceBuilder {
	return AzureFileVolumeSourceBuilder{fields: &azureFileVolumeSourceFields{}}
}

// SetSecretName sets the SecretName field in the declarative configuration to the given value.
func (b AzureFileVolumeSourceBuilder) SetSecretName(value string) AzureFileVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.SecretName = &value
	return b
}

// RemoveSecretName removes the SecretName field from the declarative configuration.
func (b AzureFileVolumeSourceBuilder) RemoveSecretName() AzureFileVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.SecretName = nil
	return b
}

// GetSecretName gets the SecretName field from the declarative configuration.
func (b AzureFileVolumeSourceBuilder) GetSecretName() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.SecretName; v != nil {
		return *v, true
	}
	return value, false
}

// SetShareName sets the ShareName field in the declarative configuration to the given value.
func (b AzureFileVolumeSourceBuilder) SetShareName(value string) AzureFileVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.ShareName = &value
	return b
}

// RemoveShareName removes the ShareName field from the declarative configuration.
func (b AzureFileVolumeSourceBuilder) RemoveShareName() AzureFileVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.ShareName = nil
	return b
}

// GetShareName gets the ShareName field from the declarative configuration.
func (b AzureFileVolumeSourceBuilder) GetShareName() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.ShareName; v != nil {
		return *v, true
	}
	return value, false
}

// SetReadOnly sets the ReadOnly field in the declarative configuration to the given value.
func (b AzureFileVolumeSourceBuilder) SetReadOnly(value bool) AzureFileVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.ReadOnly = &value
	return b
}

// RemoveReadOnly removes the ReadOnly field from the declarative configuration.
func (b AzureFileVolumeSourceBuilder) RemoveReadOnly() AzureFileVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.ReadOnly = nil
	return b
}

// GetReadOnly gets the ReadOnly field from the declarative configuration.
func (b AzureFileVolumeSourceBuilder) GetReadOnly() (value bool, ok bool) {
	b.ensureInitialized()
	if v := b.fields.ReadOnly; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts AzureFileVolumeSourceBuilder to unstructured.
func (b *AzureFileVolumeSourceBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to AzureFileVolumeSourceBuilder, replacing the contents
// of AzureFileVolumeSourceBuilder.
func (b *AzureFileVolumeSourceBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &azureFileVolumeSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals AzureFileVolumeSourceBuilder to JSON.
func (b *AzureFileVolumeSourceBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into AzureFileVolumeSourceBuilder, replacing the contents of
// AzureFileVolumeSourceBuilder.
func (b *AzureFileVolumeSourceBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// AzureFileVolumeSourceList represents a list of AzureFileVolumeSourceBuilder.
// Provided as a convenience.
type AzureFileVolumeSourceList []AzureFileVolumeSourceBuilder

// AzureFileVolumeSourceList represents a map of AzureFileVolumeSourceBuilder.
// Provided as a convenience.
type AzureFileVolumeSourceMap map[string]AzureFileVolumeSourceBuilder

func (b *AzureFileVolumeSourceBuilder) preMarshal() {
}
func (b *AzureFileVolumeSourceBuilder) postUnmarshal() {
}
