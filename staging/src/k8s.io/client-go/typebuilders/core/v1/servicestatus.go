/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ServiceStatusBuilder represents an declarative configuration of the ServiceStatus type for use
// with apply.
type ServiceStatusBuilder struct {
	fields *serviceStatusFields
}

// serviceStatusFields is used by ServiceStatusBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in ServiceStatusBuilder before marshalling, and
// are copied out to the builder type in ServiceStatusBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type serviceStatusFields struct {
	LoadBalancer *LoadBalancerStatusBuilder `json:"loadBalancer,omitempty"`
}

func (b *ServiceStatusBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &serviceStatusFields{}
	}
}

// ServiceStatus constructs an declarative configuration of the ServiceStatus type for use with
// apply.
// Provided as a convenience.
func ServiceStatus() ServiceStatusBuilder {
	return ServiceStatusBuilder{fields: &serviceStatusFields{}}
}

// SetLoadBalancer sets the LoadBalancer field in the declarative configuration to the given value.
func (b ServiceStatusBuilder) SetLoadBalancer(value LoadBalancerStatusBuilder) ServiceStatusBuilder {
	b.ensureInitialized()
	b.fields.LoadBalancer = &value
	return b
}

// RemoveLoadBalancer removes the LoadBalancer field from the declarative configuration.
func (b ServiceStatusBuilder) RemoveLoadBalancer() ServiceStatusBuilder {
	b.ensureInitialized()
	b.fields.LoadBalancer = nil
	return b
}

// GetLoadBalancer gets the LoadBalancer field from the declarative configuration.
func (b ServiceStatusBuilder) GetLoadBalancer() (value LoadBalancerStatusBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.LoadBalancer; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ServiceStatusBuilder to unstructured.
func (b *ServiceStatusBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ServiceStatusBuilder, replacing the contents
// of ServiceStatusBuilder.
func (b *ServiceStatusBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &serviceStatusFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ServiceStatusBuilder to JSON.
func (b *ServiceStatusBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into ServiceStatusBuilder, replacing the contents of
// ServiceStatusBuilder.
func (b *ServiceStatusBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ServiceStatusList represents a list of ServiceStatusBuilder.
// Provided as a convenience.
type ServiceStatusList []ServiceStatusBuilder

// ServiceStatusList represents a map of ServiceStatusBuilder.
// Provided as a convenience.
type ServiceStatusMap map[string]ServiceStatusBuilder

func (b *ServiceStatusBuilder) preMarshal() {
}
func (b *ServiceStatusBuilder) postUnmarshal() {
}
