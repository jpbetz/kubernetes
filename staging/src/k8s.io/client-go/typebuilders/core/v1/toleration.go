/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	v1 "k8s.io/api/core/v1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// TolerationBuilder represents an declarative configuration of the Toleration type for use
// with apply.
type TolerationBuilder struct {
	fields *tolerationFields
}

// tolerationFields is used by TolerationBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in TolerationBuilder before marshalling, and
// are copied out to the builder type in TolerationBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type tolerationFields struct {
	Key               *string                `json:"key,omitempty"`
	Operator          *v1.TolerationOperator `json:"operator,omitempty"`
	Value             *string                `json:"value,omitempty"`
	Effect            *v1.TaintEffect        `json:"effect,omitempty"`
	TolerationSeconds *int64                 `json:"tolerationSeconds,omitempty"`
}

func (b *TolerationBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &tolerationFields{}
	}
}

// Toleration constructs an declarative configuration of the Toleration type for use with
// apply.
// Provided as a convenience.
func Toleration() TolerationBuilder {
	return TolerationBuilder{fields: &tolerationFields{}}
}

// SetKey sets the Key field in the declarative configuration to the given value.
func (b TolerationBuilder) SetKey(value string) TolerationBuilder {
	b.ensureInitialized()
	b.fields.Key = &value
	return b
}

// RemoveKey removes the Key field from the declarative configuration.
func (b TolerationBuilder) RemoveKey() TolerationBuilder {
	b.ensureInitialized()
	b.fields.Key = nil
	return b
}

// GetKey gets the Key field from the declarative configuration.
func (b TolerationBuilder) GetKey() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Key; v != nil {
		return *v, true
	}
	return value, false
}

// SetOperator sets the Operator field in the declarative configuration to the given value.
func (b TolerationBuilder) SetOperator(value v1.TolerationOperator) TolerationBuilder {
	b.ensureInitialized()
	b.fields.Operator = &value
	return b
}

// RemoveOperator removes the Operator field from the declarative configuration.
func (b TolerationBuilder) RemoveOperator() TolerationBuilder {
	b.ensureInitialized()
	b.fields.Operator = nil
	return b
}

// GetOperator gets the Operator field from the declarative configuration.
func (b TolerationBuilder) GetOperator() (value v1.TolerationOperator, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Operator; v != nil {
		return *v, true
	}
	return value, false
}

// SetValue sets the Value field in the declarative configuration to the given value.
func (b TolerationBuilder) SetValue(value string) TolerationBuilder {
	b.ensureInitialized()
	b.fields.Value = &value
	return b
}

// RemoveValue removes the Value field from the declarative configuration.
func (b TolerationBuilder) RemoveValue() TolerationBuilder {
	b.ensureInitialized()
	b.fields.Value = nil
	return b
}

// GetValue gets the Value field from the declarative configuration.
func (b TolerationBuilder) GetValue() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Value; v != nil {
		return *v, true
	}
	return value, false
}

// SetEffect sets the Effect field in the declarative configuration to the given value.
func (b TolerationBuilder) SetEffect(value v1.TaintEffect) TolerationBuilder {
	b.ensureInitialized()
	b.fields.Effect = &value
	return b
}

// RemoveEffect removes the Effect field from the declarative configuration.
func (b TolerationBuilder) RemoveEffect() TolerationBuilder {
	b.ensureInitialized()
	b.fields.Effect = nil
	return b
}

// GetEffect gets the Effect field from the declarative configuration.
func (b TolerationBuilder) GetEffect() (value v1.TaintEffect, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Effect; v != nil {
		return *v, true
	}
	return value, false
}

// SetTolerationSeconds sets the TolerationSeconds field in the declarative configuration to the given value.
func (b TolerationBuilder) SetTolerationSeconds(value int64) TolerationBuilder {
	b.ensureInitialized()
	b.fields.TolerationSeconds = &value
	return b
}

// RemoveTolerationSeconds removes the TolerationSeconds field from the declarative configuration.
func (b TolerationBuilder) RemoveTolerationSeconds() TolerationBuilder {
	b.ensureInitialized()
	b.fields.TolerationSeconds = nil
	return b
}

// GetTolerationSeconds gets the TolerationSeconds field from the declarative configuration.
func (b TolerationBuilder) GetTolerationSeconds() (value int64, ok bool) {
	b.ensureInitialized()
	if v := b.fields.TolerationSeconds; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts TolerationBuilder to unstructured.
func (b *TolerationBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to TolerationBuilder, replacing the contents
// of TolerationBuilder.
func (b *TolerationBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &tolerationFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals TolerationBuilder to JSON.
func (b *TolerationBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into TolerationBuilder, replacing the contents of
// TolerationBuilder.
func (b *TolerationBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// TolerationList represents a list of TolerationBuilder.
// Provided as a convenience.
type TolerationList []TolerationBuilder

// TolerationList represents a map of TolerationBuilder.
// Provided as a convenience.
type TolerationMap map[string]TolerationBuilder

func (b *TolerationBuilder) preMarshal() {
}
func (b *TolerationBuilder) postUnmarshal() {
}
