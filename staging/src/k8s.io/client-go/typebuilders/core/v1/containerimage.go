/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ContainerImageBuilder represents an declarative configuration of the ContainerImage type for use
// with apply.
type ContainerImageBuilder struct {
	fields *containerImageFields
}

// containerImageFields is used by ContainerImageBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in ContainerImageBuilder before marshalling, and
// are copied out to the builder type in ContainerImageBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type containerImageFields struct {
	Names     *[]string `json:"names,omitempty"`
	SizeBytes *int64    `json:"sizeBytes,omitempty"`
}

func (b *ContainerImageBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &containerImageFields{}
	}
}

// ContainerImage constructs an declarative configuration of the ContainerImage type for use with
// apply.
// Provided as a convenience.
func ContainerImage() ContainerImageBuilder {
	return ContainerImageBuilder{fields: &containerImageFields{}}
}

// SetNames sets the Names field in the declarative configuration to the given value.
func (b ContainerImageBuilder) SetNames(value []string) ContainerImageBuilder {
	b.ensureInitialized()
	b.fields.Names = &value
	return b
}

// RemoveNames removes the Names field from the declarative configuration.
func (b ContainerImageBuilder) RemoveNames() ContainerImageBuilder {
	b.ensureInitialized()
	b.fields.Names = nil
	return b
}

// GetNames gets the Names field from the declarative configuration.
func (b ContainerImageBuilder) GetNames() (value []string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Names; v != nil {
		return *v, true
	}
	return value, false
}

// SetSizeBytes sets the SizeBytes field in the declarative configuration to the given value.
func (b ContainerImageBuilder) SetSizeBytes(value int64) ContainerImageBuilder {
	b.ensureInitialized()
	b.fields.SizeBytes = &value
	return b
}

// RemoveSizeBytes removes the SizeBytes field from the declarative configuration.
func (b ContainerImageBuilder) RemoveSizeBytes() ContainerImageBuilder {
	b.ensureInitialized()
	b.fields.SizeBytes = nil
	return b
}

// GetSizeBytes gets the SizeBytes field from the declarative configuration.
func (b ContainerImageBuilder) GetSizeBytes() (value int64, ok bool) {
	b.ensureInitialized()
	if v := b.fields.SizeBytes; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ContainerImageBuilder to unstructured.
func (b *ContainerImageBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ContainerImageBuilder, replacing the contents
// of ContainerImageBuilder.
func (b *ContainerImageBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &containerImageFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ContainerImageBuilder to JSON.
func (b *ContainerImageBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into ContainerImageBuilder, replacing the contents of
// ContainerImageBuilder.
func (b *ContainerImageBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ContainerImageList represents a list of ContainerImageBuilder.
// Provided as a convenience.
type ContainerImageList []ContainerImageBuilder

// ContainerImageList represents a map of ContainerImageBuilder.
// Provided as a convenience.
type ContainerImageMap map[string]ContainerImageBuilder

func (b *ContainerImageBuilder) preMarshal() {
}
func (b *ContainerImageBuilder) postUnmarshal() {
}
