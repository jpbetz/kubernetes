/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ProbeBuilder represents an declarative configuration of the Probe type for use
// with apply.
type ProbeBuilder struct {
	handler HandlerBuilder // inlined type
	fields  *probeFields
}

// probeFields is used by ProbeBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in ProbeBuilder before marshalling, and
// are copied out to the builder type in ProbeBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type probeFields struct {
	Exec                *ExecActionBuilder      `json:"exec,omitempty"`      // inlined ProbeBuilder.handler.Exec field
	HTTPGet             *HTTPGetActionBuilder   `json:"httpGet,omitempty"`   // inlined ProbeBuilder.handler.HTTPGet field
	TCPSocket           *TCPSocketActionBuilder `json:"tcpSocket,omitempty"` // inlined ProbeBuilder.handler.TCPSocket field
	InitialDelaySeconds *int32                  `json:"initialDelaySeconds,omitempty"`
	TimeoutSeconds      *int32                  `json:"timeoutSeconds,omitempty"`
	PeriodSeconds       *int32                  `json:"periodSeconds,omitempty"`
	SuccessThreshold    *int32                  `json:"successThreshold,omitempty"`
	FailureThreshold    *int32                  `json:"failureThreshold,omitempty"`
}

func (b *ProbeBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &probeFields{}
	}
}

// Probe constructs an declarative configuration of the Probe type for use with
// apply.
// Provided as a convenience.
func Probe() ProbeBuilder {
	return ProbeBuilder{fields: &probeFields{}}
}

// SetHandler sets the Handler field in the declarative configuration to the given value.
func (b ProbeBuilder) SetHandler(value HandlerBuilder) ProbeBuilder {
	b.ensureInitialized()
	b.handler = value
	return b
}

// RemoveHandler removes the Handler field from the declarative configuration.
func (b ProbeBuilder) RemoveHandler() ProbeBuilder {
	b.ensureInitialized()
	b.handler = HandlerBuilder{}
	return b
}

// GetHandler gets the Handler field from the declarative configuration.
func (b ProbeBuilder) GetHandler() (value HandlerBuilder, ok bool) {
	b.ensureInitialized()
	return b.handler, true
}

// SetInitialDelaySeconds sets the InitialDelaySeconds field in the declarative configuration to the given value.
func (b ProbeBuilder) SetInitialDelaySeconds(value int32) ProbeBuilder {
	b.ensureInitialized()
	b.fields.InitialDelaySeconds = &value
	return b
}

// RemoveInitialDelaySeconds removes the InitialDelaySeconds field from the declarative configuration.
func (b ProbeBuilder) RemoveInitialDelaySeconds() ProbeBuilder {
	b.ensureInitialized()
	b.fields.InitialDelaySeconds = nil
	return b
}

// GetInitialDelaySeconds gets the InitialDelaySeconds field from the declarative configuration.
func (b ProbeBuilder) GetInitialDelaySeconds() (value int32, ok bool) {
	b.ensureInitialized()
	if v := b.fields.InitialDelaySeconds; v != nil {
		return *v, true
	}
	return value, false
}

// SetTimeoutSeconds sets the TimeoutSeconds field in the declarative configuration to the given value.
func (b ProbeBuilder) SetTimeoutSeconds(value int32) ProbeBuilder {
	b.ensureInitialized()
	b.fields.TimeoutSeconds = &value
	return b
}

// RemoveTimeoutSeconds removes the TimeoutSeconds field from the declarative configuration.
func (b ProbeBuilder) RemoveTimeoutSeconds() ProbeBuilder {
	b.ensureInitialized()
	b.fields.TimeoutSeconds = nil
	return b
}

// GetTimeoutSeconds gets the TimeoutSeconds field from the declarative configuration.
func (b ProbeBuilder) GetTimeoutSeconds() (value int32, ok bool) {
	b.ensureInitialized()
	if v := b.fields.TimeoutSeconds; v != nil {
		return *v, true
	}
	return value, false
}

// SetPeriodSeconds sets the PeriodSeconds field in the declarative configuration to the given value.
func (b ProbeBuilder) SetPeriodSeconds(value int32) ProbeBuilder {
	b.ensureInitialized()
	b.fields.PeriodSeconds = &value
	return b
}

// RemovePeriodSeconds removes the PeriodSeconds field from the declarative configuration.
func (b ProbeBuilder) RemovePeriodSeconds() ProbeBuilder {
	b.ensureInitialized()
	b.fields.PeriodSeconds = nil
	return b
}

// GetPeriodSeconds gets the PeriodSeconds field from the declarative configuration.
func (b ProbeBuilder) GetPeriodSeconds() (value int32, ok bool) {
	b.ensureInitialized()
	if v := b.fields.PeriodSeconds; v != nil {
		return *v, true
	}
	return value, false
}

// SetSuccessThreshold sets the SuccessThreshold field in the declarative configuration to the given value.
func (b ProbeBuilder) SetSuccessThreshold(value int32) ProbeBuilder {
	b.ensureInitialized()
	b.fields.SuccessThreshold = &value
	return b
}

// RemoveSuccessThreshold removes the SuccessThreshold field from the declarative configuration.
func (b ProbeBuilder) RemoveSuccessThreshold() ProbeBuilder {
	b.ensureInitialized()
	b.fields.SuccessThreshold = nil
	return b
}

// GetSuccessThreshold gets the SuccessThreshold field from the declarative configuration.
func (b ProbeBuilder) GetSuccessThreshold() (value int32, ok bool) {
	b.ensureInitialized()
	if v := b.fields.SuccessThreshold; v != nil {
		return *v, true
	}
	return value, false
}

// SetFailureThreshold sets the FailureThreshold field in the declarative configuration to the given value.
func (b ProbeBuilder) SetFailureThreshold(value int32) ProbeBuilder {
	b.ensureInitialized()
	b.fields.FailureThreshold = &value
	return b
}

// RemoveFailureThreshold removes the FailureThreshold field from the declarative configuration.
func (b ProbeBuilder) RemoveFailureThreshold() ProbeBuilder {
	b.ensureInitialized()
	b.fields.FailureThreshold = nil
	return b
}

// GetFailureThreshold gets the FailureThreshold field from the declarative configuration.
func (b ProbeBuilder) GetFailureThreshold() (value int32, ok bool) {
	b.ensureInitialized()
	if v := b.fields.FailureThreshold; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ProbeBuilder to unstructured.
func (b *ProbeBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ProbeBuilder, replacing the contents
// of ProbeBuilder.
func (b *ProbeBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &probeFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ProbeBuilder to JSON.
func (b *ProbeBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into ProbeBuilder, replacing the contents of
// ProbeBuilder.
func (b *ProbeBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ProbeList represents a list of ProbeBuilder.
// Provided as a convenience.
type ProbeList []ProbeBuilder

// ProbeList represents a map of ProbeBuilder.
// Provided as a convenience.
type ProbeMap map[string]ProbeBuilder

func (b *ProbeBuilder) preMarshal() {
	if v, ok := b.handler.GetExec(); ok {
		b.fields.Exec = &v
	}
	if v, ok := b.handler.GetHTTPGet(); ok {
		b.fields.HTTPGet = &v
	}
	if v, ok := b.handler.GetTCPSocket(); ok {
		b.fields.TCPSocket = &v
	}
}
func (b *ProbeBuilder) postUnmarshal() {
	if b.fields.Exec != nil {
		b.handler.SetExec(*b.fields.Exec)
	}
	if b.fields.HTTPGet != nil {
		b.handler.SetHTTPGet(*b.fields.HTTPGet)
	}
	if b.fields.TCPSocket != nil {
		b.handler.SetTCPSocket(*b.fields.TCPSocket)
	}
}
