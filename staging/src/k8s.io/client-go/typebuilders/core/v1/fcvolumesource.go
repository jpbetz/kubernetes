/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// FCVolumeSourceBuilder represents an declarative configuration of the FCVolumeSource type for use
// with apply.
type FCVolumeSourceBuilder struct {
	fields *fCVolumeSourceFields
}

// fCVolumeSourceFields is used by FCVolumeSourceBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in FCVolumeSourceBuilder before marshalling, and
// are copied out to the builder type in FCVolumeSourceBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type fCVolumeSourceFields struct {
	TargetWWNs *[]string `json:"targetWWNs,omitempty"`
	Lun        *int32    `json:"lun,omitempty"`
	FSType     *string   `json:"fsType,omitempty"`
	ReadOnly   *bool     `json:"readOnly,omitempty"`
	WWIDs      *[]string `json:"wwids,omitempty"`
}

func (b *FCVolumeSourceBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &fCVolumeSourceFields{}
	}
}

// FCVolumeSource constructs an declarative configuration of the FCVolumeSource type for use with
// apply.
// Provided as a convenience.
func FCVolumeSource() FCVolumeSourceBuilder {
	return FCVolumeSourceBuilder{fields: &fCVolumeSourceFields{}}
}

// SetTargetWWNs sets the TargetWWNs field in the declarative configuration to the given value.
func (b FCVolumeSourceBuilder) SetTargetWWNs(value []string) FCVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.TargetWWNs = &value
	return b
}

// RemoveTargetWWNs removes the TargetWWNs field from the declarative configuration.
func (b FCVolumeSourceBuilder) RemoveTargetWWNs() FCVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.TargetWWNs = nil
	return b
}

// GetTargetWWNs gets the TargetWWNs field from the declarative configuration.
func (b FCVolumeSourceBuilder) GetTargetWWNs() (value []string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.TargetWWNs; v != nil {
		return *v, true
	}
	return value, false
}

// SetLun sets the Lun field in the declarative configuration to the given value.
func (b FCVolumeSourceBuilder) SetLun(value int32) FCVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.Lun = &value
	return b
}

// RemoveLun removes the Lun field from the declarative configuration.
func (b FCVolumeSourceBuilder) RemoveLun() FCVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.Lun = nil
	return b
}

// GetLun gets the Lun field from the declarative configuration.
func (b FCVolumeSourceBuilder) GetLun() (value int32, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Lun; v != nil {
		return *v, true
	}
	return value, false
}

// SetFSType sets the FSType field in the declarative configuration to the given value.
func (b FCVolumeSourceBuilder) SetFSType(value string) FCVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.FSType = &value
	return b
}

// RemoveFSType removes the FSType field from the declarative configuration.
func (b FCVolumeSourceBuilder) RemoveFSType() FCVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.FSType = nil
	return b
}

// GetFSType gets the FSType field from the declarative configuration.
func (b FCVolumeSourceBuilder) GetFSType() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.FSType; v != nil {
		return *v, true
	}
	return value, false
}

// SetReadOnly sets the ReadOnly field in the declarative configuration to the given value.
func (b FCVolumeSourceBuilder) SetReadOnly(value bool) FCVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.ReadOnly = &value
	return b
}

// RemoveReadOnly removes the ReadOnly field from the declarative configuration.
func (b FCVolumeSourceBuilder) RemoveReadOnly() FCVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.ReadOnly = nil
	return b
}

// GetReadOnly gets the ReadOnly field from the declarative configuration.
func (b FCVolumeSourceBuilder) GetReadOnly() (value bool, ok bool) {
	b.ensureInitialized()
	if v := b.fields.ReadOnly; v != nil {
		return *v, true
	}
	return value, false
}

// SetWWIDs sets the WWIDs field in the declarative configuration to the given value.
func (b FCVolumeSourceBuilder) SetWWIDs(value []string) FCVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.WWIDs = &value
	return b
}

// RemoveWWIDs removes the WWIDs field from the declarative configuration.
func (b FCVolumeSourceBuilder) RemoveWWIDs() FCVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.WWIDs = nil
	return b
}

// GetWWIDs gets the WWIDs field from the declarative configuration.
func (b FCVolumeSourceBuilder) GetWWIDs() (value []string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.WWIDs; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts FCVolumeSourceBuilder to unstructured.
func (b *FCVolumeSourceBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to FCVolumeSourceBuilder, replacing the contents
// of FCVolumeSourceBuilder.
func (b *FCVolumeSourceBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &fCVolumeSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals FCVolumeSourceBuilder to JSON.
func (b *FCVolumeSourceBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into FCVolumeSourceBuilder, replacing the contents of
// FCVolumeSourceBuilder.
func (b *FCVolumeSourceBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// FCVolumeSourceList represents a list of FCVolumeSourceBuilder.
// Provided as a convenience.
type FCVolumeSourceList []FCVolumeSourceBuilder

// FCVolumeSourceList represents a map of FCVolumeSourceBuilder.
// Provided as a convenience.
type FCVolumeSourceMap map[string]FCVolumeSourceBuilder

func (b *FCVolumeSourceBuilder) preMarshal() {
}
func (b *FCVolumeSourceBuilder) postUnmarshal() {
}
