/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ConfigMapEnvSourceBuilder represents an declarative configuration of the ConfigMapEnvSource type for use
// with apply.
type ConfigMapEnvSourceBuilder struct {
	localObjectReference LocalObjectReferenceBuilder // inlined type
	fields               *configMapEnvSourceFields
}

// configMapEnvSourceFields is used by ConfigMapEnvSourceBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in ConfigMapEnvSourceBuilder before marshalling, and
// are copied out to the builder type in ConfigMapEnvSourceBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type configMapEnvSourceFields struct {
	Name     *string `json:"name,omitempty"` // inlined ConfigMapEnvSourceBuilder.localObjectReference.Name field
	Optional *bool   `json:"optional,omitempty"`
}

func (b *ConfigMapEnvSourceBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &configMapEnvSourceFields{}
	}
}

// ConfigMapEnvSource constructs an declarative configuration of the ConfigMapEnvSource type for use with
// apply.
// Provided as a convenience.
func ConfigMapEnvSource() ConfigMapEnvSourceBuilder {
	return ConfigMapEnvSourceBuilder{fields: &configMapEnvSourceFields{}}
}

// SetLocalObjectReference sets the LocalObjectReference field in the declarative configuration to the given value.
func (b ConfigMapEnvSourceBuilder) SetLocalObjectReference(value LocalObjectReferenceBuilder) ConfigMapEnvSourceBuilder {
	b.ensureInitialized()
	b.localObjectReference = value
	return b
}

// RemoveLocalObjectReference removes the LocalObjectReference field from the declarative configuration.
func (b ConfigMapEnvSourceBuilder) RemoveLocalObjectReference() ConfigMapEnvSourceBuilder {
	b.ensureInitialized()
	b.localObjectReference = LocalObjectReferenceBuilder{}
	return b
}

// GetLocalObjectReference gets the LocalObjectReference field from the declarative configuration.
func (b ConfigMapEnvSourceBuilder) GetLocalObjectReference() (value LocalObjectReferenceBuilder, ok bool) {
	b.ensureInitialized()
	return b.localObjectReference, true
}

// SetOptional sets the Optional field in the declarative configuration to the given value.
func (b ConfigMapEnvSourceBuilder) SetOptional(value bool) ConfigMapEnvSourceBuilder {
	b.ensureInitialized()
	b.fields.Optional = &value
	return b
}

// RemoveOptional removes the Optional field from the declarative configuration.
func (b ConfigMapEnvSourceBuilder) RemoveOptional() ConfigMapEnvSourceBuilder {
	b.ensureInitialized()
	b.fields.Optional = nil
	return b
}

// GetOptional gets the Optional field from the declarative configuration.
func (b ConfigMapEnvSourceBuilder) GetOptional() (value bool, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Optional; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ConfigMapEnvSourceBuilder to unstructured.
func (b *ConfigMapEnvSourceBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ConfigMapEnvSourceBuilder, replacing the contents
// of ConfigMapEnvSourceBuilder.
func (b *ConfigMapEnvSourceBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &configMapEnvSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ConfigMapEnvSourceBuilder to JSON.
func (b *ConfigMapEnvSourceBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into ConfigMapEnvSourceBuilder, replacing the contents of
// ConfigMapEnvSourceBuilder.
func (b *ConfigMapEnvSourceBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ConfigMapEnvSourceList represents a list of ConfigMapEnvSourceBuilder.
// Provided as a convenience.
type ConfigMapEnvSourceList []ConfigMapEnvSourceBuilder

// ConfigMapEnvSourceList represents a map of ConfigMapEnvSourceBuilder.
// Provided as a convenience.
type ConfigMapEnvSourceMap map[string]ConfigMapEnvSourceBuilder

func (b *ConfigMapEnvSourceBuilder) preMarshal() {
	if v, ok := b.localObjectReference.GetName(); ok {
		b.fields.Name = &v
	}
}
func (b *ConfigMapEnvSourceBuilder) postUnmarshal() {
	if b.fields.Name != nil {
		b.localObjectReference.SetName(*b.fields.Name)
	}
}
