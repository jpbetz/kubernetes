/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ConfigMapVolumeSourceBuilder represents an declarative configuration of the ConfigMapVolumeSource type for use
// with apply.
type ConfigMapVolumeSourceBuilder struct {
	localObjectReference *LocalObjectReferenceBuilder // inlined type
	fields               configMapVolumeSourceFields
}

// configMapVolumeSourceFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in ConfigMapVolumeSourceBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type configMapVolumeSourceFields struct {
	Name        *string        `json:"name,omitempty"` // inlined ConfigMapVolumeSourceBuilder.localObjectReference.Name field
	Items       *KeyToPathList `json:"items,omitempty"`
	DefaultMode *int32         `json:"defaultMode,omitempty"`
	Optional    *bool          `json:"optional,omitempty"`
}

// ConfigMapVolumeSource constructs an declarative configuration of the ConfigMapVolumeSource type for use with
// apply.
func ConfigMapVolumeSource() *ConfigMapVolumeSourceBuilder {
	return &ConfigMapVolumeSourceBuilder{}
}

// SetLocalObjectReference sets the LocalObjectReference field in the declarative configuration to the given value.
func (b *ConfigMapVolumeSourceBuilder) SetLocalObjectReference(value *LocalObjectReferenceBuilder) *ConfigMapVolumeSourceBuilder {
	b.localObjectReference = value
	return b
}

// RemoveLocalObjectReference removes the LocalObjectReference field from the declarative configuration.
func (b *ConfigMapVolumeSourceBuilder) RemoveLocalObjectReference() *ConfigMapVolumeSourceBuilder {
	b.localObjectReference = nil
	return b
}

// GetLocalObjectReference gets the LocalObjectReference field from the declarative configuration.
func (b *ConfigMapVolumeSourceBuilder) GetLocalObjectReference() (value *LocalObjectReferenceBuilder, ok bool) {
	return b.localObjectReference, true
}

// SetItems sets the Items field in the declarative configuration to the given value.
func (b *ConfigMapVolumeSourceBuilder) SetItems(value KeyToPathList) *ConfigMapVolumeSourceBuilder {
	b.fields.Items = &value
	return b
}

// RemoveItems removes the Items field from the declarative configuration.
func (b *ConfigMapVolumeSourceBuilder) RemoveItems() *ConfigMapVolumeSourceBuilder {
	b.fields.Items = nil
	return b
}

// GetItems gets the Items field from the declarative configuration.
func (b *ConfigMapVolumeSourceBuilder) GetItems() (value KeyToPathList, ok bool) {
	if v := b.fields.Items; v != nil {
		return *v, true
	}
	return value, false
}

// SetDefaultMode sets the DefaultMode field in the declarative configuration to the given value.
func (b *ConfigMapVolumeSourceBuilder) SetDefaultMode(value int32) *ConfigMapVolumeSourceBuilder {
	b.fields.DefaultMode = &value
	return b
}

// RemoveDefaultMode removes the DefaultMode field from the declarative configuration.
func (b *ConfigMapVolumeSourceBuilder) RemoveDefaultMode() *ConfigMapVolumeSourceBuilder {
	b.fields.DefaultMode = nil
	return b
}

// GetDefaultMode gets the DefaultMode field from the declarative configuration.
func (b *ConfigMapVolumeSourceBuilder) GetDefaultMode() (value int32, ok bool) {
	if v := b.fields.DefaultMode; v != nil {
		return *v, true
	}
	return value, false
}

// SetOptional sets the Optional field in the declarative configuration to the given value.
func (b *ConfigMapVolumeSourceBuilder) SetOptional(value bool) *ConfigMapVolumeSourceBuilder {
	b.fields.Optional = &value
	return b
}

// RemoveOptional removes the Optional field from the declarative configuration.
func (b *ConfigMapVolumeSourceBuilder) RemoveOptional() *ConfigMapVolumeSourceBuilder {
	b.fields.Optional = nil
	return b
}

// GetOptional gets the Optional field from the declarative configuration.
func (b *ConfigMapVolumeSourceBuilder) GetOptional() (value bool, ok bool) {
	if v := b.fields.Optional; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ConfigMapVolumeSourceBuilder to unstructured.
func (b *ConfigMapVolumeSourceBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ConfigMapVolumeSourceBuilder, replacing the contents
// of ConfigMapVolumeSourceBuilder.
func (b *ConfigMapVolumeSourceBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &configMapVolumeSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ConfigMapVolumeSourceBuilder to JSON.
func (b *ConfigMapVolumeSourceBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into ConfigMapVolumeSourceBuilder, replacing the contents of
// ConfigMapVolumeSourceBuilder.
func (b *ConfigMapVolumeSourceBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ConfigMapVolumeSourceList represents a list of ConfigMapVolumeSourceBuilder.
type ConfigMapVolumeSourceList []*ConfigMapVolumeSourceBuilder

// ConfigMapVolumeSourceList represents a map of ConfigMapVolumeSourceBuilder.
type ConfigMapVolumeSourceMap map[string]ConfigMapVolumeSourceBuilder

func (b *ConfigMapVolumeSourceBuilder) preMarshal() {
	if b.localObjectReference != nil {
		if v, ok := b.localObjectReference.GetName(); ok {
			b.fields.Name = &v
		}
	}
}
func (b *ConfigMapVolumeSourceBuilder) postUnmarshal() {
	if b.localObjectReference == nil {
		b.localObjectReference = &LocalObjectReferenceBuilder{}
	}
	if b.fields.Name != nil {
		b.localObjectReference.SetName(*b.fields.Name)
	}
}
