/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// SecretVolumeSourceBuilder represents an declarative configuration of the SecretVolumeSource type for use
// with apply.
type SecretVolumeSourceBuilder struct {
	fields secretVolumeSourceFields
}

// secretVolumeSourceFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in SecretVolumeSourceBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type secretVolumeSourceFields struct {
	SecretName  *string        `json:"secretName,omitempty"`
	Items       *KeyToPathList `json:"items,omitempty"`
	DefaultMode *int32         `json:"defaultMode,omitempty"`
	Optional    *bool          `json:"optional,omitempty"`
}

// SecretVolumeSource constructs an declarative configuration of the SecretVolumeSource type for use with
// apply.
func SecretVolumeSource() *SecretVolumeSourceBuilder {
	return &SecretVolumeSourceBuilder{}
}

// SetSecretName sets the SecretName field in the declarative configuration to the given value.
func (b *SecretVolumeSourceBuilder) SetSecretName(value string) *SecretVolumeSourceBuilder {
	b.fields.SecretName = &value
	return b
}

// RemoveSecretName removes the SecretName field from the declarative configuration.
func (b *SecretVolumeSourceBuilder) RemoveSecretName() *SecretVolumeSourceBuilder {
	b.fields.SecretName = nil
	return b
}

// GetSecretName gets the SecretName field from the declarative configuration.
func (b *SecretVolumeSourceBuilder) GetSecretName() (value string, ok bool) {
	if v := b.fields.SecretName; v != nil {
		return *v, true
	}
	return value, false
}

// SetItems sets the Items field in the declarative configuration to the given value.
func (b *SecretVolumeSourceBuilder) SetItems(value KeyToPathList) *SecretVolumeSourceBuilder {
	b.fields.Items = &value
	return b
}

// RemoveItems removes the Items field from the declarative configuration.
func (b *SecretVolumeSourceBuilder) RemoveItems() *SecretVolumeSourceBuilder {
	b.fields.Items = nil
	return b
}

// GetItems gets the Items field from the declarative configuration.
func (b *SecretVolumeSourceBuilder) GetItems() (value KeyToPathList, ok bool) {
	if v := b.fields.Items; v != nil {
		return *v, true
	}
	return value, false
}

// SetDefaultMode sets the DefaultMode field in the declarative configuration to the given value.
func (b *SecretVolumeSourceBuilder) SetDefaultMode(value int32) *SecretVolumeSourceBuilder {
	b.fields.DefaultMode = &value
	return b
}

// RemoveDefaultMode removes the DefaultMode field from the declarative configuration.
func (b *SecretVolumeSourceBuilder) RemoveDefaultMode() *SecretVolumeSourceBuilder {
	b.fields.DefaultMode = nil
	return b
}

// GetDefaultMode gets the DefaultMode field from the declarative configuration.
func (b *SecretVolumeSourceBuilder) GetDefaultMode() (value int32, ok bool) {
	if v := b.fields.DefaultMode; v != nil {
		return *v, true
	}
	return value, false
}

// SetOptional sets the Optional field in the declarative configuration to the given value.
func (b *SecretVolumeSourceBuilder) SetOptional(value bool) *SecretVolumeSourceBuilder {
	b.fields.Optional = &value
	return b
}

// RemoveOptional removes the Optional field from the declarative configuration.
func (b *SecretVolumeSourceBuilder) RemoveOptional() *SecretVolumeSourceBuilder {
	b.fields.Optional = nil
	return b
}

// GetOptional gets the Optional field from the declarative configuration.
func (b *SecretVolumeSourceBuilder) GetOptional() (value bool, ok bool) {
	if v := b.fields.Optional; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts SecretVolumeSourceBuilder to unstructured.
func (b *SecretVolumeSourceBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to SecretVolumeSourceBuilder, replacing the contents
// of SecretVolumeSourceBuilder.
func (b *SecretVolumeSourceBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &secretVolumeSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals SecretVolumeSourceBuilder to JSON.
func (b *SecretVolumeSourceBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into SecretVolumeSourceBuilder, replacing the contents of
// SecretVolumeSourceBuilder.
func (b *SecretVolumeSourceBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// SecretVolumeSourceList represents a list of SecretVolumeSourceBuilder.
type SecretVolumeSourceList []*SecretVolumeSourceBuilder

// SecretVolumeSourceList represents a map of SecretVolumeSourceBuilder.
type SecretVolumeSourceMap map[string]SecretVolumeSourceBuilder

func (b *SecretVolumeSourceBuilder) preMarshal() {
}
func (b *SecretVolumeSourceBuilder) postUnmarshal() {
}
