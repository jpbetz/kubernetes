/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// EventSourceBuilder represents an declarative configuration of the EventSource type for use
// with apply.
type EventSourceBuilder struct {
	fields eventSourceFields
}

// eventSourceFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in EventSourceBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type eventSourceFields struct {
	Component *string `json:"component,omitempty"`
	Host      *string `json:"host,omitempty"`
}

// EventSource constructs an declarative configuration of the EventSource type for use with
// apply.
func EventSource() *EventSourceBuilder {
	return &EventSourceBuilder{}
}

// SetComponent sets the Component field in the declarative configuration to the given value.
func (b *EventSourceBuilder) SetComponent(value string) *EventSourceBuilder {
	b.fields.Component = &value
	return b
}

// RemoveComponent removes the Component field from the declarative configuration.
func (b *EventSourceBuilder) RemoveComponent() *EventSourceBuilder {
	b.fields.Component = nil
	return b
}

// GetComponent gets the Component field from the declarative configuration.
func (b *EventSourceBuilder) GetComponent() (value string, ok bool) {
	if v := b.fields.Component; v != nil {
		return *v, true
	}
	return value, false
}

// SetHost sets the Host field in the declarative configuration to the given value.
func (b *EventSourceBuilder) SetHost(value string) *EventSourceBuilder {
	b.fields.Host = &value
	return b
}

// RemoveHost removes the Host field from the declarative configuration.
func (b *EventSourceBuilder) RemoveHost() *EventSourceBuilder {
	b.fields.Host = nil
	return b
}

// GetHost gets the Host field from the declarative configuration.
func (b *EventSourceBuilder) GetHost() (value string, ok bool) {
	if v := b.fields.Host; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts EventSourceBuilder to unstructured.
func (b *EventSourceBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to EventSourceBuilder, replacing the contents
// of EventSourceBuilder.
func (b *EventSourceBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &eventSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals EventSourceBuilder to JSON.
func (b *EventSourceBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into EventSourceBuilder, replacing the contents of
// EventSourceBuilder.
func (b *EventSourceBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// EventSourceList represents a list of EventSourceBuilder.
type EventSourceList []*EventSourceBuilder

// EventSourceList represents a map of EventSourceBuilder.
type EventSourceMap map[string]EventSourceBuilder

func (b *EventSourceBuilder) preMarshal() {
}
func (b *EventSourceBuilder) postUnmarshal() {
}
