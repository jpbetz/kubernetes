/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ContainerStateWaitingBuilder represents an declarative configuration of the ContainerStateWaiting type for use
// with apply.
type ContainerStateWaitingBuilder struct {
	fields *containerStateWaitingFields
}

// containerStateWaitingFields is used by ContainerStateWaitingBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in ContainerStateWaitingBuilder before marshalling, and
// are copied out to the builder type in ContainerStateWaitingBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type containerStateWaitingFields struct {
	Reason  *string `json:"reason,omitempty"`
	Message *string `json:"message,omitempty"`
}

func (b *ContainerStateWaitingBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &containerStateWaitingFields{}
	}
}

// ContainerStateWaiting constructs an declarative configuration of the ContainerStateWaiting type for use with
// apply.
// Provided as a convenience.
func ContainerStateWaiting() ContainerStateWaitingBuilder {
	return ContainerStateWaitingBuilder{fields: &containerStateWaitingFields{}}
}

// SetReason sets the Reason field in the declarative configuration to the given value.
func (b ContainerStateWaitingBuilder) SetReason(value string) ContainerStateWaitingBuilder {
	b.ensureInitialized()
	b.fields.Reason = &value
	return b
}

// RemoveReason removes the Reason field from the declarative configuration.
func (b ContainerStateWaitingBuilder) RemoveReason() ContainerStateWaitingBuilder {
	b.ensureInitialized()
	b.fields.Reason = nil
	return b
}

// GetReason gets the Reason field from the declarative configuration.
func (b ContainerStateWaitingBuilder) GetReason() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Reason; v != nil {
		return *v, true
	}
	return value, false
}

// SetMessage sets the Message field in the declarative configuration to the given value.
func (b ContainerStateWaitingBuilder) SetMessage(value string) ContainerStateWaitingBuilder {
	b.ensureInitialized()
	b.fields.Message = &value
	return b
}

// RemoveMessage removes the Message field from the declarative configuration.
func (b ContainerStateWaitingBuilder) RemoveMessage() ContainerStateWaitingBuilder {
	b.ensureInitialized()
	b.fields.Message = nil
	return b
}

// GetMessage gets the Message field from the declarative configuration.
func (b ContainerStateWaitingBuilder) GetMessage() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Message; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ContainerStateWaitingBuilder to unstructured.
func (b *ContainerStateWaitingBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ContainerStateWaitingBuilder, replacing the contents
// of ContainerStateWaitingBuilder.
func (b *ContainerStateWaitingBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &containerStateWaitingFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ContainerStateWaitingBuilder to JSON.
func (b *ContainerStateWaitingBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into ContainerStateWaitingBuilder, replacing the contents of
// ContainerStateWaitingBuilder.
func (b *ContainerStateWaitingBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ContainerStateWaitingList represents a list of ContainerStateWaitingBuilder.
// Provided as a convenience.
type ContainerStateWaitingList []ContainerStateWaitingBuilder

// ContainerStateWaitingList represents a map of ContainerStateWaitingBuilder.
// Provided as a convenience.
type ContainerStateWaitingMap map[string]ContainerStateWaitingBuilder

func (b *ContainerStateWaitingBuilder) preMarshal() {
}
func (b *ContainerStateWaitingBuilder) postUnmarshal() {
}
