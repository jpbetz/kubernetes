/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// TopologySelectorTermBuilder represents an declarative configuration of the TopologySelectorTerm type for use
// with apply.
type TopologySelectorTermBuilder struct {
	fields topologySelectorTermFields
}

// topologySelectorTermFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in TopologySelectorTermBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type topologySelectorTermFields struct {
	MatchLabelExpressions *TopologySelectorLabelRequirementList `json:"matchLabelExpressions,omitempty"`
}

// TopologySelectorTerm constructs an declarative configuration of the TopologySelectorTerm type for use with
// apply.
func TopologySelectorTerm() *TopologySelectorTermBuilder {
	return &TopologySelectorTermBuilder{}
}

// SetMatchLabelExpressions sets the MatchLabelExpressions field in the declarative configuration to the given value.
func (b *TopologySelectorTermBuilder) SetMatchLabelExpressions(value TopologySelectorLabelRequirementList) *TopologySelectorTermBuilder {
	b.fields.MatchLabelExpressions = &value
	return b
}

// RemoveMatchLabelExpressions removes the MatchLabelExpressions field from the declarative configuration.
func (b *TopologySelectorTermBuilder) RemoveMatchLabelExpressions() *TopologySelectorTermBuilder {
	b.fields.MatchLabelExpressions = nil
	return b
}

// GetMatchLabelExpressions gets the MatchLabelExpressions field from the declarative configuration.
func (b *TopologySelectorTermBuilder) GetMatchLabelExpressions() (value TopologySelectorLabelRequirementList, ok bool) {
	if v := b.fields.MatchLabelExpressions; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts TopologySelectorTermBuilder to unstructured.
func (b *TopologySelectorTermBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to TopologySelectorTermBuilder, replacing the contents
// of TopologySelectorTermBuilder.
func (b *TopologySelectorTermBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &topologySelectorTermFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals TopologySelectorTermBuilder to JSON.
func (b *TopologySelectorTermBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into TopologySelectorTermBuilder, replacing the contents of
// TopologySelectorTermBuilder.
func (b *TopologySelectorTermBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// TopologySelectorTermList represents a list of TopologySelectorTermBuilder.
type TopologySelectorTermList []*TopologySelectorTermBuilder

// TopologySelectorTermList represents a map of TopologySelectorTermBuilder.
type TopologySelectorTermMap map[string]TopologySelectorTermBuilder

func (b *TopologySelectorTermBuilder) preMarshal() {
}
func (b *TopologySelectorTermBuilder) postUnmarshal() {
}
