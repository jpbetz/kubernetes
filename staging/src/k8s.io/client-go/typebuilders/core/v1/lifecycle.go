/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// LifecycleBuilder represents an declarative configuration of the Lifecycle type for use
// with apply.
type LifecycleBuilder struct {
	fields lifecycleFields
}

// lifecycleFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in LifecycleBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type lifecycleFields struct {
	PostStart *HandlerBuilder `json:"postStart,omitempty"`
	PreStop   *HandlerBuilder `json:"preStop,omitempty"`
}

// Lifecycle constructs an declarative configuration of the Lifecycle type for use with
// apply.
func Lifecycle() *LifecycleBuilder {
	return &LifecycleBuilder{}
}

// SetPostStart sets the PostStart field in the declarative configuration to the given value.
func (b *LifecycleBuilder) SetPostStart(value *HandlerBuilder) *LifecycleBuilder {
	b.fields.PostStart = value
	return b
}

// RemovePostStart removes the PostStart field from the declarative configuration.
func (b *LifecycleBuilder) RemovePostStart() *LifecycleBuilder {
	b.fields.PostStart = nil
	return b
}

// GetPostStart gets the PostStart field from the declarative configuration.
func (b *LifecycleBuilder) GetPostStart() (value *HandlerBuilder, ok bool) {
	return b.fields.PostStart, b.fields.PostStart != nil
}

// SetPreStop sets the PreStop field in the declarative configuration to the given value.
func (b *LifecycleBuilder) SetPreStop(value *HandlerBuilder) *LifecycleBuilder {
	b.fields.PreStop = value
	return b
}

// RemovePreStop removes the PreStop field from the declarative configuration.
func (b *LifecycleBuilder) RemovePreStop() *LifecycleBuilder {
	b.fields.PreStop = nil
	return b
}

// GetPreStop gets the PreStop field from the declarative configuration.
func (b *LifecycleBuilder) GetPreStop() (value *HandlerBuilder, ok bool) {
	return b.fields.PreStop, b.fields.PreStop != nil
}

// ToUnstructured converts LifecycleBuilder to unstructured.
func (b *LifecycleBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to LifecycleBuilder, replacing the contents
// of LifecycleBuilder.
func (b *LifecycleBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &lifecycleFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals LifecycleBuilder to JSON.
func (b *LifecycleBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into LifecycleBuilder, replacing the contents of
// LifecycleBuilder.
func (b *LifecycleBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// LifecycleList represents a list of LifecycleBuilder.
type LifecycleList []*LifecycleBuilder

// LifecycleList represents a map of LifecycleBuilder.
type LifecycleMap map[string]LifecycleBuilder

func (b *LifecycleBuilder) preMarshal() {
}
func (b *LifecycleBuilder) postUnmarshal() {
}
