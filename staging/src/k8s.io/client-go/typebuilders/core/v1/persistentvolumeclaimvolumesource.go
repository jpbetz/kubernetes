/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// PersistentVolumeClaimVolumeSourceBuilder represents an declarative configuration of the PersistentVolumeClaimVolumeSource type for use
// with apply.
type PersistentVolumeClaimVolumeSourceBuilder struct {
	fields persistentVolumeClaimVolumeSourceFields
}

// persistentVolumeClaimVolumeSourceFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in PersistentVolumeClaimVolumeSourceBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type persistentVolumeClaimVolumeSourceFields struct {
	ClaimName *string `json:"claimName,omitempty"`
	ReadOnly  *bool   `json:"readOnly,omitempty"`
}

// PersistentVolumeClaimVolumeSource constructs an declarative configuration of the PersistentVolumeClaimVolumeSource type for use with
// apply.
func PersistentVolumeClaimVolumeSource() *PersistentVolumeClaimVolumeSourceBuilder {
	return &PersistentVolumeClaimVolumeSourceBuilder{}
}

// SetClaimName sets the ClaimName field in the declarative configuration to the given value.
func (b *PersistentVolumeClaimVolumeSourceBuilder) SetClaimName(value string) *PersistentVolumeClaimVolumeSourceBuilder {
	b.fields.ClaimName = &value
	return b
}

// RemoveClaimName removes the ClaimName field from the declarative configuration.
func (b *PersistentVolumeClaimVolumeSourceBuilder) RemoveClaimName() *PersistentVolumeClaimVolumeSourceBuilder {
	b.fields.ClaimName = nil
	return b
}

// GetClaimName gets the ClaimName field from the declarative configuration.
func (b *PersistentVolumeClaimVolumeSourceBuilder) GetClaimName() (value string, ok bool) {
	if v := b.fields.ClaimName; v != nil {
		return *v, true
	}
	return value, false
}

// SetReadOnly sets the ReadOnly field in the declarative configuration to the given value.
func (b *PersistentVolumeClaimVolumeSourceBuilder) SetReadOnly(value bool) *PersistentVolumeClaimVolumeSourceBuilder {
	b.fields.ReadOnly = &value
	return b
}

// RemoveReadOnly removes the ReadOnly field from the declarative configuration.
func (b *PersistentVolumeClaimVolumeSourceBuilder) RemoveReadOnly() *PersistentVolumeClaimVolumeSourceBuilder {
	b.fields.ReadOnly = nil
	return b
}

// GetReadOnly gets the ReadOnly field from the declarative configuration.
func (b *PersistentVolumeClaimVolumeSourceBuilder) GetReadOnly() (value bool, ok bool) {
	if v := b.fields.ReadOnly; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts PersistentVolumeClaimVolumeSourceBuilder to unstructured.
func (b *PersistentVolumeClaimVolumeSourceBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to PersistentVolumeClaimVolumeSourceBuilder, replacing the contents
// of PersistentVolumeClaimVolumeSourceBuilder.
func (b *PersistentVolumeClaimVolumeSourceBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &persistentVolumeClaimVolumeSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals PersistentVolumeClaimVolumeSourceBuilder to JSON.
func (b *PersistentVolumeClaimVolumeSourceBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into PersistentVolumeClaimVolumeSourceBuilder, replacing the contents of
// PersistentVolumeClaimVolumeSourceBuilder.
func (b *PersistentVolumeClaimVolumeSourceBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// PersistentVolumeClaimVolumeSourceList represents a list of PersistentVolumeClaimVolumeSourceBuilder.
type PersistentVolumeClaimVolumeSourceList []*PersistentVolumeClaimVolumeSourceBuilder

// PersistentVolumeClaimVolumeSourceList represents a map of PersistentVolumeClaimVolumeSourceBuilder.
type PersistentVolumeClaimVolumeSourceMap map[string]PersistentVolumeClaimVolumeSourceBuilder

func (b *PersistentVolumeClaimVolumeSourceBuilder) preMarshal() {
}
func (b *PersistentVolumeClaimVolumeSourceBuilder) postUnmarshal() {
}
