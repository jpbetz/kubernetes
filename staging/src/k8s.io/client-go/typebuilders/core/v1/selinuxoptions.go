/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// SELinuxOptionsBuilder represents an declarative configuration of the SELinuxOptions type for use
// with apply.
type SELinuxOptionsBuilder struct {
	fields sELinuxOptionsFields
}

// sELinuxOptionsFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in SELinuxOptionsBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type sELinuxOptionsFields struct {
	User  *string `json:"user,omitempty"`
	Role  *string `json:"role,omitempty"`
	Type  *string `json:"type,omitempty"`
	Level *string `json:"level,omitempty"`
}

// SELinuxOptions constructs an declarative configuration of the SELinuxOptions type for use with
// apply.
func SELinuxOptions() *SELinuxOptionsBuilder {
	return &SELinuxOptionsBuilder{}
}

// SetUser sets the User field in the declarative configuration to the given value.
func (b *SELinuxOptionsBuilder) SetUser(value string) *SELinuxOptionsBuilder {
	b.fields.User = &value
	return b
}

// RemoveUser removes the User field from the declarative configuration.
func (b *SELinuxOptionsBuilder) RemoveUser() *SELinuxOptionsBuilder {
	b.fields.User = nil
	return b
}

// GetUser gets the User field from the declarative configuration.
func (b *SELinuxOptionsBuilder) GetUser() (value string, ok bool) {
	if v := b.fields.User; v != nil {
		return *v, true
	}
	return value, false
}

// SetRole sets the Role field in the declarative configuration to the given value.
func (b *SELinuxOptionsBuilder) SetRole(value string) *SELinuxOptionsBuilder {
	b.fields.Role = &value
	return b
}

// RemoveRole removes the Role field from the declarative configuration.
func (b *SELinuxOptionsBuilder) RemoveRole() *SELinuxOptionsBuilder {
	b.fields.Role = nil
	return b
}

// GetRole gets the Role field from the declarative configuration.
func (b *SELinuxOptionsBuilder) GetRole() (value string, ok bool) {
	if v := b.fields.Role; v != nil {
		return *v, true
	}
	return value, false
}

// SetType sets the Type field in the declarative configuration to the given value.
func (b *SELinuxOptionsBuilder) SetType(value string) *SELinuxOptionsBuilder {
	b.fields.Type = &value
	return b
}

// RemoveType removes the Type field from the declarative configuration.
func (b *SELinuxOptionsBuilder) RemoveType() *SELinuxOptionsBuilder {
	b.fields.Type = nil
	return b
}

// GetType gets the Type field from the declarative configuration.
func (b *SELinuxOptionsBuilder) GetType() (value string, ok bool) {
	if v := b.fields.Type; v != nil {
		return *v, true
	}
	return value, false
}

// SetLevel sets the Level field in the declarative configuration to the given value.
func (b *SELinuxOptionsBuilder) SetLevel(value string) *SELinuxOptionsBuilder {
	b.fields.Level = &value
	return b
}

// RemoveLevel removes the Level field from the declarative configuration.
func (b *SELinuxOptionsBuilder) RemoveLevel() *SELinuxOptionsBuilder {
	b.fields.Level = nil
	return b
}

// GetLevel gets the Level field from the declarative configuration.
func (b *SELinuxOptionsBuilder) GetLevel() (value string, ok bool) {
	if v := b.fields.Level; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts SELinuxOptionsBuilder to unstructured.
func (b *SELinuxOptionsBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to SELinuxOptionsBuilder, replacing the contents
// of SELinuxOptionsBuilder.
func (b *SELinuxOptionsBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &sELinuxOptionsFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals SELinuxOptionsBuilder to JSON.
func (b *SELinuxOptionsBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into SELinuxOptionsBuilder, replacing the contents of
// SELinuxOptionsBuilder.
func (b *SELinuxOptionsBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// SELinuxOptionsList represents a list of SELinuxOptionsBuilder.
type SELinuxOptionsList []*SELinuxOptionsBuilder

// SELinuxOptionsList represents a map of SELinuxOptionsBuilder.
type SELinuxOptionsMap map[string]SELinuxOptionsBuilder

func (b *SELinuxOptionsBuilder) preMarshal() {
}
func (b *SELinuxOptionsBuilder) postUnmarshal() {
}
