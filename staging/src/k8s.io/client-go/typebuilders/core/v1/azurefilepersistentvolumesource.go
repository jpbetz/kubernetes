/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// AzureFilePersistentVolumeSourceBuilder represents an declarative configuration of the AzureFilePersistentVolumeSource type for use
// with apply.
type AzureFilePersistentVolumeSourceBuilder struct {
	fields azureFilePersistentVolumeSourceFields
}

// azureFilePersistentVolumeSourceFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in AzureFilePersistentVolumeSourceBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type azureFilePersistentVolumeSourceFields struct {
	SecretName      *string `json:"secretName,omitempty"`
	ShareName       *string `json:"shareName,omitempty"`
	ReadOnly        *bool   `json:"readOnly,omitempty"`
	SecretNamespace *string `json:"secretNamespace,omitempty"`
}

// AzureFilePersistentVolumeSource constructs an declarative configuration of the AzureFilePersistentVolumeSource type for use with
// apply.
func AzureFilePersistentVolumeSource() *AzureFilePersistentVolumeSourceBuilder {
	return &AzureFilePersistentVolumeSourceBuilder{}
}

// SetSecretName sets the SecretName field in the declarative configuration to the given value.
func (b *AzureFilePersistentVolumeSourceBuilder) SetSecretName(value string) *AzureFilePersistentVolumeSourceBuilder {
	b.fields.SecretName = &value
	return b
}

// RemoveSecretName removes the SecretName field from the declarative configuration.
func (b *AzureFilePersistentVolumeSourceBuilder) RemoveSecretName() *AzureFilePersistentVolumeSourceBuilder {
	b.fields.SecretName = nil
	return b
}

// GetSecretName gets the SecretName field from the declarative configuration.
func (b *AzureFilePersistentVolumeSourceBuilder) GetSecretName() (value string, ok bool) {
	if v := b.fields.SecretName; v != nil {
		return *v, true
	}
	return value, false
}

// SetShareName sets the ShareName field in the declarative configuration to the given value.
func (b *AzureFilePersistentVolumeSourceBuilder) SetShareName(value string) *AzureFilePersistentVolumeSourceBuilder {
	b.fields.ShareName = &value
	return b
}

// RemoveShareName removes the ShareName field from the declarative configuration.
func (b *AzureFilePersistentVolumeSourceBuilder) RemoveShareName() *AzureFilePersistentVolumeSourceBuilder {
	b.fields.ShareName = nil
	return b
}

// GetShareName gets the ShareName field from the declarative configuration.
func (b *AzureFilePersistentVolumeSourceBuilder) GetShareName() (value string, ok bool) {
	if v := b.fields.ShareName; v != nil {
		return *v, true
	}
	return value, false
}

// SetReadOnly sets the ReadOnly field in the declarative configuration to the given value.
func (b *AzureFilePersistentVolumeSourceBuilder) SetReadOnly(value bool) *AzureFilePersistentVolumeSourceBuilder {
	b.fields.ReadOnly = &value
	return b
}

// RemoveReadOnly removes the ReadOnly field from the declarative configuration.
func (b *AzureFilePersistentVolumeSourceBuilder) RemoveReadOnly() *AzureFilePersistentVolumeSourceBuilder {
	b.fields.ReadOnly = nil
	return b
}

// GetReadOnly gets the ReadOnly field from the declarative configuration.
func (b *AzureFilePersistentVolumeSourceBuilder) GetReadOnly() (value bool, ok bool) {
	if v := b.fields.ReadOnly; v != nil {
		return *v, true
	}
	return value, false
}

// SetSecretNamespace sets the SecretNamespace field in the declarative configuration to the given value.
func (b *AzureFilePersistentVolumeSourceBuilder) SetSecretNamespace(value string) *AzureFilePersistentVolumeSourceBuilder {
	b.fields.SecretNamespace = &value
	return b
}

// RemoveSecretNamespace removes the SecretNamespace field from the declarative configuration.
func (b *AzureFilePersistentVolumeSourceBuilder) RemoveSecretNamespace() *AzureFilePersistentVolumeSourceBuilder {
	b.fields.SecretNamespace = nil
	return b
}

// GetSecretNamespace gets the SecretNamespace field from the declarative configuration.
func (b *AzureFilePersistentVolumeSourceBuilder) GetSecretNamespace() (value string, ok bool) {
	if v := b.fields.SecretNamespace; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts AzureFilePersistentVolumeSourceBuilder to unstructured.
func (b *AzureFilePersistentVolumeSourceBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to AzureFilePersistentVolumeSourceBuilder, replacing the contents
// of AzureFilePersistentVolumeSourceBuilder.
func (b *AzureFilePersistentVolumeSourceBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &azureFilePersistentVolumeSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals AzureFilePersistentVolumeSourceBuilder to JSON.
func (b *AzureFilePersistentVolumeSourceBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into AzureFilePersistentVolumeSourceBuilder, replacing the contents of
// AzureFilePersistentVolumeSourceBuilder.
func (b *AzureFilePersistentVolumeSourceBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// AzureFilePersistentVolumeSourceList represents a list of AzureFilePersistentVolumeSourceBuilder.
type AzureFilePersistentVolumeSourceList []*AzureFilePersistentVolumeSourceBuilder

// AzureFilePersistentVolumeSourceList represents a map of AzureFilePersistentVolumeSourceBuilder.
type AzureFilePersistentVolumeSourceMap map[string]AzureFilePersistentVolumeSourceBuilder

func (b *AzureFilePersistentVolumeSourceBuilder) preMarshal() {
}
func (b *AzureFilePersistentVolumeSourceBuilder) postUnmarshal() {
}
