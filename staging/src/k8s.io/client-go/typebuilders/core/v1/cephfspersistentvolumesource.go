/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// CephFSPersistentVolumeSourceBuilder represents an declarative configuration of the CephFSPersistentVolumeSource type for use
// with apply.
type CephFSPersistentVolumeSourceBuilder struct {
	fields cephFSPersistentVolumeSourceFields
}

// cephFSPersistentVolumeSourceFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in CephFSPersistentVolumeSourceBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type cephFSPersistentVolumeSourceFields struct {
	Monitors   *[]string               `json:"monitors,omitempty"`
	Path       *string                 `json:"path,omitempty"`
	User       *string                 `json:"user,omitempty"`
	SecretFile *string                 `json:"secretFile,omitempty"`
	SecretRef  *SecretReferenceBuilder `json:"secretRef,omitempty"`
	ReadOnly   *bool                   `json:"readOnly,omitempty"`
}

// CephFSPersistentVolumeSource constructs an declarative configuration of the CephFSPersistentVolumeSource type for use with
// apply.
func CephFSPersistentVolumeSource() *CephFSPersistentVolumeSourceBuilder {
	return &CephFSPersistentVolumeSourceBuilder{}
}

// SetMonitors sets the Monitors field in the declarative configuration to the given value.
func (b *CephFSPersistentVolumeSourceBuilder) SetMonitors(value []string) *CephFSPersistentVolumeSourceBuilder {
	b.fields.Monitors = &value
	return b
}

// RemoveMonitors removes the Monitors field from the declarative configuration.
func (b *CephFSPersistentVolumeSourceBuilder) RemoveMonitors() *CephFSPersistentVolumeSourceBuilder {
	b.fields.Monitors = nil
	return b
}

// GetMonitors gets the Monitors field from the declarative configuration.
func (b *CephFSPersistentVolumeSourceBuilder) GetMonitors() (value []string, ok bool) {
	if v := b.fields.Monitors; v != nil {
		return *v, true
	}
	return value, false
}

// SetPath sets the Path field in the declarative configuration to the given value.
func (b *CephFSPersistentVolumeSourceBuilder) SetPath(value string) *CephFSPersistentVolumeSourceBuilder {
	b.fields.Path = &value
	return b
}

// RemovePath removes the Path field from the declarative configuration.
func (b *CephFSPersistentVolumeSourceBuilder) RemovePath() *CephFSPersistentVolumeSourceBuilder {
	b.fields.Path = nil
	return b
}

// GetPath gets the Path field from the declarative configuration.
func (b *CephFSPersistentVolumeSourceBuilder) GetPath() (value string, ok bool) {
	if v := b.fields.Path; v != nil {
		return *v, true
	}
	return value, false
}

// SetUser sets the User field in the declarative configuration to the given value.
func (b *CephFSPersistentVolumeSourceBuilder) SetUser(value string) *CephFSPersistentVolumeSourceBuilder {
	b.fields.User = &value
	return b
}

// RemoveUser removes the User field from the declarative configuration.
func (b *CephFSPersistentVolumeSourceBuilder) RemoveUser() *CephFSPersistentVolumeSourceBuilder {
	b.fields.User = nil
	return b
}

// GetUser gets the User field from the declarative configuration.
func (b *CephFSPersistentVolumeSourceBuilder) GetUser() (value string, ok bool) {
	if v := b.fields.User; v != nil {
		return *v, true
	}
	return value, false
}

// SetSecretFile sets the SecretFile field in the declarative configuration to the given value.
func (b *CephFSPersistentVolumeSourceBuilder) SetSecretFile(value string) *CephFSPersistentVolumeSourceBuilder {
	b.fields.SecretFile = &value
	return b
}

// RemoveSecretFile removes the SecretFile field from the declarative configuration.
func (b *CephFSPersistentVolumeSourceBuilder) RemoveSecretFile() *CephFSPersistentVolumeSourceBuilder {
	b.fields.SecretFile = nil
	return b
}

// GetSecretFile gets the SecretFile field from the declarative configuration.
func (b *CephFSPersistentVolumeSourceBuilder) GetSecretFile() (value string, ok bool) {
	if v := b.fields.SecretFile; v != nil {
		return *v, true
	}
	return value, false
}

// SetSecretRef sets the SecretRef field in the declarative configuration to the given value.
func (b *CephFSPersistentVolumeSourceBuilder) SetSecretRef(value *SecretReferenceBuilder) *CephFSPersistentVolumeSourceBuilder {
	b.fields.SecretRef = value
	return b
}

// RemoveSecretRef removes the SecretRef field from the declarative configuration.
func (b *CephFSPersistentVolumeSourceBuilder) RemoveSecretRef() *CephFSPersistentVolumeSourceBuilder {
	b.fields.SecretRef = nil
	return b
}

// GetSecretRef gets the SecretRef field from the declarative configuration.
func (b *CephFSPersistentVolumeSourceBuilder) GetSecretRef() (value *SecretReferenceBuilder, ok bool) {
	return b.fields.SecretRef, b.fields.SecretRef != nil
}

// SetReadOnly sets the ReadOnly field in the declarative configuration to the given value.
func (b *CephFSPersistentVolumeSourceBuilder) SetReadOnly(value bool) *CephFSPersistentVolumeSourceBuilder {
	b.fields.ReadOnly = &value
	return b
}

// RemoveReadOnly removes the ReadOnly field from the declarative configuration.
func (b *CephFSPersistentVolumeSourceBuilder) RemoveReadOnly() *CephFSPersistentVolumeSourceBuilder {
	b.fields.ReadOnly = nil
	return b
}

// GetReadOnly gets the ReadOnly field from the declarative configuration.
func (b *CephFSPersistentVolumeSourceBuilder) GetReadOnly() (value bool, ok bool) {
	if v := b.fields.ReadOnly; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts CephFSPersistentVolumeSourceBuilder to unstructured.
func (b *CephFSPersistentVolumeSourceBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to CephFSPersistentVolumeSourceBuilder, replacing the contents
// of CephFSPersistentVolumeSourceBuilder.
func (b *CephFSPersistentVolumeSourceBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &cephFSPersistentVolumeSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals CephFSPersistentVolumeSourceBuilder to JSON.
func (b *CephFSPersistentVolumeSourceBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into CephFSPersistentVolumeSourceBuilder, replacing the contents of
// CephFSPersistentVolumeSourceBuilder.
func (b *CephFSPersistentVolumeSourceBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// CephFSPersistentVolumeSourceList represents a list of CephFSPersistentVolumeSourceBuilder.
type CephFSPersistentVolumeSourceList []*CephFSPersistentVolumeSourceBuilder

// CephFSPersistentVolumeSourceList represents a map of CephFSPersistentVolumeSourceBuilder.
type CephFSPersistentVolumeSourceMap map[string]CephFSPersistentVolumeSourceBuilder

func (b *CephFSPersistentVolumeSourceBuilder) preMarshal() {
}
func (b *CephFSPersistentVolumeSourceBuilder) postUnmarshal() {
}
