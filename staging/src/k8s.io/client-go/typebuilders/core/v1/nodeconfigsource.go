/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// NodeConfigSourceBuilder represents an declarative configuration of the NodeConfigSource type for use
// with apply.
type NodeConfigSourceBuilder struct {
	fields *nodeConfigSourceFields
}

// nodeConfigSourceFields is used by NodeConfigSourceBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in NodeConfigSourceBuilder before marshalling, and
// are copied out to the builder type in NodeConfigSourceBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type nodeConfigSourceFields struct {
	ConfigMap *ConfigMapNodeConfigSourceBuilder `json:"configMap,omitempty"`
}

func (b *NodeConfigSourceBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &nodeConfigSourceFields{}
	}
}

// NodeConfigSource constructs an declarative configuration of the NodeConfigSource type for use with
// apply.
// Provided as a convenience.
func NodeConfigSource() NodeConfigSourceBuilder {
	return NodeConfigSourceBuilder{fields: &nodeConfigSourceFields{}}
}

// SetConfigMap sets the ConfigMap field in the declarative configuration to the given value.
func (b NodeConfigSourceBuilder) SetConfigMap(value ConfigMapNodeConfigSourceBuilder) NodeConfigSourceBuilder {
	b.ensureInitialized()
	b.fields.ConfigMap = &value
	return b
}

// RemoveConfigMap removes the ConfigMap field from the declarative configuration.
func (b NodeConfigSourceBuilder) RemoveConfigMap() NodeConfigSourceBuilder {
	b.ensureInitialized()
	b.fields.ConfigMap = nil
	return b
}

// GetConfigMap gets the ConfigMap field from the declarative configuration.
func (b NodeConfigSourceBuilder) GetConfigMap() (value ConfigMapNodeConfigSourceBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.ConfigMap; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts NodeConfigSourceBuilder to unstructured.
func (b *NodeConfigSourceBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to NodeConfigSourceBuilder, replacing the contents
// of NodeConfigSourceBuilder.
func (b *NodeConfigSourceBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &nodeConfigSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals NodeConfigSourceBuilder to JSON.
func (b *NodeConfigSourceBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into NodeConfigSourceBuilder, replacing the contents of
// NodeConfigSourceBuilder.
func (b *NodeConfigSourceBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// NodeConfigSourceList represents a list of NodeConfigSourceBuilder.
// Provided as a convenience.
type NodeConfigSourceList []NodeConfigSourceBuilder

// NodeConfigSourceList represents a map of NodeConfigSourceBuilder.
// Provided as a convenience.
type NodeConfigSourceMap map[string]NodeConfigSourceBuilder

func (b *NodeConfigSourceBuilder) preMarshal() {
}
func (b *NodeConfigSourceBuilder) postUnmarshal() {
}
