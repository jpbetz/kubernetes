/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// SecretKeySelectorBuilder represents an declarative configuration of the SecretKeySelector type for use
// with apply.
type SecretKeySelectorBuilder struct {
	localObjectReference *LocalObjectReferenceBuilder // inlined type
	fields               secretKeySelectorFields
}

// secretKeySelectorFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in SecretKeySelectorBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type secretKeySelectorFields struct {
	Name     *string `json:"name,omitempty"` // inlined SecretKeySelectorBuilder.localObjectReference.Name field
	Key      *string `json:"key,omitempty"`
	Optional *bool   `json:"optional,omitempty"`
}

// SecretKeySelector constructs an declarative configuration of the SecretKeySelector type for use with
// apply.
func SecretKeySelector() *SecretKeySelectorBuilder {
	return &SecretKeySelectorBuilder{}
}

// SetLocalObjectReference sets the LocalObjectReference field in the declarative configuration to the given value.
func (b *SecretKeySelectorBuilder) SetLocalObjectReference(value *LocalObjectReferenceBuilder) *SecretKeySelectorBuilder {
	b.localObjectReference = value
	return b
}

// RemoveLocalObjectReference removes the LocalObjectReference field from the declarative configuration.
func (b *SecretKeySelectorBuilder) RemoveLocalObjectReference() *SecretKeySelectorBuilder {
	b.localObjectReference = nil
	return b
}

// GetLocalObjectReference gets the LocalObjectReference field from the declarative configuration.
func (b *SecretKeySelectorBuilder) GetLocalObjectReference() (value *LocalObjectReferenceBuilder, ok bool) {
	return b.localObjectReference, true
}

// SetKey sets the Key field in the declarative configuration to the given value.
func (b *SecretKeySelectorBuilder) SetKey(value string) *SecretKeySelectorBuilder {
	b.fields.Key = &value
	return b
}

// RemoveKey removes the Key field from the declarative configuration.
func (b *SecretKeySelectorBuilder) RemoveKey() *SecretKeySelectorBuilder {
	b.fields.Key = nil
	return b
}

// GetKey gets the Key field from the declarative configuration.
func (b *SecretKeySelectorBuilder) GetKey() (value string, ok bool) {
	if v := b.fields.Key; v != nil {
		return *v, true
	}
	return value, false
}

// SetOptional sets the Optional field in the declarative configuration to the given value.
func (b *SecretKeySelectorBuilder) SetOptional(value bool) *SecretKeySelectorBuilder {
	b.fields.Optional = &value
	return b
}

// RemoveOptional removes the Optional field from the declarative configuration.
func (b *SecretKeySelectorBuilder) RemoveOptional() *SecretKeySelectorBuilder {
	b.fields.Optional = nil
	return b
}

// GetOptional gets the Optional field from the declarative configuration.
func (b *SecretKeySelectorBuilder) GetOptional() (value bool, ok bool) {
	if v := b.fields.Optional; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts SecretKeySelectorBuilder to unstructured.
func (b *SecretKeySelectorBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to SecretKeySelectorBuilder, replacing the contents
// of SecretKeySelectorBuilder.
func (b *SecretKeySelectorBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &secretKeySelectorFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals SecretKeySelectorBuilder to JSON.
func (b *SecretKeySelectorBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into SecretKeySelectorBuilder, replacing the contents of
// SecretKeySelectorBuilder.
func (b *SecretKeySelectorBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// SecretKeySelectorList represents a list of SecretKeySelectorBuilder.
type SecretKeySelectorList []*SecretKeySelectorBuilder

// SecretKeySelectorList represents a map of SecretKeySelectorBuilder.
type SecretKeySelectorMap map[string]SecretKeySelectorBuilder

func (b *SecretKeySelectorBuilder) preMarshal() {
	if b.localObjectReference != nil {
		if v, ok := b.localObjectReference.GetName(); ok {
			b.fields.Name = &v
		}
	}
}
func (b *SecretKeySelectorBuilder) postUnmarshal() {
	if b.localObjectReference == nil {
		b.localObjectReference = &LocalObjectReferenceBuilder{}
	}
	if b.fields.Name != nil {
		b.localObjectReference.SetName(*b.fields.Name)
	}
}
