/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// NodeSelectorBuilder represents an declarative configuration of the NodeSelector type for use
// with apply.
type NodeSelectorBuilder struct {
	fields *nodeSelectorFields
}

// nodeSelectorFields is used by NodeSelectorBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in NodeSelectorBuilder before marshalling, and
// are copied out to the builder type in NodeSelectorBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type nodeSelectorFields struct {
	NodeSelectorTerms *NodeSelectorTermList `json:"nodeSelectorTerms,omitempty"`
}

func (b *NodeSelectorBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &nodeSelectorFields{}
	}
}

// NodeSelector constructs an declarative configuration of the NodeSelector type for use with
// apply.
// Provided as a convenience.
func NodeSelector() NodeSelectorBuilder {
	return NodeSelectorBuilder{fields: &nodeSelectorFields{}}
}

// SetNodeSelectorTerms sets the NodeSelectorTerms field in the declarative configuration to the given value.
func (b NodeSelectorBuilder) SetNodeSelectorTerms(value NodeSelectorTermList) NodeSelectorBuilder {
	b.ensureInitialized()
	b.fields.NodeSelectorTerms = &value
	return b
}

// RemoveNodeSelectorTerms removes the NodeSelectorTerms field from the declarative configuration.
func (b NodeSelectorBuilder) RemoveNodeSelectorTerms() NodeSelectorBuilder {
	b.ensureInitialized()
	b.fields.NodeSelectorTerms = nil
	return b
}

// GetNodeSelectorTerms gets the NodeSelectorTerms field from the declarative configuration.
func (b NodeSelectorBuilder) GetNodeSelectorTerms() (value NodeSelectorTermList, ok bool) {
	b.ensureInitialized()
	if v := b.fields.NodeSelectorTerms; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts NodeSelectorBuilder to unstructured.
func (b *NodeSelectorBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to NodeSelectorBuilder, replacing the contents
// of NodeSelectorBuilder.
func (b *NodeSelectorBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &nodeSelectorFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals NodeSelectorBuilder to JSON.
func (b *NodeSelectorBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into NodeSelectorBuilder, replacing the contents of
// NodeSelectorBuilder.
func (b *NodeSelectorBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// NodeSelectorList represents a list of NodeSelectorBuilder.
// Provided as a convenience.
type NodeSelectorList []NodeSelectorBuilder

// NodeSelectorList represents a map of NodeSelectorBuilder.
// Provided as a convenience.
type NodeSelectorMap map[string]NodeSelectorBuilder

func (b *NodeSelectorBuilder) preMarshal() {
}
func (b *NodeSelectorBuilder) postUnmarshal() {
}
