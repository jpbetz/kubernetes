/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	v1 "k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// PersistentVolumeClaimStatusBuilder represents an declarative configuration of the PersistentVolumeClaimStatus type for use
// with apply.
type PersistentVolumeClaimStatusBuilder struct {
	fields persistentVolumeClaimStatusFields
}

// persistentVolumeClaimStatusFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in PersistentVolumeClaimStatusBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type persistentVolumeClaimStatusFields struct {
	Phase       *v1.PersistentVolumeClaimPhase      `json:"phase,omitempty"`
	AccessModes *[]v1.PersistentVolumeAccessMode    `json:"accessModes,omitempty"`
	Capacity    *v1.ResourceList                    `json:"capacity,omitempty"`
	Conditions  *PersistentVolumeClaimConditionList `json:"conditions,omitempty"`
}

// PersistentVolumeClaimStatus constructs an declarative configuration of the PersistentVolumeClaimStatus type for use with
// apply.
func PersistentVolumeClaimStatus() *PersistentVolumeClaimStatusBuilder {
	return &PersistentVolumeClaimStatusBuilder{}
}

// SetPhase sets the Phase field in the declarative configuration to the given value.
func (b *PersistentVolumeClaimStatusBuilder) SetPhase(value v1.PersistentVolumeClaimPhase) *PersistentVolumeClaimStatusBuilder {
	b.fields.Phase = &value
	return b
}

// RemovePhase removes the Phase field from the declarative configuration.
func (b *PersistentVolumeClaimStatusBuilder) RemovePhase() *PersistentVolumeClaimStatusBuilder {
	b.fields.Phase = nil
	return b
}

// GetPhase gets the Phase field from the declarative configuration.
func (b *PersistentVolumeClaimStatusBuilder) GetPhase() (value v1.PersistentVolumeClaimPhase, ok bool) {
	if v := b.fields.Phase; v != nil {
		return *v, true
	}
	return value, false
}

// SetAccessModes sets the AccessModes field in the declarative configuration to the given value.
func (b *PersistentVolumeClaimStatusBuilder) SetAccessModes(value []v1.PersistentVolumeAccessMode) *PersistentVolumeClaimStatusBuilder {
	b.fields.AccessModes = &value
	return b
}

// RemoveAccessModes removes the AccessModes field from the declarative configuration.
func (b *PersistentVolumeClaimStatusBuilder) RemoveAccessModes() *PersistentVolumeClaimStatusBuilder {
	b.fields.AccessModes = nil
	return b
}

// GetAccessModes gets the AccessModes field from the declarative configuration.
func (b *PersistentVolumeClaimStatusBuilder) GetAccessModes() (value []v1.PersistentVolumeAccessMode, ok bool) {
	if v := b.fields.AccessModes; v != nil {
		return *v, true
	}
	return value, false
}

// SetCapacity sets the Capacity field in the declarative configuration to the given value.
func (b *PersistentVolumeClaimStatusBuilder) SetCapacity(value v1.ResourceList) *PersistentVolumeClaimStatusBuilder {
	b.fields.Capacity = &value
	return b
}

// RemoveCapacity removes the Capacity field from the declarative configuration.
func (b *PersistentVolumeClaimStatusBuilder) RemoveCapacity() *PersistentVolumeClaimStatusBuilder {
	b.fields.Capacity = nil
	return b
}

// GetCapacity gets the Capacity field from the declarative configuration.
func (b *PersistentVolumeClaimStatusBuilder) GetCapacity() (value v1.ResourceList, ok bool) {
	if v := b.fields.Capacity; v != nil {
		return *v, true
	}
	return value, false
}

// SetConditions sets the Conditions field in the declarative configuration to the given value.
func (b *PersistentVolumeClaimStatusBuilder) SetConditions(value PersistentVolumeClaimConditionList) *PersistentVolumeClaimStatusBuilder {
	b.fields.Conditions = &value
	return b
}

// RemoveConditions removes the Conditions field from the declarative configuration.
func (b *PersistentVolumeClaimStatusBuilder) RemoveConditions() *PersistentVolumeClaimStatusBuilder {
	b.fields.Conditions = nil
	return b
}

// GetConditions gets the Conditions field from the declarative configuration.
func (b *PersistentVolumeClaimStatusBuilder) GetConditions() (value PersistentVolumeClaimConditionList, ok bool) {
	if v := b.fields.Conditions; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts PersistentVolumeClaimStatusBuilder to unstructured.
func (b *PersistentVolumeClaimStatusBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to PersistentVolumeClaimStatusBuilder, replacing the contents
// of PersistentVolumeClaimStatusBuilder.
func (b *PersistentVolumeClaimStatusBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &persistentVolumeClaimStatusFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals PersistentVolumeClaimStatusBuilder to JSON.
func (b *PersistentVolumeClaimStatusBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into PersistentVolumeClaimStatusBuilder, replacing the contents of
// PersistentVolumeClaimStatusBuilder.
func (b *PersistentVolumeClaimStatusBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// PersistentVolumeClaimStatusList represents a list of PersistentVolumeClaimStatusBuilder.
type PersistentVolumeClaimStatusList []*PersistentVolumeClaimStatusBuilder

// PersistentVolumeClaimStatusList represents a map of PersistentVolumeClaimStatusBuilder.
type PersistentVolumeClaimStatusMap map[string]PersistentVolumeClaimStatusBuilder

func (b *PersistentVolumeClaimStatusBuilder) preMarshal() {
}
func (b *PersistentVolumeClaimStatusBuilder) postUnmarshal() {
}
