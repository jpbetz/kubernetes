/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/typebuilders/meta/v1"
)

// ComponentStatusBuilder represents an declarative configuration of the ComponentStatus type for use
// with apply.
type ComponentStatusBuilder struct {
	typeMeta *v1.TypeMetaBuilder // inlined type
	fields   componentStatusFields
}

// componentStatusFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in ComponentStatusBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type componentStatusFields struct {
	Kind       *string                 `json:"kind,omitempty"`       // inlined ComponentStatusBuilder.typeMeta.Kind field
	APIVersion *string                 `json:"apiVersion,omitempty"` // inlined ComponentStatusBuilder.typeMeta.APIVersion field
	ObjectMeta *v1.ObjectMetaBuilder   `json:"metadata,omitempty"`
	Conditions *ComponentConditionList `json:"conditions,omitempty"`
}

// ComponentStatus constructs an declarative configuration of the ComponentStatus type for use with
// apply.
func ComponentStatus() *ComponentStatusBuilder {
	return &ComponentStatusBuilder{}
}

// SetTypeMeta sets the TypeMeta field in the declarative configuration to the given value.
func (b *ComponentStatusBuilder) SetTypeMeta(value *v1.TypeMetaBuilder) *ComponentStatusBuilder {
	b.typeMeta = value
	return b
}

// RemoveTypeMeta removes the TypeMeta field from the declarative configuration.
func (b *ComponentStatusBuilder) RemoveTypeMeta() *ComponentStatusBuilder {
	b.typeMeta = nil
	return b
}

// GetTypeMeta gets the TypeMeta field from the declarative configuration.
func (b *ComponentStatusBuilder) GetTypeMeta() (value *v1.TypeMetaBuilder, ok bool) {
	return b.typeMeta, true
}

// SetObjectMeta sets the ObjectMeta field in the declarative configuration to the given value.
func (b *ComponentStatusBuilder) SetObjectMeta(value *v1.ObjectMetaBuilder) *ComponentStatusBuilder {
	b.fields.ObjectMeta = value
	return b
}

// RemoveObjectMeta removes the ObjectMeta field from the declarative configuration.
func (b *ComponentStatusBuilder) RemoveObjectMeta() *ComponentStatusBuilder {
	b.fields.ObjectMeta = nil
	return b
}

// GetObjectMeta gets the ObjectMeta field from the declarative configuration.
func (b *ComponentStatusBuilder) GetObjectMeta() (value *v1.ObjectMetaBuilder, ok bool) {
	return b.fields.ObjectMeta, b.fields.ObjectMeta != nil
}

// SetConditions sets the Conditions field in the declarative configuration to the given value.
func (b *ComponentStatusBuilder) SetConditions(value ComponentConditionList) *ComponentStatusBuilder {
	b.fields.Conditions = &value
	return b
}

// RemoveConditions removes the Conditions field from the declarative configuration.
func (b *ComponentStatusBuilder) RemoveConditions() *ComponentStatusBuilder {
	b.fields.Conditions = nil
	return b
}

// GetConditions gets the Conditions field from the declarative configuration.
func (b *ComponentStatusBuilder) GetConditions() (value ComponentConditionList, ok bool) {
	if v := b.fields.Conditions; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ComponentStatusBuilder to unstructured.
func (b *ComponentStatusBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ComponentStatusBuilder, replacing the contents
// of ComponentStatusBuilder.
func (b *ComponentStatusBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &componentStatusFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ComponentStatusBuilder to JSON.
func (b *ComponentStatusBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into ComponentStatusBuilder, replacing the contents of
// ComponentStatusBuilder.
func (b *ComponentStatusBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ComponentStatusList represents a list of ComponentStatusBuilder.
type ComponentStatusList []*ComponentStatusBuilder

// ComponentStatusList represents a map of ComponentStatusBuilder.
type ComponentStatusMap map[string]ComponentStatusBuilder

func (b *ComponentStatusBuilder) preMarshal() {
	if b.typeMeta != nil {
		if v, ok := b.typeMeta.GetKind(); ok {
			b.fields.Kind = &v
		}
		if v, ok := b.typeMeta.GetAPIVersion(); ok {
			b.fields.APIVersion = &v
		}
	}
}
func (b *ComponentStatusBuilder) postUnmarshal() {
	if b.typeMeta == nil {
		b.typeMeta = &v1.TypeMetaBuilder{}
	}
	if b.fields.Kind != nil {
		b.typeMeta.SetKind(*b.fields.Kind)
	}
	if b.fields.APIVersion != nil {
		b.typeMeta.SetAPIVersion(*b.fields.APIVersion)
	}
}
