/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// AffinityBuilder represents an declarative configuration of the Affinity type for use
// with apply.
type AffinityBuilder struct {
	fields *affinityFields
}

// affinityFields is used by AffinityBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in AffinityBuilder before marshalling, and
// are copied out to the builder type in AffinityBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type affinityFields struct {
	NodeAffinity    *NodeAffinityBuilder    `json:"nodeAffinity,omitempty"`
	PodAffinity     *PodAffinityBuilder     `json:"podAffinity,omitempty"`
	PodAntiAffinity *PodAntiAffinityBuilder `json:"podAntiAffinity,omitempty"`
}

func (b *AffinityBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &affinityFields{}
	}
}

// Affinity constructs an declarative configuration of the Affinity type for use with
// apply.
// Provided as a convenience.
func Affinity() AffinityBuilder {
	return AffinityBuilder{fields: &affinityFields{}}
}

// SetNodeAffinity sets the NodeAffinity field in the declarative configuration to the given value.
func (b AffinityBuilder) SetNodeAffinity(value NodeAffinityBuilder) AffinityBuilder {
	b.ensureInitialized()
	b.fields.NodeAffinity = &value
	return b
}

// RemoveNodeAffinity removes the NodeAffinity field from the declarative configuration.
func (b AffinityBuilder) RemoveNodeAffinity() AffinityBuilder {
	b.ensureInitialized()
	b.fields.NodeAffinity = nil
	return b
}

// GetNodeAffinity gets the NodeAffinity field from the declarative configuration.
func (b AffinityBuilder) GetNodeAffinity() (value NodeAffinityBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.NodeAffinity; v != nil {
		return *v, true
	}
	return value, false
}

// SetPodAffinity sets the PodAffinity field in the declarative configuration to the given value.
func (b AffinityBuilder) SetPodAffinity(value PodAffinityBuilder) AffinityBuilder {
	b.ensureInitialized()
	b.fields.PodAffinity = &value
	return b
}

// RemovePodAffinity removes the PodAffinity field from the declarative configuration.
func (b AffinityBuilder) RemovePodAffinity() AffinityBuilder {
	b.ensureInitialized()
	b.fields.PodAffinity = nil
	return b
}

// GetPodAffinity gets the PodAffinity field from the declarative configuration.
func (b AffinityBuilder) GetPodAffinity() (value PodAffinityBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.PodAffinity; v != nil {
		return *v, true
	}
	return value, false
}

// SetPodAntiAffinity sets the PodAntiAffinity field in the declarative configuration to the given value.
func (b AffinityBuilder) SetPodAntiAffinity(value PodAntiAffinityBuilder) AffinityBuilder {
	b.ensureInitialized()
	b.fields.PodAntiAffinity = &value
	return b
}

// RemovePodAntiAffinity removes the PodAntiAffinity field from the declarative configuration.
func (b AffinityBuilder) RemovePodAntiAffinity() AffinityBuilder {
	b.ensureInitialized()
	b.fields.PodAntiAffinity = nil
	return b
}

// GetPodAntiAffinity gets the PodAntiAffinity field from the declarative configuration.
func (b AffinityBuilder) GetPodAntiAffinity() (value PodAntiAffinityBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.PodAntiAffinity; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts AffinityBuilder to unstructured.
func (b *AffinityBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to AffinityBuilder, replacing the contents
// of AffinityBuilder.
func (b *AffinityBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &affinityFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals AffinityBuilder to JSON.
func (b *AffinityBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into AffinityBuilder, replacing the contents of
// AffinityBuilder.
func (b *AffinityBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// AffinityList represents a list of AffinityBuilder.
// Provided as a convenience.
type AffinityList []AffinityBuilder

// AffinityList represents a map of AffinityBuilder.
// Provided as a convenience.
type AffinityMap map[string]AffinityBuilder

func (b *AffinityBuilder) preMarshal() {
}
func (b *AffinityBuilder) postUnmarshal() {
}
