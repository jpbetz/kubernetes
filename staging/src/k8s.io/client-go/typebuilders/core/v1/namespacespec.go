/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	v1 "k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// NamespaceSpecBuilder represents an declarative configuration of the NamespaceSpec type for use
// with apply.
type NamespaceSpecBuilder struct {
	fields *namespaceSpecFields
}

// namespaceSpecFields is used by NamespaceSpecBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in NamespaceSpecBuilder before marshalling, and
// are copied out to the builder type in NamespaceSpecBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type namespaceSpecFields struct {
	Finalizers *[]v1.FinalizerName `json:"finalizers,omitempty"`
}

func (b *NamespaceSpecBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &namespaceSpecFields{}
	}
}

// NamespaceSpec constructs an declarative configuration of the NamespaceSpec type for use with
// apply.
// Provided as a convenience.
func NamespaceSpec() NamespaceSpecBuilder {
	return NamespaceSpecBuilder{fields: &namespaceSpecFields{}}
}

// SetFinalizers sets the Finalizers field in the declarative configuration to the given value.
func (b NamespaceSpecBuilder) SetFinalizers(value []v1.FinalizerName) NamespaceSpecBuilder {
	b.ensureInitialized()
	b.fields.Finalizers = &value
	return b
}

// RemoveFinalizers removes the Finalizers field from the declarative configuration.
func (b NamespaceSpecBuilder) RemoveFinalizers() NamespaceSpecBuilder {
	b.ensureInitialized()
	b.fields.Finalizers = nil
	return b
}

// GetFinalizers gets the Finalizers field from the declarative configuration.
func (b NamespaceSpecBuilder) GetFinalizers() (value []v1.FinalizerName, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Finalizers; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts NamespaceSpecBuilder to unstructured.
func (b *NamespaceSpecBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to NamespaceSpecBuilder, replacing the contents
// of NamespaceSpecBuilder.
func (b *NamespaceSpecBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &namespaceSpecFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals NamespaceSpecBuilder to JSON.
func (b *NamespaceSpecBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into NamespaceSpecBuilder, replacing the contents of
// NamespaceSpecBuilder.
func (b *NamespaceSpecBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// NamespaceSpecList represents a list of NamespaceSpecBuilder.
// Provided as a convenience.
type NamespaceSpecList []NamespaceSpecBuilder

// NamespaceSpecList represents a map of NamespaceSpecBuilder.
// Provided as a convenience.
type NamespaceSpecMap map[string]NamespaceSpecBuilder

func (b *NamespaceSpecBuilder) preMarshal() {
}
func (b *NamespaceSpecBuilder) postUnmarshal() {
}
