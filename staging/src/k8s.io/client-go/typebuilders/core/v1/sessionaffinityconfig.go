/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// SessionAffinityConfigBuilder represents an declarative configuration of the SessionAffinityConfig type for use
// with apply.
type SessionAffinityConfigBuilder struct {
	fields sessionAffinityConfigFields
}

// sessionAffinityConfigFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in SessionAffinityConfigBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type sessionAffinityConfigFields struct {
	ClientIP *ClientIPConfigBuilder `json:"clientIP,omitempty"`
}

// SessionAffinityConfig constructs an declarative configuration of the SessionAffinityConfig type for use with
// apply.
func SessionAffinityConfig() *SessionAffinityConfigBuilder {
	return &SessionAffinityConfigBuilder{}
}

// SetClientIP sets the ClientIP field in the declarative configuration to the given value.
func (b *SessionAffinityConfigBuilder) SetClientIP(value *ClientIPConfigBuilder) *SessionAffinityConfigBuilder {
	b.fields.ClientIP = value
	return b
}

// RemoveClientIP removes the ClientIP field from the declarative configuration.
func (b *SessionAffinityConfigBuilder) RemoveClientIP() *SessionAffinityConfigBuilder {
	b.fields.ClientIP = nil
	return b
}

// GetClientIP gets the ClientIP field from the declarative configuration.
func (b *SessionAffinityConfigBuilder) GetClientIP() (value *ClientIPConfigBuilder, ok bool) {
	return b.fields.ClientIP, b.fields.ClientIP != nil
}

// ToUnstructured converts SessionAffinityConfigBuilder to unstructured.
func (b *SessionAffinityConfigBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to SessionAffinityConfigBuilder, replacing the contents
// of SessionAffinityConfigBuilder.
func (b *SessionAffinityConfigBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &sessionAffinityConfigFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals SessionAffinityConfigBuilder to JSON.
func (b *SessionAffinityConfigBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into SessionAffinityConfigBuilder, replacing the contents of
// SessionAffinityConfigBuilder.
func (b *SessionAffinityConfigBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// SessionAffinityConfigList represents a list of SessionAffinityConfigBuilder.
type SessionAffinityConfigList []*SessionAffinityConfigBuilder

// SessionAffinityConfigList represents a map of SessionAffinityConfigBuilder.
type SessionAffinityConfigMap map[string]SessionAffinityConfigBuilder

func (b *SessionAffinityConfigBuilder) preMarshal() {
}
func (b *SessionAffinityConfigBuilder) postUnmarshal() {
}
