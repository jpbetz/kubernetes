/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	v1 "k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// VolumeMountApplyConfiguration represents an declarative configuration of the VolumeMount type for use
// with apply.
type VolumeMountApplyConfiguration struct {
	fields volumeMountFields
}

// VolumeMountApplyConfiguration constructs an declarative configuration of the VolumeMount type for use with
// apply.
func VolumeMount() *VolumeMountApplyConfiguration {
	return &VolumeMountApplyConfiguration{}
}

// volumeMountFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in VolumeMountApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type volumeMountFields struct {
	Name             *string                  `json:"name,omitempty"`
	ReadOnly         *bool                    `json:"readOnly,omitempty"`
	MountPath        *string                  `json:"mountPath,omitempty"`
	SubPath          *string                  `json:"subPath,omitempty"`
	MountPropagation *v1.MountPropagationMode `json:"mountPropagation,omitempty"`
	SubPathExpr      *string                  `json:"subPathExpr,omitempty"`
}

// SetName sets the Name field in the declarative configuration to the given value.
func (b *VolumeMountApplyConfiguration) SetName(value string) *VolumeMountApplyConfiguration {
	b.fields.Name = &value
	return b
}

// RemoveName removes the Name field from the declarative configuration.
func (b *VolumeMountApplyConfiguration) RemoveName() *VolumeMountApplyConfiguration {
	b.fields.Name = nil
	return b
}

// GetName gets the Name field from the declarative configuration.
func (b *VolumeMountApplyConfiguration) GetName() (value string, ok bool) {
	if v := b.fields.Name; v != nil {
		return *v, true
	}
	return value, false
}

// SetReadOnly sets the ReadOnly field in the declarative configuration to the given value.
func (b *VolumeMountApplyConfiguration) SetReadOnly(value bool) *VolumeMountApplyConfiguration {
	b.fields.ReadOnly = &value
	return b
}

// RemoveReadOnly removes the ReadOnly field from the declarative configuration.
func (b *VolumeMountApplyConfiguration) RemoveReadOnly() *VolumeMountApplyConfiguration {
	b.fields.ReadOnly = nil
	return b
}

// GetReadOnly gets the ReadOnly field from the declarative configuration.
func (b *VolumeMountApplyConfiguration) GetReadOnly() (value bool, ok bool) {
	if v := b.fields.ReadOnly; v != nil {
		return *v, true
	}
	return value, false
}

// SetMountPath sets the MountPath field in the declarative configuration to the given value.
func (b *VolumeMountApplyConfiguration) SetMountPath(value string) *VolumeMountApplyConfiguration {
	b.fields.MountPath = &value
	return b
}

// RemoveMountPath removes the MountPath field from the declarative configuration.
func (b *VolumeMountApplyConfiguration) RemoveMountPath() *VolumeMountApplyConfiguration {
	b.fields.MountPath = nil
	return b
}

// GetMountPath gets the MountPath field from the declarative configuration.
func (b *VolumeMountApplyConfiguration) GetMountPath() (value string, ok bool) {
	if v := b.fields.MountPath; v != nil {
		return *v, true
	}
	return value, false
}

// SetSubPath sets the SubPath field in the declarative configuration to the given value.
func (b *VolumeMountApplyConfiguration) SetSubPath(value string) *VolumeMountApplyConfiguration {
	b.fields.SubPath = &value
	return b
}

// RemoveSubPath removes the SubPath field from the declarative configuration.
func (b *VolumeMountApplyConfiguration) RemoveSubPath() *VolumeMountApplyConfiguration {
	b.fields.SubPath = nil
	return b
}

// GetSubPath gets the SubPath field from the declarative configuration.
func (b *VolumeMountApplyConfiguration) GetSubPath() (value string, ok bool) {
	if v := b.fields.SubPath; v != nil {
		return *v, true
	}
	return value, false
}

// SetMountPropagation sets the MountPropagation field in the declarative configuration to the given value.
func (b *VolumeMountApplyConfiguration) SetMountPropagation(value v1.MountPropagationMode) *VolumeMountApplyConfiguration {
	b.fields.MountPropagation = &value
	return b
}

// RemoveMountPropagation removes the MountPropagation field from the declarative configuration.
func (b *VolumeMountApplyConfiguration) RemoveMountPropagation() *VolumeMountApplyConfiguration {
	b.fields.MountPropagation = nil
	return b
}

// GetMountPropagation gets the MountPropagation field from the declarative configuration.
func (b *VolumeMountApplyConfiguration) GetMountPropagation() (value v1.MountPropagationMode, ok bool) {
	if v := b.fields.MountPropagation; v != nil {
		return *v, true
	}
	return value, false
}

// SetSubPathExpr sets the SubPathExpr field in the declarative configuration to the given value.
func (b *VolumeMountApplyConfiguration) SetSubPathExpr(value string) *VolumeMountApplyConfiguration {
	b.fields.SubPathExpr = &value
	return b
}

// RemoveSubPathExpr removes the SubPathExpr field from the declarative configuration.
func (b *VolumeMountApplyConfiguration) RemoveSubPathExpr() *VolumeMountApplyConfiguration {
	b.fields.SubPathExpr = nil
	return b
}

// GetSubPathExpr gets the SubPathExpr field from the declarative configuration.
func (b *VolumeMountApplyConfiguration) GetSubPathExpr() (value string, ok bool) {
	if v := b.fields.SubPathExpr; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts VolumeMountApplyConfiguration to unstructured.
func (b *VolumeMountApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to VolumeMountApplyConfiguration, replacing the contents
// of VolumeMountApplyConfiguration.
func (b *VolumeMountApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &volumeMountFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals VolumeMountApplyConfiguration to JSON.
func (b *VolumeMountApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into VolumeMountApplyConfiguration, replacing the contents of
// VolumeMountApplyConfiguration.
func (b *VolumeMountApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// VolumeMountList represents a listAlias of VolumeMountApplyConfiguration.
type VolumeMountList []*VolumeMountApplyConfiguration

// VolumeMountList represents a map of VolumeMountApplyConfiguration.
type VolumeMountMap map[string]VolumeMountApplyConfiguration

func (b *VolumeMountApplyConfiguration) preMarshal() {
}
func (b *VolumeMountApplyConfiguration) postUnmarshal() {
}
