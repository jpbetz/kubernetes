/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// PodDNSConfigBuilder represents an declarative configuration of the PodDNSConfig type for use
// with apply.
type PodDNSConfigBuilder struct {
	fields *podDNSConfigFields
}

// podDNSConfigFields is used by PodDNSConfigBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in PodDNSConfigBuilder before marshalling, and
// are copied out to the builder type in PodDNSConfigBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type podDNSConfigFields struct {
	Nameservers *[]string               `json:"nameservers,omitempty"`
	Searches    *[]string               `json:"searches,omitempty"`
	Options     *PodDNSConfigOptionList `json:"options,omitempty"`
}

func (b *PodDNSConfigBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &podDNSConfigFields{}
	}
}

// PodDNSConfig constructs an declarative configuration of the PodDNSConfig type for use with
// apply.
// Provided as a convenience.
func PodDNSConfig() PodDNSConfigBuilder {
	return PodDNSConfigBuilder{fields: &podDNSConfigFields{}}
}

// SetNameservers sets the Nameservers field in the declarative configuration to the given value.
func (b PodDNSConfigBuilder) SetNameservers(value []string) PodDNSConfigBuilder {
	b.ensureInitialized()
	b.fields.Nameservers = &value
	return b
}

// RemoveNameservers removes the Nameservers field from the declarative configuration.
func (b PodDNSConfigBuilder) RemoveNameservers() PodDNSConfigBuilder {
	b.ensureInitialized()
	b.fields.Nameservers = nil
	return b
}

// GetNameservers gets the Nameservers field from the declarative configuration.
func (b PodDNSConfigBuilder) GetNameservers() (value []string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Nameservers; v != nil {
		return *v, true
	}
	return value, false
}

// SetSearches sets the Searches field in the declarative configuration to the given value.
func (b PodDNSConfigBuilder) SetSearches(value []string) PodDNSConfigBuilder {
	b.ensureInitialized()
	b.fields.Searches = &value
	return b
}

// RemoveSearches removes the Searches field from the declarative configuration.
func (b PodDNSConfigBuilder) RemoveSearches() PodDNSConfigBuilder {
	b.ensureInitialized()
	b.fields.Searches = nil
	return b
}

// GetSearches gets the Searches field from the declarative configuration.
func (b PodDNSConfigBuilder) GetSearches() (value []string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Searches; v != nil {
		return *v, true
	}
	return value, false
}

// SetOptions sets the Options field in the declarative configuration to the given value.
func (b PodDNSConfigBuilder) SetOptions(value PodDNSConfigOptionList) PodDNSConfigBuilder {
	b.ensureInitialized()
	b.fields.Options = &value
	return b
}

// RemoveOptions removes the Options field from the declarative configuration.
func (b PodDNSConfigBuilder) RemoveOptions() PodDNSConfigBuilder {
	b.ensureInitialized()
	b.fields.Options = nil
	return b
}

// GetOptions gets the Options field from the declarative configuration.
func (b PodDNSConfigBuilder) GetOptions() (value PodDNSConfigOptionList, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Options; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts PodDNSConfigBuilder to unstructured.
func (b *PodDNSConfigBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to PodDNSConfigBuilder, replacing the contents
// of PodDNSConfigBuilder.
func (b *PodDNSConfigBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &podDNSConfigFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals PodDNSConfigBuilder to JSON.
func (b *PodDNSConfigBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into PodDNSConfigBuilder, replacing the contents of
// PodDNSConfigBuilder.
func (b *PodDNSConfigBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// PodDNSConfigList represents a list of PodDNSConfigBuilder.
// Provided as a convenience.
type PodDNSConfigList []PodDNSConfigBuilder

// PodDNSConfigList represents a map of PodDNSConfigBuilder.
// Provided as a convenience.
type PodDNSConfigMap map[string]PodDNSConfigBuilder

func (b *PodDNSConfigBuilder) preMarshal() {
}
func (b *PodDNSConfigBuilder) postUnmarshal() {
}
