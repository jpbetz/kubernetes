/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// PodDNSConfigApplyConfiguration represents an declarative configuration of the PodDNSConfig type for use
// with apply.
type PodDNSConfigApplyConfiguration struct {
	fields podDNSConfigFields
}

// PodDNSConfigApplyConfiguration constructs an declarative configuration of the PodDNSConfig type for use with
// apply.
func PodDNSConfig() *PodDNSConfigApplyConfiguration {
	return &PodDNSConfigApplyConfiguration{}
}

// podDNSConfigFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in PodDNSConfigApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type podDNSConfigFields struct {
	Nameservers *[]string               `json:"nameservers,omitempty"`
	Searches    *[]string               `json:"searches,omitempty"`
	Options     *PodDNSConfigOptionList `json:"options,omitempty"`
}

// SetNameservers sets the Nameservers field in the declarative configuration to the given value.
func (b *PodDNSConfigApplyConfiguration) SetNameservers(value []string) *PodDNSConfigApplyConfiguration {
	b.fields.Nameservers = &value
	return b
}

// RemoveNameservers removes the Nameservers field from the declarative configuration.
func (b *PodDNSConfigApplyConfiguration) RemoveNameservers() *PodDNSConfigApplyConfiguration {
	b.fields.Nameservers = nil
	return b
}

// GetNameservers gets the Nameservers field from the declarative configuration.
func (b *PodDNSConfigApplyConfiguration) GetNameservers() (value []string, ok bool) {
	if v := b.fields.Nameservers; v != nil {
		return *v, true
	}
	return value, false
}

// SetSearches sets the Searches field in the declarative configuration to the given value.
func (b *PodDNSConfigApplyConfiguration) SetSearches(value []string) *PodDNSConfigApplyConfiguration {
	b.fields.Searches = &value
	return b
}

// RemoveSearches removes the Searches field from the declarative configuration.
func (b *PodDNSConfigApplyConfiguration) RemoveSearches() *PodDNSConfigApplyConfiguration {
	b.fields.Searches = nil
	return b
}

// GetSearches gets the Searches field from the declarative configuration.
func (b *PodDNSConfigApplyConfiguration) GetSearches() (value []string, ok bool) {
	if v := b.fields.Searches; v != nil {
		return *v, true
	}
	return value, false
}

// SetOptions sets the Options field in the declarative configuration to the given value.
func (b *PodDNSConfigApplyConfiguration) SetOptions(value PodDNSConfigOptionList) *PodDNSConfigApplyConfiguration {
	b.fields.Options = &value
	return b
}

// RemoveOptions removes the Options field from the declarative configuration.
func (b *PodDNSConfigApplyConfiguration) RemoveOptions() *PodDNSConfigApplyConfiguration {
	b.fields.Options = nil
	return b
}

// GetOptions gets the Options field from the declarative configuration.
func (b *PodDNSConfigApplyConfiguration) GetOptions() (value PodDNSConfigOptionList, ok bool) {
	if v := b.fields.Options; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts PodDNSConfigApplyConfiguration to unstructured.
func (b *PodDNSConfigApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to PodDNSConfigApplyConfiguration, replacing the contents
// of PodDNSConfigApplyConfiguration.
func (b *PodDNSConfigApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &podDNSConfigFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals PodDNSConfigApplyConfiguration to JSON.
func (b *PodDNSConfigApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into PodDNSConfigApplyConfiguration, replacing the contents of
// PodDNSConfigApplyConfiguration.
func (b *PodDNSConfigApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// PodDNSConfigList represents a listAlias of PodDNSConfigApplyConfiguration.
type PodDNSConfigList []*PodDNSConfigApplyConfiguration

// PodDNSConfigList represents a map of PodDNSConfigApplyConfiguration.
type PodDNSConfigMap map[string]PodDNSConfigApplyConfiguration

func (b *PodDNSConfigApplyConfiguration) preMarshal() {
}
func (b *PodDNSConfigApplyConfiguration) postUnmarshal() {
}
