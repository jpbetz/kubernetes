/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// PortworxVolumeSourceBuilder represents an declarative configuration of the PortworxVolumeSource type for use
// with apply.
type PortworxVolumeSourceBuilder struct {
	fields *portworxVolumeSourceFields
}

// portworxVolumeSourceFields is used by PortworxVolumeSourceBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in PortworxVolumeSourceBuilder before marshalling, and
// are copied out to the builder type in PortworxVolumeSourceBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type portworxVolumeSourceFields struct {
	VolumeID *string `json:"volumeID,omitempty"`
	FSType   *string `json:"fsType,omitempty"`
	ReadOnly *bool   `json:"readOnly,omitempty"`
}

func (b *PortworxVolumeSourceBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &portworxVolumeSourceFields{}
	}
}

// PortworxVolumeSource constructs an declarative configuration of the PortworxVolumeSource type for use with
// apply.
// Provided as a convenience.
func PortworxVolumeSource() PortworxVolumeSourceBuilder {
	return PortworxVolumeSourceBuilder{fields: &portworxVolumeSourceFields{}}
}

// SetVolumeID sets the VolumeID field in the declarative configuration to the given value.
func (b PortworxVolumeSourceBuilder) SetVolumeID(value string) PortworxVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.VolumeID = &value
	return b
}

// RemoveVolumeID removes the VolumeID field from the declarative configuration.
func (b PortworxVolumeSourceBuilder) RemoveVolumeID() PortworxVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.VolumeID = nil
	return b
}

// GetVolumeID gets the VolumeID field from the declarative configuration.
func (b PortworxVolumeSourceBuilder) GetVolumeID() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.VolumeID; v != nil {
		return *v, true
	}
	return value, false
}

// SetFSType sets the FSType field in the declarative configuration to the given value.
func (b PortworxVolumeSourceBuilder) SetFSType(value string) PortworxVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.FSType = &value
	return b
}

// RemoveFSType removes the FSType field from the declarative configuration.
func (b PortworxVolumeSourceBuilder) RemoveFSType() PortworxVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.FSType = nil
	return b
}

// GetFSType gets the FSType field from the declarative configuration.
func (b PortworxVolumeSourceBuilder) GetFSType() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.FSType; v != nil {
		return *v, true
	}
	return value, false
}

// SetReadOnly sets the ReadOnly field in the declarative configuration to the given value.
func (b PortworxVolumeSourceBuilder) SetReadOnly(value bool) PortworxVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.ReadOnly = &value
	return b
}

// RemoveReadOnly removes the ReadOnly field from the declarative configuration.
func (b PortworxVolumeSourceBuilder) RemoveReadOnly() PortworxVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.ReadOnly = nil
	return b
}

// GetReadOnly gets the ReadOnly field from the declarative configuration.
func (b PortworxVolumeSourceBuilder) GetReadOnly() (value bool, ok bool) {
	b.ensureInitialized()
	if v := b.fields.ReadOnly; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts PortworxVolumeSourceBuilder to unstructured.
func (b *PortworxVolumeSourceBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to PortworxVolumeSourceBuilder, replacing the contents
// of PortworxVolumeSourceBuilder.
func (b *PortworxVolumeSourceBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &portworxVolumeSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals PortworxVolumeSourceBuilder to JSON.
func (b *PortworxVolumeSourceBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into PortworxVolumeSourceBuilder, replacing the contents of
// PortworxVolumeSourceBuilder.
func (b *PortworxVolumeSourceBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// PortworxVolumeSourceList represents a list of PortworxVolumeSourceBuilder.
// Provided as a convenience.
type PortworxVolumeSourceList []PortworxVolumeSourceBuilder

// PortworxVolumeSourceList represents a map of PortworxVolumeSourceBuilder.
// Provided as a convenience.
type PortworxVolumeSourceMap map[string]PortworxVolumeSourceBuilder

func (b *PortworxVolumeSourceBuilder) preMarshal() {
}
func (b *PortworxVolumeSourceBuilder) postUnmarshal() {
}
