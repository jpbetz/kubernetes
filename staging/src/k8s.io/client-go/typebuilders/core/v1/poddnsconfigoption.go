/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// PodDNSConfigOptionBuilder represents an declarative configuration of the PodDNSConfigOption type for use
// with apply.
type PodDNSConfigOptionBuilder struct {
	fields *podDNSConfigOptionFields
}

// podDNSConfigOptionFields is used by PodDNSConfigOptionBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in PodDNSConfigOptionBuilder before marshalling, and
// are copied out to the builder type in PodDNSConfigOptionBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type podDNSConfigOptionFields struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

func (b *PodDNSConfigOptionBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &podDNSConfigOptionFields{}
	}
}

// PodDNSConfigOption constructs an declarative configuration of the PodDNSConfigOption type for use with
// apply.
// Provided as a convenience.
func PodDNSConfigOption() PodDNSConfigOptionBuilder {
	return PodDNSConfigOptionBuilder{fields: &podDNSConfigOptionFields{}}
}

// SetName sets the Name field in the declarative configuration to the given value.
func (b PodDNSConfigOptionBuilder) SetName(value string) PodDNSConfigOptionBuilder {
	b.ensureInitialized()
	b.fields.Name = &value
	return b
}

// RemoveName removes the Name field from the declarative configuration.
func (b PodDNSConfigOptionBuilder) RemoveName() PodDNSConfigOptionBuilder {
	b.ensureInitialized()
	b.fields.Name = nil
	return b
}

// GetName gets the Name field from the declarative configuration.
func (b PodDNSConfigOptionBuilder) GetName() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Name; v != nil {
		return *v, true
	}
	return value, false
}

// SetValue sets the Value field in the declarative configuration to the given value.
func (b PodDNSConfigOptionBuilder) SetValue(value string) PodDNSConfigOptionBuilder {
	b.ensureInitialized()
	b.fields.Value = &value
	return b
}

// RemoveValue removes the Value field from the declarative configuration.
func (b PodDNSConfigOptionBuilder) RemoveValue() PodDNSConfigOptionBuilder {
	b.ensureInitialized()
	b.fields.Value = nil
	return b
}

// GetValue gets the Value field from the declarative configuration.
func (b PodDNSConfigOptionBuilder) GetValue() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Value; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts PodDNSConfigOptionBuilder to unstructured.
func (b *PodDNSConfigOptionBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to PodDNSConfigOptionBuilder, replacing the contents
// of PodDNSConfigOptionBuilder.
func (b *PodDNSConfigOptionBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &podDNSConfigOptionFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals PodDNSConfigOptionBuilder to JSON.
func (b *PodDNSConfigOptionBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into PodDNSConfigOptionBuilder, replacing the contents of
// PodDNSConfigOptionBuilder.
func (b *PodDNSConfigOptionBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// PodDNSConfigOptionList represents a list of PodDNSConfigOptionBuilder.
// Provided as a convenience.
type PodDNSConfigOptionList []PodDNSConfigOptionBuilder

// PodDNSConfigOptionList represents a map of PodDNSConfigOptionBuilder.
// Provided as a convenience.
type PodDNSConfigOptionMap map[string]PodDNSConfigOptionBuilder

func (b *PodDNSConfigOptionBuilder) preMarshal() {
}
func (b *PodDNSConfigOptionBuilder) postUnmarshal() {
}
