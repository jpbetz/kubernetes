/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// HandlerBuilder represents an declarative configuration of the Handler type for use
// with apply.
type HandlerBuilder struct {
	fields *handlerFields
}

// handlerFields is used by HandlerBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in HandlerBuilder before marshalling, and
// are copied out to the builder type in HandlerBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type handlerFields struct {
	Exec      *ExecActionBuilder      `json:"exec,omitempty"`
	HTTPGet   *HTTPGetActionBuilder   `json:"httpGet,omitempty"`
	TCPSocket *TCPSocketActionBuilder `json:"tcpSocket,omitempty"`
}

func (b *HandlerBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &handlerFields{}
	}
}

// Handler constructs an declarative configuration of the Handler type for use with
// apply.
// Provided as a convenience.
func Handler() HandlerBuilder {
	return HandlerBuilder{fields: &handlerFields{}}
}

// SetExec sets the Exec field in the declarative configuration to the given value.
func (b HandlerBuilder) SetExec(value ExecActionBuilder) HandlerBuilder {
	b.ensureInitialized()
	b.fields.Exec = &value
	return b
}

// RemoveExec removes the Exec field from the declarative configuration.
func (b HandlerBuilder) RemoveExec() HandlerBuilder {
	b.ensureInitialized()
	b.fields.Exec = nil
	return b
}

// GetExec gets the Exec field from the declarative configuration.
func (b HandlerBuilder) GetExec() (value ExecActionBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Exec; v != nil {
		return *v, true
	}
	return value, false
}

// SetHTTPGet sets the HTTPGet field in the declarative configuration to the given value.
func (b HandlerBuilder) SetHTTPGet(value HTTPGetActionBuilder) HandlerBuilder {
	b.ensureInitialized()
	b.fields.HTTPGet = &value
	return b
}

// RemoveHTTPGet removes the HTTPGet field from the declarative configuration.
func (b HandlerBuilder) RemoveHTTPGet() HandlerBuilder {
	b.ensureInitialized()
	b.fields.HTTPGet = nil
	return b
}

// GetHTTPGet gets the HTTPGet field from the declarative configuration.
func (b HandlerBuilder) GetHTTPGet() (value HTTPGetActionBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.HTTPGet; v != nil {
		return *v, true
	}
	return value, false
}

// SetTCPSocket sets the TCPSocket field in the declarative configuration to the given value.
func (b HandlerBuilder) SetTCPSocket(value TCPSocketActionBuilder) HandlerBuilder {
	b.ensureInitialized()
	b.fields.TCPSocket = &value
	return b
}

// RemoveTCPSocket removes the TCPSocket field from the declarative configuration.
func (b HandlerBuilder) RemoveTCPSocket() HandlerBuilder {
	b.ensureInitialized()
	b.fields.TCPSocket = nil
	return b
}

// GetTCPSocket gets the TCPSocket field from the declarative configuration.
func (b HandlerBuilder) GetTCPSocket() (value TCPSocketActionBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.TCPSocket; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts HandlerBuilder to unstructured.
func (b *HandlerBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to HandlerBuilder, replacing the contents
// of HandlerBuilder.
func (b *HandlerBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &handlerFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals HandlerBuilder to JSON.
func (b *HandlerBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into HandlerBuilder, replacing the contents of
// HandlerBuilder.
func (b *HandlerBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// HandlerList represents a list of HandlerBuilder.
// Provided as a convenience.
type HandlerList []HandlerBuilder

// HandlerList represents a map of HandlerBuilder.
// Provided as a convenience.
type HandlerMap map[string]HandlerBuilder

func (b *HandlerBuilder) preMarshal() {
}
func (b *HandlerBuilder) postUnmarshal() {
}
