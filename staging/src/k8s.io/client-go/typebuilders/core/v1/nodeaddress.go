/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	v1 "k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// NodeAddressBuilder represents an declarative configuration of the NodeAddress type for use
// with apply.
type NodeAddressBuilder struct {
	fields *nodeAddressFields
}

// nodeAddressFields is used by NodeAddressBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in NodeAddressBuilder before marshalling, and
// are copied out to the builder type in NodeAddressBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type nodeAddressFields struct {
	Type    *v1.NodeAddressType `json:"type,omitempty"`
	Address *string             `json:"address,omitempty"`
}

func (b *NodeAddressBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &nodeAddressFields{}
	}
}

// NodeAddress constructs an declarative configuration of the NodeAddress type for use with
// apply.
// Provided as a convenience.
func NodeAddress() NodeAddressBuilder {
	return NodeAddressBuilder{fields: &nodeAddressFields{}}
}

// SetType sets the Type field in the declarative configuration to the given value.
func (b NodeAddressBuilder) SetType(value v1.NodeAddressType) NodeAddressBuilder {
	b.ensureInitialized()
	b.fields.Type = &value
	return b
}

// RemoveType removes the Type field from the declarative configuration.
func (b NodeAddressBuilder) RemoveType() NodeAddressBuilder {
	b.ensureInitialized()
	b.fields.Type = nil
	return b
}

// GetType gets the Type field from the declarative configuration.
func (b NodeAddressBuilder) GetType() (value v1.NodeAddressType, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Type; v != nil {
		return *v, true
	}
	return value, false
}

// SetAddress sets the Address field in the declarative configuration to the given value.
func (b NodeAddressBuilder) SetAddress(value string) NodeAddressBuilder {
	b.ensureInitialized()
	b.fields.Address = &value
	return b
}

// RemoveAddress removes the Address field from the declarative configuration.
func (b NodeAddressBuilder) RemoveAddress() NodeAddressBuilder {
	b.ensureInitialized()
	b.fields.Address = nil
	return b
}

// GetAddress gets the Address field from the declarative configuration.
func (b NodeAddressBuilder) GetAddress() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Address; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts NodeAddressBuilder to unstructured.
func (b *NodeAddressBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to NodeAddressBuilder, replacing the contents
// of NodeAddressBuilder.
func (b *NodeAddressBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &nodeAddressFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals NodeAddressBuilder to JSON.
func (b *NodeAddressBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into NodeAddressBuilder, replacing the contents of
// NodeAddressBuilder.
func (b *NodeAddressBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// NodeAddressList represents a list of NodeAddressBuilder.
// Provided as a convenience.
type NodeAddressList []NodeAddressBuilder

// NodeAddressList represents a map of NodeAddressBuilder.
// Provided as a convenience.
type NodeAddressMap map[string]NodeAddressBuilder

func (b *NodeAddressBuilder) preMarshal() {
}
func (b *NodeAddressBuilder) postUnmarshal() {
}
