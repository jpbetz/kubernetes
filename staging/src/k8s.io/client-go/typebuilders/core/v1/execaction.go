/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ExecActionBuilder represents an declarative configuration of the ExecAction type for use
// with apply.
type ExecActionBuilder struct {
	fields execActionFields
}

// execActionFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in ExecActionBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type execActionFields struct {
	Command *[]string `json:"command,omitempty"`
}

// ExecAction constructs an declarative configuration of the ExecAction type for use with
// apply.
func ExecAction() *ExecActionBuilder {
	return &ExecActionBuilder{}
}

// SetCommand sets the Command field in the declarative configuration to the given value.
func (b *ExecActionBuilder) SetCommand(value []string) *ExecActionBuilder {
	b.fields.Command = &value
	return b
}

// RemoveCommand removes the Command field from the declarative configuration.
func (b *ExecActionBuilder) RemoveCommand() *ExecActionBuilder {
	b.fields.Command = nil
	return b
}

// GetCommand gets the Command field from the declarative configuration.
func (b *ExecActionBuilder) GetCommand() (value []string, ok bool) {
	if v := b.fields.Command; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ExecActionBuilder to unstructured.
func (b *ExecActionBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ExecActionBuilder, replacing the contents
// of ExecActionBuilder.
func (b *ExecActionBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &execActionFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ExecActionBuilder to JSON.
func (b *ExecActionBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into ExecActionBuilder, replacing the contents of
// ExecActionBuilder.
func (b *ExecActionBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ExecActionList represents a list of ExecActionBuilder.
type ExecActionList []*ExecActionBuilder

// ExecActionList represents a map of ExecActionBuilder.
type ExecActionMap map[string]ExecActionBuilder

func (b *ExecActionBuilder) preMarshal() {
}
func (b *ExecActionBuilder) postUnmarshal() {
}
