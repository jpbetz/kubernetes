/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// StorageOSVolumeSourceApplyConfiguration represents an declarative configuration of the StorageOSVolumeSource type for use
// with apply.
type StorageOSVolumeSourceApplyConfiguration struct {
	fields storageOSVolumeSourceFields
}

// StorageOSVolumeSourceApplyConfiguration constructs an declarative configuration of the StorageOSVolumeSource type for use with
// apply.
func StorageOSVolumeSource() *StorageOSVolumeSourceApplyConfiguration {
	return &StorageOSVolumeSourceApplyConfiguration{}
}

// storageOSVolumeSourceFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in StorageOSVolumeSourceApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type storageOSVolumeSourceFields struct {
	VolumeName      *string                                 `json:"volumeName,omitempty"`
	VolumeNamespace *string                                 `json:"volumeNamespace,omitempty"`
	FSType          *string                                 `json:"fsType,omitempty"`
	ReadOnly        *bool                                   `json:"readOnly,omitempty"`
	SecretRef       *LocalObjectReferenceApplyConfiguration `json:"secretRef,omitempty"`
}

// SetVolumeName sets the VolumeName field in the declarative configuration to the given value.
func (b *StorageOSVolumeSourceApplyConfiguration) SetVolumeName(value string) *StorageOSVolumeSourceApplyConfiguration {
	b.fields.VolumeName = &value
	return b
}

// RemoveVolumeName removes the VolumeName field from the declarative configuration.
func (b *StorageOSVolumeSourceApplyConfiguration) RemoveVolumeName() *StorageOSVolumeSourceApplyConfiguration {
	b.fields.VolumeName = nil
	return b
}

// GetVolumeName gets the VolumeName field from the declarative configuration.
func (b *StorageOSVolumeSourceApplyConfiguration) GetVolumeName() (value string, ok bool) {
	if v := b.fields.VolumeName; v != nil {
		return *v, true
	}
	return value, false
}

// SetVolumeNamespace sets the VolumeNamespace field in the declarative configuration to the given value.
func (b *StorageOSVolumeSourceApplyConfiguration) SetVolumeNamespace(value string) *StorageOSVolumeSourceApplyConfiguration {
	b.fields.VolumeNamespace = &value
	return b
}

// RemoveVolumeNamespace removes the VolumeNamespace field from the declarative configuration.
func (b *StorageOSVolumeSourceApplyConfiguration) RemoveVolumeNamespace() *StorageOSVolumeSourceApplyConfiguration {
	b.fields.VolumeNamespace = nil
	return b
}

// GetVolumeNamespace gets the VolumeNamespace field from the declarative configuration.
func (b *StorageOSVolumeSourceApplyConfiguration) GetVolumeNamespace() (value string, ok bool) {
	if v := b.fields.VolumeNamespace; v != nil {
		return *v, true
	}
	return value, false
}

// SetFSType sets the FSType field in the declarative configuration to the given value.
func (b *StorageOSVolumeSourceApplyConfiguration) SetFSType(value string) *StorageOSVolumeSourceApplyConfiguration {
	b.fields.FSType = &value
	return b
}

// RemoveFSType removes the FSType field from the declarative configuration.
func (b *StorageOSVolumeSourceApplyConfiguration) RemoveFSType() *StorageOSVolumeSourceApplyConfiguration {
	b.fields.FSType = nil
	return b
}

// GetFSType gets the FSType field from the declarative configuration.
func (b *StorageOSVolumeSourceApplyConfiguration) GetFSType() (value string, ok bool) {
	if v := b.fields.FSType; v != nil {
		return *v, true
	}
	return value, false
}

// SetReadOnly sets the ReadOnly field in the declarative configuration to the given value.
func (b *StorageOSVolumeSourceApplyConfiguration) SetReadOnly(value bool) *StorageOSVolumeSourceApplyConfiguration {
	b.fields.ReadOnly = &value
	return b
}

// RemoveReadOnly removes the ReadOnly field from the declarative configuration.
func (b *StorageOSVolumeSourceApplyConfiguration) RemoveReadOnly() *StorageOSVolumeSourceApplyConfiguration {
	b.fields.ReadOnly = nil
	return b
}

// GetReadOnly gets the ReadOnly field from the declarative configuration.
func (b *StorageOSVolumeSourceApplyConfiguration) GetReadOnly() (value bool, ok bool) {
	if v := b.fields.ReadOnly; v != nil {
		return *v, true
	}
	return value, false
}

// SetSecretRef sets the SecretRef field in the declarative configuration to the given value.
func (b *StorageOSVolumeSourceApplyConfiguration) SetSecretRef(value *LocalObjectReferenceApplyConfiguration) *StorageOSVolumeSourceApplyConfiguration {
	b.fields.SecretRef = value
	return b
}

// RemoveSecretRef removes the SecretRef field from the declarative configuration.
func (b *StorageOSVolumeSourceApplyConfiguration) RemoveSecretRef() *StorageOSVolumeSourceApplyConfiguration {
	b.fields.SecretRef = nil
	return b
}

// GetSecretRef gets the SecretRef field from the declarative configuration.
func (b *StorageOSVolumeSourceApplyConfiguration) GetSecretRef() (value *LocalObjectReferenceApplyConfiguration, ok bool) {
	return b.fields.SecretRef, b.fields.SecretRef != nil
}

// ToUnstructured converts StorageOSVolumeSourceApplyConfiguration to unstructured.
func (b *StorageOSVolumeSourceApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to StorageOSVolumeSourceApplyConfiguration, replacing the contents
// of StorageOSVolumeSourceApplyConfiguration.
func (b *StorageOSVolumeSourceApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &storageOSVolumeSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals StorageOSVolumeSourceApplyConfiguration to JSON.
func (b *StorageOSVolumeSourceApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into StorageOSVolumeSourceApplyConfiguration, replacing the contents of
// StorageOSVolumeSourceApplyConfiguration.
func (b *StorageOSVolumeSourceApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// StorageOSVolumeSourceList represents a listAlias of StorageOSVolumeSourceApplyConfiguration.
type StorageOSVolumeSourceList []*StorageOSVolumeSourceApplyConfiguration

// StorageOSVolumeSourceList represents a map of StorageOSVolumeSourceApplyConfiguration.
type StorageOSVolumeSourceMap map[string]StorageOSVolumeSourceApplyConfiguration

func (b *StorageOSVolumeSourceApplyConfiguration) preMarshal() {
}
func (b *StorageOSVolumeSourceApplyConfiguration) postUnmarshal() {
}
