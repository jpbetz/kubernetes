/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// EphemeralVolumeSourceBuilder represents an declarative configuration of the EphemeralVolumeSource type for use
// with apply.
type EphemeralVolumeSourceBuilder struct {
	fields *ephemeralVolumeSourceFields
}

// ephemeralVolumeSourceFields is used by EphemeralVolumeSourceBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in EphemeralVolumeSourceBuilder before marshalling, and
// are copied out to the builder type in EphemeralVolumeSourceBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type ephemeralVolumeSourceFields struct {
	VolumeClaimTemplate *PersistentVolumeClaimTemplateBuilder `json:"volumeClaimTemplate,omitempty"`
	ReadOnly            *bool                                 `json:"readOnly,omitempty"`
}

func (b *EphemeralVolumeSourceBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &ephemeralVolumeSourceFields{}
	}
}

// EphemeralVolumeSource constructs an declarative configuration of the EphemeralVolumeSource type for use with
// apply.
// Provided as a convenience.
func EphemeralVolumeSource() EphemeralVolumeSourceBuilder {
	return EphemeralVolumeSourceBuilder{fields: &ephemeralVolumeSourceFields{}}
}

// SetVolumeClaimTemplate sets the VolumeClaimTemplate field in the declarative configuration to the given value.
func (b EphemeralVolumeSourceBuilder) SetVolumeClaimTemplate(value PersistentVolumeClaimTemplateBuilder) EphemeralVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.VolumeClaimTemplate = &value
	return b
}

// RemoveVolumeClaimTemplate removes the VolumeClaimTemplate field from the declarative configuration.
func (b EphemeralVolumeSourceBuilder) RemoveVolumeClaimTemplate() EphemeralVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.VolumeClaimTemplate = nil
	return b
}

// GetVolumeClaimTemplate gets the VolumeClaimTemplate field from the declarative configuration.
func (b EphemeralVolumeSourceBuilder) GetVolumeClaimTemplate() (value PersistentVolumeClaimTemplateBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.VolumeClaimTemplate; v != nil {
		return *v, true
	}
	return value, false
}

// SetReadOnly sets the ReadOnly field in the declarative configuration to the given value.
func (b EphemeralVolumeSourceBuilder) SetReadOnly(value bool) EphemeralVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.ReadOnly = &value
	return b
}

// RemoveReadOnly removes the ReadOnly field from the declarative configuration.
func (b EphemeralVolumeSourceBuilder) RemoveReadOnly() EphemeralVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.ReadOnly = nil
	return b
}

// GetReadOnly gets the ReadOnly field from the declarative configuration.
func (b EphemeralVolumeSourceBuilder) GetReadOnly() (value bool, ok bool) {
	b.ensureInitialized()
	if v := b.fields.ReadOnly; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts EphemeralVolumeSourceBuilder to unstructured.
func (b *EphemeralVolumeSourceBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to EphemeralVolumeSourceBuilder, replacing the contents
// of EphemeralVolumeSourceBuilder.
func (b *EphemeralVolumeSourceBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &ephemeralVolumeSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals EphemeralVolumeSourceBuilder to JSON.
func (b *EphemeralVolumeSourceBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into EphemeralVolumeSourceBuilder, replacing the contents of
// EphemeralVolumeSourceBuilder.
func (b *EphemeralVolumeSourceBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// EphemeralVolumeSourceList represents a list of EphemeralVolumeSourceBuilder.
// Provided as a convenience.
type EphemeralVolumeSourceList []EphemeralVolumeSourceBuilder

// EphemeralVolumeSourceList represents a map of EphemeralVolumeSourceBuilder.
// Provided as a convenience.
type EphemeralVolumeSourceMap map[string]EphemeralVolumeSourceBuilder

func (b *EphemeralVolumeSourceBuilder) preMarshal() {
}
func (b *EphemeralVolumeSourceBuilder) postUnmarshal() {
}
