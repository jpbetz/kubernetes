/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// CSIPersistentVolumeSourceBuilder represents an declarative configuration of the CSIPersistentVolumeSource type for use
// with apply.
type CSIPersistentVolumeSourceBuilder struct {
	fields cSIPersistentVolumeSourceFields
}

// cSIPersistentVolumeSourceFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in CSIPersistentVolumeSourceBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type cSIPersistentVolumeSourceFields struct {
	Driver                     *string                 `json:"driver,omitempty"`
	VolumeHandle               *string                 `json:"volumeHandle,omitempty"`
	ReadOnly                   *bool                   `json:"readOnly,omitempty"`
	FSType                     *string                 `json:"fsType,omitempty"`
	VolumeAttributes           *map[string]string      `json:"volumeAttributes,omitempty"`
	ControllerPublishSecretRef *SecretReferenceBuilder `json:"controllerPublishSecretRef,omitempty"`
	NodeStageSecretRef         *SecretReferenceBuilder `json:"nodeStageSecretRef,omitempty"`
	NodePublishSecretRef       *SecretReferenceBuilder `json:"nodePublishSecretRef,omitempty"`
	ControllerExpandSecretRef  *SecretReferenceBuilder `json:"controllerExpandSecretRef,omitempty"`
}

// CSIPersistentVolumeSource constructs an declarative configuration of the CSIPersistentVolumeSource type for use with
// apply.
func CSIPersistentVolumeSource() *CSIPersistentVolumeSourceBuilder {
	return &CSIPersistentVolumeSourceBuilder{}
}

// SetDriver sets the Driver field in the declarative configuration to the given value.
func (b *CSIPersistentVolumeSourceBuilder) SetDriver(value string) *CSIPersistentVolumeSourceBuilder {
	b.fields.Driver = &value
	return b
}

// RemoveDriver removes the Driver field from the declarative configuration.
func (b *CSIPersistentVolumeSourceBuilder) RemoveDriver() *CSIPersistentVolumeSourceBuilder {
	b.fields.Driver = nil
	return b
}

// GetDriver gets the Driver field from the declarative configuration.
func (b *CSIPersistentVolumeSourceBuilder) GetDriver() (value string, ok bool) {
	if v := b.fields.Driver; v != nil {
		return *v, true
	}
	return value, false
}

// SetVolumeHandle sets the VolumeHandle field in the declarative configuration to the given value.
func (b *CSIPersistentVolumeSourceBuilder) SetVolumeHandle(value string) *CSIPersistentVolumeSourceBuilder {
	b.fields.VolumeHandle = &value
	return b
}

// RemoveVolumeHandle removes the VolumeHandle field from the declarative configuration.
func (b *CSIPersistentVolumeSourceBuilder) RemoveVolumeHandle() *CSIPersistentVolumeSourceBuilder {
	b.fields.VolumeHandle = nil
	return b
}

// GetVolumeHandle gets the VolumeHandle field from the declarative configuration.
func (b *CSIPersistentVolumeSourceBuilder) GetVolumeHandle() (value string, ok bool) {
	if v := b.fields.VolumeHandle; v != nil {
		return *v, true
	}
	return value, false
}

// SetReadOnly sets the ReadOnly field in the declarative configuration to the given value.
func (b *CSIPersistentVolumeSourceBuilder) SetReadOnly(value bool) *CSIPersistentVolumeSourceBuilder {
	b.fields.ReadOnly = &value
	return b
}

// RemoveReadOnly removes the ReadOnly field from the declarative configuration.
func (b *CSIPersistentVolumeSourceBuilder) RemoveReadOnly() *CSIPersistentVolumeSourceBuilder {
	b.fields.ReadOnly = nil
	return b
}

// GetReadOnly gets the ReadOnly field from the declarative configuration.
func (b *CSIPersistentVolumeSourceBuilder) GetReadOnly() (value bool, ok bool) {
	if v := b.fields.ReadOnly; v != nil {
		return *v, true
	}
	return value, false
}

// SetFSType sets the FSType field in the declarative configuration to the given value.
func (b *CSIPersistentVolumeSourceBuilder) SetFSType(value string) *CSIPersistentVolumeSourceBuilder {
	b.fields.FSType = &value
	return b
}

// RemoveFSType removes the FSType field from the declarative configuration.
func (b *CSIPersistentVolumeSourceBuilder) RemoveFSType() *CSIPersistentVolumeSourceBuilder {
	b.fields.FSType = nil
	return b
}

// GetFSType gets the FSType field from the declarative configuration.
func (b *CSIPersistentVolumeSourceBuilder) GetFSType() (value string, ok bool) {
	if v := b.fields.FSType; v != nil {
		return *v, true
	}
	return value, false
}

// SetVolumeAttributes sets the VolumeAttributes field in the declarative configuration to the given value.
func (b *CSIPersistentVolumeSourceBuilder) SetVolumeAttributes(value map[string]string) *CSIPersistentVolumeSourceBuilder {
	b.fields.VolumeAttributes = &value
	return b
}

// RemoveVolumeAttributes removes the VolumeAttributes field from the declarative configuration.
func (b *CSIPersistentVolumeSourceBuilder) RemoveVolumeAttributes() *CSIPersistentVolumeSourceBuilder {
	b.fields.VolumeAttributes = nil
	return b
}

// GetVolumeAttributes gets the VolumeAttributes field from the declarative configuration.
func (b *CSIPersistentVolumeSourceBuilder) GetVolumeAttributes() (value map[string]string, ok bool) {
	if v := b.fields.VolumeAttributes; v != nil {
		return *v, true
	}
	return value, false
}

// SetControllerPublishSecretRef sets the ControllerPublishSecretRef field in the declarative configuration to the given value.
func (b *CSIPersistentVolumeSourceBuilder) SetControllerPublishSecretRef(value *SecretReferenceBuilder) *CSIPersistentVolumeSourceBuilder {
	b.fields.ControllerPublishSecretRef = value
	return b
}

// RemoveControllerPublishSecretRef removes the ControllerPublishSecretRef field from the declarative configuration.
func (b *CSIPersistentVolumeSourceBuilder) RemoveControllerPublishSecretRef() *CSIPersistentVolumeSourceBuilder {
	b.fields.ControllerPublishSecretRef = nil
	return b
}

// GetControllerPublishSecretRef gets the ControllerPublishSecretRef field from the declarative configuration.
func (b *CSIPersistentVolumeSourceBuilder) GetControllerPublishSecretRef() (value *SecretReferenceBuilder, ok bool) {
	return b.fields.ControllerPublishSecretRef, b.fields.ControllerPublishSecretRef != nil
}

// SetNodeStageSecretRef sets the NodeStageSecretRef field in the declarative configuration to the given value.
func (b *CSIPersistentVolumeSourceBuilder) SetNodeStageSecretRef(value *SecretReferenceBuilder) *CSIPersistentVolumeSourceBuilder {
	b.fields.NodeStageSecretRef = value
	return b
}

// RemoveNodeStageSecretRef removes the NodeStageSecretRef field from the declarative configuration.
func (b *CSIPersistentVolumeSourceBuilder) RemoveNodeStageSecretRef() *CSIPersistentVolumeSourceBuilder {
	b.fields.NodeStageSecretRef = nil
	return b
}

// GetNodeStageSecretRef gets the NodeStageSecretRef field from the declarative configuration.
func (b *CSIPersistentVolumeSourceBuilder) GetNodeStageSecretRef() (value *SecretReferenceBuilder, ok bool) {
	return b.fields.NodeStageSecretRef, b.fields.NodeStageSecretRef != nil
}

// SetNodePublishSecretRef sets the NodePublishSecretRef field in the declarative configuration to the given value.
func (b *CSIPersistentVolumeSourceBuilder) SetNodePublishSecretRef(value *SecretReferenceBuilder) *CSIPersistentVolumeSourceBuilder {
	b.fields.NodePublishSecretRef = value
	return b
}

// RemoveNodePublishSecretRef removes the NodePublishSecretRef field from the declarative configuration.
func (b *CSIPersistentVolumeSourceBuilder) RemoveNodePublishSecretRef() *CSIPersistentVolumeSourceBuilder {
	b.fields.NodePublishSecretRef = nil
	return b
}

// GetNodePublishSecretRef gets the NodePublishSecretRef field from the declarative configuration.
func (b *CSIPersistentVolumeSourceBuilder) GetNodePublishSecretRef() (value *SecretReferenceBuilder, ok bool) {
	return b.fields.NodePublishSecretRef, b.fields.NodePublishSecretRef != nil
}

// SetControllerExpandSecretRef sets the ControllerExpandSecretRef field in the declarative configuration to the given value.
func (b *CSIPersistentVolumeSourceBuilder) SetControllerExpandSecretRef(value *SecretReferenceBuilder) *CSIPersistentVolumeSourceBuilder {
	b.fields.ControllerExpandSecretRef = value
	return b
}

// RemoveControllerExpandSecretRef removes the ControllerExpandSecretRef field from the declarative configuration.
func (b *CSIPersistentVolumeSourceBuilder) RemoveControllerExpandSecretRef() *CSIPersistentVolumeSourceBuilder {
	b.fields.ControllerExpandSecretRef = nil
	return b
}

// GetControllerExpandSecretRef gets the ControllerExpandSecretRef field from the declarative configuration.
func (b *CSIPersistentVolumeSourceBuilder) GetControllerExpandSecretRef() (value *SecretReferenceBuilder, ok bool) {
	return b.fields.ControllerExpandSecretRef, b.fields.ControllerExpandSecretRef != nil
}

// ToUnstructured converts CSIPersistentVolumeSourceBuilder to unstructured.
func (b *CSIPersistentVolumeSourceBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to CSIPersistentVolumeSourceBuilder, replacing the contents
// of CSIPersistentVolumeSourceBuilder.
func (b *CSIPersistentVolumeSourceBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &cSIPersistentVolumeSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals CSIPersistentVolumeSourceBuilder to JSON.
func (b *CSIPersistentVolumeSourceBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into CSIPersistentVolumeSourceBuilder, replacing the contents of
// CSIPersistentVolumeSourceBuilder.
func (b *CSIPersistentVolumeSourceBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// CSIPersistentVolumeSourceList represents a list of CSIPersistentVolumeSourceBuilder.
type CSIPersistentVolumeSourceList []*CSIPersistentVolumeSourceBuilder

// CSIPersistentVolumeSourceList represents a map of CSIPersistentVolumeSourceBuilder.
type CSIPersistentVolumeSourceMap map[string]CSIPersistentVolumeSourceBuilder

func (b *CSIPersistentVolumeSourceBuilder) preMarshal() {
}
func (b *CSIPersistentVolumeSourceBuilder) postUnmarshal() {
}
