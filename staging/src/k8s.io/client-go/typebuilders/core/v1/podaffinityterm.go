/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
	v1 "k8s.io/client-go/typebuilders/meta/v1"
)

// PodAffinityTermBuilder represents an declarative configuration of the PodAffinityTerm type for use
// with apply.
type PodAffinityTermBuilder struct {
	fields *podAffinityTermFields
}

// podAffinityTermFields is used by PodAffinityTermBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in PodAffinityTermBuilder before marshalling, and
// are copied out to the builder type in PodAffinityTermBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type podAffinityTermFields struct {
	LabelSelector *v1.LabelSelectorBuilder `json:"labelSelector,omitempty"`
	Namespaces    *[]string                `json:"namespaces,omitempty"`
	TopologyKey   *string                  `json:"topologyKey,omitempty"`
}

func (b *PodAffinityTermBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &podAffinityTermFields{}
	}
}

// PodAffinityTerm constructs an declarative configuration of the PodAffinityTerm type for use with
// apply.
// Provided as a convenience.
func PodAffinityTerm() PodAffinityTermBuilder {
	return PodAffinityTermBuilder{fields: &podAffinityTermFields{}}
}

// SetLabelSelector sets the LabelSelector field in the declarative configuration to the given value.
func (b PodAffinityTermBuilder) SetLabelSelector(value v1.LabelSelectorBuilder) PodAffinityTermBuilder {
	b.ensureInitialized()
	b.fields.LabelSelector = &value
	return b
}

// RemoveLabelSelector removes the LabelSelector field from the declarative configuration.
func (b PodAffinityTermBuilder) RemoveLabelSelector() PodAffinityTermBuilder {
	b.ensureInitialized()
	b.fields.LabelSelector = nil
	return b
}

// GetLabelSelector gets the LabelSelector field from the declarative configuration.
func (b PodAffinityTermBuilder) GetLabelSelector() (value v1.LabelSelectorBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.LabelSelector; v != nil {
		return *v, true
	}
	return value, false
}

// SetNamespaces sets the Namespaces field in the declarative configuration to the given value.
func (b PodAffinityTermBuilder) SetNamespaces(value []string) PodAffinityTermBuilder {
	b.ensureInitialized()
	b.fields.Namespaces = &value
	return b
}

// RemoveNamespaces removes the Namespaces field from the declarative configuration.
func (b PodAffinityTermBuilder) RemoveNamespaces() PodAffinityTermBuilder {
	b.ensureInitialized()
	b.fields.Namespaces = nil
	return b
}

// GetNamespaces gets the Namespaces field from the declarative configuration.
func (b PodAffinityTermBuilder) GetNamespaces() (value []string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Namespaces; v != nil {
		return *v, true
	}
	return value, false
}

// SetTopologyKey sets the TopologyKey field in the declarative configuration to the given value.
func (b PodAffinityTermBuilder) SetTopologyKey(value string) PodAffinityTermBuilder {
	b.ensureInitialized()
	b.fields.TopologyKey = &value
	return b
}

// RemoveTopologyKey removes the TopologyKey field from the declarative configuration.
func (b PodAffinityTermBuilder) RemoveTopologyKey() PodAffinityTermBuilder {
	b.ensureInitialized()
	b.fields.TopologyKey = nil
	return b
}

// GetTopologyKey gets the TopologyKey field from the declarative configuration.
func (b PodAffinityTermBuilder) GetTopologyKey() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.TopologyKey; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts PodAffinityTermBuilder to unstructured.
func (b *PodAffinityTermBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to PodAffinityTermBuilder, replacing the contents
// of PodAffinityTermBuilder.
func (b *PodAffinityTermBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &podAffinityTermFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals PodAffinityTermBuilder to JSON.
func (b *PodAffinityTermBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into PodAffinityTermBuilder, replacing the contents of
// PodAffinityTermBuilder.
func (b *PodAffinityTermBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// PodAffinityTermList represents a list of PodAffinityTermBuilder.
// Provided as a convenience.
type PodAffinityTermList []PodAffinityTermBuilder

// PodAffinityTermList represents a map of PodAffinityTermBuilder.
// Provided as a convenience.
type PodAffinityTermMap map[string]PodAffinityTermBuilder

func (b *PodAffinityTermBuilder) preMarshal() {
}
func (b *PodAffinityTermBuilder) postUnmarshal() {
}
