/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	resource "k8s.io/apimachinery/pkg/api/resource"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ResourceFieldSelectorBuilder represents an declarative configuration of the ResourceFieldSelector type for use
// with apply.
type ResourceFieldSelectorBuilder struct {
	fields *resourceFieldSelectorFields
}

// resourceFieldSelectorFields is used by ResourceFieldSelectorBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in ResourceFieldSelectorBuilder before marshalling, and
// are copied out to the builder type in ResourceFieldSelectorBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type resourceFieldSelectorFields struct {
	ContainerName *string            `json:"containerName,omitempty"`
	Resource      *string            `json:"resource,omitempty"`
	Divisor       *resource.Quantity `json:"divisor,omitempty"`
}

func (b *ResourceFieldSelectorBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &resourceFieldSelectorFields{}
	}
}

// ResourceFieldSelector constructs an declarative configuration of the ResourceFieldSelector type for use with
// apply.
// Provided as a convenience.
func ResourceFieldSelector() ResourceFieldSelectorBuilder {
	return ResourceFieldSelectorBuilder{fields: &resourceFieldSelectorFields{}}
}

// SetContainerName sets the ContainerName field in the declarative configuration to the given value.
func (b ResourceFieldSelectorBuilder) SetContainerName(value string) ResourceFieldSelectorBuilder {
	b.ensureInitialized()
	b.fields.ContainerName = &value
	return b
}

// RemoveContainerName removes the ContainerName field from the declarative configuration.
func (b ResourceFieldSelectorBuilder) RemoveContainerName() ResourceFieldSelectorBuilder {
	b.ensureInitialized()
	b.fields.ContainerName = nil
	return b
}

// GetContainerName gets the ContainerName field from the declarative configuration.
func (b ResourceFieldSelectorBuilder) GetContainerName() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.ContainerName; v != nil {
		return *v, true
	}
	return value, false
}

// SetResource sets the Resource field in the declarative configuration to the given value.
func (b ResourceFieldSelectorBuilder) SetResource(value string) ResourceFieldSelectorBuilder {
	b.ensureInitialized()
	b.fields.Resource = &value
	return b
}

// RemoveResource removes the Resource field from the declarative configuration.
func (b ResourceFieldSelectorBuilder) RemoveResource() ResourceFieldSelectorBuilder {
	b.ensureInitialized()
	b.fields.Resource = nil
	return b
}

// GetResource gets the Resource field from the declarative configuration.
func (b ResourceFieldSelectorBuilder) GetResource() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Resource; v != nil {
		return *v, true
	}
	return value, false
}

// SetDivisor sets the Divisor field in the declarative configuration to the given value.
func (b ResourceFieldSelectorBuilder) SetDivisor(value resource.Quantity) ResourceFieldSelectorBuilder {
	b.ensureInitialized()
	b.fields.Divisor = &value
	return b
}

// RemoveDivisor removes the Divisor field from the declarative configuration.
func (b ResourceFieldSelectorBuilder) RemoveDivisor() ResourceFieldSelectorBuilder {
	b.ensureInitialized()
	b.fields.Divisor = nil
	return b
}

// GetDivisor gets the Divisor field from the declarative configuration.
func (b ResourceFieldSelectorBuilder) GetDivisor() (value resource.Quantity, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Divisor; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ResourceFieldSelectorBuilder to unstructured.
func (b *ResourceFieldSelectorBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ResourceFieldSelectorBuilder, replacing the contents
// of ResourceFieldSelectorBuilder.
func (b *ResourceFieldSelectorBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &resourceFieldSelectorFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ResourceFieldSelectorBuilder to JSON.
func (b *ResourceFieldSelectorBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into ResourceFieldSelectorBuilder, replacing the contents of
// ResourceFieldSelectorBuilder.
func (b *ResourceFieldSelectorBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ResourceFieldSelectorList represents a list of ResourceFieldSelectorBuilder.
// Provided as a convenience.
type ResourceFieldSelectorList []ResourceFieldSelectorBuilder

// ResourceFieldSelectorList represents a map of ResourceFieldSelectorBuilder.
// Provided as a convenience.
type ResourceFieldSelectorMap map[string]ResourceFieldSelectorBuilder

func (b *ResourceFieldSelectorBuilder) preMarshal() {
}
func (b *ResourceFieldSelectorBuilder) postUnmarshal() {
}
