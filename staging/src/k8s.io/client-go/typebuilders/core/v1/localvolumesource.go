/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// LocalVolumeSourceBuilder represents an declarative configuration of the LocalVolumeSource type for use
// with apply.
type LocalVolumeSourceBuilder struct {
	fields *localVolumeSourceFields
}

// localVolumeSourceFields is used by LocalVolumeSourceBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in LocalVolumeSourceBuilder before marshalling, and
// are copied out to the builder type in LocalVolumeSourceBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type localVolumeSourceFields struct {
	Path   *string `json:"path,omitempty"`
	FSType *string `json:"fsType,omitempty"`
}

func (b *LocalVolumeSourceBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &localVolumeSourceFields{}
	}
}

// LocalVolumeSource constructs an declarative configuration of the LocalVolumeSource type for use with
// apply.
// Provided as a convenience.
func LocalVolumeSource() LocalVolumeSourceBuilder {
	return LocalVolumeSourceBuilder{fields: &localVolumeSourceFields{}}
}

// SetPath sets the Path field in the declarative configuration to the given value.
func (b LocalVolumeSourceBuilder) SetPath(value string) LocalVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.Path = &value
	return b
}

// RemovePath removes the Path field from the declarative configuration.
func (b LocalVolumeSourceBuilder) RemovePath() LocalVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.Path = nil
	return b
}

// GetPath gets the Path field from the declarative configuration.
func (b LocalVolumeSourceBuilder) GetPath() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Path; v != nil {
		return *v, true
	}
	return value, false
}

// SetFSType sets the FSType field in the declarative configuration to the given value.
func (b LocalVolumeSourceBuilder) SetFSType(value string) LocalVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.FSType = &value
	return b
}

// RemoveFSType removes the FSType field from the declarative configuration.
func (b LocalVolumeSourceBuilder) RemoveFSType() LocalVolumeSourceBuilder {
	b.ensureInitialized()
	b.fields.FSType = nil
	return b
}

// GetFSType gets the FSType field from the declarative configuration.
func (b LocalVolumeSourceBuilder) GetFSType() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.FSType; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts LocalVolumeSourceBuilder to unstructured.
func (b *LocalVolumeSourceBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to LocalVolumeSourceBuilder, replacing the contents
// of LocalVolumeSourceBuilder.
func (b *LocalVolumeSourceBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &localVolumeSourceFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals LocalVolumeSourceBuilder to JSON.
func (b *LocalVolumeSourceBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into LocalVolumeSourceBuilder, replacing the contents of
// LocalVolumeSourceBuilder.
func (b *LocalVolumeSourceBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// LocalVolumeSourceList represents a list of LocalVolumeSourceBuilder.
// Provided as a convenience.
type LocalVolumeSourceList []LocalVolumeSourceBuilder

// LocalVolumeSourceList represents a map of LocalVolumeSourceBuilder.
// Provided as a convenience.
type LocalVolumeSourceMap map[string]LocalVolumeSourceBuilder

func (b *LocalVolumeSourceBuilder) preMarshal() {
}
func (b *LocalVolumeSourceBuilder) postUnmarshal() {
}
