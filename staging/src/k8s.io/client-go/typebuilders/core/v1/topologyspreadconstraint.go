/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1

import (
	json "encoding/json"

	v1 "k8s.io/api/core/v1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
	metav1 "k8s.io/client-go/typebuilders/meta/v1"
)

// TopologySpreadConstraintBuilder represents an declarative configuration of the TopologySpreadConstraint type for use
// with apply.
type TopologySpreadConstraintBuilder struct {
	fields *topologySpreadConstraintFields
}

// topologySpreadConstraintFields is used by TopologySpreadConstraintBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in TopologySpreadConstraintBuilder before marshalling, and
// are copied out to the builder type in TopologySpreadConstraintBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type topologySpreadConstraintFields struct {
	MaxSkew           *int32                            `json:"maxSkew,omitempty"`
	TopologyKey       *string                           `json:"topologyKey,omitempty"`
	WhenUnsatisfiable *v1.UnsatisfiableConstraintAction `json:"whenUnsatisfiable,omitempty"`
	LabelSelector     *metav1.LabelSelectorBuilder      `json:"labelSelector,omitempty"`
}

func (b *TopologySpreadConstraintBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &topologySpreadConstraintFields{}
	}
}

// TopologySpreadConstraint constructs an declarative configuration of the TopologySpreadConstraint type for use with
// apply.
// Provided as a convenience.
func TopologySpreadConstraint() TopologySpreadConstraintBuilder {
	return TopologySpreadConstraintBuilder{fields: &topologySpreadConstraintFields{}}
}

// SetMaxSkew sets the MaxSkew field in the declarative configuration to the given value.
func (b TopologySpreadConstraintBuilder) SetMaxSkew(value int32) TopologySpreadConstraintBuilder {
	b.ensureInitialized()
	b.fields.MaxSkew = &value
	return b
}

// RemoveMaxSkew removes the MaxSkew field from the declarative configuration.
func (b TopologySpreadConstraintBuilder) RemoveMaxSkew() TopologySpreadConstraintBuilder {
	b.ensureInitialized()
	b.fields.MaxSkew = nil
	return b
}

// GetMaxSkew gets the MaxSkew field from the declarative configuration.
func (b TopologySpreadConstraintBuilder) GetMaxSkew() (value int32, ok bool) {
	b.ensureInitialized()
	if v := b.fields.MaxSkew; v != nil {
		return *v, true
	}
	return value, false
}

// SetTopologyKey sets the TopologyKey field in the declarative configuration to the given value.
func (b TopologySpreadConstraintBuilder) SetTopologyKey(value string) TopologySpreadConstraintBuilder {
	b.ensureInitialized()
	b.fields.TopologyKey = &value
	return b
}

// RemoveTopologyKey removes the TopologyKey field from the declarative configuration.
func (b TopologySpreadConstraintBuilder) RemoveTopologyKey() TopologySpreadConstraintBuilder {
	b.ensureInitialized()
	b.fields.TopologyKey = nil
	return b
}

// GetTopologyKey gets the TopologyKey field from the declarative configuration.
func (b TopologySpreadConstraintBuilder) GetTopologyKey() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.TopologyKey; v != nil {
		return *v, true
	}
	return value, false
}

// SetWhenUnsatisfiable sets the WhenUnsatisfiable field in the declarative configuration to the given value.
func (b TopologySpreadConstraintBuilder) SetWhenUnsatisfiable(value v1.UnsatisfiableConstraintAction) TopologySpreadConstraintBuilder {
	b.ensureInitialized()
	b.fields.WhenUnsatisfiable = &value
	return b
}

// RemoveWhenUnsatisfiable removes the WhenUnsatisfiable field from the declarative configuration.
func (b TopologySpreadConstraintBuilder) RemoveWhenUnsatisfiable() TopologySpreadConstraintBuilder {
	b.ensureInitialized()
	b.fields.WhenUnsatisfiable = nil
	return b
}

// GetWhenUnsatisfiable gets the WhenUnsatisfiable field from the declarative configuration.
func (b TopologySpreadConstraintBuilder) GetWhenUnsatisfiable() (value v1.UnsatisfiableConstraintAction, ok bool) {
	b.ensureInitialized()
	if v := b.fields.WhenUnsatisfiable; v != nil {
		return *v, true
	}
	return value, false
}

// SetLabelSelector sets the LabelSelector field in the declarative configuration to the given value.
func (b TopologySpreadConstraintBuilder) SetLabelSelector(value metav1.LabelSelectorBuilder) TopologySpreadConstraintBuilder {
	b.ensureInitialized()
	b.fields.LabelSelector = &value
	return b
}

// RemoveLabelSelector removes the LabelSelector field from the declarative configuration.
func (b TopologySpreadConstraintBuilder) RemoveLabelSelector() TopologySpreadConstraintBuilder {
	b.ensureInitialized()
	b.fields.LabelSelector = nil
	return b
}

// GetLabelSelector gets the LabelSelector field from the declarative configuration.
func (b TopologySpreadConstraintBuilder) GetLabelSelector() (value metav1.LabelSelectorBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.LabelSelector; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts TopologySpreadConstraintBuilder to unstructured.
func (b *TopologySpreadConstraintBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to TopologySpreadConstraintBuilder, replacing the contents
// of TopologySpreadConstraintBuilder.
func (b *TopologySpreadConstraintBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &topologySpreadConstraintFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals TopologySpreadConstraintBuilder to JSON.
func (b *TopologySpreadConstraintBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into TopologySpreadConstraintBuilder, replacing the contents of
// TopologySpreadConstraintBuilder.
func (b *TopologySpreadConstraintBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// TopologySpreadConstraintList represents a list of TopologySpreadConstraintBuilder.
// Provided as a convenience.
type TopologySpreadConstraintList []TopologySpreadConstraintBuilder

// TopologySpreadConstraintList represents a map of TopologySpreadConstraintBuilder.
// Provided as a convenience.
type TopologySpreadConstraintMap map[string]TopologySpreadConstraintBuilder

func (b *TopologySpreadConstraintBuilder) preMarshal() {
}
func (b *TopologySpreadConstraintBuilder) postUnmarshal() {
}
