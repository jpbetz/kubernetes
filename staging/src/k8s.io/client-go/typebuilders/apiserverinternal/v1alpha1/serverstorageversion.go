/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1alpha1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ServerStorageVersionBuilder represents an declarative configuration of the ServerStorageVersion type for use
// with apply.
type ServerStorageVersionBuilder struct {
	fields serverStorageVersionFields
}

// serverStorageVersionFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in ServerStorageVersionBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type serverStorageVersionFields struct {
	APIServerID       *string   `json:"apiServerID,omitempty"`
	EncodingVersion   *string   `json:"encodingVersion,omitempty"`
	DecodableVersions *[]string `json:"decodableVersions,omitempty"`
}

// ServerStorageVersion constructs an declarative configuration of the ServerStorageVersion type for use with
// apply.
func ServerStorageVersion() *ServerStorageVersionBuilder {
	return &ServerStorageVersionBuilder{}
}

// SetAPIServerID sets the APIServerID field in the declarative configuration to the given value.
func (b *ServerStorageVersionBuilder) SetAPIServerID(value string) *ServerStorageVersionBuilder {
	b.fields.APIServerID = &value
	return b
}

// RemoveAPIServerID removes the APIServerID field from the declarative configuration.
func (b *ServerStorageVersionBuilder) RemoveAPIServerID() *ServerStorageVersionBuilder {
	b.fields.APIServerID = nil
	return b
}

// GetAPIServerID gets the APIServerID field from the declarative configuration.
func (b *ServerStorageVersionBuilder) GetAPIServerID() (value string, ok bool) {
	if v := b.fields.APIServerID; v != nil {
		return *v, true
	}
	return value, false
}

// SetEncodingVersion sets the EncodingVersion field in the declarative configuration to the given value.
func (b *ServerStorageVersionBuilder) SetEncodingVersion(value string) *ServerStorageVersionBuilder {
	b.fields.EncodingVersion = &value
	return b
}

// RemoveEncodingVersion removes the EncodingVersion field from the declarative configuration.
func (b *ServerStorageVersionBuilder) RemoveEncodingVersion() *ServerStorageVersionBuilder {
	b.fields.EncodingVersion = nil
	return b
}

// GetEncodingVersion gets the EncodingVersion field from the declarative configuration.
func (b *ServerStorageVersionBuilder) GetEncodingVersion() (value string, ok bool) {
	if v := b.fields.EncodingVersion; v != nil {
		return *v, true
	}
	return value, false
}

// SetDecodableVersions sets the DecodableVersions field in the declarative configuration to the given value.
func (b *ServerStorageVersionBuilder) SetDecodableVersions(value []string) *ServerStorageVersionBuilder {
	b.fields.DecodableVersions = &value
	return b
}

// RemoveDecodableVersions removes the DecodableVersions field from the declarative configuration.
func (b *ServerStorageVersionBuilder) RemoveDecodableVersions() *ServerStorageVersionBuilder {
	b.fields.DecodableVersions = nil
	return b
}

// GetDecodableVersions gets the DecodableVersions field from the declarative configuration.
func (b *ServerStorageVersionBuilder) GetDecodableVersions() (value []string, ok bool) {
	if v := b.fields.DecodableVersions; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ServerStorageVersionBuilder to unstructured.
func (b *ServerStorageVersionBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ServerStorageVersionBuilder, replacing the contents
// of ServerStorageVersionBuilder.
func (b *ServerStorageVersionBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &serverStorageVersionFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ServerStorageVersionBuilder to JSON.
func (b *ServerStorageVersionBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into ServerStorageVersionBuilder, replacing the contents of
// ServerStorageVersionBuilder.
func (b *ServerStorageVersionBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ServerStorageVersionList represents a list of ServerStorageVersionBuilder.
type ServerStorageVersionList []*ServerStorageVersionBuilder

// ServerStorageVersionList represents a map of ServerStorageVersionBuilder.
type ServerStorageVersionMap map[string]ServerStorageVersionBuilder

func (b *ServerStorageVersionBuilder) preMarshal() {
}
func (b *ServerStorageVersionBuilder) postUnmarshal() {
}
