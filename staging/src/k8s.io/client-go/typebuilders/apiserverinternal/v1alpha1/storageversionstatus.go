/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1alpha1

import (
	json "encoding/json"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// StorageVersionStatusBuilder represents an declarative configuration of the StorageVersionStatus type for use
// with apply.
type StorageVersionStatusBuilder struct {
	fields *storageVersionStatusFields
}

// storageVersionStatusFields is used by StorageVersionStatusBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in StorageVersionStatusBuilder before marshalling, and
// are copied out to the builder type in StorageVersionStatusBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type storageVersionStatusFields struct {
	StorageVersions       *ServerStorageVersionList    `json:"storageVersions,omitempty"`
	CommonEncodingVersion *string                      `json:"commonEncodingVersion,omitempty"`
	Conditions            *StorageVersionConditionList `json:"conditions,omitempty"`
}

func (b *StorageVersionStatusBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &storageVersionStatusFields{}
	}
}

// StorageVersionStatus constructs an declarative configuration of the StorageVersionStatus type for use with
// apply.
// Provided as a convenience.
func StorageVersionStatus() StorageVersionStatusBuilder {
	return StorageVersionStatusBuilder{fields: &storageVersionStatusFields{}}
}

// SetStorageVersions sets the StorageVersions field in the declarative configuration to the given value.
func (b StorageVersionStatusBuilder) SetStorageVersions(value ServerStorageVersionList) StorageVersionStatusBuilder {
	b.ensureInitialized()
	b.fields.StorageVersions = &value
	return b
}

// RemoveStorageVersions removes the StorageVersions field from the declarative configuration.
func (b StorageVersionStatusBuilder) RemoveStorageVersions() StorageVersionStatusBuilder {
	b.ensureInitialized()
	b.fields.StorageVersions = nil
	return b
}

// GetStorageVersions gets the StorageVersions field from the declarative configuration.
func (b StorageVersionStatusBuilder) GetStorageVersions() (value ServerStorageVersionList, ok bool) {
	b.ensureInitialized()
	if v := b.fields.StorageVersions; v != nil {
		return *v, true
	}
	return value, false
}

// SetCommonEncodingVersion sets the CommonEncodingVersion field in the declarative configuration to the given value.
func (b StorageVersionStatusBuilder) SetCommonEncodingVersion(value string) StorageVersionStatusBuilder {
	b.ensureInitialized()
	b.fields.CommonEncodingVersion = &value
	return b
}

// RemoveCommonEncodingVersion removes the CommonEncodingVersion field from the declarative configuration.
func (b StorageVersionStatusBuilder) RemoveCommonEncodingVersion() StorageVersionStatusBuilder {
	b.ensureInitialized()
	b.fields.CommonEncodingVersion = nil
	return b
}

// GetCommonEncodingVersion gets the CommonEncodingVersion field from the declarative configuration.
func (b StorageVersionStatusBuilder) GetCommonEncodingVersion() (value string, ok bool) {
	b.ensureInitialized()
	if v := b.fields.CommonEncodingVersion; v != nil {
		return *v, true
	}
	return value, false
}

// SetConditions sets the Conditions field in the declarative configuration to the given value.
func (b StorageVersionStatusBuilder) SetConditions(value StorageVersionConditionList) StorageVersionStatusBuilder {
	b.ensureInitialized()
	b.fields.Conditions = &value
	return b
}

// RemoveConditions removes the Conditions field from the declarative configuration.
func (b StorageVersionStatusBuilder) RemoveConditions() StorageVersionStatusBuilder {
	b.ensureInitialized()
	b.fields.Conditions = nil
	return b
}

// GetConditions gets the Conditions field from the declarative configuration.
func (b StorageVersionStatusBuilder) GetConditions() (value StorageVersionConditionList, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Conditions; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts StorageVersionStatusBuilder to unstructured.
func (b *StorageVersionStatusBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to StorageVersionStatusBuilder, replacing the contents
// of StorageVersionStatusBuilder.
func (b *StorageVersionStatusBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &storageVersionStatusFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals StorageVersionStatusBuilder to JSON.
func (b *StorageVersionStatusBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into StorageVersionStatusBuilder, replacing the contents of
// StorageVersionStatusBuilder.
func (b *StorageVersionStatusBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// StorageVersionStatusList represents a list of StorageVersionStatusBuilder.
// Provided as a convenience.
type StorageVersionStatusList []StorageVersionStatusBuilder

// StorageVersionStatusList represents a map of StorageVersionStatusBuilder.
// Provided as a convenience.
type StorageVersionStatusMap map[string]StorageVersionStatusBuilder

func (b *StorageVersionStatusBuilder) preMarshal() {
}
func (b *StorageVersionStatusBuilder) postUnmarshal() {
}
