/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1alpha1

import (
	json "encoding/json"

	v1alpha1 "k8s.io/api/flowcontrol/v1alpha1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// LimitResponseBuilder represents an declarative configuration of the LimitResponse type for use
// with apply.
type LimitResponseBuilder struct {
	fields *limitResponseFields
}

// limitResponseFields is used by LimitResponseBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in LimitResponseBuilder before marshalling, and
// are copied out to the builder type in LimitResponseBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type limitResponseFields struct {
	Type    *v1alpha1.LimitResponseType  `json:"type,omitempty"`
	Queuing *QueuingConfigurationBuilder `json:"queuing,omitempty"`
}

func (b *LimitResponseBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &limitResponseFields{}
	}
}

// LimitResponse constructs an declarative configuration of the LimitResponse type for use with
// apply.
// Provided as a convenience.
func LimitResponse() LimitResponseBuilder {
	return LimitResponseBuilder{fields: &limitResponseFields{}}
}

// SetType sets the Type field in the declarative configuration to the given value.
func (b LimitResponseBuilder) SetType(value v1alpha1.LimitResponseType) LimitResponseBuilder {
	b.ensureInitialized()
	b.fields.Type = &value
	return b
}

// RemoveType removes the Type field from the declarative configuration.
func (b LimitResponseBuilder) RemoveType() LimitResponseBuilder {
	b.ensureInitialized()
	b.fields.Type = nil
	return b
}

// GetType gets the Type field from the declarative configuration.
func (b LimitResponseBuilder) GetType() (value v1alpha1.LimitResponseType, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Type; v != nil {
		return *v, true
	}
	return value, false
}

// SetQueuing sets the Queuing field in the declarative configuration to the given value.
func (b LimitResponseBuilder) SetQueuing(value QueuingConfigurationBuilder) LimitResponseBuilder {
	b.ensureInitialized()
	b.fields.Queuing = &value
	return b
}

// RemoveQueuing removes the Queuing field from the declarative configuration.
func (b LimitResponseBuilder) RemoveQueuing() LimitResponseBuilder {
	b.ensureInitialized()
	b.fields.Queuing = nil
	return b
}

// GetQueuing gets the Queuing field from the declarative configuration.
func (b LimitResponseBuilder) GetQueuing() (value QueuingConfigurationBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Queuing; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts LimitResponseBuilder to unstructured.
func (b *LimitResponseBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to LimitResponseBuilder, replacing the contents
// of LimitResponseBuilder.
func (b *LimitResponseBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &limitResponseFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals LimitResponseBuilder to JSON.
func (b *LimitResponseBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into LimitResponseBuilder, replacing the contents of
// LimitResponseBuilder.
func (b *LimitResponseBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// LimitResponseList represents a list of LimitResponseBuilder.
// Provided as a convenience.
type LimitResponseList []LimitResponseBuilder

// LimitResponseList represents a map of LimitResponseBuilder.
// Provided as a convenience.
type LimitResponseMap map[string]LimitResponseBuilder

func (b *LimitResponseBuilder) preMarshal() {
}
func (b *LimitResponseBuilder) postUnmarshal() {
}
