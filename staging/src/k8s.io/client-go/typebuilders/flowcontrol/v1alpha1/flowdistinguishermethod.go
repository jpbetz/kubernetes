/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1alpha1

import (
	json "encoding/json"

	v1alpha1 "k8s.io/api/flowcontrol/v1alpha1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// FlowDistinguisherMethodApplyConfiguration represents an declarative configuration of the FlowDistinguisherMethod type for use
// with apply.
type FlowDistinguisherMethodApplyConfiguration struct {
	fields flowDistinguisherMethodFields
}

// FlowDistinguisherMethodApplyConfiguration constructs an declarative configuration of the FlowDistinguisherMethod type for use with
// apply.
func FlowDistinguisherMethod() *FlowDistinguisherMethodApplyConfiguration {
	return &FlowDistinguisherMethodApplyConfiguration{}
}

// flowDistinguisherMethodFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in FlowDistinguisherMethodApplyConfiguration.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type flowDistinguisherMethodFields struct {
	Type *v1alpha1.FlowDistinguisherMethodType `json:"type,omitempty"`
}

// SetType sets the Type field in the declarative configuration to the given value.
func (b *FlowDistinguisherMethodApplyConfiguration) SetType(value v1alpha1.FlowDistinguisherMethodType) *FlowDistinguisherMethodApplyConfiguration {
	b.fields.Type = &value
	return b
}

// RemoveType removes the Type field from the declarative configuration.
func (b *FlowDistinguisherMethodApplyConfiguration) RemoveType() *FlowDistinguisherMethodApplyConfiguration {
	b.fields.Type = nil
	return b
}

// GetType gets the Type field from the declarative configuration.
func (b *FlowDistinguisherMethodApplyConfiguration) GetType() (value v1alpha1.FlowDistinguisherMethodType, ok bool) {
	if v := b.fields.Type; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts FlowDistinguisherMethodApplyConfiguration to unstructured.
func (b *FlowDistinguisherMethodApplyConfiguration) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to FlowDistinguisherMethodApplyConfiguration, replacing the contents
// of FlowDistinguisherMethodApplyConfiguration.
func (b *FlowDistinguisherMethodApplyConfiguration) FromUnstructured(u map[string]interface{}) error {
	m := &flowDistinguisherMethodFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals FlowDistinguisherMethodApplyConfiguration to JSON.
func (b *FlowDistinguisherMethodApplyConfiguration) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into FlowDistinguisherMethodApplyConfiguration, replacing the contents of
// FlowDistinguisherMethodApplyConfiguration.
func (b *FlowDistinguisherMethodApplyConfiguration) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// FlowDistinguisherMethodList represents a listAlias of FlowDistinguisherMethodApplyConfiguration.
type FlowDistinguisherMethodList []*FlowDistinguisherMethodApplyConfiguration

// FlowDistinguisherMethodList represents a map of FlowDistinguisherMethodApplyConfiguration.
type FlowDistinguisherMethodMap map[string]FlowDistinguisherMethodApplyConfiguration

func (b *FlowDistinguisherMethodApplyConfiguration) preMarshal() {
}
func (b *FlowDistinguisherMethodApplyConfiguration) postUnmarshal() {
}
