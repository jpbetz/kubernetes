/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1alpha1

import (
	json "encoding/json"

	v1alpha1 "k8s.io/api/flowcontrol/v1alpha1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// FlowDistinguisherMethodBuilder represents an declarative configuration of the FlowDistinguisherMethod type for use
// with apply.
type FlowDistinguisherMethodBuilder struct {
	fields *flowDistinguisherMethodFields
}

// flowDistinguisherMethodFields is used by FlowDistinguisherMethodBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in FlowDistinguisherMethodBuilder before marshalling, and
// are copied out to the builder type in FlowDistinguisherMethodBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type flowDistinguisherMethodFields struct {
	Type *v1alpha1.FlowDistinguisherMethodType `json:"type,omitempty"`
}

func (b *FlowDistinguisherMethodBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &flowDistinguisherMethodFields{}
	}
}

// FlowDistinguisherMethod constructs an declarative configuration of the FlowDistinguisherMethod type for use with
// apply.
// Provided as a convenience.
func FlowDistinguisherMethod() FlowDistinguisherMethodBuilder {
	return FlowDistinguisherMethodBuilder{fields: &flowDistinguisherMethodFields{}}
}

// SetType sets the Type field in the declarative configuration to the given value.
func (b FlowDistinguisherMethodBuilder) SetType(value v1alpha1.FlowDistinguisherMethodType) FlowDistinguisherMethodBuilder {
	b.ensureInitialized()
	b.fields.Type = &value
	return b
}

// RemoveType removes the Type field from the declarative configuration.
func (b FlowDistinguisherMethodBuilder) RemoveType() FlowDistinguisherMethodBuilder {
	b.ensureInitialized()
	b.fields.Type = nil
	return b
}

// GetType gets the Type field from the declarative configuration.
func (b FlowDistinguisherMethodBuilder) GetType() (value v1alpha1.FlowDistinguisherMethodType, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Type; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts FlowDistinguisherMethodBuilder to unstructured.
func (b *FlowDistinguisherMethodBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to FlowDistinguisherMethodBuilder, replacing the contents
// of FlowDistinguisherMethodBuilder.
func (b *FlowDistinguisherMethodBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &flowDistinguisherMethodFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals FlowDistinguisherMethodBuilder to JSON.
func (b *FlowDistinguisherMethodBuilder) MarshalJSON() ([]byte, error) {
	u := &unstructured.Unstructured{Object: b.ToUnstructured().(map[string]interface{})}
	return u.MarshalJSON()
}

// UnmarshalJSON unmarshals JSON into FlowDistinguisherMethodBuilder, replacing the contents of
// FlowDistinguisherMethodBuilder.
func (b *FlowDistinguisherMethodBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// FlowDistinguisherMethodList represents a list of FlowDistinguisherMethodBuilder.
// Provided as a convenience.
type FlowDistinguisherMethodList []FlowDistinguisherMethodBuilder

// FlowDistinguisherMethodList represents a map of FlowDistinguisherMethodBuilder.
// Provided as a convenience.
type FlowDistinguisherMethodMap map[string]FlowDistinguisherMethodBuilder

func (b *FlowDistinguisherMethodBuilder) preMarshal() {
}
func (b *FlowDistinguisherMethodBuilder) postUnmarshal() {
}
