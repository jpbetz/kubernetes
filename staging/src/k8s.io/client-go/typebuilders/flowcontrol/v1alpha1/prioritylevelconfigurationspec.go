/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1alpha1

import (
	json "encoding/json"

	v1alpha1 "k8s.io/api/flowcontrol/v1alpha1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// PriorityLevelConfigurationSpecBuilder represents an declarative configuration of the PriorityLevelConfigurationSpec type for use
// with apply.
type PriorityLevelConfigurationSpecBuilder struct {
	fields *priorityLevelConfigurationSpecFields
}

// priorityLevelConfigurationSpecFields is used by PriorityLevelConfigurationSpecBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in PriorityLevelConfigurationSpecBuilder before marshalling, and
// are copied out to the builder type in PriorityLevelConfigurationSpecBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type priorityLevelConfigurationSpecFields struct {
	Type    *v1alpha1.PriorityLevelEnablement         `json:"type,omitempty"`
	Limited *LimitedPriorityLevelConfigurationBuilder `json:"limited,omitempty"`
}

func (b *PriorityLevelConfigurationSpecBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &priorityLevelConfigurationSpecFields{}
	}
}

// PriorityLevelConfigurationSpec constructs an declarative configuration of the PriorityLevelConfigurationSpec type for use with
// apply.
// Provided as a convenience.
func PriorityLevelConfigurationSpec() PriorityLevelConfigurationSpecBuilder {
	return PriorityLevelConfigurationSpecBuilder{fields: &priorityLevelConfigurationSpecFields{}}
}

// SetType sets the Type field in the declarative configuration to the given value.
func (b PriorityLevelConfigurationSpecBuilder) SetType(value v1alpha1.PriorityLevelEnablement) PriorityLevelConfigurationSpecBuilder {
	b.ensureInitialized()
	b.fields.Type = &value
	return b
}

// RemoveType removes the Type field from the declarative configuration.
func (b PriorityLevelConfigurationSpecBuilder) RemoveType() PriorityLevelConfigurationSpecBuilder {
	b.ensureInitialized()
	b.fields.Type = nil
	return b
}

// GetType gets the Type field from the declarative configuration.
func (b PriorityLevelConfigurationSpecBuilder) GetType() (value v1alpha1.PriorityLevelEnablement, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Type; v != nil {
		return *v, true
	}
	return value, false
}

// SetLimited sets the Limited field in the declarative configuration to the given value.
func (b PriorityLevelConfigurationSpecBuilder) SetLimited(value LimitedPriorityLevelConfigurationBuilder) PriorityLevelConfigurationSpecBuilder {
	b.ensureInitialized()
	b.fields.Limited = &value
	return b
}

// RemoveLimited removes the Limited field from the declarative configuration.
func (b PriorityLevelConfigurationSpecBuilder) RemoveLimited() PriorityLevelConfigurationSpecBuilder {
	b.ensureInitialized()
	b.fields.Limited = nil
	return b
}

// GetLimited gets the Limited field from the declarative configuration.
func (b PriorityLevelConfigurationSpecBuilder) GetLimited() (value LimitedPriorityLevelConfigurationBuilder, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Limited; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts PriorityLevelConfigurationSpecBuilder to unstructured.
func (b *PriorityLevelConfigurationSpecBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to PriorityLevelConfigurationSpecBuilder, replacing the contents
// of PriorityLevelConfigurationSpecBuilder.
func (b *PriorityLevelConfigurationSpecBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &priorityLevelConfigurationSpecFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals PriorityLevelConfigurationSpecBuilder to JSON.
func (b *PriorityLevelConfigurationSpecBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into PriorityLevelConfigurationSpecBuilder, replacing the contents of
// PriorityLevelConfigurationSpecBuilder.
func (b *PriorityLevelConfigurationSpecBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// PriorityLevelConfigurationSpecList represents a list of PriorityLevelConfigurationSpecBuilder.
// Provided as a convenience.
type PriorityLevelConfigurationSpecList []PriorityLevelConfigurationSpecBuilder

// PriorityLevelConfigurationSpecList represents a map of PriorityLevelConfigurationSpecBuilder.
// Provided as a convenience.
type PriorityLevelConfigurationSpecMap map[string]PriorityLevelConfigurationSpecBuilder

func (b *PriorityLevelConfigurationSpecBuilder) preMarshal() {
}
func (b *PriorityLevelConfigurationSpecBuilder) postUnmarshal() {
}
