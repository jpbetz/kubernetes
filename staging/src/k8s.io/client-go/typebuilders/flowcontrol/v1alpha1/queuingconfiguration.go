/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1alpha1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// QueuingConfigurationBuilder represents an declarative configuration of the QueuingConfiguration type for use
// with apply.
type QueuingConfigurationBuilder struct {
	fields *queuingConfigurationFields
}

// queuingConfigurationFields is used by QueuingConfigurationBuilder for json marshalling and unmarshalling.
// Is the source-of-truth for all fields except inlined fields.
// Inline fields are copied in from their builder type in QueuingConfigurationBuilder before marshalling, and
// are copied out to the builder type in QueuingConfigurationBuilder after unmarshalling.
// Inlined builder types cannot be embedded because they do not expose their fields directly.
type queuingConfigurationFields struct {
	Queues           *int32 `json:"queues,omitempty"`
	HandSize         *int32 `json:"handSize,omitempty"`
	QueueLengthLimit *int32 `json:"queueLengthLimit,omitempty"`
}

func (b *QueuingConfigurationBuilder) ensureInitialized() {
	if b.fields == nil {
		b.fields = &queuingConfigurationFields{}
	}
}

// QueuingConfiguration constructs an declarative configuration of the QueuingConfiguration type for use with
// apply.
// Provided as a convenience.
func QueuingConfiguration() QueuingConfigurationBuilder {
	return QueuingConfigurationBuilder{fields: &queuingConfigurationFields{}}
}

// SetQueues sets the Queues field in the declarative configuration to the given value.
func (b QueuingConfigurationBuilder) SetQueues(value int32) QueuingConfigurationBuilder {
	b.ensureInitialized()
	b.fields.Queues = &value
	return b
}

// RemoveQueues removes the Queues field from the declarative configuration.
func (b QueuingConfigurationBuilder) RemoveQueues() QueuingConfigurationBuilder {
	b.ensureInitialized()
	b.fields.Queues = nil
	return b
}

// GetQueues gets the Queues field from the declarative configuration.
func (b QueuingConfigurationBuilder) GetQueues() (value int32, ok bool) {
	b.ensureInitialized()
	if v := b.fields.Queues; v != nil {
		return *v, true
	}
	return value, false
}

// SetHandSize sets the HandSize field in the declarative configuration to the given value.
func (b QueuingConfigurationBuilder) SetHandSize(value int32) QueuingConfigurationBuilder {
	b.ensureInitialized()
	b.fields.HandSize = &value
	return b
}

// RemoveHandSize removes the HandSize field from the declarative configuration.
func (b QueuingConfigurationBuilder) RemoveHandSize() QueuingConfigurationBuilder {
	b.ensureInitialized()
	b.fields.HandSize = nil
	return b
}

// GetHandSize gets the HandSize field from the declarative configuration.
func (b QueuingConfigurationBuilder) GetHandSize() (value int32, ok bool) {
	b.ensureInitialized()
	if v := b.fields.HandSize; v != nil {
		return *v, true
	}
	return value, false
}

// SetQueueLengthLimit sets the QueueLengthLimit field in the declarative configuration to the given value.
func (b QueuingConfigurationBuilder) SetQueueLengthLimit(value int32) QueuingConfigurationBuilder {
	b.ensureInitialized()
	b.fields.QueueLengthLimit = &value
	return b
}

// RemoveQueueLengthLimit removes the QueueLengthLimit field from the declarative configuration.
func (b QueuingConfigurationBuilder) RemoveQueueLengthLimit() QueuingConfigurationBuilder {
	b.ensureInitialized()
	b.fields.QueueLengthLimit = nil
	return b
}

// GetQueueLengthLimit gets the QueueLengthLimit field from the declarative configuration.
func (b QueuingConfigurationBuilder) GetQueueLengthLimit() (value int32, ok bool) {
	b.ensureInitialized()
	if v := b.fields.QueueLengthLimit; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts QueuingConfigurationBuilder to unstructured.
func (b *QueuingConfigurationBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.ensureInitialized()
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to QueuingConfigurationBuilder, replacing the contents
// of QueuingConfigurationBuilder.
func (b *QueuingConfigurationBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &queuingConfigurationFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals QueuingConfigurationBuilder to JSON.
func (b *QueuingConfigurationBuilder) MarshalJSON() ([]byte, error) {
	b.ensureInitialized()
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into QueuingConfigurationBuilder, replacing the contents of
// QueuingConfigurationBuilder.
func (b *QueuingConfigurationBuilder) UnmarshalJSON(data []byte) error {
	b.ensureInitialized()
	if err := json.Unmarshal(data, b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// QueuingConfigurationList represents a list of QueuingConfigurationBuilder.
// Provided as a convenience.
type QueuingConfigurationList []QueuingConfigurationBuilder

// QueuingConfigurationList represents a map of QueuingConfigurationBuilder.
// Provided as a convenience.
type QueuingConfigurationMap map[string]QueuingConfigurationBuilder

func (b *QueuingConfigurationBuilder) preMarshal() {
}
func (b *QueuingConfigurationBuilder) postUnmarshal() {
}
