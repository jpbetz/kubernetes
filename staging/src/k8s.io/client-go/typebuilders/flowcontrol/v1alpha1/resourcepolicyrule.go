/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by typebuilder-gen. DO NOT EDIT.

package v1alpha1

import (
	json "encoding/json"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// ResourcePolicyRuleBuilder represents an declarative configuration of the ResourcePolicyRule type for use
// with apply.
type ResourcePolicyRuleBuilder struct {
	fields resourcePolicyRuleFields
}

// resourcePolicyRuleFields owns all fields except inlined fields.
// Inline fields are owned by their respective inline type in ResourcePolicyRuleBuilder.
// They are copied to this type before marshalling, and are copied out
// after unmarshalling. The inlined types cannot be embedded because they do
// not expose their fields directly.
type resourcePolicyRuleFields struct {
	Verbs        *[]string `json:"verbs,omitempty"`
	APIGroups    *[]string `json:"apiGroups,omitempty"`
	Resources    *[]string `json:"resources,omitempty"`
	ClusterScope *bool     `json:"clusterScope,omitempty"`
	Namespaces   *[]string `json:"namespaces,omitempty"`
}

// ResourcePolicyRule constructs an declarative configuration of the ResourcePolicyRule type for use with
// apply.
func ResourcePolicyRule() *ResourcePolicyRuleBuilder {
	return &ResourcePolicyRuleBuilder{}
}

// SetVerbs sets the Verbs field in the declarative configuration to the given value.
func (b *ResourcePolicyRuleBuilder) SetVerbs(value []string) *ResourcePolicyRuleBuilder {
	b.fields.Verbs = &value
	return b
}

// RemoveVerbs removes the Verbs field from the declarative configuration.
func (b *ResourcePolicyRuleBuilder) RemoveVerbs() *ResourcePolicyRuleBuilder {
	b.fields.Verbs = nil
	return b
}

// GetVerbs gets the Verbs field from the declarative configuration.
func (b *ResourcePolicyRuleBuilder) GetVerbs() (value []string, ok bool) {
	if v := b.fields.Verbs; v != nil {
		return *v, true
	}
	return value, false
}

// SetAPIGroups sets the APIGroups field in the declarative configuration to the given value.
func (b *ResourcePolicyRuleBuilder) SetAPIGroups(value []string) *ResourcePolicyRuleBuilder {
	b.fields.APIGroups = &value
	return b
}

// RemoveAPIGroups removes the APIGroups field from the declarative configuration.
func (b *ResourcePolicyRuleBuilder) RemoveAPIGroups() *ResourcePolicyRuleBuilder {
	b.fields.APIGroups = nil
	return b
}

// GetAPIGroups gets the APIGroups field from the declarative configuration.
func (b *ResourcePolicyRuleBuilder) GetAPIGroups() (value []string, ok bool) {
	if v := b.fields.APIGroups; v != nil {
		return *v, true
	}
	return value, false
}

// SetResources sets the Resources field in the declarative configuration to the given value.
func (b *ResourcePolicyRuleBuilder) SetResources(value []string) *ResourcePolicyRuleBuilder {
	b.fields.Resources = &value
	return b
}

// RemoveResources removes the Resources field from the declarative configuration.
func (b *ResourcePolicyRuleBuilder) RemoveResources() *ResourcePolicyRuleBuilder {
	b.fields.Resources = nil
	return b
}

// GetResources gets the Resources field from the declarative configuration.
func (b *ResourcePolicyRuleBuilder) GetResources() (value []string, ok bool) {
	if v := b.fields.Resources; v != nil {
		return *v, true
	}
	return value, false
}

// SetClusterScope sets the ClusterScope field in the declarative configuration to the given value.
func (b *ResourcePolicyRuleBuilder) SetClusterScope(value bool) *ResourcePolicyRuleBuilder {
	b.fields.ClusterScope = &value
	return b
}

// RemoveClusterScope removes the ClusterScope field from the declarative configuration.
func (b *ResourcePolicyRuleBuilder) RemoveClusterScope() *ResourcePolicyRuleBuilder {
	b.fields.ClusterScope = nil
	return b
}

// GetClusterScope gets the ClusterScope field from the declarative configuration.
func (b *ResourcePolicyRuleBuilder) GetClusterScope() (value bool, ok bool) {
	if v := b.fields.ClusterScope; v != nil {
		return *v, true
	}
	return value, false
}

// SetNamespaces sets the Namespaces field in the declarative configuration to the given value.
func (b *ResourcePolicyRuleBuilder) SetNamespaces(value []string) *ResourcePolicyRuleBuilder {
	b.fields.Namespaces = &value
	return b
}

// RemoveNamespaces removes the Namespaces field from the declarative configuration.
func (b *ResourcePolicyRuleBuilder) RemoveNamespaces() *ResourcePolicyRuleBuilder {
	b.fields.Namespaces = nil
	return b
}

// GetNamespaces gets the Namespaces field from the declarative configuration.
func (b *ResourcePolicyRuleBuilder) GetNamespaces() (value []string, ok bool) {
	if v := b.fields.Namespaces; v != nil {
		return *v, true
	}
	return value, false
}

// ToUnstructured converts ResourcePolicyRuleBuilder to unstructured.
func (b *ResourcePolicyRuleBuilder) ToUnstructured() interface{} {
	if b == nil {
		return nil
	}
	b.preMarshal()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(&b.fields)
	if err != nil {
		panic(err)
	}
	return u
}

// FromUnstructured converts unstructured to ResourcePolicyRuleBuilder, replacing the contents
// of ResourcePolicyRuleBuilder.
func (b *ResourcePolicyRuleBuilder) FromUnstructured(u map[string]interface{}) error {
	m := &resourcePolicyRuleFields{}
	err := runtime.DefaultUnstructuredConverter.FromUnstructured(u, m)
	if err != nil {
		return err
	}
	b.fields = *m
	b.postUnmarshal()
	return nil
}

// MarshalJSON marshals ResourcePolicyRuleBuilder to JSON.
func (b *ResourcePolicyRuleBuilder) MarshalJSON() ([]byte, error) {
	b.preMarshal()
	return json.Marshal(b.fields)
}

// UnmarshalJSON unmarshals JSON into ResourcePolicyRuleBuilder, replacing the contents of
// ResourcePolicyRuleBuilder.
func (b *ResourcePolicyRuleBuilder) UnmarshalJSON(data []byte) error {
	if err := json.Unmarshal(data, &b.fields); err != nil {
		return err
	}
	b.postUnmarshal()
	return nil
}

// ResourcePolicyRuleList represents a list of ResourcePolicyRuleBuilder.
type ResourcePolicyRuleList []*ResourcePolicyRuleBuilder

// ResourcePolicyRuleList represents a map of ResourcePolicyRuleBuilder.
type ResourcePolicyRuleMap map[string]ResourcePolicyRuleBuilder

func (b *ResourcePolicyRuleBuilder) preMarshal() {
}
func (b *ResourcePolicyRuleBuilder) postUnmarshal() {
}
