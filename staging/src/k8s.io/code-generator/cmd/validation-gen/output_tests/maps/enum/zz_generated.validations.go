//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by validation-gen. DO NOT EDIT.

package enum

import (
	fmt "fmt"

	operation "k8s.io/apimachinery/pkg/api/operation"
	safe "k8s.io/apimachinery/pkg/api/safe"
	validate "k8s.io/apimachinery/pkg/api/validate"
	field "k8s.io/apimachinery/pkg/util/validation/field"
	testscheme "k8s.io/code-generator/cmd/validation-gen/testscheme"
)

func init() { localSchemeBuilder.Register(RegisterValidations) }

// RegisterValidations adds validation functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterValidations(scheme *testscheme.Scheme) error {
	scheme.AddValidationFunc((*T1)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_T1(opCtx, nil /* fldPath */, obj.(*T1), safe.Cast[*T1](oldObj))
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	return nil
}

func Validate_E1(opCtx operation.Context, fldPath *field.Path, obj, oldObj *E1) (errs field.ErrorList) {
	// type E1
	errs = append(errs, validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "type E1")...)

	return errs
}

func Validate_T1(opCtx operation.Context, fldPath *field.Path, obj, oldObj *T1) (errs field.ErrorList) {
	// field T1.TypeMeta has no validation

	// field T1.MSE1
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj map[string]E1) (errs field.ErrorList) {
			errs = append(errs, validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "field T1.MSE1")...)
			for key, val := range obj {
				errs = append(errs,
					func(fldPath *field.Path, obj, oldObj *string) (errs field.ErrorList) {
						errs = append(errs, validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "T1.MSE1[keys]")...)
						return
					}(fldPath, &key, nil)...)
				errs = append(errs,
					func(fldPath *field.Path, obj, oldObj *E1) (errs field.ErrorList) {
						errs = append(errs, validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "T1.MSE1[vals]")...)
						errs = append(errs, Validate_E1(opCtx, fldPath, obj, oldObj)...)
						return
					}(fldPath.Key(string(key)), &val, safe.Lookup(oldObj, key, safe.PtrTo))...)
			}
			return
		}(fldPath.Child("mse1"), obj.MSE1, safe.Field(oldObj, func(oldObj *T1) map[string]E1 { return oldObj.MSE1 }))...)

	// field T1.MSPE1
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj map[string]*E1) (errs field.ErrorList) {
			errs = append(errs, validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "field T1.MSPE1")...)
			for key, val := range obj {
				errs = append(errs,
					func(fldPath *field.Path, obj, oldObj *string) (errs field.ErrorList) {
						errs = append(errs, validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "T1.MSPE1[keys]")...)
						return
					}(fldPath, &key, nil)...)
				errs = append(errs,
					func(fldPath *field.Path, obj, oldObj *E1) (errs field.ErrorList) {
						errs = append(errs, validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "T1.MSPE1[vals]")...)
						errs = append(errs, Validate_E1(opCtx, fldPath, obj, oldObj)...)
						return
					}(fldPath.Key(string(key)), val, safe.Lookup(oldObj, key, safe.Ident))...)
			}
			return
		}(fldPath.Child("mspe1"), obj.MSPE1, safe.Field(oldObj, func(oldObj *T1) map[string]*E1 { return oldObj.MSPE1 }))...)

	// field T1.ME1S
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj map[E1]string) (errs field.ErrorList) {
			errs = append(errs, validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "field T1.ME1S")...)
			for key, val := range obj {
				errs = append(errs,
					func(fldPath *field.Path, obj, oldObj *E1) (errs field.ErrorList) {
						errs = append(errs, validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "T1.ME1S[keys]")...)
						errs = append(errs, Validate_E1(opCtx, fldPath, obj, oldObj)...)
						return
					}(fldPath, &key, nil)...)
				errs = append(errs,
					func(fldPath *field.Path, obj, oldObj *string) (errs field.ErrorList) {
						errs = append(errs, validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "T1.ME1S[vals]")...)
						return
					}(fldPath.Key(string(key)), &val, safe.Lookup(oldObj, key, safe.PtrTo))...)
			}
			return
		}(fldPath.Child("me1s"), obj.ME1S, safe.Field(oldObj, func(oldObj *T1) map[E1]string { return oldObj.ME1S }))...)

	return errs
}
