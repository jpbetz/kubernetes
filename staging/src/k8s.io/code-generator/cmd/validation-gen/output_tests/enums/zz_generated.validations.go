//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by validation-gen. DO NOT EDIT.

package enums

import (
	fmt "fmt"

	validate "k8s.io/apimachinery/pkg/api/validate"
	runtime "k8s.io/apimachinery/pkg/runtime"
	sets "k8s.io/apimachinery/pkg/util/sets"
	field "k8s.io/apimachinery/pkg/util/validation/field"
)

func init() { localSchemeBuilder.Register(RegisterValidations) }

// RegisterValidations adds validation functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterValidations(scheme *runtime.Scheme) error {
	scheme.AddValidationFunc((*T1)(nil), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_T1(obj.(*T1), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	return nil
}

var symbolsForE0 = sets.New[E0]()

func Validate_E0(obj *E0, fldPath *field.Path) (errs field.ErrorList) {
	// type E0
	if obj != nil {
		errs = append(errs, validate.Enum(fldPath, *obj, symbolsForE0)...)
	}

	return errs
}

var symbolsForE1 = sets.New[E1](e1V1)

func Validate_E1(obj *E1, fldPath *field.Path) (errs field.ErrorList) {
	// type E1
	if obj != nil {
		errs = append(errs, validate.Enum(fldPath, *obj, symbolsForE1)...)
	}

	return errs
}

var symbolsForE2 = sets.New[E2](e2V1, e2V2)

func Validate_E2(obj *E2, fldPath *field.Path) (errs field.ErrorList) {
	// type E2
	if obj != nil {
		errs = append(errs, validate.Enum(fldPath, *obj, symbolsForE2)...)
	}

	return errs
}

func Validate_T1(obj *T1, fldPath *field.Path) (errs field.ErrorList) {
	// field T1.TypeMeta has no validation

	// field T1.E0
	errs = append(errs,
		func(obj E0, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, Validate_E0(&obj, fldPath)...)
			return
		}(obj.E0, fldPath.Child("e0"))...)

	// field T1.PE0
	errs = append(errs,
		func(obj *E0, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, Validate_E0(obj, fldPath)...)
			}
			return
		}(obj.PE0, fldPath.Child("pe0"))...)

	// field T1.E1
	errs = append(errs,
		func(obj E1, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, Validate_E1(&obj, fldPath)...)
			return
		}(obj.E1, fldPath.Child("e1"))...)

	// field T1.PE1
	errs = append(errs,
		func(obj *E1, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, Validate_E1(obj, fldPath)...)
			}
			return
		}(obj.PE1, fldPath.Child("pe1"))...)

	// field T1.E2
	errs = append(errs,
		func(obj E2, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, Validate_E2(&obj, fldPath)...)
			return
		}(obj.E2, fldPath.Child("e2"))...)

	// field T1.PE2
	errs = append(errs,
		func(obj *E2, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, Validate_E2(obj, fldPath)...)
			}
			return
		}(obj.PE2, fldPath.Child("pe2"))...)

	return errs
}
