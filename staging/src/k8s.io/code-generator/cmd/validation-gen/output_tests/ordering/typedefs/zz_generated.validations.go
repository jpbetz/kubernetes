//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by validation-gen. DO NOT EDIT.

package typedefs

import (
	fmt "fmt"

	validate "k8s.io/apimachinery/pkg/api/validate"
	runtime "k8s.io/apimachinery/pkg/runtime"
	field "k8s.io/apimachinery/pkg/util/validation/field"
)

func init() { localSchemeBuilder.Register(RegisterValidations) }

// RegisterValidations adds validation functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterValidations(scheme *runtime.Scheme) error {
	scheme.AddValidationFunc(new(E00), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_E00(obj.(*E00), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(E01), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_E01(obj.(*E01), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(E02), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_E02(obj.(*E02), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(E03), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_E03(obj.(*E03), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(E04), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_E04(obj.(*E04), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(E05), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_E05(obj.(*E05), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(E06), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_E06(obj.(*E06), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(E07), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_E07(obj.(*E07), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(E08), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_E08(obj.(*E08), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(E09), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_E09(obj.(*E09), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(E10), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_E10(obj.(*E10), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(E11), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_E11(obj.(*E11), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(E12), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_E12(obj.(*E12), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(E13), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_E13(obj.(*E13), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(E14), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_E14(obj.(*E14), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(E15), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_E15(obj.(*E15), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(EMultiple), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_EMultiple(obj.(*EMultiple), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	return nil
}

func Validate_E00(obj *E00, fldPath *field.Path) (errs field.ErrorList) {
	return errs
}

func Validate_E01(obj *E01, fldPath *field.Path) (errs field.ErrorList) {
	// type E01
	if obj != nil {
		errs = append(errs, validate.FixedResult(fldPath, *obj, true, "E01, no flags")...)
	}

	return errs
}

func Validate_E02(obj *E02, fldPath *field.Path) (errs field.ErrorList) {
	// type E02
	errs = append(errs, validate.FixedResult(fldPath, obj, true, "E02, PtrOK")...)

	return errs
}

func Validate_E03(obj *E03, fldPath *field.Path) (errs field.ErrorList) {
	// type E03
	errs = append(errs, validate.FixedResult(fldPath, obj, true, "E03, PtrOK")...)
	if obj != nil {
		errs = append(errs, validate.FixedResult(fldPath, *obj, true, "E03, no flags")...)
	}

	return errs
}

func Validate_E04(obj *E04, fldPath *field.Path) (errs field.ErrorList) {
	// type E04
	if obj != nil {
		if e := validate.FixedResult(fldPath, *obj, true, "E04, IsFatal"); len(e) != 0 {
			errs = append(errs, e...)
			return // fatal
		}
	}

	return errs
}

func Validate_E05(obj *E05, fldPath *field.Path) (errs field.ErrorList) {
	// type E05
	if obj != nil {
		if e := validate.FixedResult(fldPath, *obj, true, "E05, IsFatal"); len(e) != 0 {
			errs = append(errs, e...)
			return // fatal
		}
		errs = append(errs, validate.FixedResult(fldPath, *obj, true, "E05, no flags")...)
	}

	return errs
}

func Validate_E06(obj *E06, fldPath *field.Path) (errs field.ErrorList) {
	// type E06
	if obj != nil {
		if e := validate.FixedResult(fldPath, *obj, true, "E06, IsFatal"); len(e) != 0 {
			errs = append(errs, e...)
			return // fatal
		}
	}
	errs = append(errs, validate.FixedResult(fldPath, obj, true, "E06, PtrOK")...)

	return errs
}

func Validate_E07(obj *E07, fldPath *field.Path) (errs field.ErrorList) {
	// type E07
	if obj != nil {
		if e := validate.FixedResult(fldPath, *obj, true, "E07, IsFatal"); len(e) != 0 {
			errs = append(errs, e...)
			return // fatal
		}
	}
	errs = append(errs, validate.FixedResult(fldPath, obj, true, "E07, PtrOK")...)
	if obj != nil {
		errs = append(errs, validate.FixedResult(fldPath, *obj, true, "E07, no flags")...)
	}

	return errs
}

func Validate_E08(obj *E08, fldPath *field.Path) (errs field.ErrorList) {
	// type E08
	if e := validate.FixedResult(fldPath, obj, true, "E08, PtrOK|IsFatal"); len(e) != 0 {
		errs = append(errs, e...)
		return // fatal
	}

	return errs
}

func Validate_E09(obj *E09, fldPath *field.Path) (errs field.ErrorList) {
	// type E09
	if e := validate.FixedResult(fldPath, obj, true, "E09, PtrOK|IsFatal"); len(e) != 0 {
		errs = append(errs, e...)
		return // fatal
	}
	if obj != nil {
		errs = append(errs, validate.FixedResult(fldPath, *obj, true, "E09, no flags")...)
	}

	return errs
}

func Validate_E10(obj *E10, fldPath *field.Path) (errs field.ErrorList) {
	// type E10
	if e := validate.FixedResult(fldPath, obj, true, "E10, PtrOK|IsFatal"); len(e) != 0 {
		errs = append(errs, e...)
		return // fatal
	}
	errs = append(errs, validate.FixedResult(fldPath, obj, true, "E10, PtrOK")...)

	return errs
}

func Validate_E11(obj *E11, fldPath *field.Path) (errs field.ErrorList) {
	// type E11
	if e := validate.FixedResult(fldPath, obj, true, "E11, PtrOK|IsFatal"); len(e) != 0 {
		errs = append(errs, e...)
		return // fatal
	}
	errs = append(errs, validate.FixedResult(fldPath, obj, true, "E11, PtrOK")...)
	if obj != nil {
		errs = append(errs, validate.FixedResult(fldPath, *obj, true, "E11, no flags")...)
	}

	return errs
}

func Validate_E12(obj *E12, fldPath *field.Path) (errs field.ErrorList) {
	// type E12
	if e := validate.FixedResult(fldPath, obj, true, "E12, PtrOK|IsFatal"); len(e) != 0 {
		errs = append(errs, e...)
		return // fatal
	}
	if obj != nil {
		if e := validate.FixedResult(fldPath, *obj, true, "E12, IsFatal"); len(e) != 0 {
			errs = append(errs, e...)
			return // fatal
		}
	}

	return errs
}

func Validate_E13(obj *E13, fldPath *field.Path) (errs field.ErrorList) {
	// type E13
	if e := validate.FixedResult(fldPath, obj, true, "E13, PtrOK|IsFatal"); len(e) != 0 {
		errs = append(errs, e...)
		return // fatal
	}
	if obj != nil {
		if e := validate.FixedResult(fldPath, *obj, true, "E13, IsFatal"); len(e) != 0 {
			errs = append(errs, e...)
			return // fatal
		}
		errs = append(errs, validate.FixedResult(fldPath, *obj, true, "E13, no flags")...)
	}

	return errs
}

func Validate_E14(obj *E14, fldPath *field.Path) (errs field.ErrorList) {
	// type E14
	if e := validate.FixedResult(fldPath, obj, true, "E14, PtrOK|IsFatal"); len(e) != 0 {
		errs = append(errs, e...)
		return // fatal
	}
	if obj != nil {
		if e := validate.FixedResult(fldPath, *obj, true, "E14, IsFatal"); len(e) != 0 {
			errs = append(errs, e...)
			return // fatal
		}
	}
	errs = append(errs, validate.FixedResult(fldPath, obj, true, "E14, PtrOK")...)

	return errs
}

func Validate_E15(obj *E15, fldPath *field.Path) (errs field.ErrorList) {
	// type E15
	if e := validate.FixedResult(fldPath, obj, true, "E15, PtrOK|IsFatal"); len(e) != 0 {
		errs = append(errs, e...)
		return // fatal
	}
	if obj != nil {
		if e := validate.FixedResult(fldPath, *obj, true, "E15, IsFatal"); len(e) != 0 {
			errs = append(errs, e...)
			return // fatal
		}
	}
	errs = append(errs, validate.FixedResult(fldPath, obj, true, "E15, PtrOK")...)
	if obj != nil {
		errs = append(errs, validate.FixedResult(fldPath, *obj, true, "E15, no flags")...)
	}

	return errs
}

func Validate_EMultiple(obj *EMultiple, fldPath *field.Path) (errs field.ErrorList) {
	// type EMultiple
	if e := validate.FixedResult(fldPath, obj, true, "EMultiple, PtrOK|IsFatal 1"); len(e) != 0 {
		errs = append(errs, e...)
		return // fatal
	}
	if e := validate.FixedResult(fldPath, obj, true, "EMultiple, PtrOK|IsFatal 2"); len(e) != 0 {
		errs = append(errs, e...)
		return // fatal
	}
	if obj != nil {
		if e := validate.FixedResult(fldPath, *obj, true, "EMultiple, IsFatal 1"); len(e) != 0 {
			errs = append(errs, e...)
			return // fatal
		}
		if e := validate.FixedResult(fldPath, *obj, true, "EMultiple, IsFatal 2"); len(e) != 0 {
			errs = append(errs, e...)
			return // fatal
		}
	}
	errs = append(errs, validate.FixedResult(fldPath, obj, true, "EMultiple, PtrOK 1")...)
	errs = append(errs, validate.FixedResult(fldPath, obj, true, "EMultiple, PtrOK 2")...)
	if obj != nil {
		errs = append(errs, validate.FixedResult(fldPath, *obj, true, "EMultiple, no flags 1")...)
		errs = append(errs, validate.FixedResult(fldPath, *obj, true, "E0, string payload")...)
		errs = append(errs, validate.FixedResult(fldPath, *obj, true, "EMultiple, no flags 2")...)
	}

	return errs
}
