//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by validation-gen. DO NOT EDIT.

package structs

import (
	fmt "fmt"

	validate "k8s.io/apimachinery/pkg/api/validate"
	runtime "k8s.io/apimachinery/pkg/runtime"
	field "k8s.io/apimachinery/pkg/util/validation/field"
)

func init() { localSchemeBuilder.Register(RegisterValidations) }

// RegisterValidations adds validation functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterValidations(scheme *runtime.Scheme) error {
	scheme.AddValidationFunc(new(T00), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_T00(obj.(*T00), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(T01), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_T01(obj.(*T01), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(T02), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_T02(obj.(*T02), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(T03), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_T03(obj.(*T03), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(T04), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_T04(obj.(*T04), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(T05), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_T05(obj.(*T05), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(T06), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_T06(obj.(*T06), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(T07), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_T07(obj.(*T07), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(T08), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_T08(obj.(*T08), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(T09), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_T09(obj.(*T09), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(T10), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_T10(obj.(*T10), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(T11), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_T11(obj.(*T11), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(T12), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_T12(obj.(*T12), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(T13), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_T13(obj.(*T13), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(T14), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_T14(obj.(*T14), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(T15), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_T15(obj.(*T15), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc(new(TMultiple), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_TMultiple(obj.(*TMultiple), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	return nil
}

func Validate_T00(obj *T00, fldPath *field.Path) (errs field.ErrorList) {
	// field T00.TypeMeta has no validation
	// field T00.S has no validation
	// field T00.PS has no validation

	// field T00.T
	errs = append(errs,
		func(obj Tother, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, Validate_Tother(&obj, fldPath)...)
			return
		}(obj.T, fldPath.Child("t"))...)

	// field T00.PT
	errs = append(errs,
		func(obj *Tother, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, Validate_Tother(obj, fldPath)...)
			}
			return
		}(obj.PT, fldPath.Child("pt"))...)

	return errs
}

func Validate_T01(obj *T01, fldPath *field.Path) (errs field.ErrorList) {
	// type T01
	if obj != nil {
		errs = append(errs, validate.FixedResult(fldPath, *obj, true, "T01, no flags")...)
	}

	// field T01.TypeMeta has no validation

	// field T01.S
	errs = append(errs,
		func(obj string, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T01.S, no flags")...)
			return
		}(obj.S, fldPath.Child("s"))...)

	// field T01.PS
	errs = append(errs,
		func(obj *string, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, validate.FixedResult(fldPath, *obj, true, "T01.PS, no flags")...)
			}
			return
		}(obj.PS, fldPath.Child("ps"))...)

	// field T01.T
	errs = append(errs,
		func(obj Tother, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T01.T, no flags")...)
			errs = append(errs, Validate_Tother(&obj, fldPath)...)
			return
		}(obj.T, fldPath.Child("t"))...)

	// field T01.PT
	errs = append(errs,
		func(obj *Tother, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, validate.FixedResult(fldPath, *obj, true, "T01.PT, no flags")...)
			}
			if obj != nil {
				errs = append(errs, Validate_Tother(obj, fldPath)...)
			}
			return
		}(obj.PT, fldPath.Child("pt"))...)

	return errs
}

func Validate_T02(obj *T02, fldPath *field.Path) (errs field.ErrorList) {
	// type T02
	errs = append(errs, validate.FixedResult(fldPath, obj, true, "T02, PtrOK")...)

	// field T02.TypeMeta has no validation

	// field T02.S
	errs = append(errs,
		func(obj string, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T02.S, PtrOK")...)
			return
		}(obj.S, fldPath.Child("s"))...)

	// field T02.PS
	errs = append(errs,
		func(obj *string, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T02.PS, PtrOK")...)
			return
		}(obj.PS, fldPath.Child("ps"))...)

	// field T02.T
	errs = append(errs,
		func(obj Tother, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T02.T, PtrOK")...)
			errs = append(errs, Validate_Tother(&obj, fldPath)...)
			return
		}(obj.T, fldPath.Child("t"))...)

	// field T02.PT
	errs = append(errs,
		func(obj *Tother, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T02.PT, PtrOK")...)
			if obj != nil {
				errs = append(errs, Validate_Tother(obj, fldPath)...)
			}
			return
		}(obj.PT, fldPath.Child("pt"))...)

	return errs
}

func Validate_T03(obj *T03, fldPath *field.Path) (errs field.ErrorList) {
	// type T03
	errs = append(errs, validate.FixedResult(fldPath, obj, true, "T03, PtrOK")...)
	if obj != nil {
		errs = append(errs, validate.FixedResult(fldPath, *obj, true, "T03, no flags")...)
	}

	// field T03.TypeMeta has no validation

	// field T03.S
	errs = append(errs,
		func(obj string, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T03.S, PtrOK")...)
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T03.S, no flags")...)
			return
		}(obj.S, fldPath.Child("s"))...)

	// field T03.PS
	errs = append(errs,
		func(obj *string, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T03.PS, PtrOK")...)
			if obj != nil {
				errs = append(errs, validate.FixedResult(fldPath, *obj, true, "T03.PS, no flags")...)
			}
			return
		}(obj.PS, fldPath.Child("ps"))...)

	// field T03.T
	errs = append(errs,
		func(obj Tother, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T03.T, PtrOK")...)
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T03.T, no flags")...)
			errs = append(errs, Validate_Tother(&obj, fldPath)...)
			return
		}(obj.T, fldPath.Child("t"))...)

	// field T03.PT
	errs = append(errs,
		func(obj *Tother, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T03.PT, PtrOK")...)
			if obj != nil {
				errs = append(errs, validate.FixedResult(fldPath, *obj, true, "T03.PT, no flags")...)
			}
			if obj != nil {
				errs = append(errs, Validate_Tother(obj, fldPath)...)
			}
			return
		}(obj.PT, fldPath.Child("pt"))...)

	return errs
}

func Validate_T04(obj *T04, fldPath *field.Path) (errs field.ErrorList) {
	// type T04
	if obj != nil {
		if e := validate.FixedResult(fldPath, *obj, true, "T04, IsFatal"); len(e) != 0 {
			errs = append(errs, e...)
			return // fatal
		}
	}

	// field T04.TypeMeta has no validation

	// field T04.S
	errs = append(errs,
		func(obj string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T04.S, IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			return
		}(obj.S, fldPath.Child("s"))...)

	// field T04.PS
	errs = append(errs,
		func(obj *string, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				if e := validate.FixedResult(fldPath, *obj, true, "T04.PS, IsFatal"); len(e) != 0 {
					errs = append(errs, e...)
					return // fatal
				}
			}
			return
		}(obj.PS, fldPath.Child("ps"))...)

	// field T04.T
	errs = append(errs,
		func(obj Tother, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T04.T, IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			errs = append(errs, Validate_Tother(&obj, fldPath)...)
			return
		}(obj.T, fldPath.Child("t"))...)

	// field T04.PT
	errs = append(errs,
		func(obj *Tother, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				if e := validate.FixedResult(fldPath, *obj, true, "T04.PT, IsFatal"); len(e) != 0 {
					errs = append(errs, e...)
					return // fatal
				}
			}
			if obj != nil {
				errs = append(errs, Validate_Tother(obj, fldPath)...)
			}
			return
		}(obj.PT, fldPath.Child("pt"))...)

	return errs
}

func Validate_T05(obj *T05, fldPath *field.Path) (errs field.ErrorList) {
	// type T05
	if obj != nil {
		if e := validate.FixedResult(fldPath, *obj, true, "T05, IsFatal"); len(e) != 0 {
			errs = append(errs, e...)
			return // fatal
		}
		errs = append(errs, validate.FixedResult(fldPath, *obj, true, "T05, no flags")...)
	}

	// field T05.TypeMeta has no validation

	// field T05.S
	errs = append(errs,
		func(obj string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T05.S, IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T05.S, no flags")...)
			return
		}(obj.S, fldPath.Child("s"))...)

	// field T05.PS
	errs = append(errs,
		func(obj *string, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				if e := validate.FixedResult(fldPath, *obj, true, "T05.PS, IsFatal"); len(e) != 0 {
					errs = append(errs, e...)
					return // fatal
				}
				errs = append(errs, validate.FixedResult(fldPath, *obj, true, "T05.PS, no flags")...)
			}
			return
		}(obj.PS, fldPath.Child("ps"))...)

	// field T05.T
	errs = append(errs,
		func(obj Tother, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T05.T, IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T05.T, no flags")...)
			errs = append(errs, Validate_Tother(&obj, fldPath)...)
			return
		}(obj.T, fldPath.Child("t"))...)

	// field T05.PT
	errs = append(errs,
		func(obj *Tother, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				if e := validate.FixedResult(fldPath, *obj, true, "T05.PT, IsFatal"); len(e) != 0 {
					errs = append(errs, e...)
					return // fatal
				}
				errs = append(errs, validate.FixedResult(fldPath, *obj, true, "T05.PT, no flags")...)
			}
			if obj != nil {
				errs = append(errs, Validate_Tother(obj, fldPath)...)
			}
			return
		}(obj.PT, fldPath.Child("pt"))...)

	return errs
}

func Validate_T06(obj *T06, fldPath *field.Path) (errs field.ErrorList) {
	// type T06
	if obj != nil {
		if e := validate.FixedResult(fldPath, *obj, true, "T06, IsFatal"); len(e) != 0 {
			errs = append(errs, e...)
			return // fatal
		}
	}
	errs = append(errs, validate.FixedResult(fldPath, obj, true, "T06, PtrOK")...)

	// field T06.TypeMeta has no validation

	// field T06.S
	errs = append(errs,
		func(obj string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T06.S, IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T06.S, PtrOK")...)
			return
		}(obj.S, fldPath.Child("s"))...)

	// field T06.PS
	errs = append(errs,
		func(obj *string, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				if e := validate.FixedResult(fldPath, *obj, true, "T06.PS, IsFatal"); len(e) != 0 {
					errs = append(errs, e...)
					return // fatal
				}
			}
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T06.PS, PtrOK")...)
			return
		}(obj.PS, fldPath.Child("ps"))...)

	// field T06.T
	errs = append(errs,
		func(obj Tother, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T06.T, IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T06.T, PtrOK")...)
			errs = append(errs, Validate_Tother(&obj, fldPath)...)
			return
		}(obj.T, fldPath.Child("t"))...)

	// field T06.PT
	errs = append(errs,
		func(obj *Tother, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				if e := validate.FixedResult(fldPath, *obj, true, "T06.PT, IsFatal"); len(e) != 0 {
					errs = append(errs, e...)
					return // fatal
				}
			}
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T06.PT, PtrOK")...)
			if obj != nil {
				errs = append(errs, Validate_Tother(obj, fldPath)...)
			}
			return
		}(obj.PT, fldPath.Child("pt"))...)

	return errs
}

func Validate_T07(obj *T07, fldPath *field.Path) (errs field.ErrorList) {
	// type T07
	if obj != nil {
		if e := validate.FixedResult(fldPath, *obj, true, "T07, IsFatal"); len(e) != 0 {
			errs = append(errs, e...)
			return // fatal
		}
	}
	errs = append(errs, validate.FixedResult(fldPath, obj, true, "T07, PtrOK")...)
	if obj != nil {
		errs = append(errs, validate.FixedResult(fldPath, *obj, true, "T07, no flags")...)
	}

	// field T07.TypeMeta has no validation

	// field T07.S
	errs = append(errs,
		func(obj string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T07.S, IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T07.S, PtrOK")...)
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T07.S, no flags")...)
			return
		}(obj.S, fldPath.Child("s"))...)

	// field T07.PS
	errs = append(errs,
		func(obj *string, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				if e := validate.FixedResult(fldPath, *obj, true, "T07.PS, IsFatal"); len(e) != 0 {
					errs = append(errs, e...)
					return // fatal
				}
			}
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T07.PS, PtrOK")...)
			if obj != nil {
				errs = append(errs, validate.FixedResult(fldPath, *obj, true, "T07.PS, no flags")...)
			}
			return
		}(obj.PS, fldPath.Child("ps"))...)

	// field T07.T
	errs = append(errs,
		func(obj Tother, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T07.T, IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T07.T, PtrOK")...)
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T07.T, no flags")...)
			errs = append(errs, Validate_Tother(&obj, fldPath)...)
			return
		}(obj.T, fldPath.Child("t"))...)

	// field T07.PT
	errs = append(errs,
		func(obj *Tother, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				if e := validate.FixedResult(fldPath, *obj, true, "T07.PT, IsFatal"); len(e) != 0 {
					errs = append(errs, e...)
					return // fatal
				}
			}
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T07.PT, PtrOK")...)
			if obj != nil {
				errs = append(errs, validate.FixedResult(fldPath, *obj, true, "T07.PT, no flags")...)
			}
			if obj != nil {
				errs = append(errs, Validate_Tother(obj, fldPath)...)
			}
			return
		}(obj.PT, fldPath.Child("pt"))...)

	return errs
}

func Validate_T08(obj *T08, fldPath *field.Path) (errs field.ErrorList) {
	// type T08
	if e := validate.FixedResult(fldPath, obj, true, "T08, PtrOK|IsFatal"); len(e) != 0 {
		errs = append(errs, e...)
		return // fatal
	}

	// field T08.TypeMeta has no validation

	// field T08.S
	errs = append(errs,
		func(obj string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T08.S, PtrOK|IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			return
		}(obj.S, fldPath.Child("s"))...)

	// field T08.PS
	errs = append(errs,
		func(obj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T08.PS, PtrOK|IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			return
		}(obj.PS, fldPath.Child("ps"))...)

	// field T08.T
	errs = append(errs,
		func(obj Tother, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T08.T, PtrOK|IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			errs = append(errs, Validate_Tother(&obj, fldPath)...)
			return
		}(obj.T, fldPath.Child("t"))...)

	// field T08.PT
	errs = append(errs,
		func(obj *Tother, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T08.PT, PtrOK|IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			if obj != nil {
				errs = append(errs, Validate_Tother(obj, fldPath)...)
			}
			return
		}(obj.PT, fldPath.Child("pt"))...)

	return errs
}

func Validate_T09(obj *T09, fldPath *field.Path) (errs field.ErrorList) {
	// type T09
	if e := validate.FixedResult(fldPath, obj, true, "T09, PtrOK|IsFatal"); len(e) != 0 {
		errs = append(errs, e...)
		return // fatal
	}
	if obj != nil {
		errs = append(errs, validate.FixedResult(fldPath, *obj, true, "T09, no flags")...)
	}

	// field T09.TypeMeta has no validation

	// field T09.S
	errs = append(errs,
		func(obj string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T09.S, PtrOK|IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T09.S, no flags")...)
			return
		}(obj.S, fldPath.Child("s"))...)

	// field T09.PS
	errs = append(errs,
		func(obj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T09.PS, PtrOK|IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			if obj != nil {
				errs = append(errs, validate.FixedResult(fldPath, *obj, true, "T09.PS, no flags")...)
			}
			return
		}(obj.PS, fldPath.Child("ps"))...)

	// field T09.T
	errs = append(errs,
		func(obj Tother, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T09.T, PtrOK|IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T09.T, no flags")...)
			errs = append(errs, Validate_Tother(&obj, fldPath)...)
			return
		}(obj.T, fldPath.Child("t"))...)

	// field T09.PT
	errs = append(errs,
		func(obj *Tother, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T09.PT, PtrOK|IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			if obj != nil {
				errs = append(errs, validate.FixedResult(fldPath, *obj, true, "T09.PT, no flags")...)
			}
			if obj != nil {
				errs = append(errs, Validate_Tother(obj, fldPath)...)
			}
			return
		}(obj.PT, fldPath.Child("pt"))...)

	return errs
}

func Validate_T10(obj *T10, fldPath *field.Path) (errs field.ErrorList) {
	// type T10
	if e := validate.FixedResult(fldPath, obj, true, "T10, PtrOK|IsFatal"); len(e) != 0 {
		errs = append(errs, e...)
		return // fatal
	}
	errs = append(errs, validate.FixedResult(fldPath, obj, true, "T10, PtrOK")...)

	// field T10.TypeMeta has no validation

	// field T10.S
	errs = append(errs,
		func(obj string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T10.S, PtrOK|IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T10.S, PtrOK")...)
			return
		}(obj.S, fldPath.Child("s"))...)

	// field T10.PS
	errs = append(errs,
		func(obj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T10.PS, PtrOK|IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T10.PS, PtrOK")...)
			return
		}(obj.PS, fldPath.Child("ps"))...)

	// field T10.T
	errs = append(errs,
		func(obj Tother, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T10.T, PtrOK|IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T10.T, PtrOK")...)
			errs = append(errs, Validate_Tother(&obj, fldPath)...)
			return
		}(obj.T, fldPath.Child("t"))...)

	// field T10.PT
	errs = append(errs,
		func(obj *Tother, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T10.PT, PtrOK|IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T10.PT, PtrOK")...)
			if obj != nil {
				errs = append(errs, Validate_Tother(obj, fldPath)...)
			}
			return
		}(obj.PT, fldPath.Child("pt"))...)

	return errs
}

func Validate_T11(obj *T11, fldPath *field.Path) (errs field.ErrorList) {
	// type T11
	if e := validate.FixedResult(fldPath, obj, true, "T11, PtrOK|IsFatal"); len(e) != 0 {
		errs = append(errs, e...)
		return // fatal
	}
	errs = append(errs, validate.FixedResult(fldPath, obj, true, "T11, PtrOK")...)
	if obj != nil {
		errs = append(errs, validate.FixedResult(fldPath, *obj, true, "T11, no flags")...)
	}

	// field T11.TypeMeta has no validation

	// field T11.S
	errs = append(errs,
		func(obj string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T11.S, PtrOK|IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T11.S, PtrOK")...)
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T11.S, no flags")...)
			return
		}(obj.S, fldPath.Child("s"))...)

	// field T11.PS
	errs = append(errs,
		func(obj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T11.PS, PtrOK|IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T11.PS, PtrOK")...)
			if obj != nil {
				errs = append(errs, validate.FixedResult(fldPath, *obj, true, "T11.PS, no flags")...)
			}
			return
		}(obj.PS, fldPath.Child("ps"))...)

	// field T11.T
	errs = append(errs,
		func(obj Tother, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T11.T, PtrOK|IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T11.T, PtrOK")...)
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T11.T, no flags")...)
			errs = append(errs, Validate_Tother(&obj, fldPath)...)
			return
		}(obj.T, fldPath.Child("t"))...)

	// field T11.PT
	errs = append(errs,
		func(obj *Tother, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T11.PT, PtrOK|IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T11.PT, PtrOK")...)
			if obj != nil {
				errs = append(errs, validate.FixedResult(fldPath, *obj, true, "T11.PT, no flags")...)
			}
			if obj != nil {
				errs = append(errs, Validate_Tother(obj, fldPath)...)
			}
			return
		}(obj.PT, fldPath.Child("pt"))...)

	return errs
}

func Validate_T12(obj *T12, fldPath *field.Path) (errs field.ErrorList) {
	// type T12
	if e := validate.FixedResult(fldPath, obj, true, "T12, PtrOK|IsFatal"); len(e) != 0 {
		errs = append(errs, e...)
		return // fatal
	}
	if obj != nil {
		if e := validate.FixedResult(fldPath, *obj, true, "T12, IsFatal"); len(e) != 0 {
			errs = append(errs, e...)
			return // fatal
		}
	}

	// field T12.TypeMeta has no validation

	// field T12.S
	errs = append(errs,
		func(obj string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T12.S, PtrOK|IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			if e := validate.FixedResult(fldPath, obj, true, "T12.S, IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			return
		}(obj.S, fldPath.Child("s"))...)

	// field T12.PS
	errs = append(errs,
		func(obj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T12.PS, PtrOK|IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			if obj != nil {
				if e := validate.FixedResult(fldPath, *obj, true, "T12.PS, IsFatal"); len(e) != 0 {
					errs = append(errs, e...)
					return // fatal
				}
			}
			return
		}(obj.PS, fldPath.Child("ps"))...)

	// field T12.T
	errs = append(errs,
		func(obj Tother, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T12.T, PtrOK|IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			if e := validate.FixedResult(fldPath, obj, true, "T12.T, IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			errs = append(errs, Validate_Tother(&obj, fldPath)...)
			return
		}(obj.T, fldPath.Child("t"))...)

	// field T12.PT
	errs = append(errs,
		func(obj *Tother, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T12.PT, PtrOK|IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			if obj != nil {
				if e := validate.FixedResult(fldPath, *obj, true, "T12.PT, IsFatal"); len(e) != 0 {
					errs = append(errs, e...)
					return // fatal
				}
			}
			if obj != nil {
				errs = append(errs, Validate_Tother(obj, fldPath)...)
			}
			return
		}(obj.PT, fldPath.Child("pt"))...)

	return errs
}

func Validate_T13(obj *T13, fldPath *field.Path) (errs field.ErrorList) {
	// type T13
	if e := validate.FixedResult(fldPath, obj, true, "T13, PtrOK|IsFatal"); len(e) != 0 {
		errs = append(errs, e...)
		return // fatal
	}
	if obj != nil {
		if e := validate.FixedResult(fldPath, *obj, true, "T13, IsFatal"); len(e) != 0 {
			errs = append(errs, e...)
			return // fatal
		}
		errs = append(errs, validate.FixedResult(fldPath, *obj, true, "T13, no flags")...)
	}

	// field T13.TypeMeta has no validation

	// field T13.S
	errs = append(errs,
		func(obj string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T13.S, PtrOK|IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			if e := validate.FixedResult(fldPath, obj, true, "T13.S, IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T13.S, no flags")...)
			return
		}(obj.S, fldPath.Child("s"))...)

	// field T13.PS
	errs = append(errs,
		func(obj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T13.PS, PtrOK|IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			if obj != nil {
				if e := validate.FixedResult(fldPath, *obj, true, "T13.PS, IsFatal"); len(e) != 0 {
					errs = append(errs, e...)
					return // fatal
				}
				errs = append(errs, validate.FixedResult(fldPath, *obj, true, "T13.PS, no flags")...)
			}
			return
		}(obj.PS, fldPath.Child("ps"))...)

	// field T13.T
	errs = append(errs,
		func(obj Tother, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T13.T, PtrOK|IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			if e := validate.FixedResult(fldPath, obj, true, "T13.T, IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T13.T, no flags")...)
			errs = append(errs, Validate_Tother(&obj, fldPath)...)
			return
		}(obj.T, fldPath.Child("t"))...)

	// field T13.PT
	errs = append(errs,
		func(obj *Tother, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T13.PT, PtrOK|IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			if obj != nil {
				if e := validate.FixedResult(fldPath, *obj, true, "T13.PT, IsFatal"); len(e) != 0 {
					errs = append(errs, e...)
					return // fatal
				}
				errs = append(errs, validate.FixedResult(fldPath, *obj, true, "T13.PT, no flags")...)
			}
			if obj != nil {
				errs = append(errs, Validate_Tother(obj, fldPath)...)
			}
			return
		}(obj.PT, fldPath.Child("pt"))...)

	return errs
}

func Validate_T14(obj *T14, fldPath *field.Path) (errs field.ErrorList) {
	// type T14
	if e := validate.FixedResult(fldPath, obj, true, "T14, PtrOK|IsFatal"); len(e) != 0 {
		errs = append(errs, e...)
		return // fatal
	}
	if obj != nil {
		if e := validate.FixedResult(fldPath, *obj, true, "T14, IsFatal"); len(e) != 0 {
			errs = append(errs, e...)
			return // fatal
		}
	}
	errs = append(errs, validate.FixedResult(fldPath, obj, true, "T14, PtrOK")...)

	// field T14.TypeMeta has no validation

	// field T14.S
	errs = append(errs,
		func(obj string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T14.S, PtrOK|IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			if e := validate.FixedResult(fldPath, obj, true, "T14.S, IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T14.S, PtrOK")...)
			return
		}(obj.S, fldPath.Child("s"))...)

	// field T14.PS
	errs = append(errs,
		func(obj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T14.PS, PtrOK|IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			if obj != nil {
				if e := validate.FixedResult(fldPath, *obj, true, "T14.PS, IsFatal"); len(e) != 0 {
					errs = append(errs, e...)
					return // fatal
				}
			}
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T14.PS, PtrOK")...)
			return
		}(obj.PS, fldPath.Child("ps"))...)

	// field T14.T
	errs = append(errs,
		func(obj Tother, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T14.T, PtrOK|IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			if e := validate.FixedResult(fldPath, obj, true, "T14.T, IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T14.T, PtrOK")...)
			errs = append(errs, Validate_Tother(&obj, fldPath)...)
			return
		}(obj.T, fldPath.Child("t"))...)

	// field T14.PT
	errs = append(errs,
		func(obj *Tother, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T14.PT, PtrOK|IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			if obj != nil {
				if e := validate.FixedResult(fldPath, *obj, true, "T14.PT, IsFatal"); len(e) != 0 {
					errs = append(errs, e...)
					return // fatal
				}
			}
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T14.PT, PtrOK")...)
			if obj != nil {
				errs = append(errs, Validate_Tother(obj, fldPath)...)
			}
			return
		}(obj.PT, fldPath.Child("pt"))...)

	return errs
}

func Validate_T15(obj *T15, fldPath *field.Path) (errs field.ErrorList) {
	// type T15
	if e := validate.FixedResult(fldPath, obj, true, "T15, PtrOK|IsFatal"); len(e) != 0 {
		errs = append(errs, e...)
		return // fatal
	}
	if obj != nil {
		if e := validate.FixedResult(fldPath, *obj, true, "T15, IsFatal"); len(e) != 0 {
			errs = append(errs, e...)
			return // fatal
		}
	}
	errs = append(errs, validate.FixedResult(fldPath, obj, true, "T15, PtrOK")...)
	if obj != nil {
		errs = append(errs, validate.FixedResult(fldPath, *obj, true, "T15, no flags")...)
	}

	// field T15.TypeMeta has no validation

	// field T15.S
	errs = append(errs,
		func(obj string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T15.S, PtrOK|IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			if e := validate.FixedResult(fldPath, obj, true, "T15.S, IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T15.S, PtrOK")...)
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T15.S, no flags")...)
			return
		}(obj.S, fldPath.Child("s"))...)

	// field T15.PS
	errs = append(errs,
		func(obj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T15.PS, PtrOK|IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			if obj != nil {
				if e := validate.FixedResult(fldPath, *obj, true, "T15.PS, IsFatal"); len(e) != 0 {
					errs = append(errs, e...)
					return // fatal
				}
			}
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T15.PS, PtrOK")...)
			if obj != nil {
				errs = append(errs, validate.FixedResult(fldPath, *obj, true, "T15.PS, no flags")...)
			}
			return
		}(obj.PS, fldPath.Child("ps"))...)

	// field T15.T
	errs = append(errs,
		func(obj Tother, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T15.T, PtrOK|IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			if e := validate.FixedResult(fldPath, obj, true, "T15.T, IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T15.T, PtrOK")...)
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T15.T, no flags")...)
			errs = append(errs, Validate_Tother(&obj, fldPath)...)
			return
		}(obj.T, fldPath.Child("t"))...)

	// field T15.PT
	errs = append(errs,
		func(obj *Tother, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "T15.PT, PtrOK|IsFatal"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			if obj != nil {
				if e := validate.FixedResult(fldPath, *obj, true, "T15.PT, IsFatal"); len(e) != 0 {
					errs = append(errs, e...)
					return // fatal
				}
			}
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T15.PT, PtrOK")...)
			if obj != nil {
				errs = append(errs, validate.FixedResult(fldPath, *obj, true, "T15.PT, no flags")...)
			}
			if obj != nil {
				errs = append(errs, Validate_Tother(obj, fldPath)...)
			}
			return
		}(obj.PT, fldPath.Child("pt"))...)

	return errs
}

func Validate_TMultiple(obj *TMultiple, fldPath *field.Path) (errs field.ErrorList) {
	// type TMultiple
	if e := validate.FixedResult(fldPath, obj, true, "TMultiple, PtrOK|IsFatal 1"); len(e) != 0 {
		errs = append(errs, e...)
		return // fatal
	}
	if e := validate.FixedResult(fldPath, obj, true, "TMultiple, PtrOK|IsFatal 2"); len(e) != 0 {
		errs = append(errs, e...)
		return // fatal
	}
	if obj != nil {
		if e := validate.FixedResult(fldPath, *obj, true, "TMultiple, IsFatal 1"); len(e) != 0 {
			errs = append(errs, e...)
			return // fatal
		}
		if e := validate.FixedResult(fldPath, *obj, true, "TMultiple, IsFatal 2"); len(e) != 0 {
			errs = append(errs, e...)
			return // fatal
		}
	}
	errs = append(errs, validate.FixedResult(fldPath, obj, true, "TMultiple, PtrOK 1")...)
	errs = append(errs, validate.FixedResult(fldPath, obj, true, "TMultiple, PtrOK 2")...)
	if obj != nil {
		errs = append(errs, validate.FixedResult(fldPath, *obj, true, "TMultiple, no flags 1")...)
		errs = append(errs, validate.FixedResult(fldPath, *obj, true, "T0, string payload")...)
		errs = append(errs, validate.FixedResult(fldPath, *obj, true, "TMultiple, no flags 2")...)
	}

	// field TMultiple.TypeMeta has no validation

	// field TMultiple.S
	errs = append(errs,
		func(obj string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "TMultiple.S, PtrOK|IsFatal 1"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			if e := validate.FixedResult(fldPath, obj, true, "TMultiple.S, PtrOK|IsFatal 2"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			if e := validate.FixedResult(fldPath, obj, true, "TMultiple.S, IsFatal 1"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			if e := validate.FixedResult(fldPath, obj, true, "TMultiple.S, IsFatal 2"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "TMultiple.S, PtrOK 1")...)
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "TMultiple.S, PtrOK 2")...)
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "TMultiple.S, no flags 1")...)
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T0, string payload")...)
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "TMultiple.S, no flags 2")...)
			return
		}(obj.S, fldPath.Child("s"))...)

	// field TMultiple.PS
	errs = append(errs,
		func(obj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "TMultiple.PS, PtrOK|IsFatal 1"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			if e := validate.FixedResult(fldPath, obj, true, "TMultiple.PS, PtrOK|IsFatal 2"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			if obj != nil {
				if e := validate.FixedResult(fldPath, *obj, true, "TMultiple.PS, IsFatal 1"); len(e) != 0 {
					errs = append(errs, e...)
					return // fatal
				}
				if e := validate.FixedResult(fldPath, *obj, true, "TMultiple.PS, IsFatal 2"); len(e) != 0 {
					errs = append(errs, e...)
					return // fatal
				}
			}
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "TMultiple.PS, PtrOK 1")...)
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "TMultiple.PS, PtrOK 2")...)
			if obj != nil {
				errs = append(errs, validate.FixedResult(fldPath, *obj, true, "TMultiple.PS, no flags 1")...)
				errs = append(errs, validate.FixedResult(fldPath, *obj, true, "T0, string payload")...)
				errs = append(errs, validate.FixedResult(fldPath, *obj, true, "TMultiple.PS, no flags 2")...)
			}
			return
		}(obj.PS, fldPath.Child("ps"))...)

	// field TMultiple.T
	errs = append(errs,
		func(obj Tother, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "TMultiple.T, PtrOK|IsFatal 1"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			if e := validate.FixedResult(fldPath, obj, true, "TMultiple.T, PtrOK|IsFatal 2"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			if e := validate.FixedResult(fldPath, obj, true, "TMultiple.T, IsFatal 1"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			if e := validate.FixedResult(fldPath, obj, true, "TMultiple.T, IsFatal 2"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "TMultiple.T, PtrOK 1")...)
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "TMultiple.T, PtrOK 2")...)
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "TMultiple.T, no flags 1")...)
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "T0, string payload")...)
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "TMultiple.T, no flags 2")...)
			errs = append(errs, Validate_Tother(&obj, fldPath)...)
			return
		}(obj.T, fldPath.Child("t"))...)

	// field TMultiple.PT
	errs = append(errs,
		func(obj *Tother, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.FixedResult(fldPath, obj, true, "TMultiple.PT, PtrOK|IsFatal 1"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			if e := validate.FixedResult(fldPath, obj, true, "TMultiple.PT, PtrOK|IsFatal 2"); len(e) != 0 {
				errs = append(errs, e...)
				return // fatal
			}
			if obj != nil {
				if e := validate.FixedResult(fldPath, *obj, true, "TMultiple.PT, IsFatal 1"); len(e) != 0 {
					errs = append(errs, e...)
					return // fatal
				}
				if e := validate.FixedResult(fldPath, *obj, true, "TMultiple.PT, IsFatal 2"); len(e) != 0 {
					errs = append(errs, e...)
					return // fatal
				}
			}
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "TMultiple.PT, PtrOK 1")...)
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "TMultiple.PT, PtrOK 2")...)
			if obj != nil {
				errs = append(errs, validate.FixedResult(fldPath, *obj, true, "TMultiple.PT, no flags 1")...)
				errs = append(errs, validate.FixedResult(fldPath, *obj, true, "T0, string payload")...)
				errs = append(errs, validate.FixedResult(fldPath, *obj, true, "TMultiple.PT, no flags 2")...)
			}
			if obj != nil {
				errs = append(errs, Validate_Tother(obj, fldPath)...)
			}
			return
		}(obj.PT, fldPath.Child("pt"))...)

	return errs
}

func Validate_Tother(obj *Tother, fldPath *field.Path) (errs field.ErrorList) {
	// field Tother.OS
	errs = append(errs,
		func(obj string, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "Tother, no flags")...)
			return
		}(obj.OS, fldPath.Child("os"))...)

	return errs
}
