//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by validation-gen. DO NOT EDIT.

package unions

import (
	fmt "fmt"

	validate "k8s.io/apimachinery/pkg/api/validate"
	runtime "k8s.io/apimachinery/pkg/runtime"
	field "k8s.io/apimachinery/pkg/util/validation/field"
)

func init() { localSchemeBuilder.Register(RegisterValidations) }

// RegisterValidations adds validation functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterValidations(scheme *runtime.Scheme) error {
	scheme.AddValidationFunc((*DU1)(nil), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_DU1(obj.(*DU1), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*DU2)(nil), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_DU2(obj.(*DU2), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*DU3)(nil), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_DU3(obj.(*DU3), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*DU4)(nil), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_DU4(obj.(*DU4), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*T1)(nil), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_T1(obj.(*T1), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*U1)(nil), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_U1(obj.(*U1), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*U2)(nil), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_U2(obj.(*U2), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*U3)(nil), func(obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_U3(obj.(*U3), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	return nil
}

var unionMembershipForDU1 = validate.NewDiscriminatedUnionMembership("d1")

func Validate_DU1(obj *DU1, fldPath *field.Path) (errs field.ErrorList) {
	// type DU1
	if obj != nil {
		errs = append(errs, validate.DiscriminatedUnion(fldPath, *obj, unionMembershipForDU1, obj.D1)...)
	}

	// field DU1.TypeMeta has no validation
	// field DU1.D1 has no validation
	return errs
}

var unionMembershipForDU2 = validate.NewDiscriminatedUnionMembership("d2", "m1", "m2")

func Validate_DU2(obj *DU2, fldPath *field.Path) (errs field.ErrorList) {
	// type DU2
	if obj != nil {
		errs = append(errs, validate.DiscriminatedUnion(fldPath, *obj, unionMembershipForDU2, obj.D2, obj.M1, obj.M2)...)
	}

	// field DU2.TypeMeta has no validation
	// field DU2.D2 has no validation

	// field DU2.M1
	errs = append(errs,
		func(obj *M1, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, Validate_M1(obj, fldPath)...)
			}
			return
		}(obj.M1, fldPath.Child("m1"))...)

	// field DU2.M2
	errs = append(errs,
		func(obj *M2, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, Validate_M2(obj, fldPath)...)
			}
			return
		}(obj.M2, fldPath.Child("m2"))...)

	// field DU2.T1
	errs = append(errs,
		func(obj *T1, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, Validate_T1(obj, fldPath)...)
			}
			return
		}(obj.T1, fldPath.Child("t1"))...)

	return errs
}

var unionMembershipForDU3 = validate.NewDiscriminatedUnionMembership("d3", [2]string{"m1", "CustomM1"}, [2]string{"m2", "CustomM2"})

func Validate_DU3(obj *DU3, fldPath *field.Path) (errs field.ErrorList) {
	// type DU3
	if obj != nil {
		errs = append(errs, validate.DiscriminatedUnion(fldPath, *obj, unionMembershipForDU3, obj.D3, obj.M1, obj.M2)...)
	}

	// field DU3.TypeMeta has no validation
	// field DU3.D3 has no validation

	// field DU3.M1
	errs = append(errs,
		func(obj *M1, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, Validate_M1(obj, fldPath)...)
			}
			return
		}(obj.M1, fldPath.Child("m1"))...)

	// field DU3.M2
	errs = append(errs,
		func(obj *M2, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, Validate_M2(obj, fldPath)...)
			}
			return
		}(obj.M2, fldPath.Child("m2"))...)

	// field DU3.T1
	errs = append(errs,
		func(obj *T1, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, Validate_T1(obj, fldPath)...)
			}
			return
		}(obj.T1, fldPath.Child("t1"))...)

	return errs
}

var unionMembershipForDU4union1 = validate.NewDiscriminatedUnionMembership("d3u1", [2]string{"u1m1", "U1M1"}, [2]string{"u1m2", "U1M2"})
var unionMembershipForDU4union2 = validate.NewDiscriminatedUnionMembership("d3u2", [2]string{"u2m1", "U2M1"}, [2]string{"u2m2", "U2M2"})

func Validate_DU4(obj *DU4, fldPath *field.Path) (errs field.ErrorList) {
	// type DU4
	if obj != nil {
		errs = append(errs, validate.DiscriminatedUnion(fldPath, *obj, unionMembershipForDU4union1, obj.D3U1, obj.U1M1, obj.U1M2)...)
		errs = append(errs, validate.DiscriminatedUnion(fldPath, *obj, unionMembershipForDU4union2, obj.D3U2, obj.U2M1, obj.U2M2)...)
	}

	// field DU4.TypeMeta has no validation
	// field DU4.D3U1 has no validation

	// field DU4.U1M1
	errs = append(errs,
		func(obj *M1, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, Validate_M1(obj, fldPath)...)
			}
			return
		}(obj.U1M1, fldPath.Child("u1m1"))...)

	// field DU4.U1M2
	errs = append(errs,
		func(obj *M2, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, Validate_M2(obj, fldPath)...)
			}
			return
		}(obj.U1M2, fldPath.Child("u1m2"))...)

	// field DU4.D3U2 has no validation

	// field DU4.U2M1
	errs = append(errs,
		func(obj *M1, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, Validate_M1(obj, fldPath)...)
			}
			return
		}(obj.U2M1, fldPath.Child("u2m1"))...)

	// field DU4.U2M2
	errs = append(errs,
		func(obj *M2, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, Validate_M2(obj, fldPath)...)
			}
			return
		}(obj.U2M2, fldPath.Child("u2m2"))...)

	// field DU4.T1
	errs = append(errs,
		func(obj *T1, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, Validate_T1(obj, fldPath)...)
			}
			return
		}(obj.T1, fldPath.Child("t1"))...)

	return errs
}

func Validate_M1(obj *M1, fldPath *field.Path) (errs field.ErrorList) {
	// type M1
	if obj != nil {
		errs = append(errs, validate.FixedResult(fldPath, *obj, true, "type M1")...)
	}

	// field M1.S
	errs = append(errs,
		func(obj string, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "field M1.S")...)
			return
		}(obj.S, fldPath.Child("s"))...)

	return errs
}

func Validate_M2(obj *M2, fldPath *field.Path) (errs field.ErrorList) {
	// type M2
	if obj != nil {
		errs = append(errs, validate.FixedResult(fldPath, *obj, true, "type M2")...)
	}

	// field M2.S
	errs = append(errs,
		func(obj string, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "field M2.S")...)
			return
		}(obj.S, fldPath.Child("s"))...)

	return errs
}

func Validate_T1(obj *T1, fldPath *field.Path) (errs field.ErrorList) {
	// type T1
	if obj != nil {
		errs = append(errs, validate.FixedResult(fldPath, *obj, true, "type T1")...)
	}

	// field T1.TypeMeta has no validation

	// field T1.LS
	errs = append(errs,
		func(obj []string, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.FixedResult(fldPath, obj, true, "field T1.LS")...)
			for i, val := range obj {
				errs = append(errs,
					func(obj string, fldPath *field.Path) (errs field.ErrorList) {
						if e := validate.Required(fldPath, obj); len(e) != 0 {
							errs = append(errs, e...)
							return // fatal
						}
						errs = append(errs, validate.FixedResult(fldPath, obj, true, "field T1.LS[*]")...)
						return
					}(val, fldPath.Index(i))...)
			}
			return
		}(obj.LS, fldPath.Child("ls"))...)

	return errs
}

var unionMembershipForU1 = validate.NewUnionMembership("m1", "m2")

func Validate_U1(obj *U1, fldPath *field.Path) (errs field.ErrorList) {
	// type U1
	if obj != nil {
		errs = append(errs, validate.Union(fldPath, *obj, unionMembershipForU1, obj.M1, obj.M2)...)
	}

	// field U1.TypeMeta has no validation

	// field U1.M1
	errs = append(errs,
		func(obj *M1, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, Validate_M1(obj, fldPath)...)
			}
			return
		}(obj.M1, fldPath.Child("m1"))...)

	// field U1.M2
	errs = append(errs,
		func(obj *M2, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, Validate_M2(obj, fldPath)...)
			}
			return
		}(obj.M2, fldPath.Child("m2"))...)

	// field U1.T1
	errs = append(errs,
		func(obj *T1, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, Validate_T1(obj, fldPath)...)
			}
			return
		}(obj.T1, fldPath.Child("t1"))...)

	return errs
}

var unionMembershipForU2 = validate.NewUnionMembership([2]string{"m1", "CustomM1"}, [2]string{"m2", "CustomM2"})

func Validate_U2(obj *U2, fldPath *field.Path) (errs field.ErrorList) {
	// type U2
	if obj != nil {
		errs = append(errs, validate.Union(fldPath, *obj, unionMembershipForU2, obj.M1, obj.M2)...)
	}

	// field U2.TypeMeta has no validation

	// field U2.M1
	errs = append(errs,
		func(obj *M1, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, Validate_M1(obj, fldPath)...)
			}
			return
		}(obj.M1, fldPath.Child("m1"))...)

	// field U2.M2
	errs = append(errs,
		func(obj *M2, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, Validate_M2(obj, fldPath)...)
			}
			return
		}(obj.M2, fldPath.Child("m2"))...)

	// field U2.T1
	errs = append(errs,
		func(obj *T1, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, Validate_T1(obj, fldPath)...)
			}
			return
		}(obj.T1, fldPath.Child("t1"))...)

	return errs
}

var unionMembershipForU3union1 = validate.NewUnionMembership([2]string{"u1m1", "U1M1"}, [2]string{"u1m2", "U1M2"})
var unionMembershipForU3union2 = validate.NewUnionMembership([2]string{"u2m1", "U2M1"}, [2]string{"u2m2", "U2M2"})

func Validate_U3(obj *U3, fldPath *field.Path) (errs field.ErrorList) {
	// type U3
	if obj != nil {
		errs = append(errs, validate.Union(fldPath, *obj, unionMembershipForU3union1, obj.U1M1, obj.U1M2)...)
		errs = append(errs, validate.Union(fldPath, *obj, unionMembershipForU3union2, obj.U2M1, obj.U2M2)...)
	}

	// field U3.TypeMeta has no validation

	// field U3.U1M1
	errs = append(errs,
		func(obj *M1, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, Validate_M1(obj, fldPath)...)
			}
			return
		}(obj.U1M1, fldPath.Child("u1m1"))...)

	// field U3.U1M2
	errs = append(errs,
		func(obj *M2, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, Validate_M2(obj, fldPath)...)
			}
			return
		}(obj.U1M2, fldPath.Child("u1m2"))...)

	// field U3.U2M1
	errs = append(errs,
		func(obj *M1, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, Validate_M1(obj, fldPath)...)
			}
			return
		}(obj.U2M1, fldPath.Child("u2m1"))...)

	// field U3.U2M2
	errs = append(errs,
		func(obj *M2, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, Validate_M2(obj, fldPath)...)
			}
			return
		}(obj.U2M2, fldPath.Child("u2m2"))...)

	// field U3.T1
	errs = append(errs,
		func(obj *T1, fldPath *field.Path) (errs field.ErrorList) {
			if obj != nil {
				errs = append(errs, Validate_T1(obj, fldPath)...)
			}
			return
		}(obj.T1, fldPath.Child("t1"))...)

	return errs
}
