//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by validation-gen. DO NOT EDIT.

package sliceofmap

import (
	fmt "fmt"

	operation "k8s.io/apimachinery/pkg/api/operation"
	safe "k8s.io/apimachinery/pkg/api/safe"
	validate "k8s.io/apimachinery/pkg/api/validate"
	field "k8s.io/apimachinery/pkg/util/validation/field"
	testscheme "k8s.io/code-generator/cmd/validation-gen/testscheme"
)

func init() { localSchemeBuilder.Register(RegisterValidations) }

// RegisterValidations adds validation functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterValidations(scheme *testscheme.Scheme) error {
	scheme.AddValidationFunc((*Struct)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Struct(opCtx, obj.(*Struct), safe.Cast[*Struct](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	return nil
}

func Validate_Struct(opCtx operation.Context, obj, oldObj *Struct, fldPath *field.Path) (errs field.ErrorList) {
	// field Struct.TypeMeta has no validation

	// field Struct.Max0Field
	errs = append(errs,
		func(obj, oldObj []map[string]int, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.MaxItems(opCtx, fldPath, obj, oldObj, 0); len(e) != 0 {
				errs = append(errs, e...)
				return // do not proceed
			}
			return
		}(obj.Max0Field, safe.Field(oldObj, func(oldObj *Struct) []map[string]int { return oldObj.Max0Field }), fldPath.Child("max0Field"))...)

	// field Struct.Max10Field
	errs = append(errs,
		func(obj, oldObj []map[string]int, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.MaxItems(opCtx, fldPath, obj, oldObj, 10); len(e) != 0 {
				errs = append(errs, e...)
				return // do not proceed
			}
			return
		}(obj.Max10Field, safe.Field(oldObj, func(oldObj *Struct) []map[string]int { return oldObj.Max10Field }), fldPath.Child("max10Field"))...)

	// field Struct.Max0PtrField
	errs = append(errs,
		func(obj, oldObj []map[string]*int, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.MaxItems(opCtx, fldPath, obj, oldObj, 0); len(e) != 0 {
				errs = append(errs, e...)
				return // do not proceed
			}
			return
		}(obj.Max0PtrField, safe.Field(oldObj, func(oldObj *Struct) []map[string]*int { return oldObj.Max0PtrField }), fldPath.Child("max0PtrField"))...)

	// field Struct.Max10PtrField
	errs = append(errs,
		func(obj, oldObj []map[string]*int, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.MaxItems(opCtx, fldPath, obj, oldObj, 10); len(e) != 0 {
				errs = append(errs, e...)
				return // do not proceed
			}
			return
		}(obj.Max10PtrField, safe.Field(oldObj, func(oldObj *Struct) []map[string]*int { return oldObj.Max10PtrField }), fldPath.Child("max10PtrField"))...)

	// field Struct.Max0TypedefField
	errs = append(errs,
		func(obj, oldObj []MapType, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.MaxItems(opCtx, fldPath, obj, oldObj, 0); len(e) != 0 {
				errs = append(errs, e...)
				return // do not proceed
			}
			return
		}(obj.Max0TypedefField, safe.Field(oldObj, func(oldObj *Struct) []MapType { return oldObj.Max0TypedefField }), fldPath.Child("max0TypedefField"))...)

	// field Struct.Max10TypedefField
	errs = append(errs,
		func(obj, oldObj []MapType, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.MaxItems(opCtx, fldPath, obj, oldObj, 10); len(e) != 0 {
				errs = append(errs, e...)
				return // do not proceed
			}
			return
		}(obj.Max10TypedefField, safe.Field(oldObj, func(oldObj *Struct) []MapType { return oldObj.Max10TypedefField }), fldPath.Child("max10TypedefField"))...)

	return errs
}
