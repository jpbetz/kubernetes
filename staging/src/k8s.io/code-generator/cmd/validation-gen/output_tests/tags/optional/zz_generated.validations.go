//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by validation-gen. DO NOT EDIT.

package optional

import (
	fmt "fmt"

	operation "k8s.io/apimachinery/pkg/api/operation"
	safe "k8s.io/apimachinery/pkg/api/safe"
	validate "k8s.io/apimachinery/pkg/api/validate"
	field "k8s.io/apimachinery/pkg/util/validation/field"
	testscheme "k8s.io/code-generator/cmd/validation-gen/testscheme"
)

func init() { localSchemeBuilder.Register(RegisterValidations) }

// RegisterValidations adds validation functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterValidations(scheme *testscheme.Scheme) error {
	scheme.AddValidationFunc((*Struct)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Struct(opCtx, obj.(*Struct), safe.Cast[*Struct](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	return nil
}

func Validate_OtherStruct(opCtx operation.Context, obj, oldObj *OtherStruct, fldPath *field.Path) (errs field.ErrorList) {
	// type OtherStruct
	errs = append(errs, validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "type OtherStruct")...)

	return errs
}

func Validate_Struct(opCtx operation.Context, obj, oldObj *Struct, fldPath *field.Path) (errs field.ErrorList) {
	// field Struct.TypeMeta has no validation

	// field Struct.StringField
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.OptionalValue(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "field Struct.StringField")...)
			return
		}(&obj.StringField, safe.Field(oldObj, func(oldObj *Struct) *string { return &oldObj.StringField }), fldPath.Child("stringField"))...)

	// field Struct.StringPtrField
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.OptionalPointer(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "field Struct.StringPtrField")...)
			return
		}(obj.StringPtrField, safe.Field(oldObj, func(oldObj *Struct) *string { return oldObj.StringPtrField }), fldPath.Child("stringPtrField"))...)

	// field Struct.OtherStructField
	errs = append(errs,
		func(obj, oldObj *OtherStruct, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "field Struct.OtherStructField")...)
			// optional non-pointer structs are purely documentation
			errs = append(errs, Validate_OtherStruct(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.OtherStructField, safe.Field(oldObj, func(oldObj *Struct) *OtherStruct { return &oldObj.OtherStructField }), fldPath.Child("otherStructField"))...)

	// field Struct.OtherStructPtrField
	errs = append(errs,
		func(obj, oldObj *OtherStruct, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.OptionalPointer(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "field Struct.OtherStructPtrField")...)
			errs = append(errs, Validate_OtherStruct(opCtx, obj, oldObj, fldPath)...)
			return
		}(obj.OtherStructPtrField, safe.Field(oldObj, func(oldObj *Struct) *OtherStruct { return oldObj.OtherStructPtrField }), fldPath.Child("otherStructPtrField"))...)

	// field Struct.SliceField
	errs = append(errs,
		func(obj, oldObj []string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.OptionalSlice(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "field Struct.SliceField")...)
			return
		}(obj.SliceField, safe.Field(oldObj, func(oldObj *Struct) []string { return oldObj.SliceField }), fldPath.Child("sliceField"))...)

	// field Struct.MapField
	errs = append(errs,
		func(obj, oldObj map[string]string, fldPath *field.Path) (errs field.ErrorList) {
			if e := validate.OptionalMap(opCtx, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "field Struct.MapField")...)
			return
		}(obj.MapField, safe.Field(oldObj, func(oldObj *Struct) map[string]string { return oldObj.MapField }), fldPath.Child("mapField"))...)

	return errs
}
