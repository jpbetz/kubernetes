//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by validation-gen. DO NOT EDIT.

package typedeftomap

import (
	fmt "fmt"

	operation "k8s.io/apimachinery/pkg/api/operation"
	safe "k8s.io/apimachinery/pkg/api/safe"
	validate "k8s.io/apimachinery/pkg/api/validate"
	field "k8s.io/apimachinery/pkg/util/validation/field"
	testscheme "k8s.io/code-generator/cmd/validation-gen/testscheme"
)

func init() { localSchemeBuilder.Register(RegisterValidations) }

// RegisterValidations adds validation functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterValidations(scheme *testscheme.Scheme) error {
	scheme.AddValidationFunc((*Struct)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Struct(opCtx, nil /* fldPath */, obj.(*Struct), safe.Cast[*Struct](oldObj))
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	return nil
}

func Validate_MapPtrType(opCtx operation.Context, fldPath *field.Path, obj, oldObj MapPtrType) (errs field.ErrorList) {
	// type MapPtrType
	errs = append(errs, validate.EachMapValNilable(opCtx, fldPath, obj, oldObj, func(opCtx operation.Context, fldPath *field.Path, obj, oldObj *string) field.ErrorList {
		return validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "type MapPtrType[*]")
	})...)

	return errs
}

func Validate_MapType(opCtx operation.Context, fldPath *field.Path, obj, oldObj MapType) (errs field.ErrorList) {
	// type MapType
	errs = append(errs, validate.EachMapVal(opCtx, fldPath, obj, oldObj, func(opCtx operation.Context, fldPath *field.Path, obj, oldObj *string) field.ErrorList {
		return validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "type MapType[*]")
	})...)

	return errs
}

func Validate_MapTypedefType(opCtx operation.Context, fldPath *field.Path, obj, oldObj MapTypedefType) (errs field.ErrorList) {
	// type MapTypedefType
	errs = append(errs, validate.EachMapVal(opCtx, fldPath, obj, oldObj, func(opCtx operation.Context, fldPath *field.Path, obj, oldObj *StringType) field.ErrorList {
		return validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "type MapTypedefType[*]")
	})...)
	errs = append(errs, validate.EachMapVal(opCtx, fldPath, obj, oldObj, Validate_StringType)...)

	return errs
}

func Validate_StringType(opCtx operation.Context, fldPath *field.Path, obj, oldObj *StringType) (errs field.ErrorList) {
	// type StringType
	errs = append(errs, validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "type StringType")...)

	return errs
}

func Validate_Struct(opCtx operation.Context, fldPath *field.Path, obj, oldObj *Struct) (errs field.ErrorList) {
	// type Struct
	errs = append(errs, validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "type Struct")...)

	// field Struct.TypeMeta has no validation

	// field Struct.MapField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj MapType) (errs field.ErrorList) {
			errs = append(errs, validate.EachMapVal(opCtx, fldPath, obj, oldObj, func(opCtx operation.Context, fldPath *field.Path, obj, oldObj *string) field.ErrorList {
				return validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "field Struct.MapField[*]")
			})...)
			errs = append(errs, Validate_MapType(opCtx, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("mapField"), obj.MapField, safe.Field(oldObj, func(oldObj *Struct) MapType { return oldObj.MapField }))...)

	// field Struct.MapPtrField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj MapPtrType) (errs field.ErrorList) {
			errs = append(errs, validate.EachMapValNilable(opCtx, fldPath, obj, oldObj, func(opCtx operation.Context, fldPath *field.Path, obj, oldObj *string) field.ErrorList {
				return validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "field Struct.MapPtrField[*]")
			})...)
			errs = append(errs, Validate_MapPtrType(opCtx, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("mapPtrField"), obj.MapPtrField, safe.Field(oldObj, func(oldObj *Struct) MapPtrType { return oldObj.MapPtrField }))...)

	// field Struct.MapTypedefField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj MapTypedefType) (errs field.ErrorList) {
			errs = append(errs, validate.EachMapVal(opCtx, fldPath, obj, oldObj, func(opCtx operation.Context, fldPath *field.Path, obj, oldObj *StringType) field.ErrorList {
				return validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "field Struct.MapTypedefField[*]")
			})...)
			errs = append(errs, Validate_MapTypedefType(opCtx, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("mapTypedefField"), obj.MapTypedefField, safe.Field(oldObj, func(oldObj *Struct) MapTypedefType { return oldObj.MapTypedefField }))...)

	return errs
}
