//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by validation-gen. DO NOT EDIT.

package maxlength

import (
	fmt "fmt"

	operation "k8s.io/apimachinery/pkg/api/operation"
	safe "k8s.io/apimachinery/pkg/api/safe"
	validate "k8s.io/apimachinery/pkg/api/validate"
	field "k8s.io/apimachinery/pkg/util/validation/field"
	testscheme "k8s.io/code-generator/cmd/validation-gen/testscheme"
)

func init() { localSchemeBuilder.Register(RegisterValidations) }

// RegisterValidations adds validation functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterValidations(scheme *testscheme.Scheme) error {
	scheme.AddValidationFunc((*Struct)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Struct(opCtx, obj.(*Struct), safe.Cast[*Struct](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	return nil
}

func Validate_Max0Type(opCtx operation.Context, obj, oldObj *Max0Type, fldPath *field.Path) (errs field.ErrorList) {
	// type Max0Type
	errs = append(errs, validate.MaxLength(opCtx, fldPath, obj, oldObj, 0)...)

	return errs
}

func Validate_Max10Type(opCtx operation.Context, obj, oldObj *Max10Type, fldPath *field.Path) (errs field.ErrorList) {
	// type Max10Type
	errs = append(errs, validate.MaxLength(opCtx, fldPath, obj, oldObj, 10)...)

	return errs
}

func Validate_Struct(opCtx operation.Context, obj, oldObj *Struct, fldPath *field.Path) (errs field.ErrorList) {
	// field Struct.TypeMeta has no validation

	// field Struct.Max0Field
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.MaxLength(opCtx, fldPath, obj, oldObj, 0)...)
			return
		}(&obj.Max0Field, safe.Field(oldObj, func(oldObj *Struct) *string { return &oldObj.Max0Field }), fldPath.Child("max0Field"))...)

	// field Struct.Max10Field
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.MaxLength(opCtx, fldPath, obj, oldObj, 10)...)
			return
		}(&obj.Max10Field, safe.Field(oldObj, func(oldObj *Struct) *string { return &oldObj.Max10Field }), fldPath.Child("max10Field"))...)

	// field Struct.Max0UnvalidatedTypedefField
	errs = append(errs,
		func(obj, oldObj *UnvalidatedStringType, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.MaxLength(opCtx, fldPath, obj, oldObj, 0)...)
			return
		}(&obj.Max0UnvalidatedTypedefField, safe.Field(oldObj, func(oldObj *Struct) *UnvalidatedStringType { return &oldObj.Max0UnvalidatedTypedefField }), fldPath.Child("max0UnvalidatedTypedefField"))...)

	// field Struct.Max10UnvalidatedTypedefField
	errs = append(errs,
		func(obj, oldObj *UnvalidatedStringType, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.MaxLength(opCtx, fldPath, obj, oldObj, 10)...)
			return
		}(&obj.Max10UnvalidatedTypedefField, safe.Field(oldObj, func(oldObj *Struct) *UnvalidatedStringType { return &oldObj.Max10UnvalidatedTypedefField }), fldPath.Child("max10UnvalidatedTypedefField"))...)

	// field Struct.Max0ValidatedTypedefField
	errs = append(errs,
		func(obj, oldObj *Max0Type, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, Validate_Max0Type(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.Max0ValidatedTypedefField, safe.Field(oldObj, func(oldObj *Struct) *Max0Type { return &oldObj.Max0ValidatedTypedefField }), fldPath.Child("max0ValidatedTypedefField"))...)

	// field Struct.Max10ValidatedTypedefField
	errs = append(errs,
		func(obj, oldObj *Max10Type, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, Validate_Max10Type(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.Max10ValidatedTypedefField, safe.Field(oldObj, func(oldObj *Struct) *Max10Type { return &oldObj.Max10ValidatedTypedefField }), fldPath.Child("max10ValidatedTypedefField"))...)

	return errs
}
