//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by validation-gen. DO NOT EDIT.

package format

import (
	fmt "fmt"

	operation "k8s.io/apimachinery/pkg/api/operation"
	safe "k8s.io/apimachinery/pkg/api/safe"
	validate "k8s.io/apimachinery/pkg/api/validate"
	field "k8s.io/apimachinery/pkg/util/validation/field"
	testscheme "k8s.io/code-generator/cmd/validation-gen/testscheme"
)

func init() { localSchemeBuilder.Register(RegisterValidations) }

// RegisterValidations adds validation functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterValidations(scheme *testscheme.Scheme) error {
	scheme.AddValidationFunc((*Struct)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Struct(opCtx, obj.(*Struct), safe.Cast[*Struct](oldObj), nil)
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	return nil
}

func Validate_IPStringType(opCtx operation.Context, obj, oldObj *IPStringType, fldPath *field.Path) (errs field.ErrorList) {
	// type IPStringType
	errs = append(errs, validate.IPSloppy(opCtx, fldPath, obj, oldObj)...)

	return errs
}

func Validate_Struct(opCtx operation.Context, obj, oldObj *Struct, fldPath *field.Path) (errs field.ErrorList) {
	// field Struct.TypeMeta has no validation

	// field Struct.IPField
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.IPSloppy(opCtx, fldPath, obj, oldObj)...)
			return
		}(&obj.IPField, safe.Field(oldObj, func(oldObj *Struct) *string { return &oldObj.IPField }), fldPath.Child("ipField"))...)

	// field Struct.IPPtrField
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.IPSloppy(opCtx, fldPath, obj, oldObj)...)
			return
		}(obj.IPPtrField, safe.Field(oldObj, func(oldObj *Struct) *string { return oldObj.IPPtrField }), fldPath.Child("ipPtrField"))...)

	// field Struct.DNSLabelField
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.DNSLabel(opCtx, fldPath, obj, oldObj)...)
			return
		}(&obj.DNSLabelField, safe.Field(oldObj, func(oldObj *Struct) *string { return &oldObj.DNSLabelField }), fldPath.Child("dnsLabelField"))...)

	// field Struct.DNSLabelPtrField
	errs = append(errs,
		func(obj, oldObj *string, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.DNSLabel(opCtx, fldPath, obj, oldObj)...)
			return
		}(obj.DNSLabelPtrField, safe.Field(oldObj, func(oldObj *Struct) *string { return oldObj.DNSLabelPtrField }), fldPath.Child("dnsLabelPtrField"))...)

	// field Struct.DNSLabelTypedefField
	errs = append(errs,
		func(obj, oldObj *UnvalidatedStringType, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, validate.DNSLabel(opCtx, fldPath, obj, oldObj)...)
			return
		}(&obj.DNSLabelTypedefField, safe.Field(oldObj, func(oldObj *Struct) *UnvalidatedStringType { return &oldObj.DNSLabelTypedefField }), fldPath.Child("dnsLabelTypedefField"))...)

	// field Struct.IPTypedefField
	errs = append(errs,
		func(obj, oldObj *IPStringType, fldPath *field.Path) (errs field.ErrorList) {
			errs = append(errs, Validate_IPStringType(opCtx, obj, oldObj, fldPath)...)
			return
		}(&obj.IPTypedefField, safe.Field(oldObj, func(oldObj *Struct) *IPStringType { return &oldObj.IPTypedefField }), fldPath.Child("ipTypedefField"))...)

	return errs
}
