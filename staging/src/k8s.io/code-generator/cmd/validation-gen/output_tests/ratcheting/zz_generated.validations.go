//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by validation-gen. DO NOT EDIT.

package ratcheting

import (
	context "context"

	equality "k8s.io/apimachinery/pkg/api/equality"
	operation "k8s.io/apimachinery/pkg/api/operation"
	safe "k8s.io/apimachinery/pkg/api/safe"
	validate "k8s.io/apimachinery/pkg/api/validate"
	field "k8s.io/apimachinery/pkg/util/validation/field"
	testscheme "k8s.io/code-generator/cmd/validation-gen/testscheme"
)

func init() { localSchemeBuilder.Register(RegisterValidations) }

// RegisterValidations adds validation functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterValidations(scheme *testscheme.Scheme) error {
	scheme.AddValidationFunc((*Element1)(nil), func(ctx context.Context, op operation.Operation, obj, oldObj interface{}) field.ErrorList {
		return Validate_Element1(ctx, op, nil /* fldPath */, obj.(*Element1), safe.Cast[*Element1](oldObj))
	})
	scheme.AddValidationFunc((*Element2)(nil), func(ctx context.Context, op operation.Operation, obj, oldObj interface{}) field.ErrorList {
		return Validate_Element2(ctx, op, nil /* fldPath */, obj.(*Element2), safe.Cast[*Element2](oldObj))
	})
	scheme.AddValidationFunc((*Struct1)(nil), func(ctx context.Context, op operation.Operation, obj, oldObj interface{}) field.ErrorList {
		return Validate_Struct1(ctx, op, nil /* fldPath */, obj.(*Struct1), safe.Cast[*Struct1](oldObj))
	})
	scheme.AddValidationFunc((*Struct2)(nil), func(ctx context.Context, op operation.Operation, obj, oldObj interface{}) field.ErrorList {
		return Validate_Struct2(ctx, op, nil /* fldPath */, obj.(*Struct2), safe.Cast[*Struct2](oldObj))
	})
	return nil
}

var fixedResult = false

func Validate_Element1(ctx context.Context, op operation.Operation, fldPath *field.Path, obj, oldObj *Element1) (errs field.ErrorList) {
	// field Element1.TypeMeta
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *int) (errs field.ErrorList) {
			errs = append(errs, validate.FixedResult(ctx, op, fldPath, obj, oldObj, fixedResult, "field TypeMeta")...)
			// ratcheting is enabled for this field
			if op.Type == operation.Update && len(errs) > 0 && equality.Semantic.DeepEqual(obj, oldObj) {
				return nil // no changes
			}
			return
		}(fldPath.Child("TypeMeta"), &obj.TypeMeta, safe.Field(oldObj, func(oldObj *Element1) *int { return &oldObj.TypeMeta }))...)

	// field Element1.F1
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *Element1) (errs field.ErrorList) {
			if e := validate.OptionalPointer(ctx, op, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, validate.FixedResult(ctx, op, fldPath, obj, oldObj, fixedResult, "field Element1.F1")...)
			// ratcheting is enabled for this field
			if op.Type == operation.Update && len(errs) > 0 && equality.Semantic.DeepEqual(obj, oldObj) {
				return nil // no changes
			}
			errs = append(errs, Validate_Element1(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("f1"), obj.F1, safe.Field(oldObj, func(oldObj *Element1) *Element1 { return oldObj.F1 }))...)

	// field Element1.F2
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *Element1) (errs field.ErrorList) {
			if e := validate.OptionalPointer(ctx, op, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, validate.FixedResult(ctx, op, fldPath, obj, oldObj, fixedResult, "field Element1.F2")...)
			// ratcheting is enabled for this field
			if op.Type == operation.Update && len(errs) > 0 && equality.Semantic.DeepEqual(obj, oldObj) {
				return nil // no changes
			}
			errs = append(errs, Validate_Element1(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("f2"), obj.F2, safe.Field(oldObj, func(oldObj *Element1) *Element1 { return oldObj.F2 }))...)

	// field Element1.F3
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *Element1) (errs field.ErrorList) {
			if e := validate.OptionalPointer(ctx, op, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, validate.FixedResult(ctx, op, fldPath, obj, oldObj, fixedResult, "field Element1.F3")...)
			// ratcheting is enabled for this field
			if op.Type == operation.Update && len(errs) > 0 && equality.Semantic.DeepEqual(obj, oldObj) {
				return nil // no changes
			}
			errs = append(errs, Validate_Element1(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("f3"), obj.F3, safe.Field(oldObj, func(oldObj *Element1) *Element1 { return oldObj.F3 }))...)

	// field Element1.F4
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *Element1) (errs field.ErrorList) {
			if e := validate.OptionalPointer(ctx, op, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, validate.FixedResult(ctx, op, fldPath, obj, oldObj, fixedResult, "field Element1.F4")...)
			// ratcheting is enabled for this field
			if op.Type == operation.Update && len(errs) > 0 && equality.Semantic.DeepEqual(obj, oldObj) {
				return nil // no changes
			}
			errs = append(errs, Validate_Element1(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("f4"), obj.F4, safe.Field(oldObj, func(oldObj *Element1) *Element1 { return oldObj.F4 }))...)

	// field Element1.F5
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *Element1) (errs field.ErrorList) {
			if e := validate.OptionalPointer(ctx, op, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, validate.FixedResult(ctx, op, fldPath, obj, oldObj, fixedResult, "field Element1.F5")...)
			// ratcheting is enabled for this field
			if op.Type == operation.Update && len(errs) > 0 && equality.Semantic.DeepEqual(obj, oldObj) {
				return nil // no changes
			}
			errs = append(errs, Validate_Element1(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("f5"), obj.F5, safe.Field(oldObj, func(oldObj *Element1) *Element1 { return oldObj.F5 }))...)

	return errs
}

func Validate_Element2(ctx context.Context, op operation.Operation, fldPath *field.Path, obj, oldObj *Element2) (errs field.ErrorList) {
	// field Element2.TypeMeta
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *int) (errs field.ErrorList) {
			// ratcheting is enabled for this field
			if op.Type == operation.Update && equality.Semantic.DeepEqual(obj, oldObj) {
				return nil // no changes
			}
			errs = append(errs, validate.FixedResult(ctx, op, fldPath, obj, oldObj, fixedResult, "field TypeMeta")...)
			return
		}(fldPath.Child("TypeMeta"), &obj.TypeMeta, safe.Field(oldObj, func(oldObj *Element2) *int { return &oldObj.TypeMeta }))...)

	// field Element2.F1
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *Element2) (errs field.ErrorList) {
			// ratcheting is enabled for this field
			if op.Type == operation.Update && equality.Semantic.DeepEqual(obj, oldObj) {
				return nil // no changes
			}
			if e := validate.OptionalPointer(ctx, op, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, validate.FixedResult(ctx, op, fldPath, obj, oldObj, fixedResult, "field Element2.F1")...)
			errs = append(errs, Validate_Element2(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("f1"), obj.F1, safe.Field(oldObj, func(oldObj *Element2) *Element2 { return oldObj.F1 }))...)

	// field Element2.F2
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *Element2) (errs field.ErrorList) {
			// ratcheting is enabled for this field
			if op.Type == operation.Update && equality.Semantic.DeepEqual(obj, oldObj) {
				return nil // no changes
			}
			if e := validate.OptionalPointer(ctx, op, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, validate.FixedResult(ctx, op, fldPath, obj, oldObj, fixedResult, "field Element2.F2")...)
			errs = append(errs, Validate_Element2(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("f2"), obj.F2, safe.Field(oldObj, func(oldObj *Element2) *Element2 { return oldObj.F2 }))...)

	// field Element2.F3
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *Element2) (errs field.ErrorList) {
			// ratcheting is enabled for this field
			if op.Type == operation.Update && equality.Semantic.DeepEqual(obj, oldObj) {
				return nil // no changes
			}
			if e := validate.OptionalPointer(ctx, op, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, validate.FixedResult(ctx, op, fldPath, obj, oldObj, fixedResult, "field Element2.F3")...)
			errs = append(errs, Validate_Element2(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("f3"), obj.F3, safe.Field(oldObj, func(oldObj *Element2) *Element2 { return oldObj.F3 }))...)

	// field Element2.F4
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *Element2) (errs field.ErrorList) {
			// ratcheting is enabled for this field
			if op.Type == operation.Update && equality.Semantic.DeepEqual(obj, oldObj) {
				return nil // no changes
			}
			if e := validate.OptionalPointer(ctx, op, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, validate.FixedResult(ctx, op, fldPath, obj, oldObj, fixedResult, "field Element2.F4")...)
			errs = append(errs, Validate_Element2(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("f4"), obj.F4, safe.Field(oldObj, func(oldObj *Element2) *Element2 { return oldObj.F4 }))...)

	// field Element2.F5
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *Element2) (errs field.ErrorList) {
			// ratcheting is enabled for this field
			if op.Type == operation.Update && equality.Semantic.DeepEqual(obj, oldObj) {
				return nil // no changes
			}
			if e := validate.OptionalPointer(ctx, op, fldPath, obj, oldObj); len(e) != 0 {
				return // do not proceed
			}
			errs = append(errs, validate.FixedResult(ctx, op, fldPath, obj, oldObj, fixedResult, "field Element2.F5")...)
			errs = append(errs, Validate_Element2(ctx, op, fldPath, obj, oldObj)...)
			return
		}(fldPath.Child("f5"), obj.F5, safe.Field(oldObj, func(oldObj *Element2) *Element2 { return oldObj.F5 }))...)

	return errs
}

func Validate_OtherStruct1(ctx context.Context, op operation.Operation, fldPath *field.Path, obj, oldObj *OtherStruct1) (errs field.ErrorList) {
	// type OtherStruct1
	errs = append(errs, validate.FixedResult(ctx, op, fldPath, obj, oldObj, false, "type OtherStruct")...)

	// field OtherStruct1.Key1Field has no validation
	// field OtherStruct1.DataField has no validation
	return errs
}

func Validate_Struct1(ctx context.Context, op operation.Operation, fldPath *field.Path, obj, oldObj *Struct1) (errs field.ErrorList) {
	// type Struct1
	errs = append(errs, validate.FixedResult(ctx, op, fldPath, obj, oldObj, false, "type Struct1")...)

	// field Struct1.TypeMeta has no validation

	// field Struct1.ListField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj []OtherStruct1) (errs field.ErrorList) {
			errs = append(errs, validate.EachSliceVal(ctx, op, fldPath, obj, oldObj, func(a OtherStruct1, b OtherStruct1) bool { return a.Key1Field == b.Key1Field }, validate.Immutable)...)
			errs = append(errs, validate.EachSliceVal(ctx, op, fldPath, obj, oldObj, func(a OtherStruct1, b OtherStruct1) bool { return a.Key1Field == b.Key1Field }, Validate_OtherStruct1)...)
			// ratcheting is enabled for this field
			if op.Type == operation.Update && len(errs) > 0 && equality.Semantic.DeepEqual(obj, oldObj) {
				return nil // no changes
			}
			return
		}(fldPath.Child("listField"), obj.ListField, safe.Field(oldObj, func(oldObj *Struct1) []OtherStruct1 { return oldObj.ListField }))...)

	// field Struct1.MinField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *int) (errs field.ErrorList) {
			errs = append(errs, validate.Minimum(ctx, op, fldPath, obj, oldObj, 1)...)
			// ratcheting is enabled for this field
			if op.Type == operation.Update && len(errs) > 0 && equality.Semantic.DeepEqual(obj, oldObj) {
				return nil // no changes
			}
			return
		}(fldPath.Child("minField"), &obj.MinField, safe.Field(oldObj, func(oldObj *Struct1) *int { return &oldObj.MinField }))...)

	return errs
}

func Validate_Struct2(ctx context.Context, op operation.Operation, fldPath *field.Path, obj, oldObj *Struct2) (errs field.ErrorList) {
	// type Struct2
	errs = append(errs, validate.FixedResult(ctx, op, fldPath, obj, oldObj, false, "type Struct2")...)

	// field Struct2.TypeMeta has no validation

	// field Struct2.ListField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj []OtherStruct1) (errs field.ErrorList) {
			// ratcheting is enabled for this field
			if op.Type == operation.Update && equality.Semantic.DeepEqual(obj, oldObj) {
				return nil // no changes
			}
			errs = append(errs, validate.EachSliceVal(ctx, op, fldPath, obj, oldObj, func(a OtherStruct1, b OtherStruct1) bool { return a.Key1Field == b.Key1Field }, validate.Immutable)...)
			errs = append(errs, validate.EachSliceVal(ctx, op, fldPath, obj, oldObj, func(a OtherStruct1, b OtherStruct1) bool { return a.Key1Field == b.Key1Field }, Validate_OtherStruct1)...)
			return
		}(fldPath.Child("listField"), obj.ListField, safe.Field(oldObj, func(oldObj *Struct2) []OtherStruct1 { return oldObj.ListField }))...)

	// field Struct2.MinField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *int) (errs field.ErrorList) {
			// ratcheting is enabled for this field
			if op.Type == operation.Update && equality.Semantic.DeepEqual(obj, oldObj) {
				return nil // no changes
			}
			errs = append(errs, validate.Minimum(ctx, op, fldPath, obj, oldObj, 1)...)
			return
		}(fldPath.Child("minField"), &obj.MinField, safe.Field(oldObj, func(oldObj *Struct2) *int { return &oldObj.MinField }))...)

	return errs
}
