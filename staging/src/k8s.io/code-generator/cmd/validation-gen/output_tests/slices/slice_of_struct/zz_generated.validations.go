//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by validation-gen. DO NOT EDIT.

package sliceofstruct

import (
	fmt "fmt"

	operation "k8s.io/apimachinery/pkg/api/operation"
	safe "k8s.io/apimachinery/pkg/api/safe"
	validate "k8s.io/apimachinery/pkg/api/validate"
	field "k8s.io/apimachinery/pkg/util/validation/field"
	testscheme "k8s.io/code-generator/cmd/validation-gen/testscheme"
)

func init() { localSchemeBuilder.Register(RegisterValidations) }

// RegisterValidations adds validation functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterValidations(scheme *testscheme.Scheme) error {
	scheme.AddValidationFunc((*Struct)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Struct(opCtx, nil /* fldPath */, obj.(*Struct), safe.Cast[*Struct](oldObj))
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	return nil
}

func Validate_OtherStruct(opCtx operation.Context, fldPath *field.Path, obj, oldObj *OtherStruct) (errs field.ErrorList) {
	// type OtherStruct
	errs = append(errs, validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "type OtherStruct")...)

	return errs
}

func Validate_OtherTypedefStruct(opCtx operation.Context, fldPath *field.Path, obj, oldObj *OtherTypedefStruct) (errs field.ErrorList) {
	// type OtherTypedefStruct
	errs = append(errs, validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "type OtherTypedefStruct")...)

	return errs
}

func Validate_Struct(opCtx operation.Context, fldPath *field.Path, obj, oldObj *Struct) (errs field.ErrorList) {
	// type Struct
	errs = append(errs, validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "type Struct")...)

	// field Struct.TypeMeta has no validation

	// field Struct.ListField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj []OtherStruct) (errs field.ErrorList) {
			errs = append(errs, validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "field Struct.ListField")...)
			for i, val := range obj {
				errs = append(errs,
					func(fldPath *field.Path, obj, oldObj *OtherStruct) (errs field.ErrorList) {
						errs = append(errs, validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "field Struct.ListField[*]")...)
						errs = append(errs, Validate_OtherStruct(opCtx, fldPath, obj, oldObj)...)
						return
					}(fldPath.Index(i), &val, nil)...)
			}
			return
		}(fldPath.Child("listField"), obj.ListField, safe.Field(oldObj, func(oldObj *Struct) []OtherStruct { return oldObj.ListField }))...)

	// field Struct.ListPtrField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj []*OtherStruct) (errs field.ErrorList) {
			errs = append(errs, validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "field Struct.ListPtrField")...)
			for i, val := range obj {
				errs = append(errs,
					func(fldPath *field.Path, obj, oldObj *OtherStruct) (errs field.ErrorList) {
						errs = append(errs, validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "field Struct.ListPtrField[*]")...)
						errs = append(errs, Validate_OtherStruct(opCtx, fldPath, obj, oldObj)...)
						return
					}(fldPath.Index(i), val, nil)...)
			}
			return
		}(fldPath.Child("listPtrField"), obj.ListPtrField, safe.Field(oldObj, func(oldObj *Struct) []*OtherStruct { return oldObj.ListPtrField }))...)

	// field Struct.ListTypedefField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj []OtherTypedefStruct) (errs field.ErrorList) {
			errs = append(errs, validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "field Struct.ListTypedefField")...)
			for i, val := range obj {
				errs = append(errs,
					func(fldPath *field.Path, obj, oldObj *OtherTypedefStruct) (errs field.ErrorList) {
						errs = append(errs, validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "field Struct.ListTypedefField[*]")...)
						errs = append(errs, Validate_OtherTypedefStruct(opCtx, fldPath, obj, oldObj)...)
						return
					}(fldPath.Index(i), &val, nil)...)
			}
			return
		}(fldPath.Child("listTypedefField"), obj.ListTypedefField, safe.Field(oldObj, func(oldObj *Struct) []OtherTypedefStruct { return oldObj.ListTypedefField }))...)

	// field Struct.ListTypedefPtrField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj []*OtherTypedefStruct) (errs field.ErrorList) {
			errs = append(errs, validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "field Struct.ListTypedefPtrField")...)
			for i, val := range obj {
				errs = append(errs,
					func(fldPath *field.Path, obj, oldObj *OtherTypedefStruct) (errs field.ErrorList) {
						errs = append(errs, validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "field Struct.ListTypedefPtrField[*]")...)
						errs = append(errs, Validate_OtherTypedefStruct(opCtx, fldPath, obj, oldObj)...)
						return
					}(fldPath.Index(i), val, nil)...)
			}
			return
		}(fldPath.Child("listTypedefPtrField"), obj.ListTypedefPtrField, safe.Field(oldObj, func(oldObj *Struct) []*OtherTypedefStruct { return oldObj.ListTypedefPtrField }))...)

	// field Struct.UnvalidatedListField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj []OtherStruct) (errs field.ErrorList) {
			for i, val := range obj {
				errs = append(errs,
					func(fldPath *field.Path, obj, oldObj *OtherStruct) (errs field.ErrorList) {
						errs = append(errs, Validate_OtherStruct(opCtx, fldPath, obj, oldObj)...)
						return
					}(fldPath.Index(i), &val, nil)...)
			}
			return
		}(fldPath.Child("UnvalidatedListField"), obj.UnvalidatedListField, safe.Field(oldObj, func(oldObj *Struct) []OtherStruct { return oldObj.UnvalidatedListField }))...)

	return errs
}
