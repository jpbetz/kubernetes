//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by validation-gen. DO NOT EDIT.

package each_tag

import (
	fmt "fmt"

	operation "k8s.io/apimachinery/pkg/api/operation"
	safe "k8s.io/apimachinery/pkg/api/safe"
	validate "k8s.io/apimachinery/pkg/api/validate"
	field "k8s.io/apimachinery/pkg/util/validation/field"
	testscheme "k8s.io/code-generator/cmd/validation-gen/testscheme"
)

func init() { localSchemeBuilder.Register(RegisterValidations) }

// RegisterValidations adds validation functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterValidations(scheme *testscheme.Scheme) error {
	scheme.AddValidationFunc((*T1)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_T1(opCtx, nil /* fldPath */, obj.(*T1), safe.Cast[*T1](oldObj))
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	scheme.AddValidationFunc((*T4)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_T4(opCtx, nil /* fldPath */, obj.(*T4), safe.Cast[*T4](oldObj))
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	return nil
}

func Validate_T1(opCtx operation.Context, fldPath *field.Path, obj, oldObj *T1) (errs field.ErrorList) {
	// field T1.TypeMeta has no validation

	// field T1.LS
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj []string) (errs field.ErrorList) {
			errs = append(errs, validate.EachSliceVal(opCtx, fldPath, obj, oldObj, nil, func(opCtx operation.Context, fldPath *field.Path, obj, oldObj *string) field.ErrorList {
				return validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "T1.LS[*] #1")
			})...)
			errs = append(errs, validate.EachSliceVal(opCtx, fldPath, obj, oldObj, nil, func(opCtx operation.Context, fldPath *field.Path, obj, oldObj *string) field.ErrorList {
				return validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "T1.LS[*] #2")
			})...)
			return
		}(fldPath.Child("ls"), obj.LS, safe.Field(oldObj, func(oldObj *T1) []string { return oldObj.LS }))...)

	// field T1.LT2
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj []T2) (errs field.ErrorList) {
			errs = append(errs, validate.EachSliceVal(opCtx, fldPath, obj, oldObj, nil, func(opCtx operation.Context, fldPath *field.Path, obj, oldObj *T2) field.ErrorList {
				return validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "T1.LT2[*] #1")
			})...)
			errs = append(errs, validate.EachSliceVal(opCtx, fldPath, obj, oldObj, nil, func(opCtx operation.Context, fldPath *field.Path, obj, oldObj *T2) field.ErrorList {
				return validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "T1.LT2[*] #2")
			})...)
			return
		}(fldPath.Child("lt2"), obj.LT2, safe.Field(oldObj, func(oldObj *T1) []T2 { return oldObj.LT2 }))...)

	// field T1.LPT2
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj []*T2) (errs field.ErrorList) {
			errs = append(errs, validate.EachSliceValNilable(opCtx, fldPath, obj, oldObj, nil, func(opCtx operation.Context, fldPath *field.Path, obj, oldObj *T2) field.ErrorList {
				return validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "T1.LPT2[*] #1")
			})...)
			errs = append(errs, validate.EachSliceValNilable(opCtx, fldPath, obj, oldObj, nil, func(opCtx operation.Context, fldPath *field.Path, obj, oldObj *T2) field.ErrorList {
				return validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "T1.LPT2[*] #2")
			})...)
			return
		}(fldPath.Child("lpt2"), obj.LPT2, safe.Field(oldObj, func(oldObj *T1) []*T2 { return oldObj.LPT2 }))...)

	// field T1.LMT2
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj []T2) (errs field.ErrorList) {
			errs = append(errs, validate.EachSliceVal(opCtx, fldPath, obj, oldObj, func(a T2, b T2) bool { return a.Foo == b.Foo && a.Bar == b.Bar }, func(opCtx operation.Context, fldPath *field.Path, obj, oldObj *T2) field.ErrorList {
				return validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "T1.LMT2[*] #1")
			})...)
			errs = append(errs, validate.EachSliceVal(opCtx, fldPath, obj, oldObj, func(a T2, b T2) bool { return a.Foo == b.Foo && a.Bar == b.Bar }, func(opCtx operation.Context, fldPath *field.Path, obj, oldObj *T2) field.ErrorList {
				return validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "T1.LMT2[*] #2")
			})...)
			return
		}(fldPath.Child("lmt2"), obj.LMT2, safe.Field(oldObj, func(oldObj *T1) []T2 { return oldObj.LMT2 }))...)

	// field T1.LMPT2
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj []*T2) (errs field.ErrorList) {
			errs = append(errs, validate.EachSliceValNilable(opCtx, fldPath, obj, oldObj, func(a *T2, b *T2) bool { return a.Foo == b.Foo && a.Bar == b.Bar }, func(opCtx operation.Context, fldPath *field.Path, obj, oldObj *T2) field.ErrorList {
				return validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "T1.LMPT2[*] #1")
			})...)
			errs = append(errs, validate.EachSliceValNilable(opCtx, fldPath, obj, oldObj, func(a *T2, b *T2) bool { return a.Foo == b.Foo && a.Bar == b.Bar }, func(opCtx operation.Context, fldPath *field.Path, obj, oldObj *T2) field.ErrorList {
				return validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "T1.LMPT2[*] #2")
			})...)
			return
		}(fldPath.Child("lmpt2"), obj.LMPT2, safe.Field(oldObj, func(oldObj *T1) []*T2 { return oldObj.LMPT2 }))...)

	// field T1.Sub
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *T3) (errs field.ErrorList) {
			// field T3.LS
			errs = append(errs,
				func(fldPath *field.Path, obj, oldObj []string) (errs field.ErrorList) {
					errs = append(errs, validate.EachSliceVal(opCtx, fldPath, obj, oldObj, nil, func(opCtx operation.Context, fldPath *field.Path, obj, oldObj *string) field.ErrorList {
						return validate.IPSloppy(opCtx, fldPath, obj, oldObj)
					})...)
					errs = append(errs, validate.EachSliceVal(opCtx, fldPath, obj, oldObj, nil, func(opCtx operation.Context, fldPath *field.Path, obj, oldObj *string) field.ErrorList {
						return validate.DNSLabel(opCtx, fldPath, obj, oldObj)
					})...)
					return
				}(fldPath.Child("ls"), obj.LS, safe.Field(oldObj, func(oldObj *T3) []string { return oldObj.LS }))...)

			return
		}(fldPath.Child("sub"), &obj.Sub, safe.Field(oldObj, func(oldObj *T1) *T3 { return &oldObj.Sub }))...)

	// field T1.LLMT2
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj [][]T2) (errs field.ErrorList) {
			errs = append(errs, validate.EachSliceValNilable(opCtx, fldPath, obj, oldObj, nil, func(opCtx operation.Context, fldPath *field.Path, obj, oldObj []T2) field.ErrorList {
				return validate.EachSliceVal(opCtx, fldPath, obj, oldObj, func(a T2, b T2) bool { return a.Foo == b.Foo && a.Bar == b.Bar }, func(opCtx operation.Context, fldPath *field.Path, obj, oldObj *T2) field.ErrorList {
					return validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "T1.LLMT2[*] #1")
				})
			})...)
			errs = append(errs, validate.EachSliceValNilable(opCtx, fldPath, obj, oldObj, nil, func(opCtx operation.Context, fldPath *field.Path, obj, oldObj []T2) field.ErrorList {
				return validate.EachSliceVal(opCtx, fldPath, obj, oldObj, func(a T2, b T2) bool { return a.Foo == b.Foo && a.Bar == b.Bar }, func(opCtx operation.Context, fldPath *field.Path, obj, oldObj *T2) field.ErrorList {
					return validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "T1.LLMT2[*] #2")
				})
			})...)
			return
		}(fldPath.Child("llmt2"), obj.LLMT2, safe.Field(oldObj, func(oldObj *T1) [][]T2 { return oldObj.LLMT2 }))...)

	return errs
}

func Validate_T4(opCtx operation.Context, fldPath *field.Path, obj, oldObj *T4) (errs field.ErrorList) {
	// field T4.TypeMeta has no validation

	// field T4.MSS
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj map[string]string) (errs field.ErrorList) {
			errs = append(errs, validate.EachMapVal(opCtx, fldPath, obj, oldObj, func(opCtx operation.Context, fldPath *field.Path, obj, oldObj *string) field.ErrorList {
				return validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "T4.MSS[*]")
			})...)
			return
		}(fldPath.Child("mss"), obj.MSS, safe.Field(oldObj, func(oldObj *T4) map[string]string { return oldObj.MSS }))...)

	// field T4.MSPS
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj map[string]*string) (errs field.ErrorList) {
			errs = append(errs, validate.EachMapValNilable(opCtx, fldPath, obj, oldObj, func(opCtx operation.Context, fldPath *field.Path, obj, oldObj *string) field.ErrorList {
				return validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "T4.MSPS[*]")
			})...)
			return
		}(fldPath.Child("msps"), obj.MSPS, safe.Field(oldObj, func(oldObj *T4) map[string]*string { return oldObj.MSPS }))...)

	return errs
}
